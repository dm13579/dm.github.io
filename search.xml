<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Nacos注册中心基本概念和使用</title>
      <link href="/2021/09/20/nacos-zhu-ce-zhong-xin-ji-ben-gai-nian-he-shi-yong/"/>
      <url>/2021/09/20/nacos-zhu-ce-zhong-xin-ji-ben-gai-nian-he-shi-yong/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>Nacos 致力于帮助您发现、配置和管理微服务。Nacos 提供了一组简单易用的特性集，帮助您快速实现动态服务发现、服务配置、服务元数据及流量管理。</p><p>Nacos 帮助您更敏捷和容易地构建、交付和管理微服务平台。 Nacos 是构建以“服务”为中心的现代应用架构 (例如微服务范式、云原生范式) 的服务基础设施。</p><p><a href="https://nacos.io/zh-cn/docs/what-is-nacos.html">官方文档</a></p><p><a href="https://github.com/alibaba/nacos">源码地址</a></p><h3 id="文中所用地址"><a href="#文中所用地址" class="headerlink" title="文中所用地址"></a>文中所用地址</h3><p><a href="https://github.com/alibaba/spring-cloud-alibaba/wiki/%E7%89%88%E6%9C%AC%E8%AF%B4%E6%98%8E">版本说明</a></p><p><a href="https://github.com/alibaba/spring-cloud-alibaba/wiki/Nacos-discovery">配置相关</a></p><h2 id="Nacos-主要特性"><a href="#Nacos-主要特性" class="headerlink" title="Nacos 主要特性"></a>Nacos 主要特性</h2><p>Nacos特性主要包含</p><ul><li><p>服务注册</p><p>Nacos客户端会通过Rest请求将服务信息（包含但不限于ip,端口）发送到Nacos服务端存储到一个内存Map中</p></li><li><p>服务发现</p><p>服务消费者在调用服务提供者时候会发送一个Rest请求给Nacos服务端来获取服务提供者信息并将服务提供者缓存在Nacos客户端本地</p></li><li><p>服务心跳</p><p>服务注册之后，Nacos客户端会每隔5s的发送心跳到Nacos服务端，告诉Nacos服务端还存活着</p></li><li><p>服务健康检查</p><p>Nacos服务端会开启一个定时任务来检查各个服务的健康状态。发现又服务超过15s没有心跳，会将健康状态置为false，如果30s还没有心跳就直接剔除实例</p></li></ul><h2 id="注册中心基本架构"><a href="#注册中心基本架构" class="headerlink" title="注册中心基本架构"></a>注册中心基本架构</h2><p><img src="https://blog-dm.oss-cn-shanghai.aliyuncs.com/articleimage/20211017105129.png"></p><p>注册中心基本都是利用这种架构实现的，但每种都有一些去呗，比如Nacos并没有用数据库去存储注册表结构，Nacos是利用一个双Map内存数据结构存储的。</p><h2 id="Nacos注册表结构"><a href="#Nacos注册表结构" class="headerlink" title="Nacos注册表结构"></a>Nacos注册表结构</h2><p>通过源码可分析出它的注册表结构大致是**<code>Map&lt;namespace, Map&lt;group::serviceName, Service&gt;&gt;</code>**</p><p>Service里面还包含一个集群Map</p><p><img src="https://blog-dm.oss-cn-shanghai.aliyuncs.com/articleimage/20211017111426.png"></p><p>举例说明</p><p><img src="https://blog-dm.oss-cn-shanghai.aliyuncs.com/articleimage/20211017111453.png"></p><h2 id="Nacos资源隔离"><a href="#Nacos资源隔离" class="headerlink" title="Nacos资源隔离"></a>Nacos资源隔离</h2><ul><li>namespace之间会进行资源隔离</li><li>相同的namespace下的不同group之间相互隔离</li><li>相同的namespace下的相同group下的不同服务可以调用</li><li>相同的namespace下的相同group下的相同服务可以跨集群调用</li></ul><h2 id="spring-cloud-整合Nacos"><a href="#spring-cloud-整合Nacos" class="headerlink" title="spring cloud 整合Nacos"></a>spring cloud 整合Nacos</h2><p>Nacos 服务端首先必须搭建好，在我的另一篇博客中会有搭建教程</p><p>需要关注版本说明，springboot、springcloud、springcloud alibba三者版本最好与官方提供一致</p><p><a href="https://github.com/alibaba/spring-cloud-alibaba/wiki/%E7%89%88%E6%9C%AC%E8%AF%B4%E6%98%8E">版本说明</a></p><h3 id="引入依赖"><a href="#引入依赖" class="headerlink" title="引入依赖"></a>引入依赖</h3><h4 id="父Pom"><a href="#父Pom" class="headerlink" title="父Pom"></a>父Pom</h4><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>properties</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>spring-boot.version</span><span class="token punctuation">></span></span>2.3.2.RELEASE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>spring-boot.version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>spring-cloud.version</span><span class="token punctuation">></span></span>Hoxton.SR8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>spring-cloud.version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>spring-cloud-alibaba.version</span><span class="token punctuation">></span></span>2.2.4.RELEASE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>spring-cloud-alibaba.version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>properties</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencyManagement</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-cloud-dependencies<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>${spring-cloud.version}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>type</span><span class="token punctuation">></span></span>pom<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>type</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">></span></span>import<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.alibaba.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-cloud-alibaba-dependencies<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>${spring-cloud-alibaba.version}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>type</span><span class="token punctuation">></span></span>pom<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>type</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">></span></span>import<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencyManagement</span><span class="token punctuation">></span></span></code></pre><h4 id="当前项目pom"><a href="#当前项目pom" class="headerlink" title="当前项目pom"></a>当前项目pom</h4><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span> <span class="token entity" title="&nbsp;">&amp;nbsp;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.alibaba.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span> <span class="token entity" title="&nbsp;">&amp;nbsp;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring‐cloud‐starter‐alibaba‐nacos‐discovery<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre><h3 id="application-properties"><a href="#application-properties" class="headerlink" title="application.properties"></a>application.properties</h3><p><a href="https://github.com/alibaba/spring-cloud-alibaba/wiki/Nacos-discovery">配置相关</a></p><pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">spring</span><span class="token punctuation">:</span>  <span class="token key atrule">application</span><span class="token punctuation">:</span>    <span class="token key atrule">name</span><span class="token punctuation">:</span> user<span class="token punctuation">-</span>service  <span class="token key atrule">cloud</span><span class="token punctuation">:</span>    <span class="token key atrule">nacos</span><span class="token punctuation">:</span>      <span class="token key atrule">discovery</span><span class="token punctuation">:</span>        <span class="token key atrule">server-addr</span><span class="token punctuation">:</span> localhost<span class="token punctuation">:</span><span class="token number">8848</span></code></pre><h2 id="启动测试"><a href="#启动测试" class="headerlink" title="启动测试"></a>启动测试</h2><pre class=" language-java"><code class="language-java">String<span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span>url<span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token operator">=</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token string">"http://service‐order/order/"</span><span class="token operator">+</span>id<span class="token punctuation">;</span>List<span class="token operator">&lt;</span>Order<span class="token operator">></span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span>orderList<span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token operator">=</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span>restTemplate<span class="token punctuation">.</span><span class="token function">getForObject</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span>List<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="配置RestTemplate"><a href="#配置RestTemplate" class="headerlink" title="配置RestTemplate"></a>配置RestTemplate</h3><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Bean</span><span class="token annotation punctuation">@LoadBalanced</span>    <span class="token keyword">public</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span>RestTemplate<span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token function">restTemplate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token punctuation">{</span>    <span class="token keyword">return</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token keyword">new</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token function">RestTemplate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p><img src="https://blog-dm.oss-cn-shanghai.aliyuncs.com/articleimage/20211017114107.png"></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Nacos </tag>
            
            <tag> 微服务 </tag>
            
            <tag> 分布式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ELK单机集群搭建,增量索引方案</title>
      <link href="/2021/09/11/elasticsearch-dan-ji-ji-qun-da-jian/"/>
      <url>/2021/09/11/elasticsearch-dan-ji-ji-qun-da-jian/</url>
      
        <content type="html"><![CDATA[<h2 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h2><p>java版本：无需准备（es7.x内置JDK12）</p><p>操作系统：CentOS7</p><p>安装包：<a href="https://www.elastic.co/cn/downloads/past-releases#elasticsearch">https://www.elastic.co/cn/downloads/past-releases#elasticsearch</a></p><p>我这里选择的是7.10.1版本的ElasticSearch</p><h2 id="ElasticSearch单机搭建"><a href="#ElasticSearch单机搭建" class="headerlink" title="ElasticSearch单机搭建"></a>ElasticSearch单机搭建</h2><h3 id="ElasticSearch下载"><a href="#ElasticSearch下载" class="headerlink" title="ElasticSearch下载"></a>ElasticSearch下载</h3><ul><li>官网地址：<a href="https://www.elastic.co/cn/downloads/past-releases#elasticsearch">https://www.elastic.co/cn/downloads/past-releases#elasticsearch</a></li></ul><pre class=" language-shell"><code class="language-shell">## 下载wget https://artifacts.elastic.co/downloads/elasticsearch/elasticsearch-7.10.2-linux-x86_64.tar.gz## 解压tar -zxvf elasticsearch-7.10.2-linux-x86_64.tar.gz -C /## 软链接ln -s /elasticsearch-7.10.2/ es/</code></pre><h3 id="ElasticSearch建立用户组用户"><a href="#ElasticSearch建立用户组用户" class="headerlink" title="ElasticSearch建立用户组用户"></a>ElasticSearch建立用户组用户</h3><p>ElasticSearch 无法使用root权限安装所以需要创建用户组用户账号</p><pre class=" language-shell"><code class="language-shell">## 创建es用户组groupadd es## 创建用户&nbsp;esdm&nbsp;并设置密码useradd esdmpasswd esdm## 用户esdm添加到es用户组usermod -G es esdm## 赋权chown -R esdm /eschown -R esdm /elasticsearch-7.10.2chown -R esdm /es</code></pre><h3 id="修改配置文件"><a href="#修改配置文件" class="headerlink" title="修改配置文件"></a>修改配置文件</h3><pre class=" language-shell"><code class="language-shell">mkdir /data/esvim /es/config/elasticsearch.yml</code></pre><p>elasticsearch.yml</p><pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">cluster.name</span><span class="token punctuation">:</span> my<span class="token punctuation">-</span>application<span class="token key atrule">node.name</span><span class="token punctuation">:</span> node<span class="token punctuation">-</span><span class="token number">1</span><span class="token key atrule">path.data</span><span class="token punctuation">:</span> /data/es<span class="token key atrule">path.logs</span><span class="token punctuation">:</span> /es/log<span class="token key atrule">network.host</span><span class="token punctuation">:</span> 0.0.0.0<span class="token key atrule">http.port</span><span class="token punctuation">:</span> <span class="token number">9200</span><span class="token key atrule">discovery.seed_hosts</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">"192.168.186.131"</span><span class="token punctuation">]</span><span class="token key atrule">cluster.initial_master_nodes</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">"node-1"</span><span class="token punctuation">]</span><span class="token key atrule">http.cors.enabled</span><span class="token punctuation">:</span> <span class="token boolean important">true</span><span class="token key atrule">http.cors.allow‐origin</span><span class="token punctuation">:</span> <span class="token string">"*"</span><span class="token key atrule">bootstrap.system_call_filter</span><span class="token punctuation">:</span> <span class="token boolean important">false</span><span class="token key atrule">bootstrap.memory_lock</span><span class="token punctuation">:</span> <span class="token boolean important">false</span><span class="token comment" spellcheck="true">## xpack配置加密</span><span class="token comment" spellcheck="true">#xpack.security.enabled: true</span><span class="token comment" spellcheck="true">#xpack.license.self_generated.type: basic</span><span class="token comment" spellcheck="true">#xpack.security.transport.ssl.enabled: true</span></code></pre><p>机器内存较小可以调整jvm.options内存大小</p><h3 id="修改启动文件使其使用自带JDK11"><a href="#修改启动文件使其使用自带JDK11" class="headerlink" title="修改启动文件使其使用自带JDK11"></a>修改启动文件使其使用自带JDK11</h3><pre class=" language-shell"><code class="language-shell">if [ ! -z "$JAVA_HOME" ]; then  JAVA="$JAVA_HOME/bin/java"  JAVA_TYPE="JAVA_HOME"else  if [ "$(uname -s)" = "Darwin" ]; then    # macOS has a different structure    JAVA="$ES_HOME/jdk.app/Contents/Home/bin/java"  else    JAVA="$ES_HOME/jdk/bin/java"  fi  JAVA_TYPE="bundled jdk"fi</code></pre><p>改为</p><pre class=" language-shell"><code class="language-shell">if [ "$(uname -s)" = "Darwin" ]; then  # macOS has a different structure  JAVA="$ES_HOME/jdk.app/Contents/Home/bin/java"else  JAVA="$ES_HOME/jdk/bin/java"fiJAVA_TYPE="bundled jdk"</code></pre><h3 id="启动es实例"><a href="#启动es实例" class="headerlink" title="启动es实例"></a>启动es实例</h3><pre class=" language-shell"><code class="language-shell">su esdmnohup /es/bin/elasticsearch 2>&1 &</code></pre><h3 id="报错修改"><a href="#报错修改" class="headerlink" title="报错修改"></a>报错修改</h3><p>普通用户打开文件的最大数限制</p><p> max file descriptors [4096] for elasticsearch process is too low, increase to at least [65535]</p><pre class=" language-shell"><code class="language-shell">su rootvim /etc/security/limits.conf</code></pre><pre class=" language-shell"><code class="language-shell">*&nbsp;soft nofile&nbsp;65536*&nbsp;hard nofile&nbsp;131072*&nbsp;soft nproc&nbsp;2048*&nbsp;hard nproc&nbsp;4096</code></pre><p>普通用户启动线程数限制</p><p>max number of threads [1024] for user [es] likely too low, increase to at least [4096]</p><pre class=" language-shell"><code class="language-shell">su rootvim /etc/security/limits.d/20-nproc.conf</code></pre><p>普通用户虚拟内存修改</p><p>max virtual memory areas vm.max_map_count [65530] is too low, increase to at least [262144]</p><pre class=" language-shell"><code class="language-shell">su rootvim /etc/sysctl.confsysctl -p</code></pre><pre class=" language-shell"><code class="language-shell">vm.max_map_count=262144</code></pre><h2 id="ik分词器"><a href="#ik分词器" class="headerlink" title="ik分词器"></a>ik分词器</h2><p>ik下载</p><ul><li><a href="https://github.com/medcl/elasticsearch-analysis-ik/">https://github.com/medcl/elasticsearch-analysis-ik/</a></li></ul><pre class=" language-shell"><code class="language-shell">## 创建目录mkdir -p /es/plugins/ikcd /es/plugins/ik## 下载wget https://github.com/medcl/elasticsearch-analysis-ik/releases/download/v7.10.2/elasticsearch-analysis-ik-7.10.2.zip## 解压unzip elasticsearch-analysis-ik-7.10.2.zip</code></pre><p>重启es,ik配置成功</p><h2 id="Kibana搭建"><a href="#Kibana搭建" class="headerlink" title="Kibana搭建"></a>Kibana搭建</h2><h3 id="Kibana下载"><a href="#Kibana下载" class="headerlink" title="Kibana下载"></a>Kibana下载</h3><ul><li>官网地址：<a href="https://www.elastic.co/cn/downloads/past-releases#kibana">https://www.elastic.co/cn/downloads/past-releases#kibana</a></li></ul><pre class=" language-shell"><code class="language-shell">## 下载wget https://artifacts.elastic.co/downloads/kibana/kibana-7.10.2-linux-x86_64.tar.gz## 解压tar -zxvf kibana-7.10.2-linux-x86_64.tar.gz -C /## 软链接ln -s /kibana-7.10.2-linux-x86_64/ kibana</code></pre><h3 id="修改配置文件-1"><a href="#修改配置文件-1" class="headerlink" title="修改配置文件"></a>修改配置文件</h3><pre class=" language-shell"><code class="language-shell">vim /kibana/config/kibana.yml</code></pre><pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">server.port</span><span class="token punctuation">:</span> <span class="token number">5601</span><span class="token key atrule">server.host</span><span class="token punctuation">:</span> <span class="token string">"192.168.186.131"</span><span class="token key atrule">elasticsearch.hosts</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">"http://localhost:9200"</span><span class="token punctuation">]</span></code></pre><h3 id="赋权"><a href="#赋权" class="headerlink" title="赋权"></a>赋权</h3><pre class=" language-shell"><code class="language-shell">su rootchown -R esdm /kibana-7.10.2-linux-x86_64/</code></pre><h3 id="启动实例"><a href="#启动实例" class="headerlink" title="启动实例"></a>启动实例</h3><pre class=" language-shell"><code class="language-shell">su esdm/kibana/bin/kibana</code></pre><h2 id="Logstash-部署"><a href="#Logstash-部署" class="headerlink" title="Logstash 部署"></a>Logstash 部署</h2><p>我这里使用的是ELKF架构，所以Logstash监听的是filebeat</p><p>请注意Logstash版本与ES版本保持一致</p><p>Logstash7.x版本的没有安装，可能与这里有稍许出入,这里安装的是Losgstash6.x版本</p><h3 id="Logstash下载"><a href="#Logstash下载" class="headerlink" title="Logstash下载"></a>Logstash下载</h3><ul><li>官网地址：<a href="https://www.elastic.co/cn/downloads/past-releases#logstash">https://www.elastic.co/cn/downloads/past-releases#logstash</a></li></ul><pre class=" language-shell"><code class="language-shell">## 下载wget https://artifacts.elastic.co/downloads/logstash/logstash-6.4.3.tar.gz## 解压tar -zxvf logstash-6.4.3.tar.gz -C /</code></pre><h3 id="修改配置文件-2"><a href="#修改配置文件-2" class="headerlink" title="修改配置文件"></a>修改配置文件</h3><pre class=" language-shell"><code class="language-shell">input {    beats {      port => 5044    }  }  filter {    if [fields][index_name] == "mq" and [fields][index_name] == "java" {      grok {        match => [          "message", "%{IPORHOST:http_host} %{IPORHOST:user_ip} - - \[%{HTTPDATE:timestamp}\] \"(?:%{WORD:verb} %{NOTSPACE:request}(?: HTTP/%{NUMBER:httpversion:float})?|%{DATA:rawrequest})\" %{NUMBER:response:int} (?:%{NUMBER:bytes:int}|-) %{QS:referrer} %{QS:useragent} (?:%{NUMBER:request_time:float}|-) (?:%{NUMBER:upstream_time:float}|-)"        ]      }      geoip {        source => "192.168.186.131"      }      date {        match => [ "timestamp" , "dd/MMM/YYYY:HH:mm:ss Z" ]      }      useragent {        target => "ua"        source => "useragent"      }    }  }  output{    if[fields][index_name] == "mq" {      elasticsearch {        hosts => ["http://192.168.186.131:9200"]        index => "mq-%{+YYYY.MM.dd}"      }    }    if[fields][index_name] == "java" {      elasticsearch {        hosts => ["http://192.168.186.131:9200"]        index => "mq-java-zd-%{+YYYY}"      }    }  }</code></pre><h2 id="索引信息修改"><a href="#索引信息修改" class="headerlink" title="索引信息修改"></a>索引信息修改</h2><p>logstash默认使用的是logstash模板访问地址<a href="http://localhost:9200/_template/logstash">http://localhost:9200/_template/logstash</a>  可以看到具体的模板信息</p><p>我们要想修改有2种办法，1是修改默认模板，2是output中指定模板信息</p><ol><li><p>修改默认模板</p><p>在kibana中执行</p><p>就是将上面链接的模板信息copy下来修改</p><ul><li>删掉最外层命名</li><li>修改index_patterns，为你索引匹配路由，由上面的output中index</li><li>修改分片副本数在settings.index下加入number_of_shards和number_of_replicas2个配置</li></ul><pre class=" language-http"><code class="language-http">PUT /_template/logstash{    "order": 0,    "version": 60001,    "index_patterns": ["mq-*"],    "settings": {      "index": {        "number_of_shards": 1,        "number_of_replicas": 0,        "refresh_interval": "5s"      }    },    "mappings": {      "_default_": {        "dynamic_templates": [          {            "message_field": {              "path_match": "message",              "match_mapping_type": "string",              "mapping": {                "type": "text",                "norms": false              }            }          },          {            "string_fields": {              "match": "*",              "match_mapping_type": "string",              "mapping": {                "type": "text",                "norms": false,                "fields": {                  "keyword": {                    "type": "keyword",                    "ignore_above": 256                  }                }              }            }          }        ],        "properties": {          "@timestamp": {            "type": "date"          },          "@version": {            "type": "keyword"          },          "geoip": {            "dynamic": true,            "properties": {              "ip": {                "type": "ip"              },              "location": {                "type": "geo_point"              },              "latitude": {                "type": "half_float"              },              "longitude": {                "type": "half_float"              }            }          }        }      }    },    "aliases": {}}</code></pre></li><li><p>output中指定模板信息</p><p>同样也是编写上面的模板json文件，放入指定目录，然后在output中指定模板文件位置即可</p><pre class=" language-shell"><code class="language-shell">elasticsearch {  hosts => ["http://192.168.186.131:9200"]  index => "mq-%{+YYYY.MM.dd}"  template => "/path/to/mytemplate"  template_name => "myname"}</code></pre></li></ol><h2 id="filebeat-部署"><a href="#filebeat-部署" class="headerlink" title="filebeat 部署"></a>filebeat 部署</h2><h3 id="filebeat-下载"><a href="#filebeat-下载" class="headerlink" title="filebeat 下载"></a>filebeat 下载</h3><ul><li>官网地址：<a href="https://www.elastic.co/cn/downloads/past-releases#filebeat">https://www.elastic.co/cn/downloads/past-releases#filebeat</a></li></ul><pre class=" language-shell"><code class="language-shell">## 下载wget https://artifacts.elastic.co/downloads/beats/filebeat/filebeat-6.4.3-linux-x86_64.tar.gz## 解压 tar -zxvf filebeat-6.4.3-linux-x86_64.tar.gz -C /</code></pre><h3 id="修改配置文件-3"><a href="#修改配置文件-3" class="headerlink" title="修改配置文件"></a>修改配置文件</h3><p>filebeat.yml</p><pre class=" language-shell"><code class="language-shell">filebeat.inputs:- type: log  enabled: true  ## 指定tag方便logstash区别  fields:    index_name: mq  ## 监控文件目录  paths:    - /logs/server.log.*- type: log  enabled: true  fields:    index_name: java  paths:    - /logs/java/web*  ## 多行文本合一 非xxxx-xx-xx为前缀的合并到前一行  multiline.pattern: '^[0-9]{4}-[0-9]{2}-[0-9]{2}'  multiline.negate: true  multiline.match: after## 输出到logstashoutput.logstash:  hosts: ["localhost:5044"]</code></pre><p>然后启动即可</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 安装手册 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ElasticSearch </tag>
            
            <tag> 安装 </tag>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Sentinel持久化改造</title>
      <link href="/2021/09/05/sentinel-ke-hu-duan-chi-jiu-hua-yuan-ma-gai-zao/"/>
      <url>/2021/09/05/sentinel-ke-hu-duan-chi-jiu-hua-yuan-ma-gai-zao/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>使用过Sentinel的都知道，只要服务一重启，在sentinel dashboard上编写的规则就会失效。这种现象在生产上肯定是不允许存在的。那么我们有什么办法规避掉这种情况呢。</p><p>首先我们有2种思路，</p><ul><li>在sentinel dashboard编写的规则，服务直接去拉取并存储在本地随便什么地方，可以是文件可以是数据库等等。这种方式简单，但不能保证一致性（因为我们不是动态监控dashboard上规则的变动），拉取导致服务性能受到影响。这种方式在这里就不过多描述，简称<strong>拉模式</strong></li><li>在dashboard编写的规则推到一个存储的地方（可以是nacos，Zookeeper等），然后客户端编写监听器去监听nacos和zookeeper配置是否变动，这种思路更好的保证了配置的实时性和一致性是一种比较好的解决方案。简称<strong>推模式</strong></li></ul><h2 id="基于nacos进行规则推送"><a href="#基于nacos进行规则推送" class="headerlink" title="基于nacos进行规则推送"></a>基于nacos进行规则推送</h2><p>这种方案我们直接在nacos配置中心进行配置的编写即可，客户端可以动态感知到限流规则的变动。</p><h3 id="引入依赖"><a href="#引入依赖" class="headerlink" title="引入依赖"></a>引入依赖</h3><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.alibaba.csp<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>sentinel-apache-dubbo-adapter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.8.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre><h3 id="nacos配置中心规则"><a href="#nacos配置中心规则" class="headerlink" title="nacos配置中心规则"></a>nacos配置中心规则</h3><pre><code>[    {        "resource": "TestResource",        "controlBehavior": 0,        "count": 10.0,        "grade": 1,        "limitApp": "default",        "strategy": 0    }]</code></pre><h3 id="客户端配置"><a href="#客户端配置" class="headerlink" title="客户端配置"></a>客户端配置</h3><p>data-id：nacos配置中心文件名，</p><p>group-id：nacos配置中心组</p><p>rule-type：com.alibaba.cloud.sentinel.datasource所规定的枚举配置</p><pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">spring</span><span class="token punctuation">:</span>  <span class="token key atrule">application</span><span class="token punctuation">:</span>    <span class="token key atrule">name</span><span class="token punctuation">:</span> sentinel‐demo  <span class="token key atrule">cloud</span><span class="token punctuation">:</span>    <span class="token key atrule">sentinel</span><span class="token punctuation">:</span>      <span class="token key atrule">transport</span><span class="token punctuation">:</span>        <span class="token key atrule">clientIp</span><span class="token punctuation">:</span> 127.0.0.1<span class="token punctuation">:</span><span class="token number">8080</span>      <span class="token key atrule">web-context-unify</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>      <span class="token key atrule">datasource</span><span class="token punctuation">:</span>        <span class="token key atrule">ds0</span><span class="token punctuation">:</span>          <span class="token key atrule">nacos</span><span class="token punctuation">:</span>            <span class="token key atrule">server-addr</span><span class="token punctuation">:</span> 127.0.0.1<span class="token punctuation">:</span><span class="token number">8080</span>            <span class="token key atrule">data-id</span><span class="token punctuation">:</span> $<span class="token punctuation">{</span>spring.application.name<span class="token punctuation">}</span><span class="token punctuation">-</span>sentinel<span class="token punctuation">-</span>flow            <span class="token key atrule">group-id</span><span class="token punctuation">:</span> SENTINEL            <span class="token key atrule">rule-type</span><span class="token punctuation">:</span> flow            <span class="token key atrule">data-type</span><span class="token punctuation">:</span> json        <span class="token key atrule">ds1</span><span class="token punctuation">:</span>          <span class="token key atrule">nacos</span><span class="token punctuation">:</span>            <span class="token key atrule">server-addr</span><span class="token punctuation">:</span> 127.0.0.1<span class="token punctuation">:</span><span class="token number">8080</span>            <span class="token key atrule">data-id</span><span class="token punctuation">:</span> $<span class="token punctuation">{</span>spring.application.name<span class="token punctuation">}</span><span class="token punctuation">-</span>sentinel<span class="token punctuation">-</span>degrade            <span class="token key atrule">group-id</span><span class="token punctuation">:</span> SENTINEL            <span class="token key atrule">rule-type</span><span class="token punctuation">:</span> degrade            <span class="token key atrule">data-type</span><span class="token punctuation">:</span> json</code></pre><p>此时经测试nacos修改配置可以直接生效。但有个问题，这种直接写sentinel json配置，使用起来比较复杂没有直接使用控制台来方便。<strong>那么我们就会想有没有办法让控制台的规则转化为json推送到sentinel上呢？</strong></p><h2 id="控制台推送规则到nacos配置中心"><a href="#控制台推送规则到nacos配置中心" class="headerlink" title="控制台推送规则到nacos配置中心"></a>控制台推送规则到nacos配置中心</h2><p>代码地址：<a href="https://github.com/dm13579/sentinel.git">https://github.com/dm13579/sentinel.git</a></p><p>这里的改动主要涉及2点</p><ol><li>控制台更改了规则要同步到nacos配置中心</li><li>nacos配置中心更改了规则需要同步到控制台并刷新掉控制台缓存</li></ol><p>更改目录结构</p><p><img src="https://blog-dm.oss-cn-shanghai.aliyuncs.com/articleimage/20211012115028.png"></p><p>rule下面编写规则拉取推送</p><p>controller下面调用rule下服务</p><h3 id="规则后缀"><a href="#规则后缀" class="headerlink" title="规则后缀"></a>规则后缀</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">class</span> <span class="token class-name">NacosConfigUtil</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 流控</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> String FLOW_DATA_ID_POSTFIX <span class="token operator">=</span> <span class="token string">"-sentinel-flow"</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 降级</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> String DEGRADE_DATA_ID_POSTFIX <span class="token operator">=</span> <span class="token string">"-sentinel-degrade"</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 系统</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> String SYSTEM_DATA_ID_POSTFIX <span class="token operator">=</span> <span class="token string">"-sentinel-system"</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 授权</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> String AUTHORITY_DATA_ID_POSTFIX <span class="token operator">=</span> <span class="token string">"-sentinel-authority"</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 热点参数</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> String PARAM_FLOW_DATA_ID_POSTFIX <span class="token operator">=</span> <span class="token string">"-sentinel-param"</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> String GATEWAY_API_DATA_ID_POSTFIX <span class="token operator">=</span> <span class="token string">"-sentinel-param"</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> String GATEWAY_FLOW_DATA_ID_POSTFIX <span class="token operator">=</span> <span class="token string">"-sentinel-param"</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token function">NacosConfigUtil</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="规则拉取"><a href="#规则拉取" class="headerlink" title="规则拉取"></a>规则拉取</h3><p>以限流规则为例</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Component</span><span class="token punctuation">(</span><span class="token string">"flowRuleNacosProvider"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">FlowRuleNacosProvider</span> <span class="token keyword">implements</span> <span class="token class-name">DynamicRuleProvider</span><span class="token operator">&lt;</span>List<span class="token operator">&lt;</span>FlowRuleEntity<span class="token operator">>></span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> NacosProperties nacosProperties<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> ConfigService configService<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> List<span class="token operator">&lt;</span>FlowRuleEntity<span class="token operator">></span> <span class="token function">getRules</span><span class="token punctuation">(</span>String appName<span class="token punctuation">,</span> String ip<span class="token punctuation">,</span> Integer port<span class="token punctuation">)</span> <span class="token keyword">throws</span> NacosException <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 从Nacos配置中心拉取配置</span>        String rules <span class="token operator">=</span> configService<span class="token punctuation">.</span><span class="token function">getConfig</span><span class="token punctuation">(</span>appName <span class="token operator">+</span> NacosConfigUtil<span class="token punctuation">.</span>FLOW_DATA_ID_POSTFIX<span class="token punctuation">,</span> nacosProperties<span class="token punctuation">.</span>groupId<span class="token punctuation">,</span> nacosProperties<span class="token punctuation">.</span>timeout<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>StringUtil<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span>rules<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        List<span class="token operator">&lt;</span>FlowRule<span class="token operator">></span> list <span class="token operator">=</span> JSON<span class="token punctuation">.</span><span class="token function">parseArray</span><span class="token punctuation">(</span>rules<span class="token punctuation">,</span> FlowRule<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 转化规则到FlowRuleEntity</span>        <span class="token keyword">return</span> list<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>rule <span class="token operator">-</span><span class="token operator">></span> FlowRuleEntity<span class="token punctuation">.</span><span class="token function">fromFlowRule</span><span class="token punctuation">(</span>appName<span class="token punctuation">,</span> ip<span class="token punctuation">,</span> port<span class="token punctuation">,</span> rule<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span>Collectors<span class="token punctuation">.</span><span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="规则推送"><a href="#规则推送" class="headerlink" title="规则推送"></a>规则推送</h3><p>以限流规则为例</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Component</span><span class="token punctuation">(</span><span class="token string">"flowRuleNacosPublisher"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">FlowRuleNacosPublisher</span> <span class="token keyword">implements</span> <span class="token class-name">DynamicRulePublisher</span><span class="token operator">&lt;</span>List<span class="token operator">&lt;</span>FlowRuleEntity<span class="token operator">>></span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> NacosProperties nacosProperties<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> ConfigService configService<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">publish</span><span class="token punctuation">(</span>String app<span class="token punctuation">,</span> List<span class="token operator">&lt;</span>FlowRuleEntity<span class="token operator">></span> rules<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        AssertUtil<span class="token punctuation">.</span><span class="token function">notEmpty</span><span class="token punctuation">(</span>app<span class="token punctuation">,</span> <span class="token string">"app name cannot be empty"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>rules <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 推送规则到Nacos配置中心</span>        configService<span class="token punctuation">.</span><span class="token function">publishConfig</span><span class="token punctuation">(</span>app <span class="token operator">+</span> NacosConfigUtil<span class="token punctuation">.</span>FLOW_DATA_ID_POSTFIX<span class="token punctuation">,</span> nacosProperties<span class="token punctuation">.</span>groupId<span class="token punctuation">,</span> ConvertUtils<span class="token punctuation">.</span><span class="token function">entityConvertToRule</span><span class="token punctuation">(</span>rules<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="相关工具类"><a href="#相关工具类" class="headerlink" title="相关工具类"></a>相关工具类</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ConvertUtils</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * 转换为规则     * RuleEntity----->Rule     *     * @param entities 实体     * @return {@link String}     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> String <span class="token function">entityConvertToRule</span><span class="token punctuation">(</span>List<span class="token operator">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">RuleEntity</span><span class="token operator">></span> entities<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> JSON<span class="token punctuation">.</span><span class="token function">toJSONString</span><span class="token punctuation">(</span>entities<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>RuleEntity<span class="token operator">:</span><span class="token operator">:</span>toRule<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span>Collectors<span class="token punctuation">.</span><span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="FlowControllerV1"><a href="#FlowControllerV1" class="headerlink" title="FlowControllerV1"></a>FlowControllerV1</h3><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/* * Copyright 1999-2018 Alibaba Group Holding Ltd. * * Licensed under the Apache License, Version 2.0 (the "License"); * you may not use this file except in compliance with the License. * You may obtain a copy of the License at * *      http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an "AS IS" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */</span><span class="token keyword">package</span> com<span class="token punctuation">.</span>alibaba<span class="token punctuation">.</span>csp<span class="token punctuation">.</span>sentinel<span class="token punctuation">.</span>dashboard<span class="token punctuation">.</span>controller<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>alibaba<span class="token punctuation">.</span>csp<span class="token punctuation">.</span>sentinel<span class="token punctuation">.</span>dashboard<span class="token punctuation">.</span>auth<span class="token punctuation">.</span>AuthAction<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>alibaba<span class="token punctuation">.</span>csp<span class="token punctuation">.</span>sentinel<span class="token punctuation">.</span>dashboard<span class="token punctuation">.</span>auth<span class="token punctuation">.</span>AuthService<span class="token punctuation">.</span>PrivilegeType<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>alibaba<span class="token punctuation">.</span>csp<span class="token punctuation">.</span>sentinel<span class="token punctuation">.</span>dashboard<span class="token punctuation">.</span>client<span class="token punctuation">.</span>SentinelApiClient<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>alibaba<span class="token punctuation">.</span>csp<span class="token punctuation">.</span>sentinel<span class="token punctuation">.</span>dashboard<span class="token punctuation">.</span>datasource<span class="token punctuation">.</span>entity<span class="token punctuation">.</span>rule<span class="token punctuation">.</span>FlowRuleEntity<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>alibaba<span class="token punctuation">.</span>csp<span class="token punctuation">.</span>sentinel<span class="token punctuation">.</span>dashboard<span class="token punctuation">.</span>domain<span class="token punctuation">.</span>Result<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>alibaba<span class="token punctuation">.</span>csp<span class="token punctuation">.</span>sentinel<span class="token punctuation">.</span>dashboard<span class="token punctuation">.</span>repository<span class="token punctuation">.</span>rule<span class="token punctuation">.</span>InMemoryRuleRepositoryAdapter<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>alibaba<span class="token punctuation">.</span>csp<span class="token punctuation">.</span>sentinel<span class="token punctuation">.</span>dashboard<span class="token punctuation">.</span>rule<span class="token punctuation">.</span>DynamicRuleProvider<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>alibaba<span class="token punctuation">.</span>csp<span class="token punctuation">.</span>sentinel<span class="token punctuation">.</span>dashboard<span class="token punctuation">.</span>rule<span class="token punctuation">.</span>DynamicRulePublisher<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>alibaba<span class="token punctuation">.</span>csp<span class="token punctuation">.</span>sentinel<span class="token punctuation">.</span>util<span class="token punctuation">.</span>StringUtil<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>slf4j<span class="token punctuation">.</span>Logger<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>slf4j<span class="token punctuation">.</span>LoggerFactory<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Autowired<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Qualifier<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>*<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Date<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>List<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span>ExecutionException<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * Flow rule controller. * * @author leyou * @author Eric Zhao */</span><span class="token annotation punctuation">@RestController</span><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"/v1/flow"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">FlowControllerV1</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> Logger logger <span class="token operator">=</span> LoggerFactory<span class="token punctuation">.</span><span class="token function">getLogger</span><span class="token punctuation">(</span>FlowControllerV1<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> InMemoryRuleRepositoryAdapter<span class="token operator">&lt;</span>FlowRuleEntity<span class="token operator">></span> repository<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> SentinelApiClient sentinelApiClient<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token annotation punctuation">@Qualifier</span><span class="token punctuation">(</span><span class="token string">"flowRuleNacosProvider"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> DynamicRuleProvider<span class="token operator">&lt;</span>List<span class="token operator">&lt;</span>FlowRuleEntity<span class="token operator">>></span> ruleProvider<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token annotation punctuation">@Qualifier</span><span class="token punctuation">(</span><span class="token string">"flowRuleNacosPublisher"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> DynamicRulePublisher<span class="token operator">&lt;</span>List<span class="token operator">&lt;</span>FlowRuleEntity<span class="token operator">>></span> rulePublisher<span class="token punctuation">;</span>    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/rules"</span><span class="token punctuation">)</span>    <span class="token annotation punctuation">@AuthAction</span><span class="token punctuation">(</span>PrivilegeType<span class="token punctuation">.</span>READ_RULE<span class="token punctuation">)</span>    <span class="token keyword">public</span> Result<span class="token operator">&lt;</span>List<span class="token operator">&lt;</span>FlowRuleEntity<span class="token operator">>></span> <span class="token function">apiQueryMachineRules</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestParam</span> String app<span class="token punctuation">,</span>                                                             <span class="token annotation punctuation">@RequestParam</span> String ip<span class="token punctuation">,</span>                                                             <span class="token annotation punctuation">@RequestParam</span> Integer port<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>StringUtil<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span>app<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> Result<span class="token punctuation">.</span><span class="token function">ofFail</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">"app can't be null or empty"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>StringUtil<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span>ip<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> Result<span class="token punctuation">.</span><span class="token function">ofFail</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">"ip can't be null or empty"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>port <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> Result<span class="token punctuation">.</span><span class="token function">ofFail</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">"port can't be null"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">//            List&lt;FlowRuleEntity> rules = sentinelApiClient.fetchFlowRuleOfMachine(app, ip, port);</span>            <span class="token comment" spellcheck="true">//从配置中心获取规则配置</span>            List<span class="token operator">&lt;</span>FlowRuleEntity<span class="token operator">></span> rules <span class="token operator">=</span> ruleProvider<span class="token punctuation">.</span><span class="token function">getRules</span><span class="token punctuation">(</span>app<span class="token punctuation">,</span> ip<span class="token punctuation">,</span> port<span class="token punctuation">)</span><span class="token punctuation">;</span>            rules <span class="token operator">=</span> repository<span class="token punctuation">.</span><span class="token function">saveAll</span><span class="token punctuation">(</span>rules<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> Result<span class="token punctuation">.</span><span class="token function">ofSuccess</span><span class="token punctuation">(</span>rules<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Throwable</span> throwable<span class="token punctuation">)</span> <span class="token punctuation">{</span>            logger<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"Error when querying flow rules"</span><span class="token punctuation">,</span> throwable<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> Result<span class="token punctuation">.</span><span class="token function">ofThrowable</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> throwable<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token operator">&lt;</span>R<span class="token operator">></span> Result<span class="token operator">&lt;</span>R<span class="token operator">></span> <span class="token function">checkEntityInternal</span><span class="token punctuation">(</span>FlowRuleEntity entity<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>StringUtil<span class="token punctuation">.</span><span class="token function">isBlank</span><span class="token punctuation">(</span>entity<span class="token punctuation">.</span><span class="token function">getApp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> Result<span class="token punctuation">.</span><span class="token function">ofFail</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">"app can't be null or empty"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>StringUtil<span class="token punctuation">.</span><span class="token function">isBlank</span><span class="token punctuation">(</span>entity<span class="token punctuation">.</span><span class="token function">getIp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> Result<span class="token punctuation">.</span><span class="token function">ofFail</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">"ip can't be null or empty"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>entity<span class="token punctuation">.</span><span class="token function">getPort</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> Result<span class="token punctuation">.</span><span class="token function">ofFail</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">"port can't be null"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>StringUtil<span class="token punctuation">.</span><span class="token function">isBlank</span><span class="token punctuation">(</span>entity<span class="token punctuation">.</span><span class="token function">getLimitApp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> Result<span class="token punctuation">.</span><span class="token function">ofFail</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">"limitApp can't be null or empty"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>StringUtil<span class="token punctuation">.</span><span class="token function">isBlank</span><span class="token punctuation">(</span>entity<span class="token punctuation">.</span><span class="token function">getResource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> Result<span class="token punctuation">.</span><span class="token function">ofFail</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">"resource can't be null or empty"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>entity<span class="token punctuation">.</span><span class="token function">getGrade</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> Result<span class="token punctuation">.</span><span class="token function">ofFail</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">"grade can't be null"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>entity<span class="token punctuation">.</span><span class="token function">getGrade</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> entity<span class="token punctuation">.</span><span class="token function">getGrade</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> Result<span class="token punctuation">.</span><span class="token function">ofFail</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">"grade must be 0 or 1, but "</span> <span class="token operator">+</span> entity<span class="token punctuation">.</span><span class="token function">getGrade</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" got"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>entity<span class="token punctuation">.</span><span class="token function">getCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> null <span class="token operator">||</span> entity<span class="token punctuation">.</span><span class="token function">getCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> Result<span class="token punctuation">.</span><span class="token function">ofFail</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">"count should be at lease zero"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>entity<span class="token punctuation">.</span><span class="token function">getStrategy</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> Result<span class="token punctuation">.</span><span class="token function">ofFail</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">"strategy can't be null"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>entity<span class="token punctuation">.</span><span class="token function">getStrategy</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> StringUtil<span class="token punctuation">.</span><span class="token function">isBlank</span><span class="token punctuation">(</span>entity<span class="token punctuation">.</span><span class="token function">getRefResource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> Result<span class="token punctuation">.</span><span class="token function">ofFail</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">"refResource can't be null or empty when strategy!=0"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>entity<span class="token punctuation">.</span><span class="token function">getControlBehavior</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> Result<span class="token punctuation">.</span><span class="token function">ofFail</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">"controlBehavior can't be null"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">int</span> controlBehavior <span class="token operator">=</span> entity<span class="token punctuation">.</span><span class="token function">getControlBehavior</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>controlBehavior <span class="token operator">==</span> <span class="token number">1</span> <span class="token operator">&amp;&amp;</span> entity<span class="token punctuation">.</span><span class="token function">getWarmUpPeriodSec</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> Result<span class="token punctuation">.</span><span class="token function">ofFail</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">"warmUpPeriodSec can't be null when controlBehavior==1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>controlBehavior <span class="token operator">==</span> <span class="token number">2</span> <span class="token operator">&amp;&amp;</span> entity<span class="token punctuation">.</span><span class="token function">getMaxQueueingTimeMs</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> Result<span class="token punctuation">.</span><span class="token function">ofFail</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">"maxQueueingTimeMs can't be null when controlBehavior==2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>entity<span class="token punctuation">.</span><span class="token function">isClusterMode</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> entity<span class="token punctuation">.</span><span class="token function">getClusterConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> Result<span class="token punctuation">.</span><span class="token function">ofFail</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">"cluster config should be valid"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> null<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@PostMapping</span><span class="token punctuation">(</span><span class="token string">"/rule"</span><span class="token punctuation">)</span>    <span class="token annotation punctuation">@AuthAction</span><span class="token punctuation">(</span>PrivilegeType<span class="token punctuation">.</span>WRITE_RULE<span class="token punctuation">)</span>    <span class="token keyword">public</span> Result<span class="token operator">&lt;</span>FlowRuleEntity<span class="token operator">></span> <span class="token function">apiAddFlowRule</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestBody</span> FlowRuleEntity entity<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Result<span class="token operator">&lt;</span>FlowRuleEntity<span class="token operator">></span> checkResult <span class="token operator">=</span> <span class="token function">checkEntityInternal</span><span class="token punctuation">(</span>entity<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>checkResult <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> checkResult<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        entity<span class="token punctuation">.</span><span class="token function">setId</span><span class="token punctuation">(</span>null<span class="token punctuation">)</span><span class="token punctuation">;</span>        Date date <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        entity<span class="token punctuation">.</span><span class="token function">setGmtCreate</span><span class="token punctuation">(</span>date<span class="token punctuation">)</span><span class="token punctuation">;</span>        entity<span class="token punctuation">.</span><span class="token function">setGmtModified</span><span class="token punctuation">(</span>date<span class="token punctuation">)</span><span class="token punctuation">;</span>        entity<span class="token punctuation">.</span><span class="token function">setLimitApp</span><span class="token punctuation">(</span>entity<span class="token punctuation">.</span><span class="token function">getLimitApp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        entity<span class="token punctuation">.</span><span class="token function">setResource</span><span class="token punctuation">(</span>entity<span class="token punctuation">.</span><span class="token function">getResource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            entity <span class="token operator">=</span> repository<span class="token punctuation">.</span><span class="token function">save</span><span class="token punctuation">(</span>entity<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//            publishRules(entity.getApp(), entity.getIp(), entity.getPort()).get(5000, TimeUnit.MILLISECONDS);</span>            <span class="token function">publishRules</span><span class="token punctuation">(</span>entity<span class="token punctuation">.</span><span class="token function">getApp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> Result<span class="token punctuation">.</span><span class="token function">ofSuccess</span><span class="token punctuation">(</span>entity<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Throwable</span> t<span class="token punctuation">)</span> <span class="token punctuation">{</span>            Throwable e <span class="token operator">=</span> t <span class="token keyword">instanceof</span> <span class="token class-name">ExecutionException</span> <span class="token operator">?</span> t<span class="token punctuation">.</span><span class="token function">getCause</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">:</span> t<span class="token punctuation">;</span>            logger<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"Failed to add new flow rule, app={}, ip={}"</span><span class="token punctuation">,</span> entity<span class="token punctuation">.</span><span class="token function">getApp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> entity<span class="token punctuation">.</span><span class="token function">getIp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> Result<span class="token punctuation">.</span><span class="token function">ofFail</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> e<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@PutMapping</span><span class="token punctuation">(</span><span class="token string">"/save.json"</span><span class="token punctuation">)</span>    <span class="token annotation punctuation">@AuthAction</span><span class="token punctuation">(</span>PrivilegeType<span class="token punctuation">.</span>WRITE_RULE<span class="token punctuation">)</span>    <span class="token keyword">public</span> Result<span class="token operator">&lt;</span>FlowRuleEntity<span class="token operator">></span> <span class="token function">apiUpdateFlowRule</span><span class="token punctuation">(</span>Long id<span class="token punctuation">,</span> String app<span class="token punctuation">,</span>                                                    String limitApp<span class="token punctuation">,</span> String resource<span class="token punctuation">,</span> Integer grade<span class="token punctuation">,</span>                                                    Double count<span class="token punctuation">,</span> Integer strategy<span class="token punctuation">,</span> String refResource<span class="token punctuation">,</span>                                                    Integer controlBehavior<span class="token punctuation">,</span> Integer warmUpPeriodSec<span class="token punctuation">,</span>                                                    Integer maxQueueingTimeMs<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>id <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> Result<span class="token punctuation">.</span><span class="token function">ofFail</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">"id can't be null"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        FlowRuleEntity entity <span class="token operator">=</span> repository<span class="token punctuation">.</span><span class="token function">findById</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>entity <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> Result<span class="token punctuation">.</span><span class="token function">ofFail</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">"id "</span> <span class="token operator">+</span> id <span class="token operator">+</span> <span class="token string">" dose not exist"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>StringUtil<span class="token punctuation">.</span><span class="token function">isNotBlank</span><span class="token punctuation">(</span>app<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            entity<span class="token punctuation">.</span><span class="token function">setApp</span><span class="token punctuation">(</span>app<span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>StringUtil<span class="token punctuation">.</span><span class="token function">isNotBlank</span><span class="token punctuation">(</span>limitApp<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            entity<span class="token punctuation">.</span><span class="token function">setLimitApp</span><span class="token punctuation">(</span>limitApp<span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>StringUtil<span class="token punctuation">.</span><span class="token function">isNotBlank</span><span class="token punctuation">(</span>resource<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            entity<span class="token punctuation">.</span><span class="token function">setResource</span><span class="token punctuation">(</span>resource<span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>grade <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>grade <span class="token operator">!=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> grade <span class="token operator">!=</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> Result<span class="token punctuation">.</span><span class="token function">ofFail</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">"grade must be 0 or 1, but "</span> <span class="token operator">+</span> grade <span class="token operator">+</span> <span class="token string">" got"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            entity<span class="token punctuation">.</span><span class="token function">setGrade</span><span class="token punctuation">(</span>grade<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>count <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            entity<span class="token punctuation">.</span><span class="token function">setCount</span><span class="token punctuation">(</span>count<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>strategy <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>strategy <span class="token operator">!=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> strategy <span class="token operator">!=</span> <span class="token number">1</span> <span class="token operator">&amp;&amp;</span> strategy <span class="token operator">!=</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> Result<span class="token punctuation">.</span><span class="token function">ofFail</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">"strategy must be in [0, 1, 2], but "</span> <span class="token operator">+</span> strategy <span class="token operator">+</span> <span class="token string">" got"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            entity<span class="token punctuation">.</span><span class="token function">setStrategy</span><span class="token punctuation">(</span>strategy<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>strategy <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>StringUtil<span class="token punctuation">.</span><span class="token function">isBlank</span><span class="token punctuation">(</span>refResource<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">return</span> Result<span class="token punctuation">.</span><span class="token function">ofFail</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">"refResource can't be null or empty when strategy!=0"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                entity<span class="token punctuation">.</span><span class="token function">setRefResource</span><span class="token punctuation">(</span>refResource<span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>controlBehavior <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>controlBehavior <span class="token operator">!=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> controlBehavior <span class="token operator">!=</span> <span class="token number">1</span> <span class="token operator">&amp;&amp;</span> controlBehavior <span class="token operator">!=</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> Result<span class="token punctuation">.</span><span class="token function">ofFail</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">"controlBehavior must be in [0, 1, 2], but "</span> <span class="token operator">+</span> controlBehavior <span class="token operator">+</span> <span class="token string">" got"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>controlBehavior <span class="token operator">==</span> <span class="token number">1</span> <span class="token operator">&amp;&amp;</span> warmUpPeriodSec <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> Result<span class="token punctuation">.</span><span class="token function">ofFail</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">"warmUpPeriodSec can't be null when controlBehavior==1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>controlBehavior <span class="token operator">==</span> <span class="token number">2</span> <span class="token operator">&amp;&amp;</span> maxQueueingTimeMs <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> Result<span class="token punctuation">.</span><span class="token function">ofFail</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">"maxQueueingTimeMs can't be null when controlBehavior==2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            entity<span class="token punctuation">.</span><span class="token function">setControlBehavior</span><span class="token punctuation">(</span>controlBehavior<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>warmUpPeriodSec <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                entity<span class="token punctuation">.</span><span class="token function">setWarmUpPeriodSec</span><span class="token punctuation">(</span>warmUpPeriodSec<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>maxQueueingTimeMs <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                entity<span class="token punctuation">.</span><span class="token function">setMaxQueueingTimeMs</span><span class="token punctuation">(</span>maxQueueingTimeMs<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        Date date <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        entity<span class="token punctuation">.</span><span class="token function">setGmtModified</span><span class="token punctuation">(</span>date<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            entity <span class="token operator">=</span> repository<span class="token punctuation">.</span><span class="token function">save</span><span class="token punctuation">(</span>entity<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>entity <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> Result<span class="token punctuation">.</span><span class="token function">ofFail</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">"save entity fail: null"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token comment" spellcheck="true">//            publishRules(entity.getApp(), entity.getIp(), entity.getPort()).get(5000, TimeUnit.MILLISECONDS);</span>            <span class="token function">publishRules</span><span class="token punctuation">(</span>entity<span class="token punctuation">.</span><span class="token function">getApp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> Result<span class="token punctuation">.</span><span class="token function">ofSuccess</span><span class="token punctuation">(</span>entity<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Throwable</span> t<span class="token punctuation">)</span> <span class="token punctuation">{</span>            Throwable e <span class="token operator">=</span> t <span class="token keyword">instanceof</span> <span class="token class-name">ExecutionException</span> <span class="token operator">?</span> t<span class="token punctuation">.</span><span class="token function">getCause</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">:</span> t<span class="token punctuation">;</span>            logger<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"Error when updating flow rules, app={}, ip={}, ruleId={}"</span><span class="token punctuation">,</span> entity<span class="token punctuation">.</span><span class="token function">getApp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                    entity<span class="token punctuation">.</span><span class="token function">getIp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> id<span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> Result<span class="token punctuation">.</span><span class="token function">ofFail</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> e<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@DeleteMapping</span><span class="token punctuation">(</span><span class="token string">"/delete.json"</span><span class="token punctuation">)</span>    <span class="token annotation punctuation">@AuthAction</span><span class="token punctuation">(</span>PrivilegeType<span class="token punctuation">.</span>WRITE_RULE<span class="token punctuation">)</span>    <span class="token keyword">public</span> Result<span class="token operator">&lt;</span>Long<span class="token operator">></span> <span class="token function">apiDeleteFlowRule</span><span class="token punctuation">(</span>Long id<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>id <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> Result<span class="token punctuation">.</span><span class="token function">ofFail</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">"id can't be null"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        FlowRuleEntity oldEntity <span class="token operator">=</span> repository<span class="token punctuation">.</span><span class="token function">findById</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>oldEntity <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> Result<span class="token punctuation">.</span><span class="token function">ofSuccess</span><span class="token punctuation">(</span>null<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            repository<span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> Result<span class="token punctuation">.</span><span class="token function">ofFail</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> e<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">//            publishRules(oldEntity.getApp(), oldEntity.getIp(), oldEntity.getPort()).get(5000, TimeUnit.MILLISECONDS);</span>            <span class="token comment" spellcheck="true">//发布规则到配置中心</span>            <span class="token function">publishRules</span><span class="token punctuation">(</span>oldEntity<span class="token punctuation">.</span><span class="token function">getApp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> Result<span class="token punctuation">.</span><span class="token function">ofSuccess</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Throwable</span> t<span class="token punctuation">)</span> <span class="token punctuation">{</span>            Throwable e <span class="token operator">=</span> t <span class="token keyword">instanceof</span> <span class="token class-name">ExecutionException</span> <span class="token operator">?</span> t<span class="token punctuation">.</span><span class="token function">getCause</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">:</span> t<span class="token punctuation">;</span>            logger<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"Error when deleting flow rules, app={}, ip={}, id={}"</span><span class="token punctuation">,</span> oldEntity<span class="token punctuation">.</span><span class="token function">getApp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                    oldEntity<span class="token punctuation">.</span><span class="token function">getIp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> id<span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> Result<span class="token punctuation">.</span><span class="token function">ofFail</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> e<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token comment" spellcheck="true">//    private CompletableFuture&lt;Void> publishRules(String app, String ip, Integer port) {</span><span class="token comment" spellcheck="true">//        List&lt;FlowRuleEntity> rules = repository.findAllByMachine(MachineInfo.of(app, ip, port));</span><span class="token comment" spellcheck="true">//        return sentinelApiClient.setFlowRuleOfMachineAsync(app, ip, port, rules);</span><span class="token comment" spellcheck="true">//    }</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">publishRules</span><span class="token punctuation">(</span><span class="token comment" spellcheck="true">/*@NonNull*/</span> String app<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        List<span class="token operator">&lt;</span>FlowRuleEntity<span class="token operator">></span> rules <span class="token operator">=</span> repository<span class="token punctuation">.</span><span class="token function">findAllByApp</span><span class="token punctuation">(</span>app<span class="token punctuation">)</span><span class="token punctuation">;</span>        rulePublisher<span class="token punctuation">.</span><span class="token function">publish</span><span class="token punctuation">(</span>app<span class="token punctuation">,</span> rules<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 源码 </tag>
            
            <tag> 限流 </tag>
            
            <tag> Sentinel </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Sentinel源码解析</title>
      <link href="/2021/08/24/sentinel-yuan-ma-jie-xi/"/>
      <url>/2021/08/24/sentinel-yuan-ma-jie-xi/</url>
      
        <content type="html"><![CDATA[<h2 id="入口"><a href="#入口" class="headerlink" title="入口"></a>入口</h2><p>在Springcloud中引入sentinel我们发现只是引入了一个jar包就完事了，说明肯定是通过SpringBoot自动装配将sentinel引入进来，既然这样，那么我没找到spring.factories就能找到自动装配的类</p><p>spring-cloud-alibaba-sentinel.jar打开找到spring.factories（<strong>版本不一样位置可能不同</strong>）</p><pre class=" language-java"><code class="language-java">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>autoconfigure<span class="token punctuation">.</span>EnableAutoConfiguration<span class="token operator">=</span>\com<span class="token punctuation">.</span>alibaba<span class="token punctuation">.</span>cloud<span class="token punctuation">.</span>sentinel<span class="token punctuation">.</span>SentinelWebAutoConfiguration<span class="token punctuation">,</span>\com<span class="token punctuation">.</span>alibaba<span class="token punctuation">.</span>cloud<span class="token punctuation">.</span>sentinel<span class="token punctuation">.</span>SentinelWebFluxAutoConfiguration<span class="token punctuation">,</span>\com<span class="token punctuation">.</span>alibaba<span class="token punctuation">.</span>cloud<span class="token punctuation">.</span>sentinel<span class="token punctuation">.</span>endpoint<span class="token punctuation">.</span>SentinelEndpointAutoConfiguration<span class="token punctuation">,</span>\com<span class="token punctuation">.</span>alibaba<span class="token punctuation">.</span>cloud<span class="token punctuation">.</span>sentinel<span class="token punctuation">.</span>custom<span class="token punctuation">.</span>SentinelAutoConfiguration<span class="token punctuation">,</span>\com<span class="token punctuation">.</span>alibaba<span class="token punctuation">.</span>cloud<span class="token punctuation">.</span>sentinel<span class="token punctuation">.</span>feign<span class="token punctuation">.</span>SentinelFeignAutoConfigurationorg<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>cloud<span class="token punctuation">.</span>client<span class="token punctuation">.</span>circuitbreaker<span class="token punctuation">.</span>EnableCircuitBreaker<span class="token operator">=</span>\com<span class="token punctuation">.</span>alibaba<span class="token punctuation">.</span>cloud<span class="token punctuation">.</span>sentinel<span class="token punctuation">.</span>custom<span class="token punctuation">.</span>SentinelCircuitBreakerConfiguration</code></pre><p>在Springcloud gateway使用的是webflux,所以我们猜测很有可能使用的是SentinelWebFluxAutoConfiguration，如果是普通应用使用的是web servlet环境那么应该使用的是SentinelWebAutoConfiguration，由于我们对Web环境更加熟悉，我们这里直接看普通web环境所引入的SentinelWebAutoConfiguration</p><p>SentinelWebAutoConfiguration</p><p>这里自动装配代码很简单，就是注入了一个Bean，并将这个bean绑定到web容器的拦截器中。所以我们在普通Web环境中解决Sentinel的方法是通过拦截器解决的（<strong>通过注解形式@SentinelResources方法是通过AOP解决的，SentinelResourceAspect这里暂不做解释</strong>）</p><p>注意点：这里有个小问题，可能是我得sentinel版本问题。在设置拦截器路径匹配的时候他设置的路径规则是/*，而这便会导致某些路径不会被拦截器拦截，所以我们需要配置文件加上</p><pre class=" language-yml"><code class="language-yml">spring.cloud.sentinel.filter.url-patterns=/**</code></pre><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Autowired</span><span class="token keyword">private</span> Optional<span class="token operator">&lt;</span>SentinelWebInterceptor<span class="token operator">></span> sentinelWebInterceptorOptional<span class="token punctuation">;</span><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">addInterceptors</span><span class="token punctuation">(</span>InterceptorRegistry registry<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>sentinelWebInterceptorOptional<span class="token punctuation">.</span><span class="token function">isPresent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    SentinelProperties<span class="token punctuation">.</span>Filter filterConfig <span class="token operator">=</span> properties<span class="token punctuation">.</span><span class="token function">getFilter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 将下面注册的bean绑定在拦截器中</span>    registry<span class="token punctuation">.</span><span class="token function">addInterceptor</span><span class="token punctuation">(</span>sentinelWebInterceptorOptional<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">order</span><span class="token punctuation">(</span>filterConfig<span class="token punctuation">.</span><span class="token function">getOrder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">// 默认路径匹配为/*存在问题，配置文件重新配置</span>        <span class="token punctuation">.</span><span class="token function">addPathPatterns</span><span class="token punctuation">(</span>filterConfig<span class="token punctuation">.</span><span class="token function">getUrlPatterns</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span>        <span class="token string">"[Sentinel Starter] register SentinelWebInterceptor with urlPatterns: {}."</span><span class="token punctuation">,</span>        filterConfig<span class="token punctuation">.</span><span class="token function">getUrlPatterns</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 这里引入了一个SentinelWebInterceptor的Bean,而这个bean是被sentinelWebInterceptorOptional所注入。</span><span class="token comment" spellcheck="true">// 在addInterceptors中通过sentinelWebInterceptorOptional.get()方法将这个bean取出来</span><span class="token annotation punctuation">@Bean</span><span class="token annotation punctuation">@ConditionalOnProperty</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"spring.cloud.sentinel.filter.enabled"</span><span class="token punctuation">,</span>                       matchIfMissing <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token keyword">public</span> SentinelWebInterceptor <span class="token function">sentinelWebInterceptor</span><span class="token punctuation">(</span>    SentinelWebMvcConfig sentinelWebMvcConfig<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">SentinelWebInterceptor</span><span class="token punctuation">(</span>sentinelWebMvcConfig<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h2 id="SentinelWebInterceptor"><a href="#SentinelWebInterceptor" class="headerlink" title="SentinelWebInterceptor"></a>SentinelWebInterceptor</h2><p>我们知道拦截器通常是有一个preHandle方法，在SentinelWebInterceptor中这个方法在它的抽象父类中。</p><p>这里就是获取资源并对资源进行限流保护核心代码其实就一句 <code>Entry entry = SphU.entry(resourceName, ResourceTypeConstants.COMMON_WEB, EntryType.IN);</code>申请一个entry 申请成功则成功失败既限流。</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">preHandle</span><span class="token punctuation">(</span>HttpServletRequest request<span class="token punctuation">,</span> HttpServletResponse response<span class="token punctuation">,</span> Object handler<span class="token punctuation">)</span>    <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>        String resourceName <span class="token operator">=</span> <span class="token function">getResourceName</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>StringUtil<span class="token punctuation">.</span><span class="token function">isNotEmpty</span><span class="token punctuation">(</span>resourceName<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// Parse the request origin using registered origin parser.</span>            String origin <span class="token operator">=</span> <span class="token function">parseOrigin</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">;</span>            ContextUtil<span class="token punctuation">.</span><span class="token function">enter</span><span class="token punctuation">(</span>SENTINEL_SPRING_WEB_CONTEXT_NAME<span class="token punctuation">,</span> origin<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 核心代码</span>            <span class="token comment" spellcheck="true">// 申请一个entry资源，申请成功则通过请求，申请失败就进行限流熔断保护</span>            Entry entry <span class="token operator">=</span> SphU<span class="token punctuation">.</span><span class="token function">entry</span><span class="token punctuation">(</span>resourceName<span class="token punctuation">,</span> ResourceTypeConstants<span class="token punctuation">.</span>COMMON_WEB<span class="token punctuation">,</span> EntryType<span class="token punctuation">.</span>IN<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">setEntryInRequest</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> baseWebMvcConfig<span class="token punctuation">.</span><span class="token function">getRequestAttributeName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> entry<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">BlockException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">handleBlockException</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> response<span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="SphU-entry"><a href="#SphU-entry" class="headerlink" title="SphU#entry"></a>SphU#entry</h2><p>从这里一直往下跟会到<code>CtSph#entryWithPriority</code>这个方法，这便是一切的开始。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">private</span> Entry <span class="token function">entryWithPriority</span><span class="token punctuation">(</span>ResourceWrapper resourceWrapper<span class="token punctuation">,</span> <span class="token keyword">int</span> count<span class="token punctuation">,</span> <span class="token keyword">boolean</span> prioritized<span class="token punctuation">,</span> Object<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> args<span class="token punctuation">)</span>    <span class="token keyword">throws</span> BlockException <span class="token punctuation">{</span>       <span class="token comment" spellcheck="true">// =======省略代码=========</span>        <span class="token comment" spellcheck="true">// 构造一个Slot链条，使用责任链的方式进行调用</span>    ProcessorSlot<span class="token operator">&lt;</span>Object<span class="token operator">></span> chain <span class="token operator">=</span> <span class="token function">lookProcessChain</span><span class="token punctuation">(</span>resourceWrapper<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// =======省略代码=========</span>         Entry e <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CtEntry</span><span class="token punctuation">(</span>resourceWrapper<span class="token punctuation">,</span> chain<span class="token punctuation">,</span> context<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>        chain<span class="token punctuation">.</span><span class="token function">entry</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> resourceWrapper<span class="token punctuation">,</span> null<span class="token punctuation">,</span> count<span class="token punctuation">,</span> prioritized<span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">BlockException</span> e1<span class="token punctuation">)</span> <span class="token punctuation">{</span>        e<span class="token punctuation">.</span><span class="token function">exit</span><span class="token punctuation">(</span>count<span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">throw</span> e1<span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Throwable</span> e1<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// This should not happen, unless there are errors existing in Sentinel internal.</span>        RecordLog<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"Sentinel unexpected exception"</span><span class="token punctuation">,</span> e1<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> e<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h3 id="lookProcessChain"><a href="#lookProcessChain" class="headerlink" title="lookProcessChain"></a>lookProcessChain</h3><p>这里主要是构建后续调用链</p><p>NodeSelectorSlot-&gt;ClusterBuilderSlot-&gt;LogSlot-&gt;StatisticSlot-&gt;ParamFlowSlot-&gt;SystemSlot-&gt;AuthoritySlot-&gt;FlowSlot-&gt;DegradeSlot</p><pre class=" language-java"><code class="language-java">ProcessorSlot<span class="token operator">&lt;</span>Object<span class="token operator">></span> <span class="token function">lookProcessChain</span><span class="token punctuation">(</span>ResourceWrapper resourceWrapper<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 先看这个资源有没有获取这个调用链</span>    ProcessorSlotChain chain <span class="token operator">=</span> chainMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>resourceWrapper<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// DCL 防并发</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>chain <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>LOCK<span class="token punctuation">)</span> <span class="token punctuation">{</span>            chain <span class="token operator">=</span> chainMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>resourceWrapper<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>chain <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// Entry size limit.</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>chainMap<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">>=</span> Constants<span class="token punctuation">.</span>MAX_SLOT_CHAIN_SIZE<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">return</span> null<span class="token punctuation">;</span>                <span class="token punctuation">}</span>               <span class="token comment" spellcheck="true">// 构建链条，DefaultSlotChainBuilder,GatewaySlotChainBuilder,HotParamSlotChainBuilder三种构建器，通过SPI获取到HotParamSlotChainBuilder</span>                <span class="token comment" spellcheck="true">// 链条 NodeSelectorSlot->ClusterBuilderSlot->LogSlot->StatisticSlot->ParamFlowSlot->SystemSlot->AuthoritySlot->FlowSlot->DegradeSlot</span>                chain <span class="token operator">=</span> SlotChainProvider<span class="token punctuation">.</span><span class="token function">newSlotChain</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                Map<span class="token operator">&lt;</span>ResourceWrapper<span class="token punctuation">,</span> ProcessorSlotChain<span class="token operator">></span> newMap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span>ResourceWrapper<span class="token punctuation">,</span> ProcessorSlotChain<span class="token operator">></span><span class="token punctuation">(</span>                    chainMap<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">// 将链条放打Map中，key-资源，value-链条</span>                newMap<span class="token punctuation">.</span><span class="token function">putAll</span><span class="token punctuation">(</span>chainMap<span class="token punctuation">)</span><span class="token punctuation">;</span>                newMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>resourceWrapper<span class="token punctuation">,</span> chain<span class="token punctuation">)</span><span class="token punctuation">;</span>                chainMap <span class="token operator">=</span> newMap<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> chain<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h3 id="chain-entry"><a href="#chain-entry" class="headerlink" title="chain.entry"></a>chain.entry</h3><p>通过上面构造的链条开始调用</p><p>entry-执行逻辑，fireEntry-执行下一个Slot,transformEntry-调用entry</p><p>大致逻辑就是entry-&gt;fireEntry-&gt;transformEntry-&gt;entry</p><p><img src="https://blog-dm.oss-cn-shanghai.aliyuncs.com/articleimage/20210820144340.png"></p><p><img src="https://blog-dm.oss-cn-shanghai.aliyuncs.com/articleimage/20210820144559.png"></p><p>执行完之后有会在拦截器中的afterCompletion方法中进行退出</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">afterCompletion</span><span class="token punctuation">(</span>HttpServletRequest request<span class="token punctuation">,</span> HttpServletResponse response<span class="token punctuation">,</span>                            Object handler<span class="token punctuation">,</span> Exception ex<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>    Entry entry <span class="token operator">=</span> <span class="token function">getEntryInRequest</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> baseWebMvcConfig<span class="token punctuation">.</span><span class="token function">getRequestAttributeName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>entry <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 调用chain中的exit方法，和上诉调用链基本一致</span>        <span class="token function">traceExceptionAndExit</span><span class="token punctuation">(</span>entry<span class="token punctuation">,</span> ex<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">removeEntryInRequest</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    ContextUtil<span class="token punctuation">.</span><span class="token function">exit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h2 id="限流逻辑"><a href="#限流逻辑" class="headerlink" title="限流逻辑"></a>限流逻辑</h2><p>限流逻辑就藏在每一个Slot中，代码逻辑不复杂，就不详细解释</p><ul><li><p>NodeSelectorSlot：为资源不同的线程创建node</p></li><li><p>ClusterBuilderSlot：为资源创建集群node</p></li><li><p>LogSlot：没做什么，打印日志</p></li><li><p>StatisticSlot：统计数据，这里先调用了下一个链条，等调用完毕进行一些处理，包括并不限于对一些数据进行统计，比如异常数据，通过数据</p></li><li><p>ParamFlowSlot：热点参数规则</p></li><li><p>SystemSlot：系统规则</p></li><li><p>AuthoritySlot：授权规则</p></li><li><p>FlowSlot：流控规则</p></li><li><p>DegradeSlot：降级规则</p></li></ul><h2 id="源码图"><a href="#源码图" class="headerlink" title="源码图"></a>源码图</h2><p><a href="https://www.processon.com/view/link/5f130126e0b34d44f0514d8b">processon</a>;</p><p><img src="https://blog-dm.oss-cn-shanghai.aliyuncs.com/articleimage/sentinel%E9%99%90%E6%B5%81,%E7%86%94%E6%96%AD%E9%99%8D%E7%BA%A7%E6%BA%90%E7%A0%81.png"></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 源码 </tag>
            
            <tag> 限流 </tag>
            
            <tag> Sentinel </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Sentinel基本使用</title>
      <link href="/2021/08/18/sentinel-ji-ben-shi-yong/"/>
      <url>/2021/08/18/sentinel-ji-ben-shi-yong/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>在一个微服务系统中，经常会出现一个服务依赖于多个服务，而一个调用逻辑会调用多个服务的情况出现。如果出现某个服务提供者出现故障不可用，就会导致服务消费者不可用，又由于是同步调用最后线程全部阻塞在服务消费者身上，最后导致服务消费者也不可用。这就是服务雪崩。</p><p>对于这种情况我们一般由以下解决方案：</p><ol><li>超时机制：服务调用超过一定时间，直接返回</li><li>服务限流：通过限制流量的方式保证核心服务不会出现故障</li><li>服务熔断：在应用一段时间内出现异常达到一定比例就会服务熔断，等待服务可用才会继续调用</li><li>服务降级：在服务不可用的情况下，服务不在调用，但我们会有一个fallback机制，返回一个mock数据给消费者。</li></ol><h2 id="Sentinel基本介绍"><a href="#Sentinel基本介绍" class="headerlink" title="Sentinel基本介绍"></a>Sentinel基本介绍</h2><p>Sentinel 是面向分布式服务架构的流量控制组件，主要以流量为切入点，从流量控制、熔断降级、系统自适应保护等多个维度来帮助您保障微服务的稳定性。</p><p><a href="https://github.com/alibaba/Sentinel">源码地址</a></p><p><a href="https://github.com/alibaba/Sentinel/wiki/%E4%BB%8B%E7%BB%8D">官方文档</a></p><h3 id="资源-摘自官方文档"><a href="#资源-摘自官方文档" class="headerlink" title="资源(摘自官方文档)"></a>资源(摘自官方文档)</h3><p>资源是 Sentinel 的关键概念。它可以是 Java 应用程序中的任何内容，例如，由应用程序提供的服务，或由应用程序调用的其它应用提供的服务，甚至可以是一段代码。在接下来的文档中，我们都会用资源来描述代码块。</p><p>只要通过 Sentinel API 定义的代码，就是资源，能够被 Sentinel 保护起来。大部分情况下，可以使用方法签名，URL，甚至服务名称作为资源名来标示资源。</p><h3 id="规则-摘自官方文档"><a href="#规则-摘自官方文档" class="headerlink" title="规则(摘自官方文档)"></a>规则(摘自官方文档)</h3><p>围绕资源的实时状态设定的规则，可以包括流量控制规则、熔断降级规则以及系统保护规则。所有规则可以动态实时调整。</p><h2 id="Spring-Cloud-Alibaba整合Sentinel"><a href="#Spring-Cloud-Alibaba整合Sentinel" class="headerlink" title="Spring Cloud Alibaba整合Sentinel"></a>Spring Cloud Alibaba整合Sentinel</h2><p>这这里是在springcloud gateway层面进行的流量控制。</p><h3 id="启动-Sentinel-控制台"><a href="#启动-Sentinel-控制台" class="headerlink" title="启动 Sentinel 控制台"></a>启动 Sentinel 控制台</h3><p><a href="https://sentinelguard.io/zh-cn/docs/dashboard.html">官方文档</a>;</p><p>第一次启动界面是空的，需要调用一遍接口才会在列表出现服务</p><p><a href="http://localhost:8080/#/login%EF%BC%9B%E9%BB%98%E8%AE%A4%E7%94%A8%E6%88%B7%E5%90%8D%E5%AF%86%E7%A0%81:sentinel/sentinel">http://localhost:8080/#/login；默认用户名密码:sentinel/sentinel</a></p><p> <img src="https://blog-dm.oss-cn-shanghai.aliyuncs.com/articleimage/image-20210818171249782.png"></p><h3 id="添加依赖"><a href="#添加依赖" class="headerlink" title="添加依赖"></a>添加依赖</h3><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.alibaba.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-cloud-alibaba-sentinel-gateway<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.alibaba.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-cloud-starter-alibaba-sentinel<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre><h3 id="添加yml配置"><a href="#添加yml配置" class="headerlink" title="添加yml配置"></a>添加yml配置</h3><pre class=" language-yml"><code class="language-yml">spring:  cloud:    sentinel:      enabled: true      eager: true      transport:        dashboard: localhost:8080   ## sentinel控制台ip:port        client-ip: localhost</code></pre><h3 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h3><p><img src="https://blog-dm.oss-cn-shanghai.aliyuncs.com/articleimage/20210818173350.png"></p><p>连续访问后</p><p><img src="https://blog-dm.oss-cn-shanghai.aliyuncs.com/articleimage/20210818173419.png"></p><h2 id="Sentinel控制台规则"><a href="#Sentinel控制台规则" class="headerlink" title="Sentinel控制台规则"></a>Sentinel控制台规则</h2><p>既然有了Sentinel控制台，那么我们就可以在控制台对规则进行配置（其实可以代码配置和配置中心配置读取等方法）。</p><p>现在我们通过Sentinel控制台简单介绍Sentienl规则。</p><h3 id="流控规则"><a href="#流控规则" class="headerlink" title="流控规则"></a>流控规则</h3><p>流控就是监控QPS和并发线程数指标达到阈值时进行限流，避免瞬时流量高峰将系统打垮。</p><h4 id="阈值类型"><a href="#阈值类型" class="headerlink" title="阈值类型"></a>阈值类型</h4><p>限制请求的指标</p><ul><li><strong>QPS</strong>：每秒请求数，表示1s内有多少请求通过，这个量由<strong>单机阈值</strong>控制</li><li><strong>线程数</strong>：当前最多有多少线程可以访问资源。这里主要是防止业务线程执行过慢导致所有线程资源被消耗干净</li></ul><h4 id="流控模式"><a href="#流控模式" class="headerlink" title="流控模式"></a>流控模式</h4><p>基于调用关系的流量控制</p><ul><li><p><strong>直接</strong>：针对于当前指定资源进行流控</p></li><li><p><strong>关联</strong>：这种模式针对于2个资源存在竞争情况，假设A，B 2资源存在竞争，当A流量达到一定的程度时候，我们需要对B资源进行限流，比如存在数据库竞争，A对数据库请求频繁假设不对B加以限制可能导致数据库崩溃。</p><img src="https://blog-dm.oss-cn-shanghai.aliyuncs.com/articleimage/20210819142145.png" style="zoom:80%;"></li><li><p><strong>链路</strong>：由入口资源进行限流，假设有一个链路，A,B2个资源都调用了当前资源，当当前资源达到阈值会对指定的入口资源进行限流</p><img src="https://blog-dm.oss-cn-shanghai.aliyuncs.com/articleimage/20210819142704.png" style="zoom:80%;"></li></ul><h4 id="流控效果"><a href="#流控效果" class="headerlink" title="流控效果"></a>流控效果</h4><ul><li><p><strong>快速失败（默认）</strong>：当QPS超过任意规则的阈值后，新的请求就会被立即拒绝，拒绝方式为抛出FlowException</p></li><li><p><strong>Warm Up</strong>：预热/冷启动方式。在预热时长内达到阈值，防止系统突然接受阈值的请求导致系统崩溃，所以以这种方式将阈值缓慢增加到阈值上限，底层<strong>令牌桶算法</strong></p><img src="https://blog-dm.oss-cn-shanghai.aliyuncs.com/articleimage/image-20210819143157389.png" style="zoom:80%;"></li><li><p><strong>排队等待</strong>：严格控制请求通过的间隔时 间，也就是让请求以均匀的速度通过，底层<strong>漏桶算法</strong></p></li></ul><h3 id="降级规则"><a href="#降级规则" class="headerlink" title="降级规则"></a>降级规则</h3><p>除了流量控制以外，对调用链路中不稳定的资源进行熔断降级也是保障高可用的重要措施之一。我们需要对不稳定的<strong>弱依赖服务调用</strong>进行熔断降级，暂时切断不稳定调用，避免局部不稳定因素导致整体的雪崩。</p><h4 id="熔断策略"><a href="#熔断策略" class="headerlink" title="熔断策略"></a><strong>熔断策略</strong></h4><ul><li><p><strong>慢调用比例</strong>：设置一个<strong>最大RT</strong>(超过这个时间就为慢请求)，当慢请求/所有请求大于<strong>比例阈值</strong>就会出现熔断，熔断<strong>熔断时长</strong>，当过了熔断时长会出现一个Half状态，当下一个请求不是慢请求就解除熔断，是慢请求就继续熔断。</p><img src="https://blog-dm.oss-cn-shanghai.aliyuncs.com/articleimage/image-20210819144541980.png" style="zoom:80%;"></li><li><p><strong>异常比例</strong>：当单位时长内请求数目大于<strong>最小请求数</strong>，并且异常的比例大于<strong>比例阈值</strong>，则接下来的<strong>熔断时长</strong>内请求会自动被熔断</p><img src="https://blog-dm.oss-cn-shanghai.aliyuncs.com/articleimage/20210819144900.png" style="zoom:80%;"></li><li><p><strong>异常数</strong>：当单位时长内请求数目大于<strong>最小请求数</strong>，并且异常数目超过<strong>异常数</strong>阈值之后会自动进行熔断</p><img src="https://blog-dm.oss-cn-shanghai.aliyuncs.com/articleimage/20210819144942.png" style="zoom:80%;"></li></ul><h3 id="热点规则"><a href="#热点规则" class="headerlink" title="热点规则"></a>热点规则</h3><p>热点就是经常访问的数据，而热点规则可以对我们接口请求的参数进行限流，假设我们有一部分id是热点，而我们要对其调用getInfo/id请求查看详情。我们不能对这个接口全部进行限流，而要只针对id=11111进行限流就可以使用热点规则。</p><p><strong>注意： 资源名必须是@SentinelResource(value=”资源名”)中 配置的资源名，热点规则依赖于注解</strong> </p><p><img src="https://blog-dm.oss-cn-shanghai.aliyuncs.com/articleimage/20210819145821.png"></p><h3 id="系统规则"><a href="#系统规则" class="headerlink" title="系统规则"></a>系统规则</h3><p>对于整个应用从几个维度来看达到指标便进行限流。</p><ul><li><strong>Load（仅对 Linux/Unix­like 机器生效）</strong>：系统的 load1 作为启发指标，进行自适应系统保护。当系统 load1超过设定的启发值，且系统当前的并发线程数超过估算的系统容量时才会触发系统保护（BBR 阶段）。系统容量由系统的 maxQps * minRt 估算得出。设定参考值一般是 CPU cores * 2.5</li><li>**RT(单位ms)**：当单台机器上所有入口流量的平均 RT 达到阈值即触发系统保护</li><li><strong>线程数</strong>：当单台机器上所有入口流量的并发线程数达到阈值即触发系统保护</li><li><strong>入口</strong> <strong>QPS</strong>：当单台机器上所有入口流量的 QPS 达到阈值即触发系统保护</li><li><strong>CPU 使用率</strong>：当系统 CPU 使用率超过阈值即触发系统保护</li></ul><p><img src="https://blog-dm.oss-cn-shanghai.aliyuncs.com/articleimage/20210819150006.png"></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 限流 </tag>
            
            <tag> Sentinel </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Sentinel常用算法及简易实现</title>
      <link href="/2021/08/15/sentinel-chang-yong-suan-fa-ji-jian-yi-shi-xian/"/>
      <url>/2021/08/15/sentinel-chang-yong-suan-fa-ji-jian-yi-shi-xian/</url>
      
        <content type="html"><![CDATA[<p>这篇博文主要是针对Sentinel中间件中常用算法进行源码解析和进行一些简易实现代码</p><h2 id="计数器限流算法"><a href="#计数器限流算法" class="headerlink" title="计数器限流算法"></a>计数器限流算法</h2><p>假设限流1s 1000个请求。定义起始点，每来一个请求计数器加一，到了1000限流，到了1s计数器清空。</p><ul><li><p>优点：实现简单，基本用redis实现一个lua脚本</p></li><li><p>缺点：会出现突刺现象，在1s的前半秒1000个请求打完了，后续直接停止访问。统计不精确，假设0~0.5s  200请求</p><p>0.5<del>1s 700请求 1</del>1.5s 600请求 1.5<del>2s 200请求，这种情况其实是不会限流的，但在0.5</del>1.5确有1300请求，这时是有可能吧机器打崩掉的。</p></li></ul><h3 id="Demo"><a href="#Demo" class="headerlink" title="Demo"></a>Demo</h3><p>通过redis过期时间控制计数器清空</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 时间</span><span class="token keyword">private</span> <span class="token keyword">int</span> limitPeriod <span class="token operator">=</span> <span class="token number">1000</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 请求数</span><span class="token keyword">private</span> <span class="token keyword">int</span> limitCount <span class="token operator">=</span> <span class="token number">1000</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 检查是否限流</span><span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">check</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    String luaScript <span class="token operator">=</span> <span class="token function">buildLuaScript</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    RedisScript<span class="token operator">&lt;</span>Number<span class="token operator">></span> redisScript <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DefaultRedisScript</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span>luaScript<span class="token punctuation">,</span> Number<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    Number count <span class="token operator">=</span> redisTemplate<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span>redisScript<span class="token punctuation">,</span> keys<span class="token punctuation">,</span> limitCount<span class="token punctuation">,</span> limitPeriod<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>count <span class="token operator">!=</span> null <span class="token operator">&amp;&amp;</span> count<span class="token punctuation">.</span><span class="token function">intValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;=</span> limitCount<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 构建lua脚本</span><span class="token keyword">public</span> String <span class="token function">buildLuaScript</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 调用不超过最大值,则直接返回,执行计算器自加</span>        <span class="token comment" spellcheck="true">// 从第一次调用开始限流，设置对应键值的过期</span>        <span class="token keyword">return</span> <span class="token string">"local c"</span> <span class="token operator">+</span>                <span class="token string">"\nc = redis.call('get',KEYS[1])"</span> <span class="token operator">+</span>                <span class="token string">"\nif c and tonumber(c) > tonumber(ARGV[1]) then"</span> <span class="token operator">+</span>                <span class="token string">"\nreturn c;"</span> <span class="token operator">+</span>                <span class="token string">"\nend"</span> <span class="token operator">+</span>                <span class="token string">"\nc = redis.call('incr',KEYS[1])"</span> <span class="token operator">+</span>                <span class="token string">"\nif tonumber(c) == 1 then"</span> <span class="token operator">+</span>                <span class="token string">"\nredis.call('expire',KEYS[1],ARGV[2])"</span> <span class="token operator">+</span>                <span class="token string">"\nend"</span> <span class="token operator">+</span>                <span class="token string">"\nreturn c;"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><h2 id="滑动时间窗算法"><a href="#滑动时间窗算法" class="headerlink" title="滑动时间窗算法"></a>滑动时间窗算法</h2><p>滑动时间窗也是由计数器限流算法演进而来。它的出现就是为了解决计数器算法中的一些问题。</p><p>滑动时间窗算法和技术器算法基本一致，但在起始点这里做了改变，起始点不再是固定的，而是滑动的。我们可以这么想象有一把尺子上面有刻度，然后我们统计的请求都会放到每一个刻度上面，这时候我们有一个仅仅只有1cm(1s)的短尺在这把长的尺子上面不断滑动，短尺覆盖的范围所有刻度的请求加起来就是这1s的请求数。这种统计方式和计数器限流算法一样会有精度问题，但会大大缩小，想要越精确就是使刻度越多，但性能会降低。因为每一个刻度都是存在内存中的，存的越多性能就越低。</p><h3 id="Demo-1"><a href="#Demo-1" class="headerlink" title="Demo"></a>Demo</h3><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 服务访问次数，可以放在Redis中，实现分布式系统的访问计数</span><span class="token keyword">private</span> <span class="token keyword">static</span> Long counter <span class="token operator">=</span> 0L<span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 使用LinkedList来记录滑动窗口的10个格子。</span><span class="token keyword">private</span> <span class="token keyword">static</span> LinkedList<span class="token operator">&lt;</span>Long<span class="token operator">></span> slots <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 限流标记</span><span class="token keyword">private</span> <span class="token keyword">static</span> Boolean limit <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> InterruptedException <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 开启线程，每100ms统计下共有多少个请求，所有请求放到slots格子中的一个</span>    <span class="token comment" spellcheck="true">// slot 长度为 10 ，每个格子是100ms(sleep时间)。所以这段代码表示的是10*100ms时间内通过100个请求</span>    <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token function">doCheck</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">doCheck</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> InterruptedException <span class="token punctuation">{</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        slots<span class="token punctuation">.</span><span class="token function">addLast</span><span class="token punctuation">(</span>counter<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 丢弃之前的请求，能用的也就10个格子，之前的都可以丢弃掉，不丢弃可能会造成内存溢出</span>        <span class="token comment" spellcheck="true">// 这也是我们移格子的过程</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>slots<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">10</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            slots<span class="token punctuation">.</span><span class="token function">removeFirst</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>         <span class="token comment" spellcheck="true">// 比较最后一个和第一个，两者相差100以上就限流</span>        <span class="token comment" spellcheck="true">// 10*100ms时间内通过100个请求</span>        limit <span class="token operator">=</span> <span class="token punctuation">(</span>slots<span class="token punctuation">.</span><span class="token function">peekLast</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> slots<span class="token punctuation">.</span><span class="token function">peekFirst</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">100</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 表示没个格子长度</span>        Thread<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="Sentinel源码"><a href="#Sentinel源码" class="headerlink" title="Sentinel源码"></a>Sentinel源码</h3><h4 id="构造时间窗格"><a href="#构造时间窗格" class="headerlink" title="构造时间窗格"></a>构造时间窗格</h4><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 时间窗格</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">volatile</span> <span class="token keyword">int</span> SAMPLE_COUNT <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 时间间隔</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">volatile</span> <span class="token keyword">int</span> INTERVAL <span class="token operator">=</span> RuleConstant<span class="token punctuation">.</span>DEFAULT_WINDOW_INTERVAL_MS<span class="token punctuation">;</span><span class="token comment" spellcheck="true">// StatisticNode  --  构造了一个ArrayMetric  具体构造方法在LeapArray中</span><span class="token comment" spellcheck="true">// 秒级统计</span><span class="token keyword">private</span> <span class="token keyword">transient</span> <span class="token keyword">volatile</span> Metric rollingCounterInSecond <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayMetric</span><span class="token punctuation">(</span>SampleCountProperty<span class="token punctuation">.</span>SAMPLE_COUNT<span class="token punctuation">,</span>        IntervalProperty<span class="token punctuation">.</span>INTERVAL<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">private</span> <span class="token keyword">transient</span> Metric rollingCounterInMinute <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayMetric</span><span class="token punctuation">(</span><span class="token number">60</span><span class="token punctuation">,</span> <span class="token number">60</span> <span class="token operator">*</span> <span class="token number">1000</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 分钟级统计</span><span class="token keyword">public</span> <span class="token function">LeapArray</span><span class="token punctuation">(</span><span class="token keyword">int</span> sampleCount<span class="token punctuation">,</span> <span class="token keyword">int</span> intervalInMs<span class="token punctuation">)</span> <span class="token punctuation">{</span>    AssertUtil<span class="token punctuation">.</span><span class="token function">isTrue</span><span class="token punctuation">(</span>sampleCount <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">"bucket count is invalid: "</span> <span class="token operator">+</span> sampleCount<span class="token punctuation">)</span><span class="token punctuation">;</span>    AssertUtil<span class="token punctuation">.</span><span class="token function">isTrue</span><span class="token punctuation">(</span>intervalInMs <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">"total time interval of the sliding window should be positive"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    AssertUtil<span class="token punctuation">.</span><span class="token function">isTrue</span><span class="token punctuation">(</span>intervalInMs <span class="token operator">%</span> sampleCount <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">"time span needs to be evenly divided"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 每个窗格所占用时间长度，时间间隔/窗格数</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>windowLengthInMs <span class="token operator">=</span> intervalInMs <span class="token operator">/</span> sampleCount<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 时间间隔</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>intervalInMs <span class="token operator">=</span> intervalInMs<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 时间间隔/秒</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>intervalInSecond <span class="token operator">=</span> intervalInMs <span class="token operator">/</span> <span class="token number">1000.0</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 窗格数</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>sampleCount <span class="token operator">=</span> sampleCount<span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>array <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AtomicReferenceArray</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span>sampleCount<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>上面这段代码构造了一个时间窗口（秒级）</p><p><img src="https://blog-dm.oss-cn-shanghai.aliyuncs.com/articleimage/20210815131414.png"></p><h4 id="请求累加"><a href="#请求累加" class="headerlink" title="请求累加"></a>请求累加</h4><p>StaticNode#addPassRequest</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">addPassRequest</span><span class="token punctuation">(</span><span class="token keyword">int</span> count<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 秒级别累加</span>    rollingCounterInSecond<span class="token punctuation">.</span><span class="token function">addPass</span><span class="token punctuation">(</span>count<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 分钟级累加</span>    rollingCounterInMinute<span class="token punctuation">.</span><span class="token function">addPass</span><span class="token punctuation">(</span>count<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">addPass</span><span class="token punctuation">(</span><span class="token keyword">int</span> count<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 定位当前窗口（时间窗口核心代码）</span>    WindowWrap<span class="token operator">&lt;</span>MetricBucket<span class="token operator">></span> wrap <span class="token operator">=</span> data<span class="token punctuation">.</span><span class="token function">currentWindow</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 对当前窗口的请求次数进行累加</span>    wrap<span class="token punctuation">.</span><span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addPass</span><span class="token punctuation">(</span>count<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h4 id="LeapArray-currentWindow"><a href="#LeapArray-currentWindow" class="headerlink" title="LeapArray#currentWindow"></a>LeapArray#currentWindow</h4><p>获取当前时间窗格（<strong>注：这里以秒级时间窗格数组做理解</strong>）</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> WindowWrap<span class="token operator">&lt;</span>T<span class="token operator">></span> <span class="token function">currentWindow</span><span class="token punctuation">(</span><span class="token keyword">long</span> timeMillis<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>timeMillis <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> null<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 计算这次请求应该落到哪个时间窗格</span>    <span class="token comment" spellcheck="true">// 具体逻辑：首先当前时间除以上诉构造的每个窗格所占时间</span>    <span class="token comment" spellcheck="true">// 对结果进行对窗格数组长度进行取模运算</span>    <span class="token keyword">int</span> idx <span class="token operator">=</span> <span class="token function">calculateTimeIdx</span><span class="token punctuation">(</span>timeMillis<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// Calculate current bucket start time.</span>    <span class="token comment" spellcheck="true">// 由于窗口开始时间是一直在变得，因为数组长度就是2，以秒级来说的话，就2个格子，每个格子就500ms,就是0~500~1000那么运行到1s以后他就会重新定义格子500~1000~1500，所以这里会计算他的开始时间</span>    <span class="token comment" spellcheck="true">// 计算逻辑，当前时间-当前时间%每个窗格所占时间</span>    <span class="token comment" spellcheck="true">// 假设运行到1200,1200-1200%500=1000，开始时间为1000</span>    <span class="token keyword">long</span> windowStart <span class="token operator">=</span> <span class="token function">calculateWindowStart</span><span class="token punctuation">(</span>timeMillis<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/*     * Get bucket item at given time from the array.     *     * (1) Bucket is absent, then just create a new bucket and CAS update to circular array.     * (2) Bucket is up-to-date, then just return the bucket.     * (3) Bucket is deprecated, then reset current bucket and clean all deprecated buckets.     */</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 根据应落得索引位置获取时间窗格</span>        WindowWrap<span class="token operator">&lt;</span>T<span class="token operator">></span> old <span class="token operator">=</span> array<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>idx<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 时间窗格为空，表示第一次进来</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>old <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">/*             *     B0       B1      B2    NULL      B4             * ||_______|_______|_______|_______|_______||___             * 200     400     600     800     1000    1200  timestamp             *                             ^             *                          time=888             *            bucket is empty, so create new and update             *             * If the old bucket is absent, then we create a new bucket at {@code windowStart},             * then try to update circular array via a CAS operation. Only one thread can             * succeed to update, while other threads yield its time slice.             */</span>            <span class="token comment" spellcheck="true">// 构造空的窗格</span>            WindowWrap<span class="token operator">&lt;</span>T<span class="token operator">></span> window <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">WindowWrap</span><span class="token operator">&lt;</span>T<span class="token operator">></span><span class="token punctuation">(</span>windowLengthInMs<span class="token punctuation">,</span> windowStart<span class="token punctuation">,</span> <span class="token function">newEmptyBucket</span><span class="token punctuation">(</span>timeMillis<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>               <span class="token comment" spellcheck="true">// CAS 防并发</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>array<span class="token punctuation">.</span><span class="token function">compareAndSet</span><span class="token punctuation">(</span>idx<span class="token punctuation">,</span> null<span class="token punctuation">,</span> window<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// Successfully updated, return the created bucket.</span>                <span class="token comment" spellcheck="true">// 将空窗格返回</span>                <span class="token keyword">return</span> window<span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// Contention failed, the thread will yield its time slice to wait for bucket available.</span>                Thread<span class="token punctuation">.</span><span class="token function">yield</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 上面计算的当前时间的开始时间如果和我们idx取得格子的开始时间一样，就用老格子进行统计计算</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>windowStart <span class="token operator">==</span> old<span class="token punctuation">.</span><span class="token function">windowStart</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">/*             *     B0       B1      B2     B3      B4             * ||_______|_______|_______|_______|_______||___             * 200     400     600     800     1000    1200  timestamp             *                             ^             *                          time=888             *            startTime of Bucket 3: 800, so it's up-to-date             *             * If current {@code windowStart} is equal to the start timestamp of old bucket,             * that means the time is within the bucket, so directly return the bucket.             */</span>            <span class="token keyword">return</span> old<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 上面计算的当前时间的开始时间如果大于我们idx取得格子的开始时间，证明了，我们已经跨格子了，这时候我们应该滑动窗口</span>        <span class="token comment" spellcheck="true">// 重置时间窗格开始时间</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>windowStart <span class="token operator">></span> old<span class="token punctuation">.</span><span class="token function">windowStart</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">/*             *   (old)             *             B0       B1      B2    NULL      B4             * |_______||_______|_______|_______|_______|_______||___             * ...    1200     1400    1600    1800    2000    2200  timestamp             *                              ^             *                           time=1676             *          startTime of Bucket 2: 400, deprecated, should be reset             *             * If the start timestamp of old bucket is behind provided time, that means             * the bucket is deprecated. We have to reset the bucket to current {@code windowStart}.             * Note that the reset and clean-up operations are hard to be atomic,             * so we need a update lock to guarantee the correctness of bucket update.             *             * The update lock is conditional (tiny scope) and will take effect only when             * bucket is deprecated, so in most cases it won't lead to performance loss.             */</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>updateLock<span class="token punctuation">.</span><span class="token function">tryLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">try</span> <span class="token punctuation">{</span>                    <span class="token comment" spellcheck="true">// 重置格子开始时间</span>                    <span class="token comment" spellcheck="true">// Successfully get the update lock, now we reset the bucket.</span>                    <span class="token keyword">return</span> <span class="token function">resetWindowTo</span><span class="token punctuation">(</span>old<span class="token punctuation">,</span> windowStart<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>                    updateLock<span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// Contention failed, the thread will yield its time slice to wait for bucket available.</span>                Thread<span class="token punctuation">.</span><span class="token function">yield</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 这种情况基本不存在，出现的情况可能是时钟回拨问题，这里简单处理为了提高系统稳定性</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>windowStart <span class="token operator">&lt;</span> old<span class="token punctuation">.</span><span class="token function">windowStart</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// Should not go through here, as the provided time is already behind.</span>            <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">WindowWrap</span><span class="token operator">&lt;</span>T<span class="token operator">></span><span class="token punctuation">(</span>windowLengthInMs<span class="token punctuation">,</span> windowStart<span class="token punctuation">,</span> <span class="token function">newEmptyBucket</span><span class="token punctuation">(</span>timeMillis<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="指标计数"><a href="#指标计数" class="headerlink" title="指标计数"></a>指标计数</h4><p>ArrayMetric中有很多方法比如addPass，addRT在其中都会调用add(MetricEvent.xxx, n);方法</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 很多类似方法</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">addPass</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">add</span><span class="token punctuation">(</span>MetricEvent<span class="token punctuation">.</span>PASS<span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 通过枚举index,来统计请求，放到counters数组中</span><span class="token comment" spellcheck="true">// counters[1] === MetricEvent.PASS  等等</span><span class="token keyword">public</span> MetricBucket <span class="token function">add</span><span class="token punctuation">(</span>MetricEvent event<span class="token punctuation">,</span> <span class="token keyword">long</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>    counters<span class="token punctuation">[</span>event<span class="token punctuation">.</span><span class="token function">ordinal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">;</span><span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 各种指标</span><span class="token keyword">public</span> <span class="token keyword">enum</span> MetricEvent <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * Normal pass.     */</span>    PASS<span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">/**     * Normal block.     */</span>    BLOCK<span class="token punctuation">,</span>    EXCEPTION<span class="token punctuation">,</span>    SUCCESS<span class="token punctuation">,</span>    RT<span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">/**     * Passed in future quota (pre-occupied, since 1.5.0).     */</span>    OCCUPIED_PASS<span class="token punctuation">}</span></code></pre><h2 id="漏桶算法"><a href="#漏桶算法" class="headerlink" title="漏桶算法"></a>漏桶算法</h2><p>漏桶算法顾名思义就是一个桶，桶下面有个洞，水滴从洞里面往下滴。在这里面桶就是我们可容纳请求数。而水便是我们的请求，洞就是我们每次可通过的请求数。从这里我们也可以看出漏桶算法就是保证请求匀速通过。它被应用于Sentinel<code>排队等待流控效果</code></p><p><img src="https://blog-dm.oss-cn-shanghai.aliyuncs.com/articleimage/20210813161602.png"></p><h3 id="Demo-2"><a href="#Demo-2" class="headerlink" title="Demo"></a>Demo</h3><pre class=" language-java"><code class="language-java"> <span class="token comment" spellcheck="true">/**     * 当前时间     */</span>    <span class="token keyword">public</span> <span class="token keyword">long</span> timeStamp <span class="token operator">=</span> System<span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 桶的容量     */</span>    <span class="token keyword">public</span> <span class="token keyword">long</span> capacity<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 水漏出的速度(每秒系统能处理的请求数)     */</span>    <span class="token keyword">public</span> <span class="token keyword">long</span> rate<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 当前水量(当前累积请求数)     */</span>    <span class="token keyword">public</span> <span class="token keyword">long</span> water<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">doCheck</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">long</span> now <span class="token operator">=</span> System<span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// ((now - timeStamp) / 1000) * rate 通过时间和速率计算出我们应该放过的请求，也就是漏的水</span>        water <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> water <span class="token operator">-</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>now <span class="token operator">-</span> timeStamp<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">1000</span><span class="token punctuation">)</span> <span class="token operator">*</span> rate<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 先执行漏水， 计算剩余水量</span>        timeStamp <span class="token operator">=</span> now<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>water <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> capacity<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 尝试加水,并且水还未满</span>            water <span class="token operator">+=</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 水满，拒绝加水</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span></code></pre><h3 id="Sentinel源码-1"><a href="#Sentinel源码-1" class="headerlink" title="Sentinel源码"></a>Sentinel源码</h3><p>排队等待核心逻辑</p><p>RateLimiterController#canPass</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">canPass</span><span class="token punctuation">(</span>Node node<span class="token punctuation">,</span> <span class="token keyword">int</span> acquireCount<span class="token punctuation">,</span> <span class="token keyword">boolean</span> prioritized<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// Pass when acquire count is less or equal than 0.</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>acquireCount <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// Reject when count is less or equal than 0.</span>    <span class="token comment" spellcheck="true">// Otherwise,the costTime will be max of long and waitTime will overflow in some cases.</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>count <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 计算当前时间</span>    <span class="token keyword">long</span> currentTime <span class="token operator">=</span> TimeUtil<span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// Calculate the interval between every two requests.</span>    <span class="token comment" spellcheck="true">// 每2个请求之间间隔时间</span>    <span class="token comment" spellcheck="true">// acquireCount 请求数一般为1  count qps阈值 自己设定（每秒多少请求）假设是10</span>    <span class="token comment" spellcheck="true">// 1/10*1000=100ms 每100ms放过1个请求，qps=10</span>    <span class="token keyword">long</span> costTime <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">round</span><span class="token punctuation">(</span><span class="token number">1.0</span> <span class="token operator">*</span> <span class="token punctuation">(</span>acquireCount<span class="token punctuation">)</span> <span class="token operator">/</span> count <span class="token operator">*</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// Expected pass time of this request.</span>    <span class="token comment" spellcheck="true">// latestPassedTime:上一次请求调用时间</span>    <span class="token comment" spellcheck="true">// expectedTime:期望请求时间，上次调用时间假请求间隔时间</span>    <span class="token keyword">long</span> expectedTime <span class="token operator">=</span> costTime <span class="token operator">+</span> latestPassedTime<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 当前时间大于期望时间，表示大于请求间隔时间，可以调用，重新辅助latestPassedTime(上一次请求调用时间)</span>    <span class="token comment" spellcheck="true">// TODO issue#1615</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>expectedTime <span class="token operator">&lt;=</span> currentTime<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// Contention may exist here, but it's okay.</span>        latestPassedTime<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>currentTime<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// Calculate the time to wait.</span>        <span class="token comment" spellcheck="true">// 我们需要等待时间</span>        <span class="token keyword">long</span> waitTime <span class="token operator">=</span> costTime <span class="token operator">+</span> latestPassedTime<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> TimeUtil<span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// maxQueueingTimeMs:超时时间（可配置）</span>        <span class="token comment" spellcheck="true">// 等待时间超过超时时间，放弃请求直接返回限流</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>waitTime <span class="token operator">></span> maxQueueingTimeMs<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 请求间隔时间加上上一次请求调用时间（其实就是期望时间）</span>            <span class="token keyword">long</span> oldTime <span class="token operator">=</span> latestPassedTime<span class="token punctuation">.</span><span class="token function">addAndGet</span><span class="token punctuation">(</span>costTime<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// 计算等待时间</span>                waitTime <span class="token operator">=</span> oldTime <span class="token operator">-</span> TimeUtil<span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">// 等待时间超过超时时间，放弃请求直接返回限流</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>waitTime <span class="token operator">></span> maxQueueingTimeMs<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token comment" spellcheck="true">// 上面对latestPassedTime进行过加法运算，这里还原数据</span>                    latestPassedTime<span class="token punctuation">.</span><span class="token function">addAndGet</span><span class="token punctuation">(</span><span class="token operator">-</span>costTime<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token comment" spellcheck="true">// in race condition waitTime may &lt;= 0</span>                <span class="token comment" spellcheck="true">// 睡眠等待时间</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>waitTime <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    Thread<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span>waitTime<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h2 id="令牌桶算法"><a href="#令牌桶算法" class="headerlink" title="令牌桶算法"></a>令牌桶算法</h2><p>令牌通算法在Sentginel的Warm up流控效果中使用，简称预热模式。大致意思是在一定时间内达到当前Qps。</p><p>令牌桶算法简介：</p><p>首先会以一个固定速率(可通过控制速率来控制请求速度)往token bucket里面放令牌，而当我们请求过来的时候会先从bucket里面去取令牌，取到了令牌就可以请求，取不到就拒绝请求。</p><img src="https://blog-dm.oss-cn-shanghai.aliyuncs.com/articleimage/20210815155116.png" style="zoom:50%;"><h3 id="Demo-3"><a href="#Demo-3" class="headerlink" title="Demo"></a>Demo</h3><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * 令牌桶限流算法 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TokenBucket</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//当前时间</span>    <span class="token keyword">public</span> <span class="token keyword">long</span> timeStamp <span class="token operator">=</span> System<span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//桶的容量</span>    <span class="token keyword">public</span> <span class="token keyword">long</span> capacity<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//令牌放入速度</span>    <span class="token keyword">public</span> <span class="token keyword">long</span> rate<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//当前令牌数</span>    <span class="token keyword">public</span> <span class="token keyword">long</span> tokens<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">grant</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">long</span> now <span class="token operator">=</span> System<span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 先添加令牌</span>        tokens <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span>capacity<span class="token punctuation">,</span> tokens <span class="token operator">+</span> <span class="token punctuation">(</span>now <span class="token operator">-</span> timeStamp<span class="token punctuation">)</span> <span class="token operator">*</span> rate<span class="token punctuation">)</span><span class="token punctuation">;</span>        timeStamp <span class="token operator">=</span> now<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>tokens <span class="token operator">&lt;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 若不到1个令牌,则拒绝 </span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 还有令牌，领取令牌</span>            tokens <span class="token operator">-=</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="Sentinel源码-2"><a href="#Sentinel源码-2" class="headerlink" title="Sentinel源码"></a>Sentinel源码</h3><p>Sentinel 会动态控制令牌放入速率。使请求通过速度更加平滑</p><p>WarmUpController#canPass</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">canPass</span><span class="token punctuation">(</span>Node node<span class="token punctuation">,</span> <span class="token keyword">int</span> acquireCount<span class="token punctuation">,</span> <span class="token keyword">boolean</span> prioritized<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">long</span> passQps <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">long</span><span class="token punctuation">)</span> node<span class="token punctuation">.</span><span class="token function">passQps</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">long</span> previousQps <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">long</span><span class="token punctuation">)</span> node<span class="token punctuation">.</span><span class="token function">previousPassQps</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">syncToken</span><span class="token punctuation">(</span>previousQps<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 开始计算它的斜率</span>    <span class="token comment" spellcheck="true">// 如果进入了警戒线，开始调整他的qps</span>    <span class="token keyword">long</span> restToken <span class="token operator">=</span> storedTokens<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>restToken <span class="token operator">>=</span> warningToken<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">long</span> aboveToken <span class="token operator">=</span> restToken <span class="token operator">-</span> warningToken<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 消耗的速度要比warning快，但是要比慢</span>        <span class="token comment" spellcheck="true">// current interval = restToken*slope+1/count</span>        <span class="token keyword">double</span> warningQps <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">nextUp</span><span class="token punctuation">(</span><span class="token number">1.0</span> <span class="token operator">/</span> <span class="token punctuation">(</span>aboveToken <span class="token operator">*</span> slope <span class="token operator">+</span> <span class="token number">1.0</span> <span class="token operator">/</span> count<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>passQps <span class="token operator">+</span> acquireCount <span class="token operator">&lt;=</span> warningQps<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>passQps <span class="token operator">+</span> acquireCount <span class="token operator">&lt;=</span> count<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">syncToken</span><span class="token punctuation">(</span><span class="token keyword">long</span> passQps<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">long</span> currentTime <span class="token operator">=</span> TimeUtil<span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    currentTime <span class="token operator">=</span> currentTime <span class="token operator">-</span> currentTime <span class="token operator">%</span> <span class="token number">1000</span><span class="token punctuation">;</span>    <span class="token keyword">long</span> oldLastFillTime <span class="token operator">=</span> lastFilledTime<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>currentTime <span class="token operator">&lt;=</span> oldLastFillTime<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">long</span> oldValue <span class="token operator">=</span> storedTokens<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">long</span> newValue <span class="token operator">=</span> <span class="token function">coolDownTokens</span><span class="token punctuation">(</span>currentTime<span class="token punctuation">,</span> passQps<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>storedTokens<span class="token punctuation">.</span><span class="token function">compareAndSet</span><span class="token punctuation">(</span>oldValue<span class="token punctuation">,</span> newValue<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">long</span> currentValue <span class="token operator">=</span> storedTokens<span class="token punctuation">.</span><span class="token function">addAndGet</span><span class="token punctuation">(</span><span class="token number">0</span> <span class="token operator">-</span> passQps<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>currentValue <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            storedTokens<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>0L<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        lastFilledTime<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>currentTime<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">private</span> <span class="token keyword">long</span> <span class="token function">coolDownTokens</span><span class="token punctuation">(</span><span class="token keyword">long</span> currentTime<span class="token punctuation">,</span> <span class="token keyword">long</span> passQps<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">long</span> oldValue <span class="token operator">=</span> storedTokens<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">long</span> newValue <span class="token operator">=</span> oldValue<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 添加令牌的判断前提条件:</span>    <span class="token comment" spellcheck="true">// 当令牌的消耗程度远远低于警戒线的时候</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>oldValue <span class="token operator">&lt;</span> warningToken<span class="token punctuation">)</span> <span class="token punctuation">{</span>        newValue <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">long</span><span class="token punctuation">)</span><span class="token punctuation">(</span>oldValue <span class="token operator">+</span> <span class="token punctuation">(</span>currentTime <span class="token operator">-</span> lastFilledTime<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">*</span> count <span class="token operator">/</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>oldValue <span class="token operator">></span> warningToken<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>passQps <span class="token operator">&lt;</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span>count <span class="token operator">/</span> coldFactor<span class="token punctuation">)</span> <span class="token punctuation">{</span>            newValue <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">long</span><span class="token punctuation">)</span><span class="token punctuation">(</span>oldValue <span class="token operator">+</span> <span class="token punctuation">(</span>currentTime <span class="token operator">-</span> lastFilledTime<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">*</span> count <span class="token operator">/</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> Math<span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span>newValue<span class="token punctuation">,</span> maxToken<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 源码 </tag>
            
            <tag> Sentinel </tag>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Dubbo服务调用源码</title>
      <link href="/2021/08/12/dubbo-fu-wu-diao-yong-yuan-ma-jie-xi/"/>
      <url>/2021/08/12/dubbo-fu-wu-diao-yong-yuan-ma-jie-xi/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>前面对于服务导出和服务引入有了比较详细的解释，这里主要是对服务的整个调用过程进行解析。首先我们看一下Dubbo在整个调用过程情况。<a href="https://dubbo.apache.org/zh/docs/v2.7/dev/source/service-invoking-process/">官方源码解析</a>;</p><ol><li>应用启动时，服务消费者首先会从注册中心拉取服务存到服务目录。</li><li>调用的时候会先从服务目录吧当前集群所有DubboInvokers全部撸出来。</li><li>根据路由配置规则从DubboInvokers中筛选得出满足条件的DubboInvokers</li><li>根据负载均衡从满足条件的DubboInvokers中得到一个DubboInvokers</li><li>执行消费者filter链</li><li>通过Exchange封装请求对象</li><li>对请求对象进行编码通过Netty（Dubbo默认网络框架，也可以是别的）发送数据</li><li>服务提供方接受到请求，进行解码</li><li>将这个请求对象封装成runable对象，由Dispatcher决定这个请求由IO线程或业务线程池执行</li><li>执行invoker链</li><li>执行提供者filter链</li><li>invoker反射调用方法（实现类）</li><li>结果进行编码并返回</li><li>消费者对响应数据进行解码，并返回</li></ol><h2 id="服务消费方发送请求"><a href="#服务消费方发送请求" class="headerlink" title="服务消费方发送请求"></a>服务消费方发送请求</h2><p>大家都知道我们DubboReference下的是一个代理类，在这个代理类里面会调用<code>InvokerInvocationHandler#invoke</code>方法(从官方对代理类反编译得知)。</p><p>在这个方法里面比较核心的主要是一句代码<code>invoker.invoke(rpcInvocation).recreate()</code></p><p>这句代码里面有2点</p><ul><li>invoke:开始调用逻辑</li><li>recreate:会调用AppResponse中的recreate方法，如果AppResponse对象中存在exception信息，此方法中会throw</li></ul><p>之后通过invoker.invoke开始调用一系列的Invoker,这里我们主要看一下MockClusterInvoker、FailoverClusterInvoker、DubboInvoker </p><h3 id="MockClusterInvoker"><a href="#MockClusterInvoker" class="headerlink" title="MockClusterInvoker"></a>MockClusterInvoker</h3><p>这里逻辑比较简单，了解mock应用基本可以很快过掉这段代码</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> Result <span class="token function">invoke</span><span class="token punctuation">(</span>Invocation invocation<span class="token punctuation">)</span> <span class="token keyword">throws</span> RpcException <span class="token punctuation">{</span>    Result result <span class="token operator">=</span> null<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// // 获取 mock 配置值</span>    String value <span class="token operator">=</span> <span class="token function">getUrl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getMethodParameter</span><span class="token punctuation">(</span>invocation<span class="token punctuation">.</span><span class="token function">getMethodName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> MOCK_KEY<span class="token punctuation">,</span> Boolean<span class="token punctuation">.</span>FALSE<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 没有mock逻辑</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>value<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">||</span> <span class="token string">"false"</span><span class="token punctuation">.</span><span class="token function">equalsIgnoreCase</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//no mock</span>        result <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>invoker<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>invocation<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 强制mock返回，不发起远程调用</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>value<span class="token punctuation">.</span><span class="token function">startsWith</span><span class="token punctuation">(</span><span class="token string">"force"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>logger<span class="token punctuation">.</span><span class="token function">isWarnEnabled</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            logger<span class="token punctuation">.</span><span class="token function">warn</span><span class="token punctuation">(</span><span class="token string">"force-mock: "</span> <span class="token operator">+</span> invocation<span class="token punctuation">.</span><span class="token function">getMethodName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" force-mock enabled , url : "</span> <span class="token operator">+</span> <span class="token function">getUrl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//force:direct mock</span>        result <span class="token operator">=</span> <span class="token function">doMockInvoke</span><span class="token punctuation">(</span>invocation<span class="token punctuation">,</span> null<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 消费方调用失败执行 mock 逻辑，不抛出异常</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//fail-mock</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            result <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>invoker<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>invocation<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//fix:#4585</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>result<span class="token punctuation">.</span><span class="token function">getException</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> null <span class="token operator">&amp;&amp;</span> result<span class="token punctuation">.</span><span class="token function">getException</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">instanceof</span> <span class="token class-name">RpcException</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                RpcException rpcException<span class="token operator">=</span> <span class="token punctuation">(</span>RpcException<span class="token punctuation">)</span>result<span class="token punctuation">.</span><span class="token function">getException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>rpcException<span class="token punctuation">.</span><span class="token function">isBiz</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                    <span class="token keyword">throw</span>  rpcException<span class="token punctuation">;</span>                <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token punctuation">{</span>                    result <span class="token operator">=</span> <span class="token function">doMockInvoke</span><span class="token punctuation">(</span>invocation<span class="token punctuation">,</span> rpcException<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">RpcException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>e<span class="token punctuation">.</span><span class="token function">isBiz</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">throw</span> e<span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>logger<span class="token punctuation">.</span><span class="token function">isWarnEnabled</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                logger<span class="token punctuation">.</span><span class="token function">warn</span><span class="token punctuation">(</span><span class="token string">"fail-mock: "</span> <span class="token operator">+</span> invocation<span class="token punctuation">.</span><span class="token function">getMethodName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" fail-mock enabled , url : "</span> <span class="token operator">+</span> <span class="token function">getUrl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            result <span class="token operator">=</span> <span class="token function">doMockInvoke</span><span class="token punctuation">(</span>invocation<span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> result<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h3 id="FailoverClusterInvoker"><a href="#FailoverClusterInvoker" class="headerlink" title="FailoverClusterInvoker"></a>FailoverClusterInvoker</h3><p>这个Invoker主要负责的是集群容错，包括负载均衡，异常重试</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> Result <span class="token function">doInvoke</span><span class="token punctuation">(</span>Invocation invocation<span class="token punctuation">,</span> <span class="token keyword">final</span> List<span class="token operator">&lt;</span>Invoker<span class="token operator">&lt;</span>T<span class="token operator">>></span> invokers<span class="token punctuation">,</span> LoadBalance loadbalance<span class="token punctuation">)</span> <span class="token keyword">throws</span> RpcException <span class="token punctuation">{</span>    List<span class="token operator">&lt;</span>Invoker<span class="token operator">&lt;</span>T<span class="token operator">>></span> copyInvokers <span class="token operator">=</span> invokers<span class="token punctuation">;</span>    <span class="token function">checkInvokers</span><span class="token punctuation">(</span>copyInvokers<span class="token punctuation">,</span> invocation<span class="token punctuation">)</span><span class="token punctuation">;</span>    String methodName <span class="token operator">=</span> RpcUtils<span class="token punctuation">.</span><span class="token function">getMethodName</span><span class="token punctuation">(</span>invocation<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 重试次数</span>    <span class="token keyword">int</span> len <span class="token operator">=</span> <span class="token function">getUrl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getMethodParameter</span><span class="token punctuation">(</span>methodName<span class="token punctuation">,</span> RETRIES_KEY<span class="token punctuation">,</span> DEFAULT_RETRIES<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>len <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        len <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// retry loop.</span>    RpcException le <span class="token operator">=</span> null<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// last exception.</span>    <span class="token comment" spellcheck="true">// 存储已经调用过的Invoker</span>    List<span class="token operator">&lt;</span>Invoker<span class="token operator">&lt;</span>T<span class="token operator">>></span> invoked <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span>Invoker<span class="token operator">&lt;</span>T<span class="token operator">>></span><span class="token punctuation">(</span>copyInvokers<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// invoked invokers.</span>    Set<span class="token operator">&lt;</span>String<span class="token operator">></span> providers <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashSet</span><span class="token operator">&lt;</span>String<span class="token operator">></span><span class="token punctuation">(</span>len<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 循环调用，循环重试次数</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> len<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//Reselect before retry to avoid a change of candidate `invokers`.</span>        <span class="token comment" spellcheck="true">//NOTE: if `invokers` changed, then `invoked` also lose accuracy.</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">checkWhetherDestroyed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            copyInvokers <span class="token operator">=</span> <span class="token function">list</span><span class="token punctuation">(</span>invocation<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// check again</span>            <span class="token function">checkInvokers</span><span class="token punctuation">(</span>copyInvokers<span class="token punctuation">,</span> invocation<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 通过负载均衡选择 Invoker</span>        Invoker<span class="token operator">&lt;</span>T<span class="token operator">></span> invoker <span class="token operator">=</span> <span class="token function">select</span><span class="token punctuation">(</span>loadbalance<span class="token punctuation">,</span> invocation<span class="token punctuation">,</span> copyInvokers<span class="token punctuation">,</span> invoked<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 添加到 invoker 到 invoked 列表中，，这个列表表示调用过的Invoker,这里存了之后可以方便我们负载均衡的时候筛选掉已经调用过的服务</span>        invoked<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>invoker<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 设置 invoked 到 RPC 上下文中</span>        RpcContext<span class="token punctuation">.</span><span class="token function">getContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setInvokers</span><span class="token punctuation">(</span><span class="token punctuation">(</span>List<span class="token punctuation">)</span> invoked<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 调用目标 Invoker 的 invoke 方法</span>            Result result <span class="token operator">=</span> invoker<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>invocation<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>le <span class="token operator">!=</span> null <span class="token operator">&amp;&amp;</span> logger<span class="token punctuation">.</span><span class="token function">isWarnEnabled</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                logger<span class="token punctuation">.</span><span class="token function">warn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">// 调用成功返回</span>            <span class="token keyword">return</span> result<span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">RpcException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 调用异常 重试</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>e<span class="token punctuation">.</span><span class="token function">isBiz</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// biz exception.</span>                <span class="token keyword">throw</span> e<span class="token punctuation">;</span>            <span class="token punctuation">}</span>            le <span class="token operator">=</span> e<span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Throwable</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            le <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RpcException</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>            providers<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>invoker<span class="token punctuation">.</span><span class="token function">getUrl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getAddress</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RpcException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h3 id="DubboInvoker"><a href="#DubboInvoker" class="headerlink" title="DubboInvoker"></a>DubboInvoker</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">protected</span> Result <span class="token function">doInvoke</span><span class="token punctuation">(</span><span class="token keyword">final</span> Invocation invocation<span class="token punctuation">)</span> <span class="token keyword">throws</span> Throwable <span class="token punctuation">{</span>    RpcInvocation inv <span class="token operator">=</span> <span class="token punctuation">(</span>RpcInvocation<span class="token punctuation">)</span> invocation<span class="token punctuation">;</span>    <span class="token keyword">final</span> String methodName <span class="token operator">=</span> RpcUtils<span class="token punctuation">.</span><span class="token function">getMethodName</span><span class="token punctuation">(</span>invocation<span class="token punctuation">)</span><span class="token punctuation">;</span>    inv<span class="token punctuation">.</span><span class="token function">setAttachment</span><span class="token punctuation">(</span>PATH_KEY<span class="token punctuation">,</span> <span class="token function">getUrl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getPath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    inv<span class="token punctuation">.</span><span class="token function">setAttachment</span><span class="token punctuation">(</span>VERSION_KEY<span class="token punctuation">,</span> version<span class="token punctuation">)</span><span class="token punctuation">;</span>    ExchangeClient currentClient<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>clients<span class="token punctuation">.</span>length <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        currentClient <span class="token operator">=</span> clients<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        currentClient <span class="token operator">=</span> clients<span class="token punctuation">[</span>index<span class="token punctuation">.</span><span class="token function">getAndIncrement</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">%</span> clients<span class="token punctuation">.</span>length<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 表示只需要调用，不需要返回结果，单向通信</span>        <span class="token keyword">boolean</span> isOneway <span class="token operator">=</span> RpcUtils<span class="token punctuation">.</span><span class="token function">isOneway</span><span class="token punctuation">(</span><span class="token function">getUrl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> invocation<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 当前方法超时时间</span>        <span class="token keyword">int</span> timeout <span class="token operator">=</span> <span class="token function">calculateTimeout</span><span class="token punctuation">(</span>invocation<span class="token punctuation">,</span> methodName<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>isOneway<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">boolean</span> isSent <span class="token operator">=</span> <span class="token function">getUrl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getMethodParameter</span><span class="token punctuation">(</span>methodName<span class="token punctuation">,</span> Constants<span class="token punctuation">.</span>SENT_KEY<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            currentClient<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>inv<span class="token punctuation">,</span> isSent<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> AsyncRpcResult<span class="token punctuation">.</span><span class="token function">newDefaultAsyncResult</span><span class="token punctuation">(</span>invocation<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            ExecutorService executor <span class="token operator">=</span> <span class="token function">getCallbackExecutor</span><span class="token punctuation">(</span><span class="token function">getUrl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> inv<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 异步去请求，得到一个CompletableFuture</span>            <span class="token comment" spellcheck="true">// 这里会通过ReferenceCountExchangeClient发送请求</span>            CompletableFuture<span class="token operator">&lt;</span>AppResponse<span class="token operator">></span> appResponseFuture <span class="token operator">=</span>                    currentClient<span class="token punctuation">.</span><span class="token function">request</span><span class="token punctuation">(</span>inv<span class="token punctuation">,</span> timeout<span class="token punctuation">,</span> executor<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">thenApply</span><span class="token punctuation">(</span>obj <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">(</span>AppResponse<span class="token punctuation">)</span> obj<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// save for 2.6.x compatibility, for example, TraceFilter in Zipkin uses com.alibaba.xxx.FutureAdapter</span>            FutureContext<span class="token punctuation">.</span><span class="token function">getContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setCompatibleFuture</span><span class="token punctuation">(</span>appResponseFuture<span class="token punctuation">)</span><span class="token punctuation">;</span>            AsyncRpcResult result <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AsyncRpcResult</span><span class="token punctuation">(</span>appResponseFuture<span class="token punctuation">,</span> inv<span class="token punctuation">)</span><span class="token punctuation">;</span>            result<span class="token punctuation">.</span><span class="token function">setExecutor</span><span class="token punctuation">(</span>executor<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> result<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">TimeoutException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RpcException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">RemotingException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RpcException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>这里会通过ReferenceCountExchangeClient#request继续往后调用，直到调用到HeaderExchangeChannel#request会发送请求直到调用到NettyChannel#send逻辑</p><p>下面是调用逻辑图</p><p><img src="https://blog-dm.oss-cn-shanghai.aliyuncs.com/articleimage/20210812163038.png"></p><h4 id="NettyChannel-send"><a href="#NettyChannel-send" class="headerlink" title="NettyChannel#send"></a>NettyChannel#send</h4><p>调用NioSocketChannel的writeAndFlush发送数据，然后判断send如果是true，那么则阻塞url中指定的timeout时间，因为如果sent是false，在HeaderExchangeChannel中会阻塞timeout时间</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">send</span><span class="token punctuation">(</span>Object message<span class="token punctuation">,</span> <span class="token keyword">boolean</span> sent<span class="token punctuation">)</span> <span class="token keyword">throws</span> RemotingException <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// whether the channel is closed</span>    <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>message<span class="token punctuation">,</span> sent<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">boolean</span> success <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> timeout <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>        ChannelFuture future <span class="token operator">=</span> channel<span class="token punctuation">.</span><span class="token function">writeAndFlush</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>sent<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// wait timeout ms</span>            timeout <span class="token operator">=</span> <span class="token function">getUrl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getPositiveParameter</span><span class="token punctuation">(</span>TIMEOUT_KEY<span class="token punctuation">,</span> DEFAULT_TIMEOUT<span class="token punctuation">)</span><span class="token punctuation">;</span>            success <span class="token operator">=</span> future<span class="token punctuation">.</span><span class="token function">await</span><span class="token punctuation">(</span>timeout<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        Throwable cause <span class="token operator">=</span> future<span class="token punctuation">.</span><span class="token function">cause</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>cause <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">throw</span> cause<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Throwable</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">removeChannelIfDisconnected</span><span class="token punctuation">(</span>channel<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RemotingException</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token string">"Failed to send message "</span> <span class="token operator">+</span> PayloadDropper<span class="token punctuation">.</span><span class="token function">getRequestWithoutData</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" to "</span> <span class="token operator">+</span> <span class="token function">getRemoteAddress</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">", cause: "</span> <span class="token operator">+</span> e<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>success<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RemotingException</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token string">"Failed to send message "</span> <span class="token operator">+</span> PayloadDropper<span class="token punctuation">.</span><span class="token function">getRequestWithoutData</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" to "</span> <span class="token operator">+</span> <span class="token function">getRemoteAddress</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                                    <span class="token operator">+</span> <span class="token string">"in timeout("</span> <span class="token operator">+</span> timeout <span class="token operator">+</span> <span class="token string">"ms) limit"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="服务提供方接受请求"><a href="#服务提供方接受请求" class="headerlink" title="服务提供方接受请求"></a>服务提供方接受请求</h2><p>服务消费者通过Netty发送请求给提供方，提供方会通过Netty接收请求。这这里的逻辑在NettyServer中体现，这里构造了netty（服务导出的时候构建）。</p><p>所以从netty里面的pipeline大致可以看出他的编解码逻辑和handler是谁</p><p>编解码逻辑在这里就不细说了，具体代码细节可以看官网</p><pre class=" language-java"><code class="language-java"><span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doOpen</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> Throwable <span class="token punctuation">{</span>    bootstrap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ServerBootstrap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    bossGroup <span class="token operator">=</span> NettyEventLoopFactory<span class="token punctuation">.</span><span class="token function">eventLoopGroup</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">"NettyServerBoss"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    workerGroup <span class="token operator">=</span> NettyEventLoopFactory<span class="token punctuation">.</span><span class="token function">eventLoopGroup</span><span class="token punctuation">(</span>            <span class="token function">getUrl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getPositiveParameter</span><span class="token punctuation">(</span>IO_THREADS_KEY<span class="token punctuation">,</span> Constants<span class="token punctuation">.</span>DEFAULT_IO_THREADS<span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token string">"NettyServerWorker"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">final</span> NettyServerHandler nettyServerHandler <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">NettyServerHandler</span><span class="token punctuation">(</span><span class="token function">getUrl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    channels <span class="token operator">=</span> nettyServerHandler<span class="token punctuation">.</span><span class="token function">getChannels</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    bootstrap<span class="token punctuation">.</span><span class="token function">group</span><span class="token punctuation">(</span>bossGroup<span class="token punctuation">,</span> workerGroup<span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">channel</span><span class="token punctuation">(</span>NettyEventLoopFactory<span class="token punctuation">.</span><span class="token function">serverSocketChannelClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">option</span><span class="token punctuation">(</span>ChannelOption<span class="token punctuation">.</span>SO_REUSEADDR<span class="token punctuation">,</span> Boolean<span class="token punctuation">.</span>TRUE<span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">childOption</span><span class="token punctuation">(</span>ChannelOption<span class="token punctuation">.</span>TCP_NODELAY<span class="token punctuation">,</span> Boolean<span class="token punctuation">.</span>TRUE<span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">childOption</span><span class="token punctuation">(</span>ChannelOption<span class="token punctuation">.</span>ALLOCATOR<span class="token punctuation">,</span> PooledByteBufAllocator<span class="token punctuation">.</span>DEFAULT<span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">childHandler</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ChannelInitializer</span><span class="token operator">&lt;</span>SocketChannel<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token annotation punctuation">@Override</span>                <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">initChannel</span><span class="token punctuation">(</span>SocketChannel ch<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>                    <span class="token comment" spellcheck="true">// FIXME: should we use getTimeout()?</span>                    <span class="token keyword">int</span> idleTimeout <span class="token operator">=</span> UrlUtils<span class="token punctuation">.</span><span class="token function">getIdleTimeout</span><span class="token punctuation">(</span><span class="token function">getUrl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    NettyCodecAdapter adapter <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">NettyCodecAdapter</span><span class="token punctuation">(</span><span class="token function">getCodec</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">getUrl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> NettyServer<span class="token punctuation">.</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">getUrl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getParameter</span><span class="token punctuation">(</span>SSL_ENABLED_KEY<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                        ch<span class="token punctuation">.</span><span class="token function">pipeline</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addLast</span><span class="token punctuation">(</span><span class="token string">"negotiation"</span><span class="token punctuation">,</span>                                SslHandlerInitializer<span class="token punctuation">.</span><span class="token function">sslServerHandler</span><span class="token punctuation">(</span><span class="token function">getUrl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> nettyServerHandler<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                    ch<span class="token punctuation">.</span><span class="token function">pipeline</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                            <span class="token punctuation">.</span><span class="token function">addLast</span><span class="token punctuation">(</span><span class="token string">"decoder"</span><span class="token punctuation">,</span> adapter<span class="token punctuation">.</span><span class="token function">getDecoder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                            <span class="token punctuation">.</span><span class="token function">addLast</span><span class="token punctuation">(</span><span class="token string">"encoder"</span><span class="token punctuation">,</span> adapter<span class="token punctuation">.</span><span class="token function">getEncoder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                            <span class="token punctuation">.</span><span class="token function">addLast</span><span class="token punctuation">(</span><span class="token string">"server-idle-handler"</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">IdleStateHandler</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> idleTimeout<span class="token punctuation">,</span> MILLISECONDS<span class="token punctuation">)</span><span class="token punctuation">)</span>                            <span class="token punctuation">.</span><span class="token function">addLast</span><span class="token punctuation">(</span><span class="token string">"handler"</span><span class="token punctuation">,</span> nettyServerHandler<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// bind</span>    ChannelFuture channelFuture <span class="token operator">=</span> bootstrap<span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token function">getBindAddress</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    channelFuture<span class="token punctuation">.</span><span class="token function">syncUninterruptibly</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    channel <span class="token operator">=</span> channelFuture<span class="token punctuation">.</span><span class="token function">channel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>从这段代码可以很明显的发现处理请求的时NettyServerHandler</p><p>NettyServerHandler接受到请求会交由channelRead方法处理</p><h3 id="NettyServerHandler"><a href="#NettyServerHandler" class="headerlink" title="NettyServerHandler"></a>NettyServerHandler</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">channelRead</span><span class="token punctuation">(</span>ChannelHandlerContext ctx<span class="token punctuation">,</span> Object msg<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>    NettyChannel channel <span class="token operator">=</span> NettyChannel<span class="token punctuation">.</span><span class="token function">getOrAddChannel</span><span class="token punctuation">(</span>ctx<span class="token punctuation">.</span><span class="token function">channel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> url<span class="token punctuation">,</span> handler<span class="token punctuation">)</span><span class="token punctuation">;</span>    handler<span class="token punctuation">.</span><span class="token function">received</span><span class="token punctuation">(</span>channel<span class="token punctuation">,</span> msg<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h4 id="MultiMessageHandler"><a href="#MultiMessageHandler" class="headerlink" title="MultiMessageHandler"></a>MultiMessageHandler</h4><p>判断接收到的数据是否是MultiMessage，如果是则获取MultiMessage中的单个Message</p><h4 id="HeartbeatHandler"><a href="#HeartbeatHandler" class="headerlink" title="HeartbeatHandler"></a>HeartbeatHandler</h4><p>判断是不是心跳消息，如果是直接返回</p><h4 id="AllChannelHandler"><a href="#AllChannelHandler" class="headerlink" title="AllChannelHandler"></a>AllChannelHandler</h4><p><img src="https://blog-dm.oss-cn-shanghai.aliyuncs.com/articleimage/20210812170014.png"></p><p>把接收到的Message封装为一个ChannelEventRunnable对象，扔给线程池进行处理</p><p>ChannelEventRunnable中会调用DecodeHandler</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>state <span class="token operator">==</span> ChannelState<span class="token punctuation">.</span>RECEIVED<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            handler<span class="token punctuation">.</span><span class="token function">received</span><span class="token punctuation">(</span>channel<span class="token punctuation">,</span> message<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            logger<span class="token punctuation">.</span><span class="token function">warn</span><span class="token punctuation">(</span><span class="token string">"ChannelEventRunnable handle "</span> <span class="token operator">+</span> state <span class="token operator">+</span> <span class="token string">" operation error, channel is "</span> <span class="token operator">+</span> channel                    <span class="token operator">+</span> <span class="token string">", message is "</span> <span class="token operator">+</span> message<span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token keyword">switch</span> <span class="token punctuation">(</span>state<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">case</span> CONNECTED<span class="token operator">:</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                handler<span class="token punctuation">.</span><span class="token function">connected</span><span class="token punctuation">(</span>channel<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                logger<span class="token punctuation">.</span><span class="token function">warn</span><span class="token punctuation">(</span><span class="token string">"ChannelEventRunnable handle "</span> <span class="token operator">+</span> state <span class="token operator">+</span> <span class="token string">" operation error, channel is "</span> <span class="token operator">+</span> channel<span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token keyword">case</span> DISCONNECTED<span class="token operator">:</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                handler<span class="token punctuation">.</span><span class="token function">disconnected</span><span class="token punctuation">(</span>channel<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                logger<span class="token punctuation">.</span><span class="token function">warn</span><span class="token punctuation">(</span><span class="token string">"ChannelEventRunnable handle "</span> <span class="token operator">+</span> state <span class="token operator">+</span> <span class="token string">" operation error, channel is "</span> <span class="token operator">+</span> channel<span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token keyword">case</span> SENT<span class="token operator">:</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                handler<span class="token punctuation">.</span><span class="token function">sent</span><span class="token punctuation">(</span>channel<span class="token punctuation">,</span> message<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                logger<span class="token punctuation">.</span><span class="token function">warn</span><span class="token punctuation">(</span><span class="token string">"ChannelEventRunnable handle "</span> <span class="token operator">+</span> state <span class="token operator">+</span> <span class="token string">" operation error, channel is "</span> <span class="token operator">+</span> channel                        <span class="token operator">+</span> <span class="token string">", message is "</span> <span class="token operator">+</span> message<span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token keyword">case</span> CAUGHT<span class="token operator">:</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                handler<span class="token punctuation">.</span><span class="token function">caught</span><span class="token punctuation">(</span>channel<span class="token punctuation">,</span> exception<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                logger<span class="token punctuation">.</span><span class="token function">warn</span><span class="token punctuation">(</span><span class="token string">"ChannelEventRunnable handle "</span> <span class="token operator">+</span> state <span class="token operator">+</span> <span class="token string">" operation error, channel is "</span> <span class="token operator">+</span> channel                        <span class="token operator">+</span> <span class="token string">", message is: "</span> <span class="token operator">+</span> message <span class="token operator">+</span> <span class="token string">", exception is "</span> <span class="token operator">+</span> exception<span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token keyword">default</span><span class="token operator">:</span>            logger<span class="token punctuation">.</span><span class="token function">warn</span><span class="token punctuation">(</span><span class="token string">"unknown state: "</span> <span class="token operator">+</span> state <span class="token operator">+</span> <span class="token string">", message is "</span> <span class="token operator">+</span> message<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="DecodeHandler"><a href="#DecodeHandler" class="headerlink" title="DecodeHandler"></a>DecodeHandler</h4><p>按Dubbo协议的数据格式，解析当前请求的path，version，方法，方法参数等等，然后把解析好了的请求交给HeaderExchangeHandler</p><h4 id="HeaderExchangeHandler"><a href="#HeaderExchangeHandler" class="headerlink" title="HeaderExchangeHandler"></a>HeaderExchangeHandler</h4><p>处理Request数据，首先构造一个Response对象，然后调用<code>ExchangeHandlerAdapter</code>得到一个<code>CompletionStage future</code>，然后给future通过whenComplete绑定一个回调函数，当future执行完了之后，就可以从回调函数中得到<code>ExchangeHandlerAdapter</code>的执行结果，并把执行结果设置给Response对象，通过channel发送出去</p><p>ExchangeHandlerAdapter这个在DubboProtocol重写了</p><p>所以我们来到DubboProtocol#ExchangeHandlerAdapter</p><h4 id="DubboProtocol-ExchangeHandlerAdapter"><a href="#DubboProtocol-ExchangeHandlerAdapter" class="headerlink" title="DubboProtocol#ExchangeHandlerAdapter"></a>DubboProtocol#ExchangeHandlerAdapter</h4><pre class=" language-java"><code class="language-java">Result result <span class="token operator">=</span> invoker<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>inv<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>这里的invoker是ProtocolFilterWrapper$CallbackRegistrationInvoker</p><h4 id="ProtocolFilterWrapper-CallbackRegistrationInvoker"><a href="#ProtocolFilterWrapper-CallbackRegistrationInvoker" class="headerlink" title="ProtocolFilterWrapper$CallbackRegistrationInvoker"></a>ProtocolFilterWrapper$CallbackRegistrationInvoker</h4><p>这个invoker主要负责执行过滤器链</p><h4 id="过滤器链"><a href="#过滤器链" class="headerlink" title="过滤器链"></a>过滤器链</h4><p>EchoFilter &gt;&gt; ClassLoaderFilter &gt;&gt; GenericFilter &gt;&gt; ContextFilter &gt;&gt; TraceFilter &gt;&gt; TimeoutFilter &gt;&gt; MonitorFilter &gt;&gt; ExceptionFilter</p><p><img src="https://blog-dm.oss-cn-shanghai.aliyuncs.com/articleimage/20210812172345.png"></p><h4 id="AbstractProxyInvoker"><a href="#AbstractProxyInvoker" class="headerlink" title="AbstractProxyInvoker"></a>AbstractProxyInvoker</h4><p>这里会吧异常封装交给消费端进行异常抛出，在服务端不会进行异常抛出，为了保证和本地调用效果一样。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> Result <span class="token function">invoke</span><span class="token punctuation">(</span>Invocation invocation<span class="token punctuation">)</span> <span class="token keyword">throws</span> RpcException <span class="token punctuation">{</span>     <span class="token keyword">try</span> <span class="token punctuation">{</span>         <span class="token comment" spellcheck="true">// 执行服务，得到一个接口，可能是一个CompletableFuture(表示异步调用)，可能是一个正常的服务执行结果（同步调用）</span>         <span class="token comment" spellcheck="true">// 如果是同步调用会阻塞，如果是异步调用不会阻塞</span>         Object value <span class="token operator">=</span> <span class="token function">doInvoke</span><span class="token punctuation">(</span>proxy<span class="token punctuation">,</span> invocation<span class="token punctuation">.</span><span class="token function">getMethodName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> invocation<span class="token punctuation">.</span><span class="token function">getParameterTypes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> invocation<span class="token punctuation">.</span><span class="token function">getArguments</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 将同步调用的服务执行结果封装为CompletableFuture类型</span>CompletableFuture<span class="token operator">&lt;</span>Object<span class="token operator">></span> future <span class="token operator">=</span> <span class="token function">wrapWithFuture</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>         CompletableFuture<span class="token operator">&lt;</span>AppResponse<span class="token operator">></span> appResponseFuture <span class="token operator">=</span> future<span class="token punctuation">.</span><span class="token function">handle</span><span class="token punctuation">(</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> t<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>             <span class="token comment" spellcheck="true">// 如果是同步服务出异常了，封装异常</span>             AppResponse result <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AppResponse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>             <span class="token keyword">if</span> <span class="token punctuation">(</span>t <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                 <span class="token keyword">if</span> <span class="token punctuation">(</span>t <span class="token keyword">instanceof</span> <span class="token class-name">CompletionException</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                     result<span class="token punctuation">.</span><span class="token function">setException</span><span class="token punctuation">(</span>t<span class="token punctuation">.</span><span class="token function">getCause</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                 <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                     result<span class="token punctuation">.</span><span class="token function">setException</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span>                 <span class="token punctuation">}</span>             <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                 result<span class="token punctuation">.</span><span class="token function">setValue</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span>             <span class="token punctuation">}</span>             <span class="token keyword">return</span> result<span class="token punctuation">;</span>         <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">AsyncRpcResult</span><span class="token punctuation">(</span>appResponseFuture<span class="token punctuation">,</span> invocation<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InvocationTargetException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token keyword">if</span> <span class="token punctuation">(</span>RpcContext<span class="token punctuation">.</span><span class="token function">getContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isAsyncStarted</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>RpcContext<span class="token punctuation">.</span><span class="token function">getContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">stopAsync</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>             logger<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"Provider async started, but got an exception from the original method, cannot write the exception back to consumer because an async result may have returned the new thread."</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token punctuation">}</span>         <span class="token keyword">return</span> AsyncRpcResult<span class="token punctuation">.</span><span class="token function">newDefaultAsyncResult</span><span class="token punctuation">(</span>null<span class="token punctuation">,</span> e<span class="token punctuation">.</span><span class="token function">getTargetException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> invocation<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Throwable</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RpcException</span><span class="token punctuation">(</span><span class="token string">"Failed to invoke remote proxy method "</span> <span class="token operator">+</span> invocation<span class="token punctuation">.</span><span class="token function">getMethodName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" to "</span> <span class="token operator">+</span> <span class="token function">getUrl</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">", cause: "</span> <span class="token operator">+</span> e<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span> <span class="token punctuation">}</span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Dubbo </tag>
            
            <tag> Java </tag>
            
            <tag> 源码 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Dubbo服务引用</title>
      <link href="/2021/08/01/dubbo-fu-wu-yin-yong/"/>
      <url>/2021/08/01/dubbo-fu-wu-yin-yong/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>在<a href="https://dmsupine.com/2021/05/17/springboot-yu-dubbo-zheng-he-yuan-ma-fen-xi/#toc-heading-1">SpringBoot与Dubbo整合源码分析</a>那一篇博文中有说到在Spring启动过程中会对@DubboReference标注的对象进行赋值，赋值的内容就是<code>ReferenceBean#get</code>方法返回的代理对象。而这代理对象的生成便是服务引用的过程。现在我们直接来到<code>ReferenceConfig#get</code>方法</p><h2 id="ReferenceConfig-get"><a href="#ReferenceConfig-get" class="headerlink" title="ReferenceConfig#get"></a>ReferenceConfig#get</h2><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">synchronized</span> T <span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>destroyed<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>ref <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 核心方法</span>        <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> ref<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h3 id="ReferenceConfig-init"><a href="#ReferenceConfig-init" class="headerlink" title="ReferenceConfig#init"></a>ReferenceConfig#init</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">synchronized</span> <span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 防止重复初始化</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>initialized<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>bootstrap <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            bootstrap <span class="token operator">=</span> DubboBootstrap<span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            bootstrap<span class="token punctuation">.</span><span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 检查和更新配置</span>        <span class="token function">checkAndUpdateSubConfigs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 检验本地存根的合法性</span>        <span class="token function">checkStubAndLocal</span><span class="token punctuation">(</span>interfaceClass<span class="token punctuation">)</span><span class="token punctuation">;</span>        ConfigValidationUtils<span class="token punctuation">.</span><span class="token function">checkMock</span><span class="token punctuation">(</span>interfaceClass<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> String<span class="token operator">></span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span>String<span class="token punctuation">,</span> String<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// ----------省略代码------------------</span>        <span class="token comment" spellcheck="true">// 省略部分主要是解析一些配置参数往上面的这个map里面放，不是核心</span>        <span class="token comment" spellcheck="true">// 核心方法 -------创建代理类-------</span>        ref <span class="token operator">=</span> <span class="token function">createProxy</span><span class="token punctuation">(</span>map<span class="token punctuation">)</span><span class="token punctuation">;</span>        serviceMetadata<span class="token punctuation">.</span><span class="token function">setTarget</span><span class="token punctuation">(</span>ref<span class="token punctuation">)</span><span class="token punctuation">;</span>        serviceMetadata<span class="token punctuation">.</span><span class="token function">addAttribute</span><span class="token punctuation">(</span>PROXY_CLASS_REF<span class="token punctuation">,</span> ref<span class="token punctuation">)</span><span class="token punctuation">;</span>        ConsumerModel consumerModel <span class="token operator">=</span> repository<span class="token punctuation">.</span><span class="token function">lookupReferredService</span><span class="token punctuation">(</span>serviceMetadata<span class="token punctuation">.</span><span class="token function">getServiceKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        consumerModel<span class="token punctuation">.</span><span class="token function">setProxyObject</span><span class="token punctuation">(</span>ref<span class="token punctuation">)</span><span class="token punctuation">;</span>        consumerModel<span class="token punctuation">.</span><span class="token function">init</span><span class="token punctuation">(</span>attributes<span class="token punctuation">)</span><span class="token punctuation">;</span>        initialized <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token function">checkInvokerAvailable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// dispatch a ReferenceConfigInitializedEvent since 2.7.4</span>        <span class="token function">dispatch</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ReferenceConfigInitializedEvent</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> invoker<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><h3 id="ReferenceConfig-createProxy"><a href="#ReferenceConfig-createProxy" class="headerlink" title="ReferenceConfig#createProxy"></a>ReferenceConfig#createProxy</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">private</span> T <span class="token function">createProxy</span><span class="token punctuation">(</span>Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> String<span class="token operator">></span> map<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// injvm://    一般不使用</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">shouldJvmRefer</span><span class="token punctuation">(</span>map<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        URL url <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">URL</span><span class="token punctuation">(</span>LOCAL_PROTOCOL<span class="token punctuation">,</span> LOCALHOST_VALUE<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> interfaceClass<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addParameters</span><span class="token punctuation">(</span>map<span class="token punctuation">)</span><span class="token punctuation">;</span>        invoker <span class="token operator">=</span> REF_PROTOCOL<span class="token punctuation">.</span><span class="token function">refer</span><span class="token punctuation">(</span>interfaceClass<span class="token punctuation">,</span> url<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>logger<span class="token punctuation">.</span><span class="token function">isInfoEnabled</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            logger<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"Using injvm service "</span> <span class="token operator">+</span> interfaceClass<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// urls 存储的是@DubboReference上的url或者注册中心地址</span>        urls<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// @DubboReference标明了url</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>url <span class="token operator">!=</span> null <span class="token operator">&amp;&amp;</span> url<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// user specified URL, could be peer-to-peer address, or register center's address.</span>            String<span class="token punctuation">[</span><span class="token punctuation">]</span> us <span class="token operator">=</span> SEMICOLON_SPLIT_PATTERN<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>us <span class="token operator">!=</span> null <span class="token operator">&amp;&amp;</span> us<span class="token punctuation">.</span>length <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">for</span> <span class="token punctuation">(</span>String u <span class="token operator">:</span> us<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    URL url <span class="token operator">=</span> URL<span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>u<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>StringUtils<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span>url<span class="token punctuation">.</span><span class="token function">getPath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                        url <span class="token operator">=</span> url<span class="token punctuation">.</span><span class="token function">setPath</span><span class="token punctuation">(</span>interfaceName<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                    <span class="token comment" spellcheck="true">// 如果是注册中心地址，则在url中添加一个refer参数</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>UrlUtils<span class="token punctuation">.</span><span class="token function">isRegistry</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                        urls<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>url<span class="token punctuation">.</span><span class="token function">addParameterAndEncoded</span><span class="token punctuation">(</span>REFER_KEY<span class="token punctuation">,</span> StringUtils<span class="token punctuation">.</span><span class="token function">toQueryString</span><span class="token punctuation">(</span>map<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                        <span class="token comment" spellcheck="true">// 合并url中的参数到map</span>                        urls<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>ClusterUtils<span class="token punctuation">.</span><span class="token function">mergeUrl</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span> map<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// assemble URL from register center's configuration</span>            <span class="token comment" spellcheck="true">// if protocols not injvm checkRegistry</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>LOCAL_PROTOCOL<span class="token punctuation">.</span><span class="token function">equalsIgnoreCase</span><span class="token punctuation">(</span><span class="token function">getProtocol</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// 检验注册中心</span>                <span class="token function">checkRegistry</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">// 加载注册中心地址</span>                List<span class="token operator">&lt;</span>URL<span class="token operator">></span> us <span class="token operator">=</span> ConfigValidationUtils<span class="token punctuation">.</span><span class="token function">loadRegistries</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>CollectionUtils<span class="token punctuation">.</span><span class="token function">isNotEmpty</span><span class="token punctuation">(</span>us<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">for</span> <span class="token punctuation">(</span>URL u <span class="token operator">:</span> us<span class="token punctuation">)</span> <span class="token punctuation">{</span>                        URL monitorUrl <span class="token operator">=</span> ConfigValidationUtils<span class="token punctuation">.</span><span class="token function">loadMonitor</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> u<span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token keyword">if</span> <span class="token punctuation">(</span>monitorUrl <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                            map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>MONITOR_KEY<span class="token punctuation">,</span> URL<span class="token punctuation">.</span><span class="token function">encode</span><span class="token punctuation">(</span>monitorUrl<span class="token punctuation">.</span><span class="token function">toFullString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token punctuation">}</span>                        <span class="token comment" spellcheck="true">// 对于注册中心地址都添加refer参数</span>                        urls<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>u<span class="token punctuation">.</span><span class="token function">addParameterAndEncoded</span><span class="token punctuation">(</span>REFER_KEY<span class="token punctuation">,</span> StringUtils<span class="token punctuation">.</span><span class="token function">toQueryString</span><span class="token punctuation">(</span>map<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>urls<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalStateException</span><span class="token punctuation">(</span><span class="token string">"No such any registry to reference "</span> <span class="token operator">+</span> interfaceName <span class="token operator">+</span> <span class="token string">" on the consumer "</span> <span class="token operator">+</span> NetUtils<span class="token punctuation">.</span><span class="token function">getLocalHost</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" use dubbo version "</span> <span class="token operator">+</span> Version<span class="token punctuation">.</span><span class="token function">getVersion</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">", please config &lt;dubbo:registry address=\"...\" /> to your spring config."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>urls<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 这里用了SPI自适应扩展，这里可能的结果是DubboProtocol或RegisterProtocol,当然他们会被一些Wrapper包裹</span>            <span class="token comment" spellcheck="true">// 调用refer生成invoker</span>            invoker <span class="token operator">=</span> REF_PROTOCOL<span class="token punctuation">.</span><span class="token function">refer</span><span class="token punctuation">(</span>interfaceClass<span class="token punctuation">,</span> urls<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 注册中心多个</span>            List<span class="token operator">&lt;</span>Invoker<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">>></span> invokers <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span>Invoker<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">>></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            URL registryURL <span class="token operator">=</span> null<span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span>URL url <span class="token operator">:</span> urls<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// 调用refer生成invoker</span>                invokers<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>REF_PROTOCOL<span class="token punctuation">.</span><span class="token function">refer</span><span class="token punctuation">(</span>interfaceClass<span class="token punctuation">,</span> url<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">// 记录注册中心</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>UrlUtils<span class="token punctuation">.</span><span class="token function">isRegistry</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    registryURL <span class="token operator">=</span> url<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// use last registry url</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">// 存在注册中心地址</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>registryURL <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// registry url is available</span>                <span class="token comment" spellcheck="true">// for multi-subscription scenario, use 'zone-aware' policy by default</span>                String cluster <span class="token operator">=</span> registryURL<span class="token punctuation">.</span><span class="token function">getParameter</span><span class="token punctuation">(</span>CLUSTER_KEY<span class="token punctuation">,</span> ZoneAwareCluster<span class="token punctuation">.</span>NAME<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">// The invoker wrap sequence would be: ZoneAwareClusterInvoker(StaticDirectory) -> FailoverClusterInvoker(RegistryDirectory, routing happens here) -> Invoker</span>                invoker <span class="token operator">=</span> Cluster<span class="token punctuation">.</span><span class="token function">getCluster</span><span class="token punctuation">(</span>cluster<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">StaticDirectory</span><span class="token punctuation">(</span>registryURL<span class="token punctuation">,</span> invokers<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// not a registry url, must be direct invoke.</span>                String cluster <span class="token operator">=</span> CollectionUtils<span class="token punctuation">.</span><span class="token function">isNotEmpty</span><span class="token punctuation">(</span>invokers<span class="token punctuation">)</span>                        <span class="token operator">?</span> <span class="token punctuation">(</span>invokers<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getUrl</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> null <span class="token operator">?</span> invokers<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getUrl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getParameter</span><span class="token punctuation">(</span>CLUSTER_KEY<span class="token punctuation">,</span> ZoneAwareCluster<span class="token punctuation">.</span>NAME<span class="token punctuation">)</span> <span class="token operator">:</span> Cluster<span class="token punctuation">.</span>DEFAULT<span class="token punctuation">)</span>                        <span class="token operator">:</span> Cluster<span class="token punctuation">.</span>DEFAULT<span class="token punctuation">;</span>                invoker <span class="token operator">=</span> Cluster<span class="token punctuation">.</span><span class="token function">getCluster</span><span class="token punctuation">(</span>cluster<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">StaticDirectory</span><span class="token punctuation">(</span>invokers<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>logger<span class="token punctuation">.</span><span class="token function">isInfoEnabled</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        logger<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"Refer dubbo service "</span> <span class="token operator">+</span> interfaceClass<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" from url "</span> <span class="token operator">+</span> invoker<span class="token punctuation">.</span><span class="token function">getUrl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * @since 2.7.0     * ServiceData Store     */</span>    String metadata <span class="token operator">=</span> map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>METADATA_KEY<span class="token punctuation">)</span><span class="token punctuation">;</span>    WritableMetadataService metadataService <span class="token operator">=</span> WritableMetadataService<span class="token punctuation">.</span><span class="token function">getExtension</span><span class="token punctuation">(</span>metadata <span class="token operator">==</span> null <span class="token operator">?</span> DEFAULT_METADATA_STORAGE_TYPE <span class="token operator">:</span> metadata<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>metadataService <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>        URL consumerURL <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">URL</span><span class="token punctuation">(</span>CONSUMER_PROTOCOL<span class="token punctuation">,</span> map<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>REGISTER_IP_KEY<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>INTERFACE_KEY<span class="token punctuation">)</span><span class="token punctuation">,</span> map<span class="token punctuation">)</span><span class="token punctuation">;</span>        metadataService<span class="token punctuation">.</span><span class="token function">publishServiceDefinition</span><span class="token punctuation">(</span>consumerURL<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// create service proxy</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>T<span class="token punctuation">)</span> PROXY_FACTORY<span class="token punctuation">.</span><span class="token function">getProxy</span><span class="token punctuation">(</span>invoker<span class="token punctuation">,</span> ProtocolUtils<span class="token punctuation">.</span><span class="token function">isGeneric</span><span class="token punctuation">(</span>generic<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>这一段比较重要的就是把<strong>消费者配置的所有注册中心获取出来</strong></p><ul><li>单注册中心：直接调用<code>Protocol#refer(interfaceClass, urls.get(0))</code>得到一个Invoker对象</li><li>多注册中心，则遍历每个注册中心调用<code>Protocol#refer(interfaceClass, urls.get(0))</code>得到一个Invoker对象添加到invokers中，然后调用<code>Cluster.getCluster(cluster, false).join(new StaticDirectory(registryURL, invokers))</code>封装所有invokers得到一个invoker</li></ul><p>现在问题就在于这个invoker是怎么得到的</p><h3 id="Protocol-refer"><a href="#Protocol-refer" class="headerlink" title="Protocol#refer"></a>Protocol#refer</h3><p>由于Protocol是由SPI导入的，而这里的Protocol是有2种可能性的，一种是DubboProtocol还有一种是RegistryProtocol。这里我们一般是注册中心（register://）所以走RegistryProtocol</p><p><img src="https://blog-dm.oss-cn-shanghai.aliyuncs.com/articleimage/20210728151635.png"></p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token operator">&lt;</span>T<span class="token operator">></span> Invoker<span class="token operator">&lt;</span>T<span class="token operator">></span> <span class="token function">refer</span><span class="token punctuation">(</span>Class<span class="token operator">&lt;</span>T<span class="token operator">></span> type<span class="token punctuation">,</span> URL url<span class="token punctuation">)</span> <span class="token keyword">throws</span> RpcException <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 获取注册中心地址</span>    url <span class="token operator">=</span> <span class="token function">getRegistryUrl</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">;</span>    Registry registry <span class="token operator">=</span> registryFactory<span class="token punctuation">.</span><span class="token function">getRegistry</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>RegistryService<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>type<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> proxyFactory<span class="token punctuation">.</span><span class="token function">getInvoker</span><span class="token punctuation">(</span><span class="token punctuation">(</span>T<span class="token punctuation">)</span> registry<span class="token punctuation">,</span> type<span class="token punctuation">,</span> url<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// group="a,b" or group="*"</span>    Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> String<span class="token operator">></span> qs <span class="token operator">=</span> StringUtils<span class="token punctuation">.</span><span class="token function">parseQueryString</span><span class="token punctuation">(</span>url<span class="token punctuation">.</span><span class="token function">getParameterAndDecoded</span><span class="token punctuation">(</span>REFER_KEY<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    String group <span class="token operator">=</span> qs<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>GROUP_KEY<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>group <span class="token operator">!=</span> null <span class="token operator">&amp;&amp;</span> group<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>COMMA_SPLIT_PATTERN<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span>group<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>length <span class="token operator">></span> <span class="token number">1</span> <span class="token operator">||</span> <span class="token string">"*"</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>group<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token function">doRefer</span><span class="token punctuation">(</span>Cluster<span class="token punctuation">.</span><span class="token function">getCluster</span><span class="token punctuation">(</span>MergeableCluster<span class="token punctuation">.</span>NAME<span class="token punctuation">)</span><span class="token punctuation">,</span> registry<span class="token punctuation">,</span> type<span class="token punctuation">,</span> url<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 这里qs.get(CLUSTER_KEY)是空，所以Cluster是default,又String DEFAULT = FailoverCluster.NAME;；所以Cluster是FailOverCluster又由于MockClusterWrapper存在，SPI可知cluster = MockClusterWrapper->FailOverCluster</span>    Cluster cluster <span class="token operator">=</span> Cluster<span class="token punctuation">.</span><span class="token function">getCluster</span><span class="token punctuation">(</span>qs<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>CLUSTER_KEY<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token function">doRefer</span><span class="token punctuation">(</span>cluster<span class="token punctuation">,</span> registry<span class="token punctuation">,</span> type<span class="token punctuation">,</span> url<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">private</span> <span class="token operator">&lt;</span>T<span class="token operator">></span> Invoker<span class="token operator">&lt;</span>T<span class="token operator">></span> <span class="token function">doRefer</span><span class="token punctuation">(</span>Cluster cluster<span class="token punctuation">,</span> Registry registry<span class="token punctuation">,</span> Class<span class="token operator">&lt;</span>T<span class="token operator">></span> type<span class="token punctuation">,</span> URL url<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// new 一个服务目录</span>    RegistryDirectory<span class="token operator">&lt;</span>T<span class="token operator">></span> directory <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RegistryDirectory</span><span class="token operator">&lt;</span>T<span class="token operator">></span><span class="token punctuation">(</span>type<span class="token punctuation">,</span> url<span class="token punctuation">)</span><span class="token punctuation">;</span>    directory<span class="token punctuation">.</span><span class="token function">setRegistry</span><span class="token punctuation">(</span>registry<span class="token punctuation">)</span><span class="token punctuation">;</span>    directory<span class="token punctuation">.</span><span class="token function">setProtocol</span><span class="token punctuation">(</span>protocol<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// all attributes of REFER_KEY</span>    Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> String<span class="token operator">></span> parameters <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span>String<span class="token punctuation">,</span> String<span class="token operator">></span><span class="token punctuation">(</span>directory<span class="token punctuation">.</span><span class="token function">getConsumerUrl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getParameters</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">// 消费者url</span>    URL subscribeUrl <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">URL</span><span class="token punctuation">(</span>CONSUMER_PROTOCOL<span class="token punctuation">,</span> parameters<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>REGISTER_IP_KEY<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> type<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> parameters<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>directory<span class="token punctuation">.</span><span class="token function">isShouldRegister</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        directory<span class="token punctuation">.</span><span class="token function">setRegisteredConsumerUrl</span><span class="token punctuation">(</span>subscribeUrl<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 注册简化后的消费者url</span>        registry<span class="token punctuation">.</span><span class="token function">register</span><span class="token punctuation">(</span>directory<span class="token punctuation">.</span><span class="token function">getRegisteredConsumerUrl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 构造路由链,路由链会在引入服务时按路由条件进行过滤 ------挺重要（暂时不了解）--------</span>    directory<span class="token punctuation">.</span><span class="token function">buildRouterChain</span><span class="token punctuation">(</span>subscribeUrl<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 服务目录需要订阅的路径，用于监听 ------挺重要（暂时不了解）--------</span>    directory<span class="token punctuation">.</span><span class="token function">subscribe</span><span class="token punctuation">(</span><span class="token function">toSubscribeUrl</span><span class="token punctuation">(</span>subscribeUrl<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 得到invoker, MockClusterWrapper</span>    Invoker<span class="token operator">&lt;</span>T<span class="token operator">></span> invoker <span class="token operator">=</span> cluster<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>directory<span class="token punctuation">)</span><span class="token punctuation">;</span>    List<span class="token operator">&lt;</span>RegistryProtocolListener<span class="token operator">></span> listeners <span class="token operator">=</span> <span class="token function">findRegistryProtocolListeners</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>CollectionUtils<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span>listeners<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> invoker<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    RegistryInvokerWrapper<span class="token operator">&lt;</span>T<span class="token operator">></span> registryInvokerWrapper <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RegistryInvokerWrapper</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span>directory<span class="token punctuation">,</span> cluster<span class="token punctuation">,</span> invoker<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>RegistryProtocolListener listener <span class="token operator">:</span> listeners<span class="token punctuation">)</span> <span class="token punctuation">{</span>        listener<span class="token punctuation">.</span><span class="token function">onRefer</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> registryInvokerWrapper<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> registryInvokerWrapper<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>这段代码主要做的事情有以下几点</p><ol><li>new 一个服务目录</li><li>注册消费者到注册中心</li><li>构造路由链（通过一些规则将服务提供者筛选一遍，一般可以用来蓝绿部署）</li><li>监听注册中心目录（包括服务提供者目录，可以实时的将服务提供者写到服务目录中去）</li><li>通过Cluster.join将服务目录放到FailoverClusterInvoker 构造出一个调用链invoker并返回</li></ol><p>那么问题来了，服务提供者的url是什么时候获取并放入到服务目录里面的呢？</p><p>其实是在监听服务目录订阅路径这个操作下执行的。下面我们可以看下到底是怎么一回事。</p><h3 id="监听订阅目录"><a href="#监听订阅目录" class="headerlink" title="监听订阅目录"></a>监听订阅目录</h3><pre><code>RegisteryProtocol#doRefer    --- directory#subscribe(toSubscribeUrl(subscribeUrl))        --- registry#subscribe(url, this);           --- FallbackRegistry#subscribe           --- ZookeeperRegistry#doSubscribe</code></pre><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">doSubscribe</span><span class="token punctuation">(</span><span class="token keyword">final</span> URL url<span class="token punctuation">,</span> <span class="token keyword">final</span> NotifyListener listener<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>         <span class="token comment" spellcheck="true">// 订阅所有服务</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>ANY_VALUE<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>url<span class="token punctuation">.</span><span class="token function">getServiceInterface</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            String root <span class="token operator">=</span> <span class="token function">toRootPath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            ConcurrentMap<span class="token operator">&lt;</span>NotifyListener<span class="token punctuation">,</span> ChildListener<span class="token operator">></span> listeners <span class="token operator">=</span> zkListeners<span class="token punctuation">.</span><span class="token function">computeIfAbsent</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span> k <span class="token operator">-</span><span class="token operator">></span> <span class="token keyword">new</span> <span class="token class-name">ConcurrentHashMap</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            ChildListener zkListener <span class="token operator">=</span> listeners<span class="token punctuation">.</span><span class="token function">computeIfAbsent</span><span class="token punctuation">(</span>listener<span class="token punctuation">,</span> k <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">(</span>parentPath<span class="token punctuation">,</span> currentChilds<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>                <span class="token keyword">for</span> <span class="token punctuation">(</span>String child <span class="token operator">:</span> currentChilds<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    child <span class="token operator">=</span> URL<span class="token punctuation">.</span><span class="token function">decode</span><span class="token punctuation">(</span>child<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>anyServices<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span>child<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                        anyServices<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>child<span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token function">subscribe</span><span class="token punctuation">(</span>url<span class="token punctuation">.</span><span class="token function">setPath</span><span class="token punctuation">(</span>child<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addParameters</span><span class="token punctuation">(</span>INTERFACE_KEY<span class="token punctuation">,</span> child<span class="token punctuation">,</span>                                Constants<span class="token punctuation">.</span>CHECK_KEY<span class="token punctuation">,</span> String<span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> k<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            zkClient<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>root<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            List<span class="token operator">&lt;</span>String<span class="token operator">></span> services <span class="token operator">=</span> zkClient<span class="token punctuation">.</span><span class="token function">addChildListener</span><span class="token punctuation">(</span>root<span class="token punctuation">,</span> zkListener<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>CollectionUtils<span class="token punctuation">.</span><span class="token function">isNotEmpty</span><span class="token punctuation">(</span>services<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">for</span> <span class="token punctuation">(</span>String service <span class="token operator">:</span> services<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    service <span class="token operator">=</span> URL<span class="token punctuation">.</span><span class="token function">decode</span><span class="token punctuation">(</span>service<span class="token punctuation">)</span><span class="token punctuation">;</span>                    anyServices<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>service<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token function">subscribe</span><span class="token punctuation">(</span>url<span class="token punctuation">.</span><span class="token function">setPath</span><span class="token punctuation">(</span>service<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addParameters</span><span class="token punctuation">(</span>INTERFACE_KEY<span class="token punctuation">,</span> service<span class="token punctuation">,</span>                            Constants<span class="token punctuation">.</span>CHECK_KEY<span class="token punctuation">,</span> String<span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> listener<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 单独订阅某一个服务</span>            List<span class="token operator">&lt;</span>URL<span class="token operator">></span> urls <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 得到真正要监听的zk上的路径（见下图）</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span>String path <span class="token operator">:</span> <span class="token function">toCategoriesPath</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                 <span class="token comment" spellcheck="true">// 根据监听地址去拿listeners</span>                ConcurrentMap<span class="token operator">&lt;</span>NotifyListener<span class="token punctuation">,</span> ChildListener<span class="token operator">></span> listeners <span class="token operator">=</span> zkListeners<span class="token punctuation">.</span><span class="token function">computeIfAbsent</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span> k <span class="token operator">-</span><span class="token operator">></span> <span class="token keyword">new</span> <span class="token class-name">ConcurrentHashMap</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                ChildListener zkListener <span class="token operator">=</span> listeners<span class="token punctuation">.</span><span class="token function">computeIfAbsent</span><span class="token punctuation">(</span>listener<span class="token punctuation">,</span> k <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">(</span>parentPath<span class="token punctuation">,</span> currentChilds<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> ZookeeperRegistry<span class="token punctuation">.</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">notify</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span> k<span class="token punctuation">,</span> <span class="token function">toUrlsWithEmpty</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span> parentPath<span class="token punctuation">,</span> currentChilds<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                zkClient<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>path<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                List<span class="token operator">&lt;</span>String<span class="token operator">></span> children <span class="token operator">=</span> zkClient<span class="token punctuation">.</span><span class="token function">addChildListener</span><span class="token punctuation">(</span>path<span class="token punctuation">,</span> zkListener<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>children <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    urls<span class="token punctuation">.</span><span class="token function">addAll</span><span class="token punctuation">(</span><span class="token function">toUrlsWithEmpty</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span> path<span class="token punctuation">,</span> children<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>             <span class="token comment" spellcheck="true">// 这里的urls就是从现在所引入的服务的目录下查到的url</span>            <span class="token function">notify</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span> listener<span class="token punctuation">,</span> urls<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Throwable</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RpcException</span><span class="token punctuation">(</span><span class="token string">"Failed to subscribe "</span> <span class="token operator">+</span> url <span class="token operator">+</span> <span class="token string">" to zookeeper "</span> <span class="token operator">+</span> <span class="token function">getUrl</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">", cause: "</span> <span class="token operator">+</span> e<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p><img src="https://blog-dm.oss-cn-shanghai.aliyuncs.com/articleimage/20210801205504.png"></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Dubbo </tag>
            
            <tag> RPC </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Dubbo高级应用</title>
      <link href="/2021/07/25/dubbo-gao-ji-ying-yong/"/>
      <url>/2021/07/25/dubbo-gao-ji-ying-yong/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>Dubbo作为一个强大的RPC框架，他的功能和特性很多。这里针对其中使用比较多的功能和特性进行测试和记录。</p><h2 id="负载均衡"><a href="#负载均衡" class="headerlink" title="负载均衡"></a>负载均衡</h2><p>官网地址：<a href="http://dubbo.apache.org/zh/docs/v2.7/user/examples/loadbalance/">http://dubbo.apache.org/zh/docs/v2.7/user/examples/loadbalance/</a></p><p>作为一个RPC框架，负载均衡这个功能是一定存在的。</p><p>Dubbo负载均衡策略目前有4种</p><ul><li>random：随机，按权重设置随机概率</li><li>roundrobin：轮询，按公约后的权重设置轮询比率</li><li>leastactive：最少活跃调用数，消费者记录对每一个提供者调用次数，然后尽可能的请求调用次数比较少的提供者，相同就随机</li><li>consistenthash：一致性 Hash，相同参数请求调用同一个提供者</li></ul><p>可以在服务端服务级别，服务端方法级别，消费端服务级别，消费端方法级别</p><p>优先级：消费端方法级别&gt;消费端服务级别&gt;服务端方法级别&gt;服务端服务级别</p><p>demo</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 服务端服务级别</span><span class="token annotation punctuation">@DubboService</span><span class="token punctuation">(</span>loadbalance <span class="token operator">=</span> <span class="token string">"roundrobin"</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 服务端方法级别</span><span class="token annotation punctuation">@DubboService</span><span class="token punctuation">(</span>methods <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token annotation punctuation">@Method</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"testCallback"</span><span class="token punctuation">,</span> loadbalance <span class="token operator">=</span> <span class="token string">"roundrobin"</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 消费端服务级别</span><span class="token annotation punctuation">@DubboReference</span><span class="token punctuation">(</span>loadbalance <span class="token operator">=</span> <span class="token string">"random"</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 消费端方法级别</span><span class="token annotation punctuation">@DubboReference</span><span class="token punctuation">(</span>methods <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token annotation punctuation">@Method</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"testCallback"</span><span class="token punctuation">,</span> loadbalance <span class="token operator">=</span> <span class="token string">"random"</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><h3 id="自定义扩展负载均衡"><a href="#自定义扩展负载均衡" class="headerlink" title="自定义扩展负载均衡"></a>自定义扩展负载均衡</h3><p>接口：LoadBalance</p><p>通过Dubbo SPI进行扩展</p><p>src/main/resource/META-INF/dubbo/com.alibaba.dubbo.rpc.cluster.LoadBalance文件添加内容</p><pre class=" language-java"><code class="language-java">demo<span class="token operator">=</span>my<span class="token operator">=</span>com<span class="token punctuation">.</span>demo<span class="token punctuation">.</span>dubbo<span class="token punctuation">.</span>DemoLoadBalance</code></pre><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@DubboService</span><span class="token punctuation">(</span>loadbalance <span class="token operator">=</span> <span class="token string">"roundrobin"</span><span class="token punctuation">)</span></code></pre><h2 id="服务超时"><a href="#服务超时" class="headerlink" title="服务超时"></a>服务超时</h2><p>服务提供者和服务消费者都可以配置超时时间，意义确不一样。</p><ul><li>服务消费者的超时时间表示时间内没有收到响应结果抛出异常，但此时服务提供者不受影响继续执行直到执行完</li><li>服务提供者的超时时间表示时间内没有执行结束，提供者直接返回异常</li></ul><h2 id="集群容错"><a href="#集群容错" class="headerlink" title="集群容错"></a>集群容错</h2><p>官网地址：<a href="http://dubbo.apache.org/zh/docs/v2.7/user/examples/fault-tolerent-strategy/">http://dubbo.apache.org/zh/docs/v2.7/user/examples/fault-tolerent-strategy/</a></p><p>服务调用失败后所采取的措施</p><ul><li>Failover：失败自动切换，通过retries设置（不包含第一次）</li><li>Failfast：直接失败</li><li>Failsafe：出现异常，直接忽略</li><li>Failback：失败自动恢复，后台记录失败请求，定时重发</li><li>Forking：并行调用多个服务提供者，有一个成功即可，可通过 <code>forks="2"</code> 来设置最大并行数</li><li>broadcast：广播调用，有一个失败就失败</li></ul><h2 id="服务降级"><a href="#服务降级" class="headerlink" title="服务降级"></a>服务降级</h2><p>官网地址：<a href="http://dubbo.apache.org/zh/docs/v2.7/user/examples/local-mock/">http://dubbo.apache.org/zh/docs/v2.7/user/examples/local-mock/</a></p><p>服务降级表示：服务消费者在调用某个服务提供者时，如果该服务提供者报错了，所采取的措施。</p><p>集群容错和服务降级的区别在于：</p><ol><li>集群容错是整个集群范围内的容错</li><li>服务降级是单个服务提供者的自身容错</li></ol><h3 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h3><p>force：在服务引用上标注<code>force: return 123</code>    表示强制返回123，不会进行服务调用</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@DubboReference</span><span class="token punctuation">(</span>mock <span class="token operator">=</span> <span class="token string">"force: return 123"</span><span class="token punctuation">)</span><span class="token keyword">private</span> DemoService demoService<span class="token punctuation">;</span></code></pre><p>fail：在服务引用上标注<code>fail: return 123</code>    在服务调用失败时返回123</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@DubboReference</span><span class="token punctuation">(</span>mock <span class="token operator">=</span> <span class="token string">"fail: return 123"</span><span class="token punctuation">)</span><span class="token keyword">private</span> DemoService demoService<span class="token punctuation">;</span></code></pre><p>throw：当调用出错时，抛出一个默认的 RPCException</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@DubboReference</span><span class="token punctuation">(</span>mock <span class="token operator">=</span> <span class="token string">"throw"</span><span class="token punctuation">)</span><span class="token keyword">private</span> DemoService demoService<span class="token punctuation">;</span></code></pre><p>逻辑：调用出错时，mock一段逻辑返回</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@DubboReference</span><span class="token punctuation">(</span>mock<span class="token operator">=</span><span class="token string">"com.foo.BarServiceMock"</span><span class="token punctuation">)</span><span class="token keyword">private</span> DemoService demoService<span class="token punctuation">;</span></code></pre><h2 id="本地存根"><a href="#本地存根" class="headerlink" title="本地存根"></a>本地存根</h2><p>官网地址：<a href="http://dubbo.apache.org/zh/docs/v2.7/user/examples/local-stub/">http://dubbo.apache.org/zh/docs/v2.7/user/examples/local-stub/</a></p><p>本地存根简单来说就是在服务消费者端执行一段逻辑，这段逻辑可以在服务调用前或调用后执行，一般由服务提供者编码。可利用这种机制在<strong>服务调用前进行参数验证或服务调用后进行结果缓存等</strong></p><h3 id="使用方法-1"><a href="#使用方法-1" class="headerlink" title="使用方法"></a>使用方法</h3><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@DubboReference</span><span class="token punctuation">(</span>stub <span class="token operator">=</span> <span class="token string">"true"</span><span class="token punctuation">)</span><span class="token keyword">private</span> DemoService demoService<span class="token punctuation">;</span></code></pre><p>接口层编写</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DemoServiceStub</span> <span class="token keyword">implements</span> <span class="token class-name">DemoService</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> DemoService demoService<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 构造函数传入真正的远程代理对象</span>    <span class="token keyword">public</span> <span class="token function">DemoServiceStub</span><span class="token punctuation">(</span>DemoService demoService<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>demoService <span class="token operator">=</span> demoService<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> String <span class="token function">sayHello</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 此代码在客户端执行, 你可以在客户端做ThreadLocal本地缓存，或预先验证参数是否合法，等等</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> demoService<span class="token punctuation">.</span><span class="token function">sayHello</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// safe  null</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 你可以容错，可以做任何AOP拦截事项</span>            <span class="token keyword">return</span> <span class="token string">"容错数据"</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="异步调用"><a href="#异步调用" class="headerlink" title="异步调用"></a>异步调用</h2><p>官网地址：<a href="http://dubbo.apache.org/zh/docs/v2.7/user/examples/async-call/">http://dubbo.apache.org/zh/docs/v2.7/user/examples/async-call/</a></p><p>异步调用顾名思义就是异步的，可以直接看使用方法</p><h3 id="使用方法-2"><a href="#使用方法-2" class="headerlink" title="使用方法"></a>使用方法</h3><p>消费者</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@ApiOperation</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"异步调用测试"</span><span class="token punctuation">,</span> notes <span class="token operator">=</span> <span class="token string">"无参数"</span><span class="token punctuation">)</span><span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/testAsync"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testAsync</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    DemoDTO demoDTO <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DemoDTO</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    demoDTO<span class="token punctuation">.</span><span class="token function">setId</span><span class="token punctuation">(</span>112233344L<span class="token punctuation">)</span><span class="token punctuation">;</span>    CompletableFuture<span class="token operator">&lt;</span>String<span class="token operator">></span> future <span class="token operator">=</span> dubboDemoService<span class="token punctuation">.</span><span class="token function">testAsync</span><span class="token punctuation">(</span>demoDTO<span class="token punctuation">)</span><span class="token punctuation">;</span>    future<span class="token punctuation">.</span><span class="token function">whenComplete</span><span class="token punctuation">(</span><span class="token punctuation">(</span>v<span class="token punctuation">,</span> t<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>t <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            t<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 调用结束后执行，验证异步</span>            log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"调用结束"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>接口层</p><pre class=" language-java"><code class="language-java">CompletableFuture<span class="token operator">&lt;</span>String<span class="token operator">></span> <span class="token function">testAsync</span><span class="token punctuation">(</span>DemoDTO demoDTO<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>提供者</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> CompletableFuture<span class="token operator">&lt;</span>String<span class="token operator">></span> <span class="token function">testAsync</span><span class="token punctuation">(</span>DemoDTO demoDTO<span class="token punctuation">)</span> <span class="token punctuation">{</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"执行了异步服务"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> CompletableFuture<span class="token punctuation">.</span><span class="token function">supplyAsync</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token function">test</span><span class="token punctuation">(</span>demoDTO<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h2 id="泛化调用"><a href="#泛化调用" class="headerlink" title="泛化调用"></a>泛化调用</h2><p>官网地址：<a href="http://dubbo.apache.org/zh/docs/v2.7/user/examples/generic-reference/">http://dubbo.apache.org/zh/docs/v2.7/user/examples/generic-reference/</a></p><p>在没有API接口的情况下可以通过泛化调用的方式调用服务</p><h3 id="使用方法-3"><a href="#使用方法-3" class="headerlink" title="使用方法"></a>使用方法</h3><p>消费者</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@DubboReference</span><span class="token punctuation">(</span>version <span class="token operator">=</span> <span class="token string">"generic"</span><span class="token punctuation">,</span> protocol <span class="token operator">=</span> <span class="token string">"${service.demo.provider.protocol}"</span><span class="token punctuation">,</span> interfaceName <span class="token operator">=</span> <span class="token string">"com.dm.api.service.DubboDemoService"</span><span class="token punctuation">,</span> generic <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">)</span>    GenericService genericService<span class="token punctuation">;</span>    <span class="token annotation punctuation">@ApiOperation</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"泛化测试"</span><span class="token punctuation">,</span> notes <span class="token operator">=</span> <span class="token string">"无参数"</span><span class="token punctuation">)</span>    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/testGeneric"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testGeneric</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        DemoDTO demoDTO <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DemoDTO</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        demoDTO<span class="token punctuation">.</span><span class="token function">setId</span><span class="token punctuation">(</span>112233344L<span class="token punctuation">)</span><span class="token punctuation">;</span>        genericService<span class="token punctuation">.</span>$<span class="token function">invoke</span><span class="token punctuation">(</span><span class="token string">"test"</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token string">"com.inroad.nest.demo.api.model.dto.DemoDTO"</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span>demoDTO<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><p>这里表示的是调用DubboDemoService下的test方法，传参是demoDTO，中间并没有像之前的引入接口包</p><h2 id="泛化服务"><a href="#泛化服务" class="headerlink" title="泛化服务"></a>泛化服务</h2><p>官网地址：<a href="http://dubbo.apache.org/zh/docs/v2.7/user/examples/generic-service/">http://dubbo.apache.org/zh/docs/v2.7/user/examples/generic-service/</a></p><p>在服务端没有API接口的时候可以使用</p><p>服务提供者可以暴露一个泛化服务供消费端调用，一般可以用于服务测试</p><h3 id="使用方法-4"><a href="#使用方法-4" class="headerlink" title="使用方法"></a>使用方法</h3><p>提供者</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@DubboService</span><span class="token punctuation">(</span>interfaceName <span class="token operator">=</span> <span class="token string">"com.dm.DemoService"</span><span class="token punctuation">,</span> version <span class="token operator">=</span> <span class="token string">"generic"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">GenericDemoService</span> <span class="token keyword">implements</span> <span class="token class-name">GenericService</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> Object $<span class="token function">invoke</span><span class="token punctuation">(</span>String s<span class="token punctuation">,</span> String<span class="token punctuation">[</span><span class="token punctuation">]</span> strings<span class="token punctuation">,</span> Object<span class="token punctuation">[</span><span class="token punctuation">]</span> objects<span class="token punctuation">)</span> <span class="token keyword">throws</span> GenericException <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"执行了generic服务"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token string">"执行的方法是"</span> <span class="token operator">+</span> s<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>这时没有引用任何接口包</p><p>消费者</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@DubboReference</span><span class="token punctuation">(</span>version <span class="token operator">=</span> <span class="token string">"generic"</span><span class="token punctuation">)</span><span class="token keyword">private</span> DemoService demoService<span class="token punctuation">;</span><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/default"</span><span class="token punctuation">)</span><span class="token keyword">public</span> String <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> demoService<span class="token punctuation">.</span><span class="token function">called</span><span class="token punctuation">(</span><span class="token string">"默认服务"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Dubbo </tag>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Dubbo服务导出源码</title>
      <link href="/2021/05/23/dubbo-fu-wu-dao-chu-yuan-ma/"/>
      <url>/2021/05/23/dubbo-fu-wu-dao-chu-yuan-ma/</url>
      
        <content type="html"><![CDATA[<h2 id="入口"><a href="#入口" class="headerlink" title="入口"></a>入口</h2><p>还记得springboot会注册DubboBootstrapApplicationListener监听事件，在这个事件中onContextRefreshedEvent调用了<code>dubboBootstrap.start()</code>方法。说明了在<strong>Spring容器启动的时候执行了服务导出的过程</strong></p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onApplicationContextEvent</span><span class="token punctuation">(</span>ApplicationContextEvent event<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>event <span class="token keyword">instanceof</span> <span class="token class-name">ContextRefreshedEvent</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">onContextRefreshedEvent</span><span class="token punctuation">(</span><span class="token punctuation">(</span>ContextRefreshedEvent<span class="token punctuation">)</span> event<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>event <span class="token keyword">instanceof</span> <span class="token class-name">ContextClosedEvent</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">onContextClosedEvent</span><span class="token punctuation">(</span><span class="token punctuation">(</span>ContextClosedEvent<span class="token punctuation">)</span> event<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">onContextRefreshedEvent</span><span class="token punctuation">(</span>ContextRefreshedEvent event<span class="token punctuation">)</span> <span class="token punctuation">{</span>    dubboBootstrap<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h2 id="DubboBootstrap-start"><a href="#DubboBootstrap-start" class="headerlink" title="DubboBootstrap#start"></a>DubboBootstrap#start</h2><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> DubboBootstrap <span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// CAS操作 保证只执行一次，避免并发</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>started<span class="token punctuation">.</span><span class="token function">compareAndSet</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        ready<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 初始化服务发布的相关配置</span>        <span class="token function">initialize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 1. export Dubbo Services</span>        <span class="token comment" spellcheck="true">// 服务导出</span>        <span class="token function">exportServices</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// Not only provider register</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isOnlyRegisterProvider</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token function">hasExportedServices</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 2. export MetadataService</span>            <span class="token function">exportMetadataService</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//3. Register the local ServiceInstance if required</span>            <span class="token function">registerServiceInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token function">referServices</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>asyncExportingFutures<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>                <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">awaitFinish</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                ready<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            ready<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h3 id="DubboBootstrap-initialize"><a href="#DubboBootstrap-initialize" class="headerlink" title="DubboBootstrap#initialize"></a>DubboBootstrap#initialize</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">initialize</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// CAS 操作保证只会执行一次初始化操作</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>initialized<span class="token punctuation">.</span><span class="token function">compareAndSet</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 初始化拓展配置</span>    ApplicationModel<span class="token punctuation">.</span><span class="token function">initFrameworkExts</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 启动配置中心</span>    <span class="token function">startConfigCenter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 加载远程配置，这里主要是处理RegistryConfig，ProtocolConfig</span>    <span class="token function">loadRemoteConfigs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 检查全局配置</span>    <span class="token function">checkGlobalConfigs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// @since 2.7.8</span>    <span class="token comment" spellcheck="true">// 开启元数据中心，继dubbo注册中心和配置中心后引入了元数据中心(也是起到存储配置的功能)</span>    <span class="token comment" spellcheck="true">// 元数据中心和配置中心一样当没有配置的时候会使用注册中心作为元数据中心</span>    <span class="token function">startMetadataCenter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 初始化元数据服务</span>    <span class="token function">initMetadataService</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 初始化元数据服务导出</span>    <span class="token function">initMetadataServiceExports</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 初始化事件监听器</span>    <span class="token function">initEventListener</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h4 id="initFrameworkExts"><a href="#initFrameworkExts" class="headerlink" title="initFrameworkExts"></a>initFrameworkExts</h4><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">initFrameworkExts</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 通过SPI拿到FrameworkExt接口的实现类，这里可以取到ConfigManager，Environment，ServiceRepository三个实现类</span>    Set<span class="token operator">&lt;</span>FrameworkExt<span class="token operator">></span> exts <span class="token operator">=</span> ExtensionLoader<span class="token punctuation">.</span><span class="token function">getExtensionLoader</span><span class="token punctuation">(</span>FrameworkExt<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getSupportedExtensionInstances</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 挨个调用三个实现类的initialize，其中只有Environment有实现initialize方法，其余都是空方法</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>FrameworkExt ext <span class="token operator">:</span> exts<span class="token punctuation">)</span> <span class="token punctuation">{</span>        ext<span class="token punctuation">.</span><span class="token function">initialize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="startConfigCenter"><a href="#startConfigCenter" class="headerlink" title="startConfigCenter"></a>startConfigCenter</h4><p>启动配置中心</p><pre class=" language-java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">startConfigCenter</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 如果没有配置配置中心，使用注册中心作为配置中心</span>    <span class="token function">useRegistryAsConfigCenterIfNecessary</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 获取配置中心</span>    Collection<span class="token operator">&lt;</span>ConfigCenterConfig<span class="token operator">></span> configCenters <span class="token operator">=</span> configManager<span class="token punctuation">.</span><span class="token function">getConfigCenters</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// check Config Center</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>CollectionUtils<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span>configCenters<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        ConfigCenterConfig configCenterConfig <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ConfigCenterConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        configCenterConfig<span class="token punctuation">.</span><span class="token function">refresh</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>configCenterConfig<span class="token punctuation">.</span><span class="token function">isValid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            configManager<span class="token punctuation">.</span><span class="token function">addConfigCenter</span><span class="token punctuation">(</span>configCenterConfig<span class="token punctuation">)</span><span class="token punctuation">;</span>            configCenters <span class="token operator">=</span> configManager<span class="token punctuation">.</span><span class="token function">getConfigCenters</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>ConfigCenterConfig configCenterConfig <span class="token operator">:</span> configCenters<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// ======刷新配置，这个方法很重要首先refresh是AbstractConfig的方法，所以每个Config类都会调用这里=============</span>            configCenterConfig<span class="token punctuation">.</span><span class="token function">refresh</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            ConfigValidationUtils<span class="token punctuation">.</span><span class="token function">validateConfigCenterConfig</span><span class="token punctuation">(</span>configCenterConfig<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>CollectionUtils<span class="token punctuation">.</span><span class="token function">isNotEmpty</span><span class="token punctuation">(</span>configCenters<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        CompositeDynamicConfiguration compositeDynamicConfiguration <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CompositeDynamicConfiguration</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>ConfigCenterConfig configCenter <span class="token operator">:</span> configCenters<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 从远程配置中心获取数据(应用配置，全局配置),==============prepareEnvironment重要==============</span>            compositeDynamicConfiguration<span class="token punctuation">.</span><span class="token function">addConfiguration</span><span class="token punctuation">(</span><span class="token function">prepareEnvironment</span><span class="token punctuation">(</span>configCenter<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        environment<span class="token punctuation">.</span><span class="token function">setDynamicConfiguration</span><span class="token punctuation">(</span>compositeDynamicConfiguration<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 刷新所有的XxConfig中的属性，除开ServiceConfig</span>    configManager<span class="token punctuation">.</span><span class="token function">refreshAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h4 id="prepareEnvironment"><a href="#prepareEnvironment" class="headerlink" title="prepareEnvironment"></a>prepareEnvironment</h4><p>远程从配置中心获取配置并根据是全局配置还是应用配置存入不同Map中，并且指定优先级，默认configCenterFirst 为 true</p><ul><li><strong>externalConfigurationMap  -&gt;  全局配置</strong></li><li><strong>appExternalConfigurationMap  -&gt;  应用配置</strong></li></ul><pre class=" language-java"><code class="language-java"><span class="token keyword">private</span> DynamicConfiguration <span class="token function">prepareEnvironment</span><span class="token punctuation">(</span>ConfigCenterConfig configCenter<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>configCenter<span class="token punctuation">.</span><span class="token function">isValid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>configCenter<span class="token punctuation">.</span><span class="token function">checkOrUpdateInited</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> null<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 获取配置中心</span>        DynamicConfiguration dynamicConfiguration <span class="token operator">=</span> <span class="token function">getDynamicConfiguration</span><span class="token punctuation">(</span>configCenter<span class="token punctuation">.</span><span class="token function">toUrl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 从配置中心获取全局配置，这里需要注意dubbo-admin存储到zk路径是否与dubbo自带获取路径是否一致，存在bug</span>        String configContent <span class="token operator">=</span> dynamicConfiguration<span class="token punctuation">.</span><span class="token function">getProperties</span><span class="token punctuation">(</span>configCenter<span class="token punctuation">.</span><span class="token function">getConfigFile</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> configCenter<span class="token punctuation">.</span><span class="token function">getGroup</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        String appGroup <span class="token operator">=</span> <span class="token function">getApplication</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        String appConfigContent <span class="token operator">=</span> null<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isNotEmpty</span><span class="token punctuation">(</span>appGroup<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 从配置中心获取应用配置，这里需要注意dubbo-admin存储到zk路径是否与dubbo自带获取路径是否一致，存在bug</span>            appConfigContent <span class="token operator">=</span> dynamicConfiguration<span class="token punctuation">.</span><span class="token function">getProperties</span>                    <span class="token punctuation">(</span><span class="token function">isNotEmpty</span><span class="token punctuation">(</span>configCenter<span class="token punctuation">.</span><span class="token function">getAppConfigFile</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">?</span> configCenter<span class="token punctuation">.</span><span class="token function">getAppConfigFile</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">:</span> configCenter<span class="token punctuation">.</span><span class="token function">getConfigFile</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                            appGroup                    <span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 指定优先级，后续配置排序会用到,默认configCenterFirst = true</span>        <span class="token comment" spellcheck="true">// 可通过配置dubbo.config-center.highest-priority: true|false指定</span>        environment<span class="token punctuation">.</span><span class="token function">setConfigCenterFirst</span><span class="token punctuation">(</span>configCenter<span class="token punctuation">.</span><span class="token function">isHighestPriority</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// externalConfigurationMap  ->  全局配置</span>        environment<span class="token punctuation">.</span><span class="token function">updateExternalConfigurationMap</span><span class="token punctuation">(</span><span class="token function">parseProperties</span><span class="token punctuation">(</span>configContent<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// appExternalConfigurationMap  ->  应用配置</span>        environment<span class="token punctuation">.</span><span class="token function">updateAppExternalConfigurationMap</span><span class="token punctuation">(</span><span class="token function">parseProperties</span><span class="token punctuation">(</span>appConfigContent<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> dynamicConfiguration<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> null<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h3 id="DubboBootstrap-exportServices"><a href="#DubboBootstrap-exportServices" class="headerlink" title="DubboBootstrap#exportServices"></a>DubboBootstrap#exportServices</h3><p>服务导出</p><p>这里我们直接进入export方法</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">synchronized</span> <span class="token keyword">void</span> <span class="token function">export</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">shouldExport</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>bootstrap <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>        bootstrap <span class="token operator">=</span> DubboBootstrap<span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        bootstrap<span class="token punctuation">.</span><span class="token function">initialize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 检查更新子配置 =======这里面有关于配置优先级的源码，很重要==========================</span>    <span class="token function">checkAndUpdateSubConfigs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//初始化服务元数据信息</span>    serviceMetadata<span class="token punctuation">.</span><span class="token function">setVersion</span><span class="token punctuation">(</span><span class="token function">getVersion</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    serviceMetadata<span class="token punctuation">.</span><span class="token function">setGroup</span><span class="token punctuation">(</span><span class="token function">getGroup</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    serviceMetadata<span class="token punctuation">.</span><span class="token function">setDefaultGroup</span><span class="token punctuation">(</span><span class="token function">getGroup</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    serviceMetadata<span class="token punctuation">.</span><span class="token function">setServiceType</span><span class="token punctuation">(</span><span class="token function">getInterfaceClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    serviceMetadata<span class="token punctuation">.</span><span class="token function">setServiceInterfaceName</span><span class="token punctuation">(</span><span class="token function">getInterface</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    serviceMetadata<span class="token punctuation">.</span><span class="token function">setTarget</span><span class="token punctuation">(</span><span class="token function">getRef</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 是否需要延迟加载，需要就启动一个定时器启动</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">shouldDelay</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        DELAY_EXPORT_EXECUTOR<span class="token punctuation">.</span><span class="token function">schedule</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token operator">:</span><span class="token operator">:</span>doExport<span class="token punctuation">,</span> <span class="token function">getDelay</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> TimeUnit<span class="token punctuation">.</span>MILLISECONDS<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// ======================重点导出服务==============</span>        <span class="token function">doExport</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">exported</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h4 id="checkAndUpdateSubConfigs"><a href="#checkAndUpdateSubConfigs" class="headerlink" title="checkAndUpdateSubConfigs"></a>checkAndUpdateSubConfigs</h4><p>检查和更新配置，是配置变得即全也新</p><pre class=" language-java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">checkAndUpdateSubConfigs</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// ServiceConfig中的某些属性如果是空的，那么就从ProviderConfig中获取,主要是protocols、configCenter、registryIds、protocolIds</span>    <span class="token function">completeCompoundConfigs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">checkDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">checkProtocol</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// ConfigInitializer接口扩展点 ---初始化配置前调用initServiceConfig</span>    List<span class="token operator">&lt;</span>ConfigInitializer<span class="token operator">></span> configInitializers <span class="token operator">=</span> ExtensionLoader<span class="token punctuation">.</span><span class="token function">getExtensionLoader</span><span class="token punctuation">(</span>ConfigInitializer<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">getActivateExtension</span><span class="token punctuation">(</span>URL<span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span><span class="token string">"configInitializer://"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> null<span class="token punctuation">)</span><span class="token punctuation">;</span>    configInitializers<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>e <span class="token operator">-</span><span class="token operator">></span> e<span class="token punctuation">.</span><span class="token function">initServiceConfig</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 如果protocol不是只有injvm协议，表示服务调用不是只在本机jvm里面调用，那就需要注册中心</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isOnlyInJvm</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 没有注册中心，报错</span>        <span class="token function">checkRegistry</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 刷新ServiceConfig配置，前面refreshAll的时候是没有刷新ServiceConfig,这里刷新</span>    <span class="token comment" spellcheck="true">// 这里面就有配置优先级逻辑</span>    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">refresh</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 当前服务对应的实现类是GenericService，没有指定接口，泛化接口</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>ref <span class="token keyword">instanceof</span> <span class="token class-name">GenericService</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        interfaceClass <span class="token operator">=</span> GenericService<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>StringUtils<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span>generic<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 是泛化接口</span>            generic <span class="token operator">=</span> Boolean<span class="token punctuation">.</span>TRUE<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 加载接口</span>        interfaceClass <span class="token operator">=</span> Class<span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span>interfaceName<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">,</span> Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                                       <span class="token punctuation">.</span><span class="token function">getContextClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 刷新MethodConfig，并判断MethodConfig中对应的方法在接口中是否存在</span>        <span class="token function">checkInterfaceAndMethods</span><span class="token punctuation">(</span>interfaceClass<span class="token punctuation">,</span> <span class="token function">getMethods</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 实现类是不是该接口类型</span>        <span class="token function">checkRef</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 不是泛化接口</span>        generic <span class="token operator">=</span> Boolean<span class="token punctuation">.</span>FALSE<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// =================代码太冗长，省略================</span>    <span class="token comment" spellcheck="true">// 1.处理local,本地调用</span>    <span class="token comment" spellcheck="true">// 2.处理stud,本地存根</span>    <span class="token comment" spellcheck="true">// ================================================</span>        <span class="token function">checkStubAndLocal</span><span class="token punctuation">(</span>interfaceClass<span class="token punctuation">)</span><span class="token punctuation">;</span>    ConfigValidationUtils<span class="token punctuation">.</span><span class="token function">checkMock</span><span class="token punctuation">(</span>interfaceClass<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    ConfigValidationUtils<span class="token punctuation">.</span><span class="token function">validateServiceConfig</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// ConfigPostProcessor接口扩展点 ---初始化配置结束后调用postProcessServiceConfig，可在这修改配置</span>    <span class="token function">postProcessConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h4 id="AbstractInterfaceConfig-refresh"><a href="#AbstractInterfaceConfig-refresh" class="headerlink" title="AbstractInterfaceConfig#refresh"></a>AbstractInterfaceConfig#refresh</h4><p>Dubbo中的配置类执行刷新方法都要来到这。XxConfig对象的属性需要从其他位置获取属性值,来进行属性的覆盖</p><p>覆盖的优先级2种，默认第一种</p><ol><li>系统变量-&gt;环境变量配置-&gt;配置中心应用配置-&gt;配置中心全局配置-&gt;自定义配置-&gt;dubbo.properties文件</li><li>系统变量-&gt;环境变量配置-&gt;自定义配置-&gt;配置中心应用配置-&gt;配置中心全局配置-&gt;dubbo.properties文件</li></ol><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">refresh</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    Environment env <span class="token operator">=</span> ApplicationModel<span class="token punctuation">.</span><span class="token function">getEnvironment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 获取配置顺序，就是优先级</span>    <span class="token comment" spellcheck="true">/*1. 系统变量->环境变量配置->配置中心应用配置->配置中心全局配置->自定义配置->dubbo.properties文件        2. 系统变量->环境变量配置->自定义配置->配置中心应用配置->配置中心全局配置->dubbo.properties文件*/</span>    CompositeConfiguration compositeConfiguration <span class="token operator">=</span> env<span class="token punctuation">.</span><span class="token function">getPrefixedConfiguration</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 获取所有方法</span>    Method<span class="token punctuation">[</span><span class="token punctuation">]</span> methods <span class="token operator">=</span> <span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getMethods</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>Method method <span class="token operator">:</span> methods<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 判断方法是不是set方法</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>MethodUtils<span class="token punctuation">.</span><span class="token function">isSetter</span><span class="token punctuation">(</span>method<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 从set方法后截取获得属性名，然后遍历上面的配置列表一个一个找，找到就调用set方法设值进去</span>            String value <span class="token operator">=</span> StringUtils<span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span>compositeConfiguration<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span><span class="token function">extractPropertyName</span><span class="token punctuation">(</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> method<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>StringUtils<span class="token punctuation">.</span><span class="token function">isNotEmpty</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> ClassUtils<span class="token punctuation">.</span><span class="token function">isTypeMatch</span><span class="token punctuation">(</span>method<span class="token punctuation">.</span><span class="token function">getParameterTypes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                method<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> ClassUtils<span class="token punctuation">.</span><span class="token function">convertPrimitive</span><span class="token punctuation">(</span>method<span class="token punctuation">.</span><span class="token function">getParameterTypes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 判断是不是setParameters()方法</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isParametersSetter</span><span class="token punctuation">(</span>method<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 获取值</span>            String value <span class="token operator">=</span> StringUtils<span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span>compositeConfiguration<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span><span class="token function">extractPropertyName</span><span class="token punctuation">(</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> method<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>StringUtils<span class="token punctuation">.</span><span class="token function">isNotEmpty</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// 调用getParameters()方法</span>                Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> String<span class="token operator">></span> map <span class="token operator">=</span> <span class="token function">invokeGetParameters</span><span class="token punctuation">(</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                map <span class="token operator">=</span> map <span class="token operator">==</span> null <span class="token operator">?</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">:</span> map<span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">// 解析值取出来put进原来的map中</span>                map<span class="token punctuation">.</span><span class="token function">putAll</span><span class="token punctuation">(</span><span class="token function">convert</span><span class="token punctuation">(</span>StringUtils<span class="token punctuation">.</span><span class="token function">parseParameters</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">// 调用setParameters()</span>                <span class="token function">invokeSetParameters</span><span class="token punctuation">(</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">,</span> map<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="doExport-gt-doExportUrls"><a href="#doExport-gt-doExportUrls" class="headerlink" title="doExport->doExportUrls"></a>doExport-&gt;doExportUrls</h4><p>获取url列表，并注册服务</p><pre class=" language-java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">doExportUrls</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    ServiceRepository repository <span class="token operator">=</span> ApplicationModel<span class="token punctuation">.</span><span class="token function">getServiceRepository</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    ServiceDescriptor serviceDescriptor <span class="token operator">=</span> repository<span class="token punctuation">.</span><span class="token function">registerService</span><span class="token punctuation">(</span><span class="token function">getInterfaceClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    repository<span class="token punctuation">.</span><span class="token function">registerProvider</span><span class="token punctuation">(</span>            <span class="token function">getUniqueServiceName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            ref<span class="token punctuation">,</span>            serviceDescriptor<span class="token punctuation">,</span>            <span class="token keyword">this</span><span class="token punctuation">,</span>            serviceMetadata    <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 获取注册中心URL列表</span>    List<span class="token operator">&lt;</span>URL<span class="token operator">></span> registryURLs <span class="token operator">=</span> ConfigValidationUtils<span class="token punctuation">.</span><span class="token function">loadRegistries</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>ProtocolConfig protocolConfig <span class="token operator">:</span> protocols<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 构建接口存入注册中心地址路径</span>        <span class="token comment" spellcheck="true">// 例：default/com.dm.DemoService:1.0</span>        String pathKey <span class="token operator">=</span> URL<span class="token punctuation">.</span><span class="token function">buildKey</span><span class="token punctuation">(</span><span class="token function">getContextPath</span><span class="token punctuation">(</span>protocolConfig<span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>p <span class="token operator">-</span><span class="token operator">></span> p <span class="token operator">+</span> <span class="token string">"/"</span> <span class="token operator">+</span> path<span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">orElse</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">,</span> group<span class="token punctuation">,</span> version<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// In case user specified path, register service one more time to map it to path.</span>        repository<span class="token punctuation">.</span><span class="token function">registerService</span><span class="token punctuation">(</span>pathKey<span class="token punctuation">,</span> interfaceClass<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// TODO, uncomment this line once service key is unified</span>        serviceMetadata<span class="token punctuation">.</span><span class="token function">setServiceKey</span><span class="token punctuation">(</span>pathKey<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">doExportUrlsFor1Protocol</span><span class="token punctuation">(</span>protocolConfig<span class="token punctuation">,</span> registryURLs<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="loadRegistries"><a href="#loadRegistries" class="headerlink" title="loadRegistries"></a>loadRegistries</h4><p>获取注册中心URL列表</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> List<span class="token operator">&lt;</span>URL<span class="token operator">></span> <span class="token function">loadRegistries</span><span class="token punctuation">(</span>AbstractInterfaceConfig interfaceConfig<span class="token punctuation">,</span> <span class="token keyword">boolean</span> provider<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// check &amp;&amp; override if necessary</span>    List<span class="token operator">&lt;</span>URL<span class="token operator">></span> registryList <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span>URL<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    ApplicationConfig application <span class="token operator">=</span> interfaceConfig<span class="token punctuation">.</span><span class="token function">getApplication</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 获取注册中心配置</span>    List<span class="token operator">&lt;</span>RegistryConfig<span class="token operator">></span> registries <span class="token operator">=</span> interfaceConfig<span class="token punctuation">.</span><span class="token function">getRegistries</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>CollectionUtils<span class="token punctuation">.</span><span class="token function">isNotEmpty</span><span class="token punctuation">(</span>registries<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>RegistryConfig config <span class="token operator">:</span> registries<span class="token punctuation">)</span> <span class="token punctuation">{</span>            String address <span class="token operator">=</span> config<span class="token punctuation">.</span><span class="token function">getAddress</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 如果注册中心没有配地址，则地址为0.0.0.0</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>StringUtils<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span>address<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                address <span class="token operator">=</span> ANYHOST_VALUE<span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>RegistryConfig<span class="token punctuation">.</span>NO_AVAILABLE<span class="token punctuation">.</span><span class="token function">equalsIgnoreCase</span><span class="token punctuation">(</span>address<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> String<span class="token operator">></span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span>String<span class="token punctuation">,</span> String<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">// 解析application并把参数存入map</span>                AbstractConfig<span class="token punctuation">.</span><span class="token function">appendParameters</span><span class="token punctuation">(</span>map<span class="token punctuation">,</span> application<span class="token punctuation">)</span><span class="token punctuation">;</span>                 <span class="token comment" spellcheck="true">// 解析注册中心配置并把参数存入map</span>                AbstractConfig<span class="token punctuation">.</span><span class="token function">appendParameters</span><span class="token punctuation">(</span>map<span class="token punctuation">,</span> config<span class="token punctuation">)</span><span class="token punctuation">;</span>                map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>PATH_KEY<span class="token punctuation">,</span> RegistryService<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                AbstractInterfaceConfig<span class="token punctuation">.</span><span class="token function">appendRuntimeParameters</span><span class="token punctuation">(</span>map<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">// 如果map中如果没有protocol，那么默认为dubbo</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>map<span class="token punctuation">.</span><span class="token function">containsKey</span><span class="token punctuation">(</span>PROTOCOL_KEY<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>PROTOCOL_KEY<span class="token punctuation">,</span> DUBBO_PROTOCOL<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token comment" spellcheck="true">// 构造注册中心url</span>                <span class="token comment" spellcheck="true">// 例：zookeeper://127.0.0.1:2181/org.apache.dubbo.registry.RegistryService?application=dubbo-demo-provider&amp;dubbo=2.0.2&amp;pid=12728&amp;qos.enable=false&amp;release=2.7.8&amp;timestamp=1620632029719</span>                List<span class="token operator">&lt;</span>URL<span class="token operator">></span> urls <span class="token operator">=</span> UrlUtils<span class="token punctuation">.</span><span class="token function">parseURLs</span><span class="token punctuation">(</span>address<span class="token punctuation">,</span> map<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">for</span> <span class="token punctuation">(</span>URL url <span class="token operator">:</span> urls<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    url <span class="token operator">=</span> URLBuilder<span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span>                            <span class="token punctuation">.</span><span class="token function">addParameter</span><span class="token punctuation">(</span>REGISTRY_KEY<span class="token punctuation">,</span> url<span class="token punctuation">.</span><span class="token function">getProtocol</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                            <span class="token punctuation">.</span><span class="token function">setProtocol</span><span class="token punctuation">(</span><span class="token function">extractRegistryType</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">)</span>                            <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token comment" spellcheck="true">// 例：registry://127.0.0.1:2181/org.apache.dubbo.registry.RegistryService?application=dubbo-demo-provider&amp;dubbo=2.0.2&amp;pid=12728&amp;qos.enable=false&amp;registry=zookeeper&amp;release=2.7.8&amp;timestamp=1620632029719</span>                    <span class="token comment" spellcheck="true">// 如果是服务提供者，获取register的值，如果为false，表示该服务不注册到注册中心</span>                    <span class="token comment" spellcheck="true">// 如果是服务消费者，获取subscribe的值，如果为false，表示该引入的服务不订阅注册中心中的数据</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>provider <span class="token operator">&amp;&amp;</span> url<span class="token punctuation">.</span><span class="token function">getParameter</span><span class="token punctuation">(</span>REGISTER_KEY<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                            <span class="token operator">||</span> <span class="token punctuation">(</span><span class="token operator">!</span>provider <span class="token operator">&amp;&amp;</span> url<span class="token punctuation">.</span><span class="token function">getParameter</span><span class="token punctuation">(</span>SUBSCRIBE_KEY<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                        registryList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> registryList<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h4 id="doExportUrlsFor1Protocol"><a href="#doExportUrlsFor1Protocol" class="headerlink" title="doExportUrlsFor1Protocol"></a>doExportUrlsFor1Protocol</h4><p>这个方法代码太长，便于阅读只贴部分重要代码</p><p>这个方法主要做的就是把服务解析为一个URL资源，然后注册到注册中心（注册中心是列表表示，每个注册中心都注册服务）。</p><ol><li><p>所有配置类信息全部放到map中准备</p></li><li><p>获取到访问该服务的host和port组装成URL服务资源</p><pre class=" language-java"><code class="language-java">String host <span class="token operator">=</span> <span class="token function">findConfigedHosts</span><span class="token punctuation">(</span>protocolConfig<span class="token punctuation">,</span> registryURLs<span class="token punctuation">,</span> map<span class="token punctuation">)</span><span class="token punctuation">;</span>Integer port <span class="token operator">=</span> <span class="token function">findConfigedPorts</span><span class="token punctuation">(</span>protocolConfig<span class="token punctuation">,</span> name<span class="token punctuation">,</span> map<span class="token punctuation">)</span><span class="token punctuation">;</span>URL url <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">URL</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> host<span class="token punctuation">,</span> port<span class="token punctuation">,</span> <span class="token function">getContextPath</span><span class="token punctuation">(</span>protocolConfig<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>p <span class="token operator">-</span><span class="token operator">></span> p <span class="token operator">+</span> <span class="token string">"/"</span> <span class="token operator">+</span> path<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">orElse</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">,</span> map<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li><li><p>通过ConfiguratorFactory SPI扩展点，处理URL服务资源</p><pre class=" language-java"><code class="language-java"><span class="token keyword">if</span> <span class="token punctuation">(</span>ExtensionLoader<span class="token punctuation">.</span><span class="token function">getExtensionLoader</span><span class="token punctuation">(</span>ConfiguratorFactory<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">hasExtension</span><span class="token punctuation">(</span>url<span class="token punctuation">.</span><span class="token function">getProtocol</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    url <span class="token operator">=</span> ExtensionLoader<span class="token punctuation">.</span><span class="token function">getExtensionLoader</span><span class="token punctuation">(</span>ConfiguratorFactory<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">getExtension</span><span class="token punctuation">(</span>url<span class="token punctuation">.</span><span class="token function">getProtocol</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getConfigurator</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">configure</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre></li><li><p>向注册中心注册服务</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// z注册中心是列表，保证服务会向每一个注册中心注册</span><span class="token keyword">for</span> <span class="token punctuation">(</span>URL registryURL <span class="token operator">:</span> registryURLs<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 协议是injvm就不需要注册到注册中心，它是在JVM内部调用</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>LOCAL_PROTOCOL<span class="token punctuation">.</span><span class="token function">equalsIgnoreCase</span><span class="token punctuation">(</span>url<span class="token punctuation">.</span><span class="token function">getProtocol</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">continue</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 该服务是否是动态，对应zookeeper上表示是否是临时节点，对应dubbo中的功能就是静态服务</span>    url <span class="token operator">=</span> url<span class="token punctuation">.</span><span class="token function">addParameterIfAbsent</span><span class="token punctuation">(</span>DYNAMIC_KEY<span class="token punctuation">,</span> registryURL<span class="token punctuation">.</span><span class="token function">getParameter</span><span class="token punctuation">(</span>DYNAMIC_KEY<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 获取监控中心URL资源</span>    URL monitorUrl <span class="token operator">=</span> ConfigValidationUtils<span class="token punctuation">.</span><span class="token function">loadMonitor</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> registryURL<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>monitorUrl <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>        url <span class="token operator">=</span> url<span class="token punctuation">.</span><span class="token function">addParameterAndEncoded</span><span class="token punctuation">(</span>MONITOR_KEY<span class="token punctuation">,</span> monitorUrl<span class="token punctuation">.</span><span class="token function">toFullString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 服务使用的动态代理机制,默认SPI为javassit</span>    String proxy <span class="token operator">=</span> url<span class="token punctuation">.</span><span class="token function">getParameter</span><span class="token punctuation">(</span>PROXY_KEY<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>StringUtils<span class="token punctuation">.</span><span class="token function">isNotEmpty</span><span class="token punctuation">(</span>proxy<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        registryURL <span class="token operator">=</span> registryURL<span class="token punctuation">.</span><span class="token function">addParameter</span><span class="token punctuation">(</span>PROXY_KEY<span class="token punctuation">,</span> proxy<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// ProxyFactory PROXY_FACTORY = ExtensionLoader.getExtensionLoader(ProxyFactory.class).getAdaptiveExtension();</span>    <span class="token comment" spellcheck="true">// 我们又发现ProxyFactory#getInvoker方法里面带有URL,getAdaptiveExtension表示会从Url中获取参数proxy来动态获取PROXY_FACTORY</span>    <span class="token comment" spellcheck="true">// 功能：使用代理生成一个Invoker，Invoker表示服务提供者的代理，Invoker#invoke执行服务</span>    <span class="token comment" spellcheck="true">// 生成的invoker包括了服务的实现者、服务接口类、服务的注册地址（参数export指定了当前服务）</span>    Invoker<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> invoker <span class="token operator">=</span> PROXY_FACTORY<span class="token punctuation">.</span><span class="token function">getInvoker</span><span class="token punctuation">(</span>ref<span class="token punctuation">,</span> <span class="token punctuation">(</span>Class<span class="token punctuation">)</span> interfaceClass<span class="token punctuation">,</span> registryURL<span class="token punctuation">.</span><span class="token function">addParameterAndEncoded</span><span class="token punctuation">(</span>EXPORT_KEY<span class="token punctuation">,</span> url<span class="token punctuation">.</span><span class="token function">toFullString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 更完整服务提供者，包括了Invoker和服务的配置</span>    DelegateProviderMetaDataInvoker wrapperInvoker <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DelegateProviderMetaDataInvoker</span><span class="token punctuation">(</span>invoker<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 通过SPI获取到PROTOCOL为RegistryProtocol</span>    Exporter<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> exporter <span class="token operator">=</span> PROTOCOL<span class="token punctuation">.</span><span class="token function">export</span><span class="token punctuation">(</span>wrapperInvoker<span class="token punctuation">)</span><span class="token punctuation">;</span>    exporters<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>exporter<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre></li></ol><h4 id="RegistryProtocol-export"><a href="#RegistryProtocol-export" class="headerlink" title="RegistryProtocol#export"></a>RegistryProtocol#export</h4><p>之前都是做一些准备工作，到这才是真正的服务导出</p><ol><li>⽣成监听器，监听动态配置中⼼此服务的参数数据的变化，⼀旦监听到变化，则重写服务URL，在服务导出时先重写⼀次服务URL</li><li>拿到重写之后的URL之后，调⽤doLocalExport()进⾏服务导出，通过SPI调⽤DubboProtocol#export导出服务，导出成功后将得到⼀个ExporterChangeableWrapper</li><li>从Invoker中获取注册中⼼的实现类，⽐如ZookeeperRegistry</li><li>简化服务URL，省略掉不⽤注册到注册中⼼的参数</li><li>ZookeeperRegistry#registry()注册服务</li></ol><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token operator">&lt;</span>T<span class="token operator">></span> Exporter<span class="token operator">&lt;</span>T<span class="token operator">></span> <span class="token function">export</span><span class="token punctuation">(</span><span class="token keyword">final</span> Invoker<span class="token operator">&lt;</span>T<span class="token operator">></span> originInvoker<span class="token punctuation">)</span> <span class="token keyword">throws</span> RpcException <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 获取注册中心资源，其实就是把protocol换了  registry->parameters.get("registry"),这里我用的是zookeeper为注册中心</span>    <span class="token comment" spellcheck="true">// registry://xxx?registry=zookeeper ---> zookeeper://xxx</span>    URL registryUrl <span class="token operator">=</span> <span class="token function">getRegistryUrl</span><span class="token punctuation">(</span>originInvoker<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 把registryUrl中export后参数弄出来，这就是服务提供者资源</span>    URL providerUrl <span class="token operator">=</span> <span class="token function">getProviderUrl</span><span class="token punctuation">(</span>originInvoker<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 服务提供者资源基础上，生成一个overrideSubscribeUrl，协议为provider://xxx，增加参数category=configurators&amp;check=false</span>    <span class="token keyword">final</span> URL overrideSubscribeUrl <span class="token operator">=</span> <span class="token function">getSubscribedOverrideUrl</span><span class="token punctuation">(</span>providerUrl<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// overrideSubscribeUrl->OverrideListener，用来监听变化事件，监听到overrideSubscribeUrl的变化后， OverrideListener就会根据变化进行相应处理，具体处理逻辑看OverrideListener的实现</span>    <span class="token keyword">final</span> OverrideListener overrideSubscribeListener <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">OverrideListener</span><span class="token punctuation">(</span>overrideSubscribeUrl<span class="token punctuation">,</span> originInvoker<span class="token punctuation">)</span><span class="token punctuation">;</span>    overrideListeners<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>overrideSubscribeUrl<span class="token punctuation">,</span> overrideSubscribeListener<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 监听到动态配置变化后，重写URL资源，这里面有2个监听</span>    <span class="token comment" spellcheck="true">// providerConfigurationListener表示应用级别的动态配置监听器，providerConfigurationListener是RegistyProtocol的一个属性</span>    <span class="token comment" spellcheck="true">// serviceConfigurationListener表示服务级别的动态配置监听器，serviceConfigurationListener是在每暴露一个服务时就会生成一个</span>    providerUrl <span class="token operator">=</span> <span class="token function">overrideUrlWithConfig</span><span class="token punctuation">(</span>providerUrl<span class="token punctuation">,</span> overrideSubscribeListener<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 通过调用originInvoker和providerUrl资源导出服务，这里会启动Netty服务接收请求，============doLocalExport可以研究一波===========</span>    <span class="token keyword">final</span> ExporterChangeableWrapper<span class="token operator">&lt;</span>T<span class="token operator">></span> exporter <span class="token operator">=</span> <span class="token function">doLocalExport</span><span class="token punctuation">(</span>originInvoker<span class="token punctuation">,</span> providerUrl<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// ListenerRegistryWrapper->ZookeeperRegistry</span>    <span class="token keyword">final</span> Registry registry <span class="token operator">=</span> <span class="token function">getRegistry</span><span class="token punctuation">(</span>originInvoker<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 简化服务URL并注册到注册中心</span>    <span class="token keyword">final</span> URL registeredProviderUrl <span class="token operator">=</span> <span class="token function">getUrlToRegistry</span><span class="token punctuation">(</span>providerUrl<span class="token punctuation">,</span> registryUrl<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 是否需要注册到注册中心</span>    <span class="token keyword">boolean</span> register <span class="token operator">=</span> providerUrl<span class="token punctuation">.</span><span class="token function">getParameter</span><span class="token punctuation">(</span>REGISTER_KEY<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>register<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 注册，这里很简单</span>        <span class="token comment" spellcheck="true">// ListenerRegistryWrapper->FailbackRegistry（重试机制）->ZookeeperRegistry#doRegister（这里连接zk创建节点）</span>        <span class="token function">register</span><span class="token punctuation">(</span>registryUrl<span class="token punctuation">,</span> registeredProviderUrl<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// register stated url on provider model</span>    <span class="token function">registerStatedUrl</span><span class="token punctuation">(</span>registryUrl<span class="token punctuation">,</span> registeredProviderUrl<span class="token punctuation">,</span> register<span class="token punctuation">)</span><span class="token punctuation">;</span>    exporter<span class="token punctuation">.</span><span class="token function">setRegisterUrl</span><span class="token punctuation">(</span>registeredProviderUrl<span class="token punctuation">)</span><span class="token punctuation">;</span>    exporter<span class="token punctuation">.</span><span class="token function">setSubscribeUrl</span><span class="token punctuation">(</span>overrideSubscribeUrl<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// Deprecated! Subscribe to override rules in 2.6.x or before</span>    <span class="token comment" spellcheck="true">// overrideSubscribeUrl和overrideSubscribeListener绑定</span>    registry<span class="token punctuation">.</span><span class="token function">subscribe</span><span class="token punctuation">(</span>overrideSubscribeUrl<span class="token punctuation">,</span> overrideSubscribeListener<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">notifyExport</span><span class="token punctuation">(</span>exporter<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//Ensure that a new exporter instance is returned every time export</span>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">DestroyableExporter</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span>exporter<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>RegistryProtocol#doLocalExport</p><pre class=" language-java"><code class="language-java"><span class="token keyword">private</span> <span class="token operator">&lt;</span>T<span class="token operator">></span> ExporterChangeableWrapper<span class="token operator">&lt;</span>T<span class="token operator">></span> <span class="token function">doLocalExport</span><span class="token punctuation">(</span><span class="token keyword">final</span> Invoker<span class="token operator">&lt;</span>T<span class="token operator">></span> originInvoker<span class="token punctuation">,</span> URL providerUrl<span class="token punctuation">)</span> <span class="token punctuation">{</span>    String key <span class="token operator">=</span> <span class="token function">getCacheKey</span><span class="token punctuation">(</span>originInvoker<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>ExporterChangeableWrapper<span class="token operator">&lt;</span>T<span class="token operator">></span><span class="token punctuation">)</span> bounds<span class="token punctuation">.</span><span class="token function">computeIfAbsent</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> s <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>        Invoker<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> invokerDelegate <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">InvokerDelegate</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span>originInvoker<span class="token punctuation">,</span> providerUrl<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 通过invokerDelegate中URL参数SPI动态获取protocol协议类，这里的export主要做的事情就是开启Netty(协议Dubbo)或Tomcat(协议http)</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ExporterChangeableWrapper</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">(</span>Exporter<span class="token operator">&lt;</span>T<span class="token operator">></span><span class="token punctuation">)</span> protocol<span class="token punctuation">.</span><span class="token function">export</span><span class="token punctuation">(</span>invokerDelegate<span class="token punctuation">)</span><span class="token punctuation">,</span> originInvoker<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h2 id="监听器覆盖规则"><a href="#监听器覆盖规则" class="headerlink" title="监听器覆盖规则"></a>监听器覆盖规则</h2><p>不管是OverrideListener，providerConfigurationListener还是serviceConfigurationListener监听器都走了RegistryProtocol#doOverrideIfNecessary。这里就是规则覆写逻辑</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">synchronized</span> <span class="token keyword">void</span> <span class="token function">doOverrideIfNecessary</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">final</span> Invoker<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> invoker<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>originInvoker <span class="token keyword">instanceof</span> <span class="token class-name">InvokerDelegate</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        invoker <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>InvokerDelegate<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span><span class="token punctuation">)</span> originInvoker<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getInvoker</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        invoker <span class="token operator">=</span> originInvoker<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 当前服务的原始服务提供者url</span>    URL originUrl <span class="token operator">=</span> RegistryProtocol<span class="token punctuation">.</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getProviderUrl</span><span class="token punctuation">(</span>invoker<span class="token punctuation">)</span><span class="token punctuation">;</span>    String key <span class="token operator">=</span> <span class="token function">getCacheKey</span><span class="token punctuation">(</span>originInvoker<span class="token punctuation">)</span><span class="token punctuation">;</span>    ExporterChangeableWrapper<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> exporter <span class="token operator">=</span> bounds<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 当前服务被导出的url</span>    URL currentUrl <span class="token operator">=</span> exporter<span class="token punctuation">.</span><span class="token function">getInvoker</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getUrl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 根据configurators修改url，configurators是全量的，并不是某个新增的或删除的，所以是基于原始的url进行修改，并不是基于currentUrl</span>    URL newUrl <span class="token operator">=</span> <span class="token function">getConfigedInvokerUrl</span><span class="token punctuation">(</span>configurators<span class="token punctuation">,</span> currentUrl<span class="token punctuation">)</span><span class="token punctuation">;</span>    newUrl <span class="token operator">=</span> <span class="token function">getConfigedInvokerUrl</span><span class="token punctuation">(</span>providerConfigurationListener<span class="token punctuation">.</span><span class="token function">getConfigurators</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> newUrl<span class="token punctuation">)</span><span class="token punctuation">;</span>    newUrl <span class="token operator">=</span> <span class="token function">getConfigedInvokerUrl</span><span class="token punctuation">(</span>serviceConfigurationListeners<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>originUrl<span class="token punctuation">.</span><span class="token function">getServiceKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">getConfigurators</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> newUrl<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 修改过的url如果和目前的url不相同，则重新按newUrl导出</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>currentUrl<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>newUrl<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 重新导出</span>        RegistryProtocol<span class="token punctuation">.</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">reExport</span><span class="token punctuation">(</span>originInvoker<span class="token punctuation">,</span> newUrl<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>服务导出流程</p><ol><li>确定配置（这里有优先级的确定），有系统变量、环境变量配置、配置中心应用配置、配置中心全局配置、自定义配置、dubbo.properties文件</li><li>构造服务URL资源</li><li>开启Netty(协议Dubbo)或Tomcat(协议http)服务接收请求</li><li>将服务URL注册到注册中⼼去</li><li>Dubbo⽀持动态配置服务参数，服务导出时绑定监听器Listener来监听服务的参数是否有修改，如果发现有修改，则需要重新进⾏导出</li></ol><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Dubbo </tag>
            
            <tag> Java </tag>
            
            <tag> 源码 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringBoot与Dubbo整合源码分析</title>
      <link href="/2021/05/17/springboot-yu-dubbo-zheng-he-yuan-ma-fen-xi/"/>
      <url>/2021/05/17/springboot-yu-dubbo-zheng-he-yuan-ma-fen-xi/</url>
      
        <content type="html"><![CDATA[<h2 id="Demo"><a href="#Demo" class="headerlink" title="Demo"></a>Demo</h2><p>SpringBoot整合Dubbo只需加个依赖，服务提供者加注解@Service  (dubbo的不是spring的，后改为@DubboService)，服务消费者加注解@Reference注解</p><h3 id="加依赖"><a href="#加依赖" class="headerlink" title="加依赖"></a>加依赖</h3><pre class=" language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!-- Dubbo集成进SpringBoot --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.apache.dubbo<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>dubbo-spring-boot-starter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.7.5<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!-- zookeeper所需依赖 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.apache.dubbo<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>dubbo-dependencies-zookeeper<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.7.8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>type</span><span class="token punctuation">></span></span>pom<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>type</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>exclusions</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>exclusion</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>slf4j-log4j12<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.slf4j<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>exclusion</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>exclusions</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre><h3 id="服务提供者"><a href="#服务提供者" class="headerlink" title="服务提供者"></a>服务提供者</h3><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Service</span><span class="token punctuation">(</span>group <span class="token operator">=</span> <span class="token string">"default"</span><span class="token punctuation">,</span> version <span class="token operator">=</span> <span class="token string">"1.0"</span><span class="token punctuation">)</span><span class="token annotation punctuation">@Slf4j</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DemoServiceImpl</span> <span class="token keyword">implements</span> <span class="token class-name">DemoService</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> String <span class="token function">called</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span> <span class="token punctuation">{</span>        URL url <span class="token operator">=</span> RpcContext<span class="token punctuation">.</span><span class="token function">getContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getUrl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        String msg <span class="token operator">=</span> url<span class="token punctuation">.</span><span class="token function">getProtocol</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">":"</span> <span class="token operator">+</span> url<span class="token punctuation">.</span><span class="token function">getPort</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">",Hello,"</span> <span class="token operator">+</span> name<span class="token punctuation">;</span>        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> msg<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="服务消费者"><a href="#服务消费者" class="headerlink" title="服务消费者"></a>服务消费者</h3><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@RestController</span><span class="token annotation punctuation">@Slf4j</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DemoServiceController</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Reference</span><span class="token punctuation">(</span>group <span class="token operator">=</span> <span class="token string">"default"</span><span class="token punctuation">,</span> version <span class="token operator">=</span> <span class="token string">"1.0"</span><span class="token punctuation">,</span> cache <span class="token operator">=</span> <span class="token string">"lru"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> DemoService demoService<span class="token punctuation">;</span>    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/default"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> String <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> demoService<span class="token punctuation">.</span><span class="token function">called</span><span class="token punctuation">(</span><span class="token string">"默认服务"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="入口"><a href="#入口" class="headerlink" title="入口"></a>入口</h2><p>任何框架与SpringBoot集成都是通过starter包和autoconfigure进行集成，我们首先看到jar包依赖这边我们依赖了dubbo-spring-boot-starter。</p><p><img src="https://blog-dm.oss-cn-shanghai.aliyuncs.com/articleimage/image-20210506113525348.png"></p><p>我们看到这2个autoconfigure下的spring.factories</p><p><img src="https://blog-dm.oss-cn-shanghai.aliyuncs.com/articleimage/20210506145228.png"></p><p><img src="https://blog-dm.oss-cn-shanghai.aliyuncs.com/articleimage/20210506145245.png"></p><p>这里我们重点关注DubboAutoConfiguration这个类</p><h2 id="DubboAutoConfiguration"><a href="#DubboAutoConfiguration" class="headerlink" title="DubboAutoConfiguration"></a>DubboAutoConfiguration</h2><p>这个类的重点是<code>@EnableDubboConfig</code>和<code>ServiceClassPostProcessor</code></p><p>功能：</p><ol><li><code>@EnableDubboConfig</code>去解析配置类</li><li>把<code>ServiceClassPostProcessor</code>后置处理器通过springboot自动装配注入到spring中</li></ol><p>这里我们一步一步的来看</p><h2 id="EnableDubboConfig"><a href="#EnableDubboConfig" class="headerlink" title="@EnableDubboConfig"></a>@EnableDubboConfig</h2><p>打开这个类我们发现<code>@Import(DubboConfigConfigurationRegistrar.class)</code>，DubboConfigConfigurationRegistrar这个类重写了<code>ImportBeanDefinitionRegistrar(AnnotationMetadata importingClassMetadata, BeanDefinitionRegistry registry)</code>方法，这个方法包含参数BeanDefinitionRegistry，Dubbo可以通过BeanDefinitionRegistry注册BeanDefinition。(Spring Import相关知识)</p><h3 id="DubboConfigConfigurationRegistrar"><a href="#DubboConfigConfigurationRegistrar" class="headerlink" title="DubboConfigConfigurationRegistrar"></a>DubboConfigConfigurationRegistrar</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DubboConfigConfigurationRegistrar</span> <span class="token keyword">implements</span> <span class="token class-name">ImportBeanDefinitionRegistrar</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">registerBeanDefinitions</span><span class="token punctuation">(</span>AnnotationMetadata importingClassMetadata<span class="token punctuation">,</span> BeanDefinitionRegistry registry<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 获取EnableDubboConfig上面的信息，这里主要获取的是multiple的值默认为true</span>        AnnotationAttributes attributes <span class="token operator">=</span> AnnotationAttributes<span class="token punctuation">.</span><span class="token function">fromMap</span><span class="token punctuation">(</span>                importingClassMetadata<span class="token punctuation">.</span><span class="token function">getAnnotationAttributes</span><span class="token punctuation">(</span>EnableDubboConfig<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 获取EnableDubboConfig标签中的multiple属性默认为true</span>        <span class="token keyword">boolean</span> multiple <span class="token operator">=</span> attributes<span class="token punctuation">.</span><span class="token function">getBoolean</span><span class="token punctuation">(</span><span class="token string">"multiple"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 注册bean定义 ===== 重点 ===========</span>        <span class="token function">registerBeans</span><span class="token punctuation">(</span>registry<span class="token punctuation">,</span> DubboConfigConfiguration<span class="token punctuation">.</span>Single<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>multiple<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// Since 2.6.6 https://github.com/apache/dubbo/issues/3193</span>            <span class="token function">registerBeans</span><span class="token punctuation">(</span>registry<span class="token punctuation">,</span> DubboConfigConfiguration<span class="token punctuation">.</span>Multiple<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// Since 2.7.6</span>        <span class="token comment" spellcheck="true">// 注册公共的bean,5个</span>        <span class="token comment" spellcheck="true">// ReferenceAnnotationBeanPostProcessor,DubboConfigAliasPostProcessor,</span>        <span class="token comment" spellcheck="true">// DubboLifecycleComponentApplicationListener,DubboBootstrapApplicationListener,</span>        <span class="token comment" spellcheck="true">// DubboConfigDefaultPropertyValueBeanPostProcessor</span>        <span class="token function">registerCommonBeans</span><span class="token punctuation">(</span>registry<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>需要注意的是这里注册了<code>ReferenceAnnotationBeanPostProcessor</code>，这个Bean后置处理器和解析@Reference相关</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">registerBeans</span><span class="token punctuation">(</span>BeanDefinitionRegistry registry<span class="token punctuation">,</span> Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> annotatedClasses<span class="token punctuation">)</span> <span class="token punctuation">{</span>    Set<span class="token operator">&lt;</span>Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">>></span> classesToRegister <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedHashSet</span><span class="token operator">&lt;</span>Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">>></span><span class="token punctuation">(</span><span class="token function">asList</span><span class="token punctuation">(</span>annotatedClasses<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    Iterator<span class="token operator">&lt;</span>Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">>></span> iterator <span class="token operator">=</span> classesToRegister<span class="token punctuation">.</span><span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">// 已经被注册过得Bean不在重新注册，移除classesToRegister中已注册过的bean</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>iterator<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> annotatedClass <span class="token operator">=</span> iterator<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isPresentBean</span><span class="token punctuation">(</span>registry<span class="token punctuation">,</span> annotatedClass<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            iterator<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 通过AnnotatedBeanDefinitionReader批量注册classesToRegister</span>    AnnotatedBeanDefinitionReader reader <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AnnotatedBeanDefinitionReader</span><span class="token punctuation">(</span>registry<span class="token punctuation">)</span><span class="token punctuation">;</span>    reader<span class="token punctuation">.</span><span class="token function">register</span><span class="token punctuation">(</span>classesToRegister<span class="token punctuation">.</span><span class="token function">toArray</span><span class="token punctuation">(</span>EMPTY_CLASS_ARRAY<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h3 id="DubboConfigConfiguration"><a href="#DubboConfigConfiguration" class="headerlink" title="DubboConfigConfiguration"></a>DubboConfigConfiguration</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DubboConfigConfiguration</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 通过前缀（prefix）去spring的environment中匹配，并通过后置处理器将值绑定到类（type）中，生成beanDefinition</span>    <span class="token annotation punctuation">@EnableConfigurationBeanBindings</span><span class="token punctuation">(</span><span class="token punctuation">{</span>            <span class="token annotation punctuation">@EnableConfigurationBeanBinding</span><span class="token punctuation">(</span>prefix <span class="token operator">=</span> <span class="token string">"dubbo.application"</span><span class="token punctuation">,</span> type <span class="token operator">=</span> ApplicationConfig<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token annotation punctuation">@EnableConfigurationBeanBinding</span><span class="token punctuation">(</span>prefix <span class="token operator">=</span> <span class="token string">"dubbo.module"</span><span class="token punctuation">,</span> type <span class="token operator">=</span> ModuleConfig<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token annotation punctuation">@EnableConfigurationBeanBinding</span><span class="token punctuation">(</span>prefix <span class="token operator">=</span> <span class="token string">"dubbo.registry"</span><span class="token punctuation">,</span> type <span class="token operator">=</span> RegistryConfig<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token annotation punctuation">@EnableConfigurationBeanBinding</span><span class="token punctuation">(</span>prefix <span class="token operator">=</span> <span class="token string">"dubbo.protocol"</span><span class="token punctuation">,</span> type <span class="token operator">=</span> ProtocolConfig<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token annotation punctuation">@EnableConfigurationBeanBinding</span><span class="token punctuation">(</span>prefix <span class="token operator">=</span> <span class="token string">"dubbo.monitor"</span><span class="token punctuation">,</span> type <span class="token operator">=</span> MonitorConfig<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token annotation punctuation">@EnableConfigurationBeanBinding</span><span class="token punctuation">(</span>prefix <span class="token operator">=</span> <span class="token string">"dubbo.provider"</span><span class="token punctuation">,</span> type <span class="token operator">=</span> ProviderConfig<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token annotation punctuation">@EnableConfigurationBeanBinding</span><span class="token punctuation">(</span>prefix <span class="token operator">=</span> <span class="token string">"dubbo.consumer"</span><span class="token punctuation">,</span> type <span class="token operator">=</span> ConsumerConfig<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token annotation punctuation">@EnableConfigurationBeanBinding</span><span class="token punctuation">(</span>prefix <span class="token operator">=</span> <span class="token string">"dubbo.config-center"</span><span class="token punctuation">,</span> type <span class="token operator">=</span> ConfigCenterBean<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token annotation punctuation">@EnableConfigurationBeanBinding</span><span class="token punctuation">(</span>prefix <span class="token operator">=</span> <span class="token string">"dubbo.metadata-report"</span><span class="token punctuation">,</span> type <span class="token operator">=</span> MetadataReportConfig<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token annotation punctuation">@EnableConfigurationBeanBinding</span><span class="token punctuation">(</span>prefix <span class="token operator">=</span> <span class="token string">"dubbo.metrics"</span><span class="token punctuation">,</span> type <span class="token operator">=</span> MetricsConfig<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token annotation punctuation">@EnableConfigurationBeanBinding</span><span class="token punctuation">(</span>prefix <span class="token operator">=</span> <span class="token string">"dubbo.ssl"</span><span class="token punctuation">,</span> type <span class="token operator">=</span> SslConfig<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">Single</span> <span class="token punctuation">{</span>       <span class="token punctuation">}</span>        <span class="token annotation punctuation">@EnableConfigurationBeanBindings</span><span class="token punctuation">(</span><span class="token punctuation">{</span>            <span class="token annotation punctuation">@EnableConfigurationBeanBinding</span><span class="token punctuation">(</span>prefix <span class="token operator">=</span> <span class="token string">"dubbo.applications"</span><span class="token punctuation">,</span> type <span class="token operator">=</span> ApplicationConfig<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> multiple <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token annotation punctuation">@EnableConfigurationBeanBinding</span><span class="token punctuation">(</span>prefix <span class="token operator">=</span> <span class="token string">"dubbo.modules"</span><span class="token punctuation">,</span> type <span class="token operator">=</span> ModuleConfig<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> multiple <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token annotation punctuation">@EnableConfigurationBeanBinding</span><span class="token punctuation">(</span>prefix <span class="token operator">=</span> <span class="token string">"dubbo.registries"</span><span class="token punctuation">,</span> type <span class="token operator">=</span> RegistryConfig<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> multiple <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token annotation punctuation">@EnableConfigurationBeanBinding</span><span class="token punctuation">(</span>prefix <span class="token operator">=</span> <span class="token string">"dubbo.protocols"</span><span class="token punctuation">,</span> type <span class="token operator">=</span> ProtocolConfig<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> multiple <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token annotation punctuation">@EnableConfigurationBeanBinding</span><span class="token punctuation">(</span>prefix <span class="token operator">=</span> <span class="token string">"dubbo.monitors"</span><span class="token punctuation">,</span> type <span class="token operator">=</span> MonitorConfig<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> multiple <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token annotation punctuation">@EnableConfigurationBeanBinding</span><span class="token punctuation">(</span>prefix <span class="token operator">=</span> <span class="token string">"dubbo.providers"</span><span class="token punctuation">,</span> type <span class="token operator">=</span> ProviderConfig<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> multiple <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token annotation punctuation">@EnableConfigurationBeanBinding</span><span class="token punctuation">(</span>prefix <span class="token operator">=</span> <span class="token string">"dubbo.consumers"</span><span class="token punctuation">,</span> type <span class="token operator">=</span> ConsumerConfig<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> multiple <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token annotation punctuation">@EnableConfigurationBeanBinding</span><span class="token punctuation">(</span>prefix <span class="token operator">=</span> <span class="token string">"dubbo.config-centers"</span><span class="token punctuation">,</span> type <span class="token operator">=</span> ConfigCenterBean<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> multiple <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token annotation punctuation">@EnableConfigurationBeanBinding</span><span class="token punctuation">(</span>prefix <span class="token operator">=</span> <span class="token string">"dubbo.metadata-reports"</span><span class="token punctuation">,</span> type <span class="token operator">=</span> MetadataReportConfig<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> multiple <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token annotation punctuation">@EnableConfigurationBeanBinding</span><span class="token punctuation">(</span>prefix <span class="token operator">=</span> <span class="token string">"dubbo.metricses"</span><span class="token punctuation">,</span> type <span class="token operator">=</span> MetricsConfig<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> multiple <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">Multiple</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>观察这个类中包含了Multiple和Single2个子类，而这2个子类上都有@EnableConfigurationBeanBindings注解。</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Target</span><span class="token punctuation">(</span><span class="token punctuation">{</span>ElementType<span class="token punctuation">.</span>TYPE<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token annotation punctuation">@Retention</span><span class="token punctuation">(</span>RetentionPolicy<span class="token punctuation">.</span>RUNTIME<span class="token punctuation">)</span><span class="token annotation punctuation">@Documented</span><span class="token annotation punctuation">@Import</span><span class="token punctuation">(</span>ConfigurationBeanBindingsRegister<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token keyword">public</span> @<span class="token keyword">interface</span> <span class="token class-name">EnableConfigurationBeanBindings</span> <span class="token punctuation">{</span>    EnableConfigurationBeanBinding<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>注解上同样import了一个类ConfigurationBeanBindingsRegister，发现这个类实现了ImportBeanDefinitionRegistrar, EnvironmentAware2个类，知道spring的都知道ImportBeanDefinitionRegistrar表明了可以注册beanDefinition,EnvironmentAware表明可以设置环境。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ConfigurationBeanBindingsRegister</span> <span class="token keyword">implements</span> <span class="token class-name">ImportBeanDefinitionRegistrar</span><span class="token punctuation">,</span> EnvironmentAware <span class="token punctuation">{</span>    <span class="token keyword">private</span> ConfigurableEnvironment environment<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">registerBeanDefinitions</span><span class="token punctuation">(</span>AnnotationMetadata importingClassMetadata<span class="token punctuation">,</span> BeanDefinitionRegistry registry<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 获取@EnableConfigurationBeanBindings注解上的所有属性值</span>        AnnotationAttributes attributes <span class="token operator">=</span> AnnotationAttributes<span class="token punctuation">.</span><span class="token function">fromMap</span><span class="token punctuation">(</span>                importingClassMetadata<span class="token punctuation">.</span><span class="token function">getAnnotationAttributes</span><span class="token punctuation">(</span>EnableConfigurationBeanBindings<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 拿到多个@EnableDubboConfigBinding注解</span>        AnnotationAttributes<span class="token punctuation">[</span><span class="token punctuation">]</span> annotationAttributes <span class="token operator">=</span> attributes<span class="token punctuation">.</span><span class="token function">getAnnotationArray</span><span class="token punctuation">(</span><span class="token string">"value"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ConfigurationBeanBindingRegistrar registrar <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ConfigurationBeanBindingRegistrar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        registrar<span class="token punctuation">.</span><span class="token function">setEnvironment</span><span class="token punctuation">(</span>environment<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>AnnotationAttributes element <span class="token operator">:</span> annotationAttributes<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 逐个解析@EnableDubboConfigBinding注解 ======这个方法可以看下============</span>            registrar<span class="token punctuation">.</span><span class="token function">registerConfigurationBeanDefinitions</span><span class="token punctuation">(</span>element<span class="token punctuation">,</span> registry<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setEnvironment</span><span class="token punctuation">(</span>Environment environment<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Assert<span class="token punctuation">.</span><span class="token function">isInstanceOf</span><span class="token punctuation">(</span>ConfigurableEnvironment<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> environment<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>environment <span class="token operator">=</span> <span class="token punctuation">(</span>ConfigurableEnvironment<span class="token punctuation">)</span> environment<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="ConfigurationBeanBindingRegistrar-registerConfigurationBeanDefinitions"><a href="#ConfigurationBeanBindingRegistrar-registerConfigurationBeanDefinitions" class="headerlink" title="ConfigurationBeanBindingRegistrar#registerConfigurationBeanDefinitions"></a>ConfigurationBeanBindingRegistrar#registerConfigurationBeanDefinitions</h3><ol><li>DubboConfigConfiguration下的@EnableDubboConfigBinding注解</li><li>通过@EnableDubboConfigBinding注解中的前缀匹配到配置文件中的配置项</li><li>通过@EnableDubboConfigBinding中class和配置项生成bean定义</li><li>注册bean定义</li></ol><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// @EnableDubboConfigBinding注解上的所有值</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">registerConfigurationBeanDefinitions</span><span class="token punctuation">(</span>Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Object<span class="token operator">></span> attributes<span class="token punctuation">,</span> BeanDefinitionRegistry registry<span class="token punctuation">)</span> <span class="token punctuation">{</span>    String prefix <span class="token operator">=</span> <span class="token function">getRequiredAttribute</span><span class="token punctuation">(</span>attributes<span class="token punctuation">,</span> <span class="token string">"prefix"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    prefix <span class="token operator">=</span> environment<span class="token punctuation">.</span><span class="token function">resolvePlaceholders</span><span class="token punctuation">(</span>prefix<span class="token punctuation">)</span><span class="token punctuation">;</span>    Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> configClass <span class="token operator">=</span> <span class="token function">getRequiredAttribute</span><span class="token punctuation">(</span>attributes<span class="token punctuation">,</span> <span class="token string">"type"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">boolean</span> multiple <span class="token operator">=</span> <span class="token function">getAttribute</span><span class="token punctuation">(</span>attributes<span class="token punctuation">,</span> <span class="token string">"multiple"</span><span class="token punctuation">,</span> <span class="token function">valueOf</span><span class="token punctuation">(</span>DEFAULT_MULTIPLE<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">boolean</span> ignoreUnknownFields <span class="token operator">=</span> <span class="token function">getAttribute</span><span class="token punctuation">(</span>attributes<span class="token punctuation">,</span> <span class="token string">"ignoreUnknownFields"</span><span class="token punctuation">,</span> <span class="token function">valueOf</span><span class="token punctuation">(</span>DEFAULT_IGNORE_UNKNOWN_FIELDS<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">boolean</span> ignoreInvalidFields <span class="token operator">=</span> <span class="token function">getAttribute</span><span class="token punctuation">(</span>attributes<span class="token punctuation">,</span> <span class="token string">"ignoreInvalidFields"</span><span class="token punctuation">,</span> <span class="token function">valueOf</span><span class="token punctuation">(</span>DEFAULT_IGNORE_INVALID_FIELDS<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// ===================重要方法===================</span>    <span class="token function">registerConfigurationBeans</span><span class="token punctuation">(</span>prefix<span class="token punctuation">,</span> configClass<span class="token punctuation">,</span> multiple<span class="token punctuation">,</span> ignoreUnknownFields<span class="token punctuation">,</span> ignoreInvalidFields<span class="token punctuation">,</span> registry<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">registerConfigurationBeans</span><span class="token punctuation">(</span>String prefix<span class="token punctuation">,</span> Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> configClass<span class="token punctuation">,</span> <span class="token keyword">boolean</span> multiple<span class="token punctuation">,</span>                                        <span class="token keyword">boolean</span> ignoreUnknownFields<span class="token punctuation">,</span> <span class="token keyword">boolean</span> ignoreInvalidFields<span class="token punctuation">,</span>                                        BeanDefinitionRegistry registry<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 从配置文件中根据前缀拿对应的配置项</span>    Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Object<span class="token operator">></span> configurationProperties <span class="token operator">=</span> PropertySourcesUtils<span class="token punctuation">.</span><span class="token function">getSubProperties</span><span class="token punctuation">(</span>environment<span class="token punctuation">.</span><span class="token function">getPropertySources</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> environment<span class="token punctuation">,</span> prefix<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// multiple控制是否会存在有多个bean，比如</span>    <span class="token comment" spellcheck="true">/*dubbo.protocols.p1.id=dubbo1    dubbo.protocols.p1.name=dubbo    dubbo.protocols.p1.port=20881    dubbo.protocols.p1.host=0.0.0.0            dubbo.protocols.p2.id=dubbo1    dubbo.protocols.p2.name=dubbo    dubbo.protocols.p2.port=20881    dubbo.protocols.p2.host=0.0.0.0*/</span>    <span class="token comment" spellcheck="true">// 这种讲道理应该生成多个bean,而且这多个bean直接按protocols后的p1,p2命名</span>    Set<span class="token operator">&lt;</span>String<span class="token operator">></span> beanNames <span class="token operator">=</span> multiple <span class="token operator">?</span> <span class="token function">resolveMultipleBeanNames</span><span class="token punctuation">(</span>configurationProperties<span class="token punctuation">)</span> <span class="token operator">:</span>            <span class="token function">singleton</span><span class="token punctuation">(</span><span class="token function">resolveSingleBeanName</span><span class="token punctuation">(</span>configurationProperties<span class="token punctuation">,</span> configClass<span class="token punctuation">,</span> registry<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 注册上面解析出来的beanName为beanDefinition,,但需要注意的是这里只是beanDeinition,其中的属性值并没有设置，是在bean的后置处理器中处理</span>    <span class="token comment" spellcheck="true">// 在注册过程中beanDefinition.setSource(ENABLE_CONFIGURATION_BINDING_CLASS);后面会bean后置处理器会通过它区分bean是否是这里引过去的</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>String beanName <span class="token operator">:</span> beanNames<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">registerConfigurationBean</span><span class="token punctuation">(</span>beanName<span class="token punctuation">,</span> configClass<span class="token punctuation">,</span> multiple<span class="token punctuation">,</span> ignoreUnknownFields<span class="token punctuation">,</span> ignoreInvalidFields<span class="token punctuation">,</span>                configurationProperties<span class="token punctuation">,</span> registry<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 注册一个ConfigurationBeanBindingPostProcessor的Bean后置处理器</span>    <span class="token function">registerConfigurationBindingBeanPostProcessor</span><span class="token punctuation">(</span>registry<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h3 id="ConfigurationBeanBindingPostProcessor"><a href="#ConfigurationBeanBindingPostProcessor" class="headerlink" title="ConfigurationBeanBindingPostProcessor"></a>ConfigurationBeanBindingPostProcessor</h3><p>主要解决的是之前只是注册了beanDefinition，属性值并没有设到bean中，我们需要在bean实例化之前进行属性赋值，所以需要在bean的后置处理器中进行处理。</p><p>我们发现ConfigurationBeanBindingPostProcessor实现了BeanPostProcessor，并且实现了postProcessBeforeInitialization接口，从这里可以看出实例化之前调用postProcessBeforeInitialization接口进行属性赋值。</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> Object <span class="token function">postProcessBeforeInitialization</span><span class="token punctuation">(</span>Object bean<span class="token punctuation">,</span> String beanName<span class="token punctuation">)</span> <span class="token keyword">throws</span> BeansException <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 获取beanDefinition</span>    BeanDefinition beanDefinition <span class="token operator">=</span> <span class="token function">getNullableBeanDefinition</span><span class="token punctuation">(</span>beanName<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 判断bean是不是@EnableConfigurationBeanBinding注册的bean</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isConfigurationBean</span><span class="token punctuation">(</span>bean<span class="token punctuation">,</span> beanDefinition<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 属性值绑定到bean上</span>        <span class="token function">bindConfigurationBean</span><span class="token punctuation">(</span>bean<span class="token punctuation">,</span> beanDefinition<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">customize</span><span class="token punctuation">(</span>beanName<span class="token punctuation">,</span> bean<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> bean<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h2 id="ServiceClassPostProcessor"><a href="#ServiceClassPostProcessor" class="headerlink" title="ServiceClassPostProcessor"></a>ServiceClassPostProcessor</h2><p>这个类主要干的事就是扫描包，注册beanDefinition，由于它实现了BeanDefinitionRegistryPostProcessor，是一个bean工厂的后置处理器（可以注册bean定义）</p><p><strong>有个注意点，Dubbo扫描包注册成的beanDefinition不是一个是2个，一个是Spring的BeanDefinition还有一个是Dubbo的ServiceBean，为什么还需要一个Dubbo的ServiceBean，因为Dubbo如果仅仅只使用Spring的BeanDefinition会缺少很多@Service的注解信息，Dubbo会利用@Service上的信息进行填充产生一个新的bean-ServiceBean。而且用自己的bean可以做很多的处理</strong></p><p>所以在扫描到⼀个@Service注解后，其实会得到两个Bean:</p><ol><li>服务实现类本身Bean对象</li><li>对应的ServiceBean类型的Bean对象</li></ol><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">postProcessBeanDefinitionRegistry</span><span class="token punctuation">(</span>BeanDefinitionRegistry registry<span class="token punctuation">)</span> <span class="token keyword">throws</span> BeansException <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// @since 2.7.5</span>    <span class="token comment" spellcheck="true">// 注册一个事件监听器，spring事件为ContextRefreshedEvent时，会调用dubboBootstrap.start();</span>    <span class="token function">registerInfrastructureBean</span><span class="token punctuation">(</span>registry<span class="token punctuation">,</span> DubboBootstrapApplicationListener<span class="token punctuation">.</span>BEAN_NAME<span class="token punctuation">,</span> DubboBootstrapApplicationListener<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 获取包扫描路径</span>    Set<span class="token operator">&lt;</span>String<span class="token operator">></span> resolvedPackagesToScan <span class="token operator">=</span> <span class="token function">resolvePackagesToScan</span><span class="token punctuation">(</span>packagesToScan<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>CollectionUtils<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span>resolvedPackagesToScan<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 扫描包,注册ServiceBean ========重点===========</span>        <span class="token function">registerServiceBeans</span><span class="token punctuation">(</span>resolvedPackagesToScan<span class="token punctuation">,</span> registry<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>logger<span class="token punctuation">.</span><span class="token function">isWarnEnabled</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            logger<span class="token punctuation">.</span><span class="token function">warn</span><span class="token punctuation">(</span><span class="token string">"packagesToScan is empty , ServiceBean registry will be ignored!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="ServiceAnnotationBeanPostProcessor-registerServiceBeans"><a href="#ServiceAnnotationBeanPostProcessor-registerServiceBeans" class="headerlink" title="ServiceAnnotationBeanPostProcessor#registerServiceBeans"></a>ServiceAnnotationBeanPostProcessor#registerServiceBeans</h3><ol><li>扫描被标注了@DubboService和@Service注解的类</li><li>注册bean</li></ol><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// ====================去掉了一些不必要的log代码===========</span><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">registerServiceBeans</span><span class="token punctuation">(</span>Set<span class="token operator">&lt;</span>String<span class="token operator">></span> packagesToScan<span class="token punctuation">,</span> BeanDefinitionRegistry registry<span class="token punctuation">)</span> <span class="token punctuation">{</span>    DubboClassPathBeanDefinitionScanner scanner <span class="token operator">=</span>            <span class="token keyword">new</span> <span class="token class-name">DubboClassPathBeanDefinitionScanner</span><span class="token punctuation">(</span>registry<span class="token punctuation">,</span> environment<span class="token punctuation">,</span> resourceLoader<span class="token punctuation">)</span><span class="token punctuation">;</span>    BeanNameGenerator beanNameGenerator <span class="token operator">=</span> <span class="token function">resolveBeanNameGenerator</span><span class="token punctuation">(</span>registry<span class="token punctuation">)</span><span class="token punctuation">;</span>    scanner<span class="token punctuation">.</span><span class="token function">setBeanNameGenerator</span><span class="token punctuation">(</span>beanNameGenerator<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// refactor @since 2.7.7</span>    <span class="token comment" spellcheck="true">// 扫描一些有注解的类，这注解主要有3种(不同版本不一样，需注意)</span>    <span class="token comment" spellcheck="true">// DubboService.class,（新版本，与Spring区分）</span>    <span class="token comment" spellcheck="true">// org.apache.dubbo.config.annotation.Service,（老版本）</span>    <span class="token comment" spellcheck="true">// com.alibaba.dubbo.config.annotation.Service.class（兼容）</span>    serviceAnnotationTypes<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>annotationType <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>        scanner<span class="token punctuation">.</span><span class="token function">addIncludeFilter</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">AnnotationTypeFilter</span><span class="token punctuation">(</span>annotationType<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>String packageToScan <span class="token operator">:</span> packagesToScan<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// Registers @Service Bean first</span>        <span class="token comment" spellcheck="true">// 调用Spring的scan方法会生成beanDefinition最后生成了bean,这就是服务实现类本身Bean对象</span>        scanner<span class="token punctuation">.</span><span class="token function">scan</span><span class="token punctuation">(</span>packageToScan<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 查找被@Service注解的类的BeanDefinition（无论这个类有没有被@ComponentScan注解标注了）</span>        Set<span class="token operator">&lt;</span>BeanDefinitionHolder<span class="token operator">></span> beanDefinitionHolders <span class="token operator">=</span>                <span class="token function">findServiceBeanDefinitionHolders</span><span class="token punctuation">(</span>scanner<span class="token punctuation">,</span> packageToScan<span class="token punctuation">,</span> registry<span class="token punctuation">,</span> beanNameGenerator<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>CollectionUtils<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span>beanDefinitionHolders<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>           <span class="token comment" spellcheck="true">// 扫描到BeanDefinition开始处理它</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span>BeanDefinitionHolder beanDefinitionHolder <span class="token operator">:</span> beanDefinitionHolders<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// ============================核心方法=====================</span>                <span class="token function">registerServiceBean</span><span class="token punctuation">(</span>beanDefinitionHolder<span class="token punctuation">,</span> registry<span class="token punctuation">,</span> scanner<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>     <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="ServiceAnnotationBeanPostProcessor-registerServiceBean"><a href="#ServiceAnnotationBeanPostProcessor-registerServiceBean" class="headerlink" title="ServiceAnnotationBeanPostProcessor#registerServiceBean"></a>ServiceAnnotationBeanPostProcessor#registerServiceBean</h3><p>注册Bean</p><pre class=" language-java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">registerServiceBean</span><span class="token punctuation">(</span>BeanDefinitionHolder beanDefinitionHolder<span class="token punctuation">,</span> BeanDefinitionRegistry registry<span class="token punctuation">,</span>                                 DubboClassPathBeanDefinitionScanner scanner<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 服务实现类</span>    Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> beanClass <span class="token operator">=</span> <span class="token function">resolveClass</span><span class="token punctuation">(</span>beanDefinitionHolder<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 拿到注解,这里拿到的是@Service</span>    Annotation service <span class="token operator">=</span> <span class="token function">findServiceAnnotation</span><span class="token punctuation">(</span>beanClass<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 获取注解上的属性值（这里也包括了缺省值）</span>    AnnotationAttributes serviceAnnotationAttributes <span class="token operator">=</span> <span class="token function">getAnnotationAttributes</span><span class="token punctuation">(</span>service<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 服务实现类的接口类</span>    Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> interfaceClass <span class="token operator">=</span> <span class="token function">resolveServiceInterfaceClass</span><span class="token punctuation">(</span>serviceAnnotationAttributes<span class="token punctuation">,</span> beanClass<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 服务实现类对应的bean的名字</span>    String annotatedServiceBeanName <span class="token operator">=</span> beanDefinitionHolder<span class="token punctuation">.</span><span class="token function">getBeanName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 构建ServiceBeanDefinition  这个过程可以看下==========================稍重点====================</span>    AbstractBeanDefinition serviceBeanDefinition <span class="token operator">=</span>            <span class="token function">buildServiceBeanDefinition</span><span class="token punctuation">(</span>service<span class="token punctuation">,</span> serviceAnnotationAttributes<span class="token punctuation">,</span> interfaceClass<span class="token punctuation">,</span> annotatedServiceBeanName<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// ServiceBean的名字</span>    String beanName <span class="token operator">=</span> <span class="token function">generateServiceBeanName</span><span class="token punctuation">(</span>serviceAnnotationAttributes<span class="token punctuation">,</span> interfaceClass<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 检查重复的候选bean</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>scanner<span class="token punctuation">.</span><span class="token function">checkCandidate</span><span class="token punctuation">(</span>beanName<span class="token punctuation">,</span> serviceBeanDefinition<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// check duplicated candidate bean</span>        <span class="token comment" spellcheck="true">// ServiceBean注册为beanDefinition</span>        registry<span class="token punctuation">.</span><span class="token function">registerBeanDefinition</span><span class="token punctuation">(</span>beanName<span class="token punctuation">,</span> serviceBeanDefinition<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token punctuation">}</span></code></pre><h4 id="buildServiceBeanDefinition"><a href="#buildServiceBeanDefinition" class="headerlink" title="buildServiceBeanDefinition"></a>buildServiceBeanDefinition</h4><p>生成一个ServiceBean对应的BeanDefinition</p><pre class=" language-java"><code class="language-java"><span class="token keyword">private</span> AbstractBeanDefinition <span class="token function">buildServiceBeanDefinition</span><span class="token punctuation">(</span>Annotation serviceAnnotation<span class="token punctuation">,</span>                                                          AnnotationAttributes serviceAnnotationAttributes<span class="token punctuation">,</span>                                                          Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> interfaceClass<span class="token punctuation">,</span>                                                          String annotatedServiceBeanName<span class="token punctuation">)</span> <span class="token punctuation">{</span>    BeanDefinitionBuilder builder <span class="token operator">=</span> <span class="token function">rootBeanDefinition</span><span class="token punctuation">(</span>ServiceBean<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    AbstractBeanDefinition beanDefinition <span class="token operator">=</span> builder<span class="token punctuation">.</span><span class="token function">getBeanDefinition</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    MutablePropertyValues propertyValues <span class="token operator">=</span> beanDefinition<span class="token punctuation">.</span><span class="token function">getPropertyValues</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 把serviceAnnotation中的参数值赋值给ServiceBean的属性</span>    <span class="token comment" spellcheck="true">// 忽略掉一些属性，因为这些属性不能做简单的属性赋值，需要经过一些操作，</span>    <span class="token comment" spellcheck="true">// 比如protocol这个是需要引用的是bean，而不是字符串,这里我们就要通过字符串去找到bean赋值</span>    String<span class="token punctuation">[</span><span class="token punctuation">]</span> ignoreAttributeNames <span class="token operator">=</span> <span class="token function">of</span><span class="token punctuation">(</span><span class="token string">"provider"</span><span class="token punctuation">,</span> <span class="token string">"monitor"</span><span class="token punctuation">,</span> <span class="token string">"application"</span><span class="token punctuation">,</span> <span class="token string">"module"</span><span class="token punctuation">,</span> <span class="token string">"registry"</span><span class="token punctuation">,</span> <span class="token string">"protocol"</span><span class="token punctuation">,</span>            <span class="token string">"interface"</span><span class="token punctuation">,</span> <span class="token string">"interfaceName"</span><span class="token punctuation">,</span> <span class="token string">"parameters"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    propertyValues<span class="token punctuation">.</span><span class="token function">addPropertyValues</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">AnnotationPropertyValuesAdapter</span><span class="token punctuation">(</span>serviceAnnotation<span class="token punctuation">,</span> environment<span class="token punctuation">,</span> ignoreAttributeNames<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// ref属性赋值为另外一个bean, 对应的就是被@Service注解的服务实现类对应的bean</span>    <span class="token function">addPropertyReference</span><span class="token punctuation">(</span>builder<span class="token punctuation">,</span> <span class="token string">"ref"</span><span class="token punctuation">,</span> annotatedServiceBeanName<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 赋值接口</span>    builder<span class="token punctuation">.</span><span class="token function">addPropertyValue</span><span class="token punctuation">(</span><span class="token string">"interface"</span><span class="token punctuation">,</span> interfaceClass<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 赋值参数</span>    builder<span class="token punctuation">.</span><span class="token function">addPropertyValue</span><span class="token punctuation">(</span><span class="token string">"parameters"</span><span class="token punctuation">,</span> <span class="token function">convertParameters</span><span class="token punctuation">(</span>serviceAnnotationAttributes<span class="token punctuation">.</span><span class="token function">getStringArray</span><span class="token punctuation">(</span><span class="token string">"parameters"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// Add methods parameters</span>    List<span class="token operator">&lt;</span>MethodConfig<span class="token operator">></span> methodConfigs <span class="token operator">=</span> <span class="token function">convertMethodConfigs</span><span class="token punctuation">(</span>serviceAnnotationAttributes<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"methods"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>methodConfigs<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        builder<span class="token punctuation">.</span><span class="token function">addPropertyValue</span><span class="token punctuation">(</span><span class="token string">"methods"</span><span class="token punctuation">,</span> methodConfigs<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 下面也是一些参数的赋值，就删掉了。。。。。。</span>        <span class="token comment" spellcheck="true">// beanDefinition返回</span>    <span class="token keyword">return</span> builder<span class="token punctuation">.</span><span class="token function">getBeanDefinition</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h4 id="generateServiceBeanName"><a href="#generateServiceBeanName" class="headerlink" title="generateServiceBeanName"></a>generateServiceBeanName</h4><p>生成ServiceBean的bean名称</p><p>逻辑很简单就是把group，version等拼接</p><pre class=" language-java"><code class="language-java"><span class="token keyword">private</span> String <span class="token function">generateServiceBeanName</span><span class="token punctuation">(</span>AnnotationAttributes serviceAnnotationAttributes<span class="token punctuation">,</span> Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> interfaceClass<span class="token punctuation">)</span> <span class="token punctuation">{</span>    ServiceBeanNameBuilder builder <span class="token operator">=</span> <span class="token function">create</span><span class="token punctuation">(</span>interfaceClass<span class="token punctuation">,</span> environment<span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">group</span><span class="token punctuation">(</span>serviceAnnotationAttributes<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span><span class="token string">"group"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">version</span><span class="token punctuation">(</span>serviceAnnotationAttributes<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span><span class="token string">"version"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> builder<span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p><img src="https://blog-dm.oss-cn-shanghai.aliyuncs.com/articleimage/20210507135239.png"></p><h2 id="ReferenceAnnotationBeanPostProcessor"><a href="#ReferenceAnnotationBeanPostProcessor" class="headerlink" title="ReferenceAnnotationBeanPostProcessor"></a>ReferenceAnnotationBeanPostProcessor</h2><p>这个后置处理器主要是针对于@Reference生成ReferenceBean并进行依赖注入</p><p>在@EnableDubboConfig下的DubboConfigConfigurationRegistrar类中registerCommonBeans方法注入了ReferenceAnnotationBeanPostProcessor后置处理器我们发现这个后置处理器实现了<code>InstantiationAwareBeanPostProcessor.postProcessPropertyValues</code>这个方法，而这个方法是在依赖注入的时候调用的。</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 构造方法中传入三个匹配注解，存到annotationTypes，后面匹配的时候会使用存到annotationTypes</span><span class="token keyword">public</span> <span class="token function">ReferenceAnnotationBeanPostProcessor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">super</span><span class="token punctuation">(</span>DubboReference<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> Reference<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> com<span class="token punctuation">.</span>alibaba<span class="token punctuation">.</span>dubbo<span class="token punctuation">.</span>config<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Reference<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> PropertyValues <span class="token function">postProcessPropertyValues</span><span class="token punctuation">(</span>        PropertyValues pvs<span class="token punctuation">,</span> PropertyDescriptor<span class="token punctuation">[</span><span class="token punctuation">]</span> pds<span class="token punctuation">,</span> Object bean<span class="token punctuation">,</span> String beanName<span class="token punctuation">)</span> <span class="token keyword">throws</span> BeanCreationException <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 寻找需要注入的属性被@Reference注解</span>    <span class="token comment" spellcheck="true">// 这里通过构造方法配置的DubboReference.class, Reference.class, com.alibaba.dubbo.config.annotation.Reference.class中找到注解的方法或字段</span>    <span class="token comment" spellcheck="true">// AnnotatedFieldElement  AnnotatedMethodElement</span>    InjectionMetadata metadata <span class="token operator">=</span> <span class="token function">findInjectionMetadata</span><span class="token punctuation">(</span>beanName<span class="token punctuation">,</span> bean<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> pvs<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>        metadata<span class="token punctuation">.</span><span class="token function">inject</span><span class="token punctuation">(</span>bean<span class="token punctuation">,</span> beanName<span class="token punctuation">,</span> pvs<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">BeanCreationException</span> ex<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">throw</span> ex<span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Throwable</span> ex<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">BeanCreationException</span><span class="token punctuation">(</span>beanName<span class="token punctuation">,</span> <span class="token string">"Injection of @"</span> <span class="token operator">+</span> <span class="token function">getAnnotationType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getSimpleName</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token operator">+</span> <span class="token string">" dependencies is failed"</span><span class="token punctuation">,</span> ex<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> pvs<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h3 id="buildAnnotatedMetadata"><a href="#buildAnnotatedMetadata" class="headerlink" title="buildAnnotatedMetadata"></a>buildAnnotatedMetadata</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">private</span> AbstractAnnotationBeanPostProcessor<span class="token punctuation">.</span>AnnotatedInjectionMetadata <span class="token function">buildAnnotatedMetadata</span><span class="token punctuation">(</span><span class="token keyword">final</span> Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> beanClass<span class="token punctuation">)</span> <span class="token punctuation">{</span>    Collection<span class="token operator">&lt;</span>AbstractAnnotationBeanPostProcessor<span class="token punctuation">.</span>AnnotatedFieldElement<span class="token operator">></span> fieldElements <span class="token operator">=</span> <span class="token function">findFieldAnnotationMetadata</span><span class="token punctuation">(</span>beanClass<span class="token punctuation">)</span><span class="token punctuation">;</span>    Collection<span class="token operator">&lt;</span>AbstractAnnotationBeanPostProcessor<span class="token punctuation">.</span>AnnotatedMethodElement<span class="token operator">></span> methodElements <span class="token operator">=</span> <span class="token function">findAnnotatedMethodMetadata</span><span class="token punctuation">(</span>beanClass<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">AbstractAnnotationBeanPostProcessor<span class="token punctuation">.</span>AnnotatedInjectionMetadata</span><span class="token punctuation">(</span>beanClass<span class="token punctuation">,</span> fieldElements<span class="token punctuation">,</span> methodElements<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h3 id="doGetInjectedBean"><a href="#doGetInjectedBean" class="headerlink" title="doGetInjectedBean"></a>doGetInjectedBean</h3><p>注入调用栈</p><p>metadata.inject-&gt;element.inject-&gt;AnnotatedFieldElement#inject-&gt;getInjectedObject-&gt;doGetInjectedBean</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Override</span><span class="token keyword">protected</span> Object <span class="token function">doGetInjectedBean</span><span class="token punctuation">(</span>AnnotationAttributes attributes<span class="token punctuation">,</span> Object bean<span class="token punctuation">,</span> String beanName<span class="token punctuation">,</span> Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> injectedType<span class="token punctuation">,</span>                                   InjectionMetadata<span class="token punctuation">.</span>InjectedElement injectedElement<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * The name of bean that annotated Dubbo's {@link Service @Service} in local Spring {@link ApplicationContext}     */</span>    <span class="token comment" spellcheck="true">// 生成referencedBeanName， 规则ServiceBean:interfaceClassName:version:group</span>    <span class="token comment" spellcheck="true">// 是本地的ServiceBean(当前应用自己提供的ServiceBean)</span>    <span class="token comment" spellcheck="true">// 例: ServiceBean:com.dm.DemoService:1.0:default</span>    String referencedBeanName <span class="token operator">=</span> <span class="token function">buildReferencedBeanName</span><span class="token punctuation">(</span>attributes<span class="token punctuation">,</span> injectedType<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * The name of bean that is declared by {@link Reference @Reference} annotation injection     */</span>    <span class="token comment" spellcheck="true">// 根据@Reference注解的信息生成referenceBeanName</span>    <span class="token comment" spellcheck="true">// 这里是把它作为key值，为了区分相同注入相同实现类却不是相同属性的类比如</span>    <span class="token comment" spellcheck="true">/*    @Reference(group=default)    private DemoService demoService1;    @Reference(group=hhh)    private DemoService demoService2;    */</span>    <span class="token comment" spellcheck="true">// 例：@Reference(group=default,cache=lru,version=1.0) com.dm.DemoService</span>    String referenceBeanName <span class="token operator">=</span> <span class="token function">getReferenceBeanName</span><span class="token punctuation">(</span>attributes<span class="token punctuation">,</span> injectedType<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 生成一个ReferenceBean对象（这里是会判断缓存中是不是有，有就会使用之前的类）</span>    ReferenceBean referenceBean <span class="token operator">=</span> <span class="token function">buildReferenceBeanIfAbsent</span><span class="token punctuation">(</span>referenceBeanName<span class="token punctuation">,</span> attributes<span class="token punctuation">,</span> injectedType<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 判断spring容器中是否有这个serviceBean</span>    <span class="token keyword">boolean</span> localServiceBean <span class="token operator">=</span> <span class="token function">isLocalServiceBean</span><span class="token punctuation">(</span>referencedBeanName<span class="token punctuation">,</span> referenceBean<span class="token punctuation">,</span> attributes<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">prepareReferenceBean</span><span class="token punctuation">(</span>referencedBeanName<span class="token punctuation">,</span> referenceBean<span class="token punctuation">,</span> localServiceBean<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 注册referenceBean到Spring容器</span>    <span class="token comment" spellcheck="true">// 这里面会首先判断spring是不是有这个ServiceBean,有的话直接注册一个referencedBeanName的别名，没有的话就以referencedBeanName为beanName注册一个beanDefinition</span>    <span class="token function">registerReferenceBean</span><span class="token punctuation">(</span>referencedBeanName<span class="token punctuation">,</span> referenceBean<span class="token punctuation">,</span> attributes<span class="token punctuation">,</span> localServiceBean<span class="token punctuation">,</span> injectedType<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">cacheInjectedReferenceBean</span><span class="token punctuation">(</span>referenceBean<span class="token punctuation">,</span> injectedElement<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 获取一个代理对象</span>    <span class="token keyword">return</span> referenceBean<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>这里的总结分为三部分</p><ul><li><p>配置文件的解析与生成多个配置bean(ApplicationConfig， ModuleConfig，RegistryConfig.class，ProtocolConfig)</p><ol><li>通过DubboConfigConfiguration#Single或Multiple配置的前缀和配置类</li><li>通过前缀和配置类去spring的environment进行匹配，然后将匹配获取的值存入配置类的BeanDefinition中</li><li>通过bean后置处理器在Bean实例化之前进行属性绑定</li><li>完整bean生成</li></ol></li><li><p>扫描@Service并生成ServiceBean</p><ol><li>通过bean工厂的后置处理器扫描有@Service,@DubboService标注的类</li><li>扫描后会生成一个当前实现类的beanDefinition（spring生成的）</li><li>然后生成一个Dubbo的beanDefinition实现ServiceBean，目的为了可以处理跟多Dubbo逻辑，还有存储@Service注解上的属性值</li></ol></li><li><p>注入属性@Reference</p><ol><li>在Bean的后置处理器中调用postProcessPropertyValues方法处理</li><li>首先扫描注入点也就是被@Reference，@DubboReference注解的方法和类</li><li>根据@Reference中的注解信息(group,version)生成一个新的baneName为referencedBeanName，</li><li>根据@Reference中的注解信息(group,version)生成一个新的baneName为缓存key值为referenceBeanName，</li><li>判断容器中是不是有referencedBeanName（有，是因为当前注入的类是本项目@DubboService标注的类）；有注册一个referencedBeanName的别名，没有的话就以referencedBeanName为beanName注册一个beanDefinition</li><li>然后创建一个代理对象进行依赖注入（这里为什么要创建代理对象呢？直接使用beanDefinition生成bean不行吗？简单来说就是和ServiceBean创建代理对象一个道理，它会有一些Dubbo逻辑处理在其中，还会依赖存储一些属性值）</li></ol></li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Dubbo </tag>
            
            <tag> Java </tag>
            
            <tag> 源码 </tag>
            
            <tag> Spring </tag>
            
            <tag> SpringBoot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Dubbo SPI机制</title>
      <link href="/2021/05/07/dubbo-spi-ji-zhi/"/>
      <url>/2021/05/07/dubbo-spi-ji-zhi/</url>
      
        <content type="html"><![CDATA[<h2 id="什么是-SPI"><a href="#什么是-SPI" class="headerlink" title="什么是 SPI"></a>什么是 SPI</h2><p>SPI全称是Service provider interface，顾名思义就是服务提供接口，本质上就是以接口的形式提供服务。</p><p>SPI目标就是对应用提供可拔插的服务，应用会首先提供一个接口进行扩展。我们只需要在META-INF下建立一个service/接口全限定名 文件。文件内容就是实现类，可以通过编程发现classpath下所有实现的这个接口的类并将它们全部加载到JVM中。</p><p><img src="https://blog-dm.oss-cn-shanghai.aliyuncs.com/articleimage/20210429150725.png"></p><p>MySQL的驱动包就利用了这个规则，java.sql.Driver是java提供的一个接口。mysql驱动包负责实现这个类，并在service下通过SPI机制试图让Java发现并加载它。所以像之前Class.forName(“xxx”);现在就不必要编写了。</p><h2 id="Dubbo的SPI"><a href="#Dubbo的SPI" class="headerlink" title="Dubbo的SPI"></a>Dubbo的SPI</h2><p>上面所说的SPI是Java底层提供的功能，但这种SPI的设计与Dubbo所需要的功能有一些偏差，Dubbo就自己实现了一套属于自己的SPI。</p><p>具体实现和JavaSPI基本一样，有以下几点不一样</p><ol><li>接口文件包名不一样</li><li>文件中是已key-value存储，不是简单的字符串</li></ol><p><img src="https://blog-dm.oss-cn-shanghai.aliyuncs.com/articleimage/20210429152051.png"></p><p>调用</p><pre class=" language-java"><code class="language-java">ExtensionLoader<span class="token operator">&lt;</span>Protocol<span class="token operator">></span> extensionLoader <span class="token operator">=</span> ExtensionLoader<span class="token punctuation">.</span><span class="token function">getExtensionLoader</span><span class="token punctuation">(</span>Protocol<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Protocol protocol <span class="token operator">=</span> extensionLoader<span class="token punctuation">.</span><span class="token function">getExtension</span><span class="token punctuation">(</span><span class="token string">"http"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>protocol<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><ol><li>获取<em>ExtensionLoader</em>实例</li><li>通过ExtensionLoader#getExtension方法获取拓展类对象</li></ol><h2 id="Dubbo-getExtensionLoader源码分析"><a href="#Dubbo-getExtensionLoader源码分析" class="headerlink" title="Dubbo getExtensionLoader源码分析"></a>Dubbo getExtensionLoader源码分析</h2><p>此方法主要作用是获取<em>ExtensionLoader</em>实例，<em>ExtensionLoader</em>这个实例具是某个接⼝的扩展点加载器，可以⽤来加载某个扩展点实例。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token operator">&lt;</span>T<span class="token operator">></span> ExtensionLoader<span class="token operator">&lt;</span>T<span class="token operator">></span> <span class="token function">getExtensionLoader</span><span class="token punctuation">(</span>Class<span class="token operator">&lt;</span>T<span class="token operator">></span> type<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 创建一个缓存</span>    ExtensionLoader<span class="token operator">&lt;</span>T<span class="token operator">></span> loader <span class="token operator">=</span> <span class="token punctuation">(</span>ExtensionLoader<span class="token operator">&lt;</span>T<span class="token operator">></span><span class="token punctuation">)</span> EXTENSION_LOADERS<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>type<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 缓存没命中，设置进缓存，这里可以看出ExtensionLoader是按类型划分</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>loader <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>        EXTENSION_LOADERS<span class="token punctuation">.</span><span class="token function">putIfAbsent</span><span class="token punctuation">(</span>type<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">ExtensionLoader</span><span class="token operator">&lt;</span>T<span class="token operator">></span><span class="token punctuation">(</span>type<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        loader <span class="token operator">=</span> <span class="token punctuation">(</span>ExtensionLoader<span class="token operator">&lt;</span>T<span class="token operator">></span><span class="token punctuation">)</span> EXTENSION_LOADERS<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>type<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> loader<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h2 id="Dubbo-getExtension源码分析"><a href="#Dubbo-getExtension源码分析" class="headerlink" title="Dubbo getExtension源码分析"></a>Dubbo getExtension源码分析</h2><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> T <span class="token function">getExtension</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>StringUtils<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalArgumentException</span><span class="token punctuation">(</span><span class="token string">"Extension name == null"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 获取默认扩展类</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token string">"true"</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token function">getDefaultExtension</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// holder封装，便于加锁</span>    <span class="token keyword">final</span> Holder<span class="token operator">&lt;</span>Object<span class="token operator">></span> holder <span class="token operator">=</span> <span class="token function">getOrCreateHolder</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>    Object instance <span class="token operator">=</span> holder<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// DCL</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>instance <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>holder<span class="token punctuation">)</span> <span class="token punctuation">{</span>            instance <span class="token operator">=</span> holder<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>instance <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// 创建扩展点实例对象</span>                <span class="token comment" spellcheck="true">// ======================重要方法=================</span>                instance <span class="token operator">=</span> <span class="token function">createExtension</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>                holder<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>instance<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>T<span class="token punctuation">)</span> instance<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h3 id="createExtension"><a href="#createExtension" class="headerlink" title="createExtension"></a>createExtension</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">private</span> T <span class="token function">createExtension</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 获取SPI接口的所有实现类,并通过name获取指定实现类</span>    <span class="token comment" spellcheck="true">// 这里就是找哪些包下面有SPI接口实现类的地方 ===============重要方法==========</span>    Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> clazz <span class="token operator">=</span> <span class="token function">getExtensionClasses</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>clazz <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">throw</span> <span class="token function">findException</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 实例缓存</span>        T instance <span class="token operator">=</span> <span class="token punctuation">(</span>T<span class="token punctuation">)</span> EXTENSION_INSTANCES<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>clazz<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>instance <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 创建实例</span>            EXTENSION_INSTANCES<span class="token punctuation">.</span><span class="token function">putIfAbsent</span><span class="token punctuation">(</span>clazz<span class="token punctuation">,</span> clazz<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            instance <span class="token operator">=</span> <span class="token punctuation">(</span>T<span class="token punctuation">)</span> EXTENSION_INSTANCES<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>clazz<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 依赖注入 IOC  =====================重要方法=====================</span>        <span class="token function">injectExtension</span><span class="token punctuation">(</span>instance<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// AOP，cachedWrapperClasses无序</span>        Set<span class="token operator">&lt;</span>Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">>></span> wrapperClasses <span class="token operator">=</span> cachedWrapperClasses<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>CollectionUtils<span class="token punctuation">.</span><span class="token function">isNotEmpty</span><span class="token punctuation">(</span>wrapperClasses<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span>Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> wrapperClass <span class="token operator">:</span> wrapperClasses<span class="token punctuation">)</span> <span class="token punctuation">{</span>                instance <span class="token operator">=</span> <span class="token function">injectExtension</span><span class="token punctuation">(</span><span class="token punctuation">(</span>T<span class="token punctuation">)</span> wrapperClass<span class="token punctuation">.</span><span class="token function">getConstructor</span><span class="token punctuation">(</span>type<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span>instance<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> instance<span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Throwable</span> t<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>这个方法相当重要，在这其中共有4大逻辑</p><ol><li>getExtensionClasses获取拓展类</li><li>创建实例</li><li>依赖注入</li><li>Wrapper对象包裹实例</li></ol><h3 id="getExtensionClasses获取拓展类"><a href="#getExtensionClasses获取拓展类" class="headerlink" title="getExtensionClasses获取拓展类"></a>getExtensionClasses获取拓展类</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">private</span> Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">>></span> <span class="token function">getExtensionClasses</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>   <span class="token comment" spellcheck="true">// DCL</span>    Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">>></span> classes <span class="token operator">=</span> cachedClasses<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>classes <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>cachedClasses<span class="token punctuation">)</span> <span class="token punctuation">{</span>            classes <span class="token operator">=</span> cachedClasses<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>classes <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// 加载、解析文件 Map</span>                classes <span class="token operator">=</span> <span class="token function">loadExtensionClasses</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                 cachedClasses<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>classes<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> classes<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">private</span> Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">>></span> <span class="token function">loadExtensionClasses</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// cache接口默认的扩展类，就是在接口上标注了@SPI注解的value</span>        <span class="token function">cacheDefaultExtensionName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 加载不同路径下的文件</span>        Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">>></span> extensionClasses <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">loadDirectory</span><span class="token punctuation">(</span>extensionClasses<span class="token punctuation">,</span> DUBBO_INTERNAL_DIRECTORY<span class="token punctuation">,</span> type<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">loadDirectory</span><span class="token punctuation">(</span>extensionClasses<span class="token punctuation">,</span> DUBBO_INTERNAL_DIRECTORY<span class="token punctuation">,</span> type<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token string">"org.apache"</span><span class="token punctuation">,</span> <span class="token string">"com.alibaba"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">loadDirectory</span><span class="token punctuation">(</span>extensionClasses<span class="token punctuation">,</span> DUBBO_DIRECTORY<span class="token punctuation">,</span> type<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">loadDirectory</span><span class="token punctuation">(</span>extensionClasses<span class="token punctuation">,</span> DUBBO_DIRECTORY<span class="token punctuation">,</span> type<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token string">"org.apache"</span><span class="token punctuation">,</span> <span class="token string">"com.alibaba"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">loadDirectory</span><span class="token punctuation">(</span>extensionClasses<span class="token punctuation">,</span> SERVICES_DIRECTORY<span class="token punctuation">,</span> type<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">loadDirectory</span><span class="token punctuation">(</span>extensionClasses<span class="token punctuation">,</span> SERVICES_DIRECTORY<span class="token punctuation">,</span> type<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token string">"org.apache"</span><span class="token punctuation">,</span> <span class="token string">"com.alibaba"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> extensionClasses<span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><h4 id="loadDirectory"><a href="#loadDirectory" class="headerlink" title="loadDirectory"></a>loadDirectory</h4><pre class=" language-java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">loadDirectory</span><span class="token punctuation">(</span>Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">>></span> extensionClasses<span class="token punctuation">,</span> String dir<span class="token punctuation">,</span> String type<span class="token punctuation">)</span> <span class="token punctuation">{</span>    String fileName <span class="token operator">=</span> dir <span class="token operator">+</span> type<span class="token punctuation">;</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 根据文件中的内容得到urls， 每个url表示一个扩展</span>        Enumeration<span class="token operator">&lt;</span>java<span class="token punctuation">.</span>net<span class="token punctuation">.</span>URL<span class="token operator">></span> urls<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 找到加载当前类的类加载器，这里什么加载器都有可能，自定义加载器和应用程序类加载器</span>        ClassLoader classLoader <span class="token operator">=</span> <span class="token function">findClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>classLoader <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 通过类加载器从文件名中找到路径</span>            urls <span class="token operator">=</span> classLoader<span class="token punctuation">.</span><span class="token function">getResources</span><span class="token punctuation">(</span>fileName<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            urls <span class="token operator">=</span> ClassLoader<span class="token punctuation">.</span><span class="token function">getSystemResources</span><span class="token punctuation">(</span>fileName<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>urls <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span>urls<span class="token punctuation">.</span><span class="token function">hasMoreElements</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                java<span class="token punctuation">.</span>net<span class="token punctuation">.</span>URL resourceURL <span class="token operator">=</span> urls<span class="token punctuation">.</span><span class="token function">nextElement</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">// 遍历url进行加载,把扩展类添加到extensionClasses中</span>                <span class="token comment" spellcheck="true">// 这个方法主要就是文件内容的读取，并将文件内容每一行数据进行字符串切割提取出name和类全限定名，然后执行loadClass加载类并传入到extensionClasses中</span>                <span class="token function">loadResource</span><span class="token punctuation">(</span>extensionClasses<span class="token punctuation">,</span> classLoader<span class="token punctuation">,</span> resourceURL<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Throwable</span> t<span class="token punctuation">)</span> <span class="token punctuation">{</span>        logger<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"Exception occurred when loading extension class (interface: "</span> <span class="token operator">+</span>                type <span class="token operator">+</span> <span class="token string">", description file: "</span> <span class="token operator">+</span> fileName <span class="token operator">+</span> <span class="token string">")."</span><span class="token punctuation">,</span> t<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="loadResource-gt-loadClass"><a href="#loadResource-gt-loadClass" class="headerlink" title="loadResource->loadClass"></a>loadResource-&gt;loadClass</h4><p>加载类并传入到extensionClasses中</p><pre class=" language-java"><code class="language-java"><span class="token function">loadClass</span><span class="token punctuation">(</span>extensionClasses<span class="token punctuation">,</span> resourceURL<span class="token punctuation">,</span> Class<span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span>line<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">,</span> classLoader<span class="token punctuation">)</span><span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">loadClass</span><span class="token punctuation">(</span>Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">>></span> extensionClasses<span class="token punctuation">,</span> java<span class="token punctuation">.</span>net<span class="token punctuation">.</span>URL resourceURL<span class="token punctuation">,</span> Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> clazz<span class="token punctuation">,</span> String name<span class="token punctuation">)</span> <span class="token keyword">throws</span> NoSuchMethodException <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// native方法，判断此类是不是type的实现类，不是就要报错</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>type<span class="token punctuation">.</span><span class="token function">isAssignableFrom</span><span class="token punctuation">(</span>clazz<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalStateException</span><span class="token punctuation">(</span><span class="token string">"Error occurred when loading extension class (interface: "</span> <span class="token operator">+</span>                type <span class="token operator">+</span> <span class="token string">", class line: "</span> <span class="token operator">+</span> clazz<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"), class "</span>                <span class="token operator">+</span> clazz<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" is not subtype of interface."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 当前接口手动指定了Adaptive类</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>clazz<span class="token punctuation">.</span><span class="token function">isAnnotationPresent</span><span class="token punctuation">(</span>Adaptive<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">cacheAdaptiveClass</span><span class="token punctuation">(</span>clazz<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 判断是不是一个Wrapper类，判断方法是是不是有一个构造方法参数只有一个，类型是接口</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isWrapperClass</span><span class="token punctuation">(</span>clazz<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 是一个Wrapper类</span>        <span class="token function">cacheWrapperClass</span><span class="token punctuation">(</span>clazz<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 需要有无参的构造方法</span>        clazz<span class="token punctuation">.</span><span class="token function">getConstructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 在文件中没有name，但是在类上指定了Extension的注解上指定了name</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>StringUtils<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            name <span class="token operator">=</span> <span class="token function">findAnnotationName</span><span class="token punctuation">(</span>clazz<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>name<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalStateException</span><span class="token punctuation">(</span><span class="token string">"No such extension name for the class "</span> <span class="token operator">+</span> clazz<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" in the config "</span> <span class="token operator">+</span> resourceURL<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        String<span class="token punctuation">[</span><span class="token punctuation">]</span> names <span class="token operator">=</span> NAME_SEPARATOR<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>ArrayUtils<span class="token punctuation">.</span><span class="token function">isNotEmpty</span><span class="token punctuation">(</span>names<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 缓存一下被Activate注解了的类</span>            <span class="token function">cacheActivateClass</span><span class="token punctuation">(</span>clazz<span class="token punctuation">,</span> names<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 有多个名字</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span>String n <span class="token operator">:</span> names<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// clazz: name</span>                <span class="token function">cacheName</span><span class="token punctuation">(</span>clazz<span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">// name: clazz</span>                <span class="token function">saveInExtensionClass</span><span class="token punctuation">(</span>extensionClasses<span class="token punctuation">,</span> clazz<span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="injectExtension依赖注入"><a href="#injectExtension依赖注入" class="headerlink" title="injectExtension依赖注入"></a>injectExtension依赖注入</h3><p>这里的依赖注入和Spring的依赖注入类似</p><pre class=" language-java"><code class="language-java"><span class="token keyword">private</span> T <span class="token function">injectExtension</span><span class="token punctuation">(</span>T instance<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>objectFactory <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> instance<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>Method method <span class="token operator">:</span> instance<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getMethods</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 判断方法是否有set特性</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isSetter</span><span class="token punctuation">(</span>method<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">continue</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>                    <span class="token comment" spellcheck="true">// 如果方法上标注了DisableInject注解表示不使用依赖注入</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>method<span class="token punctuation">.</span><span class="token function">getAnnotation</span><span class="token punctuation">(</span>DisableInject<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span> <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">continue</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">// 判断set方法中的参数类型是否为基本类型，基本类型就跳过</span>            Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> pt <span class="token operator">=</span> method<span class="token punctuation">.</span><span class="token function">getParameterTypes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>ReflectUtils<span class="token punctuation">.</span><span class="token function">isPrimitives</span><span class="token punctuation">(</span>pt<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">continue</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// 得到setXxx中的xxx</span>                String property <span class="token operator">=</span> <span class="token function">getSetterProperty</span><span class="token punctuation">(</span>method<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">// 根据参数类型或属性名，从objectFactory中获取到对象，然后调用set方法进行注入</span>                <span class="token comment" spellcheck="true">// 这里的objextFactory 是 AdaptiveExtensionFactory</span>                Object object <span class="token operator">=</span> objectFactory<span class="token punctuation">.</span><span class="token function">getExtension</span><span class="token punctuation">(</span>pt<span class="token punctuation">,</span> property<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>object <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token comment" spellcheck="true">// 调用set方法注入</span>                    method<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>instance<span class="token punctuation">,</span> object<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> instance<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token operator">&lt;</span>T<span class="token operator">></span> T <span class="token function">getExtension</span><span class="token punctuation">(</span>Class<span class="token operator">&lt;</span>T<span class="token operator">></span> type<span class="token punctuation">,</span> String name<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 遍历两个ExtensionFactory( SpringExtensionFactory,SpiExtensionFactory)，从ExtensionFactory中得到实例</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>ExtensionFactory factory <span class="token operator">:</span> factories<span class="token punctuation">)</span> <span class="token punctuation">{</span>        T extension <span class="token operator">=</span> factory<span class="token punctuation">.</span><span class="token function">getExtension</span><span class="token punctuation">(</span>type<span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>extension <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> extension<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> null<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h4 id="factory-getExtension-amp-amp-createAdaptiveExtensionClass"><a href="#factory-getExtension-amp-amp-createAdaptiveExtensionClass" class="headerlink" title="factory.getExtension&amp;&amp;createAdaptiveExtensionClass"></a>factory.getExtension&amp;&amp;createAdaptiveExtensionClass</h4><p>factory 有2种，一种是SpringExtensionFactory还有一种是SpiExtensionFactory，SpringExtensionFactory很简单就是去Spring容器中获取这里我们具体来看下SpiExtensionFactory是如何进行依赖注入的</p><p>SpiExtensionFactory-&gt;getAdaptiveExtension-&gt;createAdaptiveExtension-&gt;getAdaptiveExtensionClass</p><pre class=" language-java"><code class="language-java"><span class="token keyword">private</span> Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> <span class="token function">getAdaptiveExtensionClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 获取当前接口的所有扩展类</span>    <span class="token function">getExtensionClasses</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 缓存了@Adaptive注解标记的类</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>cachedAdaptiveClass <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> cachedAdaptiveClass<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 如果某个接口没有手动指定一个Adaptive类，那么就自动生成一个Adaptive类</span>    <span class="token keyword">return</span> cachedAdaptiveClass <span class="token operator">=</span> <span class="token function">createAdaptiveExtensionClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">private</span> Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> <span class="token function">createAdaptiveExtensionClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// cachedDefaultName表示接口默认的扩展类，，code表示代理类的具体代码</span>    String code <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AdaptiveClassCodeGenerator</span><span class="token punctuation">(</span>type<span class="token punctuation">,</span> cachedDefaultName<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">generate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 找到自己的类加载器</span>    ClassLoader classLoader <span class="token operator">=</span> <span class="token function">findClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>dubbo<span class="token punctuation">.</span>common<span class="token punctuation">.</span>compiler<span class="token punctuation">.</span>Compiler compiler <span class="token operator">=</span> ExtensionLoader<span class="token punctuation">.</span><span class="token function">getExtensionLoader</span><span class="token punctuation">(</span>org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>dubbo<span class="token punctuation">.</span>common<span class="token punctuation">.</span>compiler<span class="token punctuation">.</span>Compiler<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getAdaptiveExtension</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 编译代码生成代理类</span>    <span class="token keyword">return</span> compiler<span class="token punctuation">.</span><span class="token function">compile</span><span class="token punctuation">(</span>code<span class="token punctuation">,</span> classLoader<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p><img src="https://blog-dm.oss-cn-shanghai.aliyuncs.com/articleimage/20210430143442.png"></p><p><strong>从编译的代码结果中分析，我们发现使用依赖注入会存在一些条件</strong></p><ol><li>必须有参数</li><li>必须在参数中带着Url类型参数</li></ol><h2 id="Dubbo中的AOP"><a href="#Dubbo中的AOP" class="headerlink" title="Dubbo中的AOP"></a>Dubbo中的AOP</h2><p>在loadResource-&gt;loadClass-&gt;cacheWrapperClass中缓存了当前type的Wrapper类</p><pre class=" language-java"><code class="language-java">Set<span class="token operator">&lt;</span>Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">>></span> wrapperClasses <span class="token operator">=</span> cachedWrapperClasses<span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>CollectionUtils<span class="token punctuation">.</span><span class="token function">isNotEmpty</span><span class="token punctuation">(</span>wrapperClasses<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> wrapperClass <span class="token operator">:</span> wrapperClasses<span class="token punctuation">)</span> <span class="token punctuation">{</span>        instance <span class="token operator">=</span> <span class="token function">injectExtension</span><span class="token punctuation">(</span><span class="token punctuation">(</span>T<span class="token punctuation">)</span> wrapperClass<span class="token punctuation">.</span><span class="token function">getConstructor</span><span class="token punctuation">(</span>type<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span>instance<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>这段代码明显可以看出把原实例注入到wrapper方法的构造方法中，并将wrapper对象返回，而且这段代码是遍历的，所以说如果有多个wrapper就会进行多层包裹，假设有2个wrapper就变成了wrapper包裹wrapper包裹原实例</p><p><img src="https://blog-dm.oss-cn-shanghai.aliyuncs.com/articleimage/20210430154142.png"></p><p><img src="https://blog-dm.oss-cn-shanghai.aliyuncs.com/articleimage/20210430154123.png"></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Dubbo </tag>
            
            <tag> Java </tag>
            
            <tag> 源码 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringBoot使用外部tomcat</title>
      <link href="/2021/05/01/springboot-shi-yong-wai-bu-tomcat/"/>
      <url>/2021/05/01/springboot-shi-yong-wai-bu-tomcat/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>大家都知道SpringBoot有内置Tomcat的功能，在<a href="https://dmsupine.com/2021/04/27/springboot-qi-dong-yuan-li/">启动原理</a>中有介绍SpringBoot内置Tomcat的原理。那么如果我们不像使用SpringBoot的内置Tomcat，想用自己的web容器怎么操作。springboot支持默认三大容器，Tomcat，Jetty，Undertow，可以在pom包中通过依赖控制。</p><p>ServletWebServerFactoryAutoConfiguration注解上</p><p><img src="https://blog-dm.oss-cn-shanghai.aliyuncs.com/articleimage/20210422165140.png"></p><p>这里就体现了SpringBoot内置容器有哪些</p><h2 id="使用Undertow内置容器"><a href="#使用Undertow内置容器" class="headerlink" title="使用Undertow内置容器"></a>使用Undertow内置容器</h2><h3 id="pom"><a href="#pom" class="headerlink" title="pom"></a>pom</h3><p>排除tomcat依赖，增加undertow依赖</p><pre class=" language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!--排除tomcat依赖--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-web<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>exclusions</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>exclusion</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-tomcat<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>exclusion</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>exclusions</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!--使用undertow容器--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-undertow<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre><p><img src="https://blog-dm.oss-cn-shanghai.aliyuncs.com/articleimage/20210422164755.png"></p><h2 id="使用jetty内置容器"><a href="#使用jetty内置容器" class="headerlink" title="使用jetty内置容器"></a>使用jetty内置容器</h2><h3 id="pom-1"><a href="#pom-1" class="headerlink" title="pom"></a>pom</h3><p>排除tomcat依赖，增加jetty依赖</p><pre class=" language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!--排除tomcat依赖--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-web<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>exclusions</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>exclusion</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-tomcat<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>exclusion</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>exclusions</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!--使用jetty容器--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-jetty<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre><p><img src="https://blog-dm.oss-cn-shanghai.aliyuncs.com/articleimage/20210422165034.png"></p><h2 id="如何使用外部容器"><a href="#如何使用外部容器" class="headerlink" title="如何使用外部容器"></a>如何使用外部容器</h2><ol><li>更改打包方式，排除tomcat pom依赖，这时候也不要加一些UnderTow或Jetty的包</li><li>编写Tomcat启动类，找到SpringBoot主程序</li><li>在tomcat容器中运行</li></ol><h3 id="pom-2"><a href="#pom-2" class="headerlink" title="pom"></a>pom</h3><p>排除依赖是为了让ServletWebServerFactoryAutoConfiguration不在自动装配任何一个容器类，但<strong>这里是可以不用排除依赖其实也是可以使用外部容器的</strong>，从代码中可以看出如果使用了外部servlet会优先使用外部sevlet而不会使用自动装配的sevlet。</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>packaging</span><span class="token punctuation">></span></span>war<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>packaging</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!--排除tomcat依赖--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-web<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>exclusions</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>exclusion</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-tomcat<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>exclusion</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>exclusions</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre><h3 id="编写Tomcat启动类"><a href="#编写Tomcat启动类" class="headerlink" title="编写Tomcat启动类"></a>编写Tomcat启动类</h3><p>实现SpringBootServletInitializer重写configure方法</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TomcatStartSpringBoot</span> <span class="token keyword">extends</span> <span class="token class-name">SpringBootServletInitializer</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> SpringApplicationBuilder <span class="token function">configure</span><span class="token punctuation">(</span>SpringApplicationBuilder builder<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> builder<span class="token punctuation">.</span><span class="token function">sources</span><span class="token punctuation">(</span>MyApplication<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="装载到tomcat容器"><a href="#装载到tomcat容器" class="headerlink" title="装载到tomcat容器"></a>装载到tomcat容器</h3><p><img src="https://blog-dm.oss-cn-shanghai.aliyuncs.com/articleimage/20210423110808.png"></p><h2 id="使用外部容器原理"><a href="#使用外部容器原理" class="headerlink" title="使用外部容器原理"></a>使用外部容器原理</h2><ol><li>Tomcat是使用SPI机制找到SpringServletContainerInitializer</li><li>在其上标注了注解@HandlesTypes(WebApplicationInitializer.class)</li><li>通过@HandlesTypes找到WebApplicationInitializer的所有实现类注入到onStartup方法的webAppInitializerClasses参数中</li><li>然后执行WebApplicationInitializer实现类中的onStartup方法，初始化ContextLoaderListener和DispatcherServlet和启动Spring</li></ol><h3 id="SPI机制SpringServletContainerInitializer"><a href="#SPI机制SpringServletContainerInitializer" class="headerlink" title="SPI机制SpringServletContainerInitializer"></a>SPI机制SpringServletContainerInitializer</h3><p>在META-INF/services文件夹中找到javax.servlet.ServletContainerInitializer, 这个文件里面是ServletContainerInitializer的实现类SpringServletContainerInitializer，创建它的实例调用onstartUp</p><p><img src="https://blog-dm.oss-cn-shanghai.aliyuncs.com/articleimage/20210423142520.png"></p><h3 id="HandlesTypes原理"><a href="#HandlesTypes原理" class="headerlink" title="HandlesTypes原理"></a>HandlesTypes原理</h3><p>HandlesTypes是在tomcat–ContextConfig#processServletContainerInitializers方法中注入的，主要过程如下</p><ol><li>通过SPI机制找到所有的ServletContainerInitializer的实现类，放到ServletContainerInitializer集合下</li><li>如果在ServletContainerInitializer实现类上标注了HandlesTypes注解就继续，否则结束。找到之后这里只存储了注解的类名，这时候并没有HandlesTypes注解的接口所实现的类封装起来</li><li>通过ContextConfig#processAnnotationsStream方法中的ClassParser从classes中获取到类然后在checkHandlesTypes方法中封装进initializerClassMap中</li><li>在ContextConfig#webConfig方法中通过context#addServletContainerInitializer方法把initializerClassMap值放到了StandardContext中的initializers中</li><li>在StandardContext#startInternal中调用ServletContainerInitializer#onStart方法</li></ol><h3 id="SpringServletContainerInitializer启动原理"><a href="#SpringServletContainerInitializer启动原理" class="headerlink" title="SpringServletContainerInitializer启动原理"></a>SpringServletContainerInitializer启动原理</h3><p>上面基本上是Tomcat和servlet的一些原理，下面才开始进入到Spring的一个底层了。</p><p>从上面我们可以看出SpringServletContainerInitializer会通过SPI进行运行，而且会把WebApplicationInitializer的所有实现类注入到webAppInitializerClasses方法中，那么我们就可以自定义WebApplicationInitializer实现类进行一些操作了。这里我们就加了一个Tomcat启动类，就是上面加的TomcatStartSpringBoot，在这个启动类里面我们配置类SpringBoot启动类，以便于我们启动Spring容器。</p><p>SpringServletContainerInitializer这个类其实也没什么就是把WebApplicationInitializer的实现类的onStartup方法挨个调一遍。</p><p><img src="https://blog-dm.oss-cn-shanghai.aliyuncs.com/articleimage/20210423234143.png"></p><h3 id="SpringBootServletInitializer启动原理"><a href="#SpringBootServletInitializer启动原理" class="headerlink" title="SpringBootServletInitializer启动原理"></a>SpringBootServletInitializer启动原理</h3><p>我们实现的Tomcat启动类就是继承的SpringBootServletInitializer，我们只是重写了config方法，通过SpringServletContainerInitializer发现我们一定会调用SpringBootServletInitializer#onStartup方法</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onStartup</span><span class="token punctuation">(</span>ServletContext servletContext<span class="token punctuation">)</span> <span class="token keyword">throws</span> ServletException <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// Logger initialization is deferred in case an ordered</span>    <span class="token comment" spellcheck="true">// LogServletContextInitializer is being used</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>logger <span class="token operator">=</span> LogFactory<span class="token punctuation">.</span><span class="token function">getLog</span><span class="token punctuation">(</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// ===========核心方法============</span>    WebApplicationContext rootAppContext <span class="token operator">=</span> <span class="token function">createRootApplicationContext</span><span class="token punctuation">(</span>        servletContext<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>rootAppContext <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>        servletContext<span class="token punctuation">.</span><span class="token function">addListener</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ContextLoaderListener</span><span class="token punctuation">(</span>rootAppContext<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">contextInitialized</span><span class="token punctuation">(</span>ServletContextEvent event<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// no-op because the application context is already initialized</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>logger<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">"No ContextLoaderListener registered, as "</span>                          <span class="token operator">+</span> <span class="token string">"createRootApplicationContext() did not "</span>                          <span class="token operator">+</span> <span class="token string">"return an application context"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>onStart方法中只有createRootApplicationContext比较重要</p><h3 id="SpringBootServletInitializer-createRootApplicationContext"><a href="#SpringBootServletInitializer-createRootApplicationContext" class="headerlink" title="SpringBootServletInitializer#createRootApplicationContext"></a>SpringBootServletInitializer#createRootApplicationContext</h3><ol><li>构建SpringApplicationBuilder对象，创建SpringApplication对象</li><li>通过重写configure方法把SpringBoot启动类传到build中，通过build创建的SpringApplication调用run方法，成功来到SpringBoot的启动方法。</li></ol><pre class=" language-java"><code class="language-java"><span class="token keyword">protected</span> WebApplicationContext <span class="token function">createRootApplicationContext</span><span class="token punctuation">(</span>      ServletContext servletContext<span class="token punctuation">)</span> <span class="token punctuation">{</span>   <span class="token comment" spellcheck="true">// new一个SpringApplicationBuilder对象，用其生产SpringApplication</span>   SpringApplicationBuilder builder <span class="token operator">=</span> <span class="token function">createSpringApplicationBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   builder<span class="token punctuation">.</span><span class="token function">main</span><span class="token punctuation">(</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   ApplicationContext parent <span class="token operator">=</span> <span class="token function">getExistingRootWebApplicationContext</span><span class="token punctuation">(</span>servletContext<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token keyword">if</span> <span class="token punctuation">(</span>parent <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>logger<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"Root context already created (using as parent)."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      servletContext<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span>            WebApplicationContext<span class="token punctuation">.</span>ROOT_WEB_APPLICATION_CONTEXT_ATTRIBUTE<span class="token punctuation">,</span> null<span class="token punctuation">)</span><span class="token punctuation">;</span>      builder<span class="token punctuation">.</span><span class="token function">initializers</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ParentContextApplicationContextInitializer</span><span class="token punctuation">(</span>parent<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span>   builder<span class="token punctuation">.</span><span class="token function">initializers</span><span class="token punctuation">(</span>         <span class="token keyword">new</span> <span class="token class-name">ServletContextApplicationContextInitializer</span><span class="token punctuation">(</span>servletContext<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   builder<span class="token punctuation">.</span><span class="token function">contextClass</span><span class="token punctuation">(</span>AnnotationConfigServletWebServerApplicationContext<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">// 将SpringBoot启动类传到build中构建SpringApplication对象</span>   <span class="token comment" spellcheck="true">//通过configure()方法扩展</span>   builder <span class="token operator">=</span> <span class="token function">configure</span><span class="token punctuation">(</span>builder<span class="token punctuation">)</span><span class="token punctuation">;</span>   builder<span class="token punctuation">.</span><span class="token function">listeners</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">WebEnvironmentPropertySourceInitializer</span><span class="token punctuation">(</span>servletContext<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   SpringApplication application <span class="token operator">=</span> builder<span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token keyword">if</span> <span class="token punctuation">(</span>application<span class="token punctuation">.</span><span class="token function">getAllSources</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> AnnotationUtils         <span class="token punctuation">.</span><span class="token function">findAnnotation</span><span class="token punctuation">(</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> Configuration<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span> <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>      application<span class="token punctuation">.</span><span class="token function">addPrimarySources</span><span class="token punctuation">(</span>Collections<span class="token punctuation">.</span><span class="token function">singleton</span><span class="token punctuation">(</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span>   Assert<span class="token punctuation">.</span><span class="token function">state</span><span class="token punctuation">(</span><span class="token operator">!</span>application<span class="token punctuation">.</span><span class="token function">getAllSources</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>         <span class="token string">"No SpringApplication sources have been defined. Either override the "</span>               <span class="token operator">+</span> <span class="token string">"configure method or add an @Configuration annotation"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">// Ensure error pages are registered</span>   <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>registerErrorPageFilter<span class="token punctuation">)</span> <span class="token punctuation">{</span>      application<span class="token punctuation">.</span><span class="token function">addPrimarySources</span><span class="token punctuation">(</span>            Collections<span class="token punctuation">.</span><span class="token function">singleton</span><span class="token punctuation">(</span>ErrorPageFilterConfiguration<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span>   <span class="token comment" spellcheck="true">// 运行SpringApplication run方法等价于SpringBoot启动类的SpringApplication.run(MyApplication.class);</span>   <span class="token keyword">return</span> <span class="token function">run</span><span class="token punctuation">(</span>application<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>外部容器启动无非就是通过SPI和HandlesType找到我们自定义的启动类，通过重写SpringBootServletInitializer#config方法把SpringBoot启动类传到SpringApplication中，通过SpringApplication#run创建容器。</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 源码 </tag>
            
            <tag> Spring </tag>
            
            <tag> SpringBoot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringBoot启动原理</title>
      <link href="/2021/04/27/springboot-qi-dong-yuan-li/"/>
      <url>/2021/04/27/springboot-qi-dong-yuan-li/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>SpringBoot 的启动区别于传统的Spring需要搭建tomcat等相关的容器，SpringBoot默认是通过内置Tomcat启动，只需简单的运行java -jar xxx即可简单的启动一个SpringBoot工程。这里我们深入SpringBoot了解它是如何做到通过简简单单的一个jar包就把整个项目启动起来</p><h2 id="SpringBoot-jar加载流程"><a href="#SpringBoot-jar加载流程" class="headerlink" title="SpringBoot  jar加载流程"></a>SpringBoot  jar加载流程</h2><p>SrpingBoot 运行的时候是直接运行的一个jar文件</p><p>我们先看下jar文件解压后的目录结构</p><p><img src="https://blog-dm.oss-cn-shanghai.aliyuncs.com/articleimage/20210417160641.png"></p><p>首先先简单介绍下这个目录结构</p><pre><code>spring-boot-learn-0.0.1-SNAPSHOT├── META-INF│   └── MANIFEST.MF├── BOOT-INF│   ├── classes│   │   └── 应用程序类│   └── lib│       └── 第三方依赖jar└── org    └── springframework        └── boot            └── loader                └── springboot启动所需的class</code></pre><p>在SpringBoot中会将所有所需的jar包都打包在BOOT-INF下的lib下面，而对于java中是无法加载jar中的jar，所以SpringBoot实现了自定义类加载器，这个类加载器通过org.springframework.boot.loader.JarLauncher创建了LaunchedURLClassLoader用以加载SpringBoot中的jar，在MANIFEST.MF中的Main-Class中有指定JarLauncher</p><p><img src="https://blog-dm.oss-cn-shanghai.aliyuncs.com/articleimage/20210417161322.png"></p><h3 id="JarLauncher"><a href="#JarLauncher" class="headerlink" title="JarLauncher"></a>JarLauncher</h3><p>在一执行java -jar 就会来到JarLauncher中执行main方法</p><p>所有应用程序类文件均可通过/BOOT-INF/classes加载，所有依赖的第三方jar均可通过/BOOT-INF/lib加载。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">JarLauncher</span> <span class="token keyword">extends</span> <span class="token class-name">ExecutableArchiveLauncher</span> <span class="token punctuation">{</span>    <span class="token keyword">static</span> <span class="token keyword">final</span> String BOOT_INF_CLASSES <span class="token operator">=</span> <span class="token string">"BOOT-INF/classes/"</span><span class="token punctuation">;</span>    <span class="token keyword">static</span> <span class="token keyword">final</span> String BOOT_INF_LIB <span class="token operator">=</span> <span class="token string">"BOOT-INF/lib/"</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">JarLauncher</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token keyword">protected</span> <span class="token function">JarLauncher</span><span class="token punctuation">(</span>Archive archive<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>archive<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">boolean</span> <span class="token function">isNestedArchive</span><span class="token punctuation">(</span>Archive<span class="token punctuation">.</span>Entry entry<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>entry<span class="token punctuation">.</span><span class="token function">isDirectory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> entry<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>BOOT_INF_CLASSES<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> entry<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">startsWith</span><span class="token punctuation">(</span>BOOT_INF_LIB<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        <span class="token keyword">new</span> <span class="token class-name">JarLauncher</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">launch</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">launch</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>    JarFile<span class="token punctuation">.</span><span class="token function">registerUrlProtocolHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    ClassLoader classLoader <span class="token operator">=</span> <span class="token function">createClassLoader</span><span class="token punctuation">(</span><span class="token function">getClassPathArchives</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">launch</span><span class="token punctuation">(</span>args<span class="token punctuation">,</span> <span class="token function">getMainClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> classLoader<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">protected</span> ClassLoader <span class="token function">createClassLoader</span><span class="token punctuation">(</span>List<span class="token operator">&lt;</span>Archive<span class="token operator">></span> archives<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>    List<span class="token operator">&lt;</span>URL<span class="token operator">></span> urls <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span>archives<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>Archive archive <span class="token operator">:</span> archives<span class="token punctuation">)</span> <span class="token punctuation">{</span>        urls<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>archive<span class="token punctuation">.</span><span class="token function">getUrl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token function">createClassLoader</span><span class="token punctuation">(</span>urls<span class="token punctuation">.</span><span class="token function">toArray</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">URL</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">protected</span> ClassLoader <span class="token function">createClassLoader</span><span class="token punctuation">(</span>URL<span class="token punctuation">[</span><span class="token punctuation">]</span> urls<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">LaunchedURLClassLoader</span><span class="token punctuation">(</span>urls<span class="token punctuation">,</span> <span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h3 id="SpringBoot是如何知道要加载哪些类的呢？"><a href="#SpringBoot是如何知道要加载哪些类的呢？" class="headerlink" title="SpringBoot是如何知道要加载哪些类的呢？"></a>SpringBoot是如何知道要加载哪些类的呢？</h3><p>这里我们来带Launcher#launch中createClassLoader(getClassPathArchives())方法</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Override</span><span class="token keyword">protected</span> List<span class="token operator">&lt;</span>Archive<span class="token operator">></span> <span class="token function">getClassPathArchives</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>    List<span class="token operator">&lt;</span>Archive<span class="token operator">></span> archives <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>archive<span class="token punctuation">.</span><span class="token function">getNestedArchives</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token operator">:</span><span class="token operator">:</span>isNestedArchive<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">postProcessClassPathArchives</span><span class="token punctuation">(</span>archives<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> archives<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> List<span class="token operator">&lt;</span>Archive<span class="token operator">></span> <span class="token function">getNestedArchives</span><span class="token punctuation">(</span>EntryFilter filter<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>    List<span class="token operator">&lt;</span>Archive<span class="token operator">></span> nestedArchives <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>Entry entry <span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>filter<span class="token punctuation">.</span><span class="token function">matches</span><span class="token punctuation">(</span>entry<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            nestedArchives<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token function">getNestedArchive</span><span class="token punctuation">(</span>entry<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> Collections<span class="token punctuation">.</span><span class="token function">unmodifiableList</span><span class="token punctuation">(</span>nestedArchives<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token annotation punctuation">@Override</span><span class="token keyword">protected</span> <span class="token keyword">boolean</span> <span class="token function">isNestedArchive</span><span class="token punctuation">(</span>Archive<span class="token punctuation">.</span>Entry entry<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>entry<span class="token punctuation">.</span><span class="token function">isDirectory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> entry<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>BOOT_INF_CLASSES<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> entry<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">startsWith</span><span class="token punctuation">(</span>BOOT_INF_LIB<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">static</span> <span class="token keyword">final</span> String BOOT_INF_CLASSES <span class="token operator">=</span> <span class="token string">"BOOT-INF/classes/"</span><span class="token punctuation">;</span><span class="token keyword">static</span> <span class="token keyword">final</span> String BOOT_INF_LIB <span class="token operator">=</span> <span class="token string">"BOOT-INF/lib/"</span><span class="token punctuation">;</span></code></pre><p>从这段代码就可以看出来它是加载的BOOT-INF/classes/和BOOT-INF/lib/，然后把获取到的archives List传到LaunchedURLClassLoader去加载</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><ol><li>SpringBoot通过maven打包成一个fat jar后</li><li>通过fat jar中的JarLauncher生成LaunchedURLClassLoader来加载fat jar中的jar</li><li>通过getMainClass拿到MANIFEST.MF中的Start-Class也就是我们SpringBoot应用启动类，通过launch开启一个新线程来运行</li></ol><h2 id="SpringBoot-应用启动流程"><a href="#SpringBoot-应用启动流程" class="headerlink" title="SpringBoot 应用启动流程"></a>SpringBoot 应用启动流程</h2><p>这里我们通过SpringBoot启动类开始看他究竟在启动类上做了什么。</p><p>在SpringBoot中只有一段代码SpringApplication.run(MyApplication.class)，那么这段代码做了哪些事情把Spring容器启动了呢？</p><p>我们点进run方法里面去看一路跟到new SpringApplication(primarySources).run(args);通过这一句明白了他就做了new了一个new SpringApplication，然后run了一下就没了</p><h3 id="SpringApplication"><a href="#SpringApplication" class="headerlink" title="SpringApplication"></a>SpringApplication</h3><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// new SpringApplication会做的事</span><span class="token comment" spellcheck="true">// primarySources 传进来的配置类</span><span class="token keyword">public</span> <span class="token function">SpringApplication</span><span class="token punctuation">(</span>ResourceLoader resourceLoader<span class="token punctuation">,</span> Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> primarySources<span class="token punctuation">)</span> <span class="token punctuation">{</span>   <span class="token keyword">this</span><span class="token punctuation">.</span>resourceLoader <span class="token operator">=</span> resourceLoader<span class="token punctuation">;</span>   Assert<span class="token punctuation">.</span><span class="token function">notNull</span><span class="token punctuation">(</span>primarySources<span class="token punctuation">,</span> <span class="token string">"PrimarySources must not be null"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">// 把传进来的配置类存在SpringApplication.primarySources中，后面Spring会解析这个类</span>   <span class="token keyword">this</span><span class="token punctuation">.</span>primarySources <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedHashSet</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span>Arrays<span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span>primarySources<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">// 根据classpath下是否存在某些类来判断当前web类型,REACTIVE,SERVLET,SpringBoot版本不一样这里类型会有差别，后面版本会有WebFlux</span>   <span class="token keyword">this</span><span class="token punctuation">.</span>webApplicationType <span class="token operator">=</span> WebApplicationType<span class="token punctuation">.</span><span class="token function">deduceFromClasspath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">// 从spring.factories中获取ApplicationContextInitializer这个key</span>   <span class="token function">setInitializers</span><span class="token punctuation">(</span><span class="token punctuation">(</span>Collection<span class="token punctuation">)</span> <span class="token function">getSpringFactoriesInstances</span><span class="token punctuation">(</span>         ApplicationContextInitializer<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">// 从spring.factories中获取ApplicationListener这个key</span>   <span class="token function">setListeners</span><span class="token punctuation">(</span><span class="token punctuation">(</span>Collection<span class="token punctuation">)</span> <span class="token function">getSpringFactoriesInstances</span><span class="token punctuation">(</span>ApplicationListener<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">// 从调用堆栈中，通过方法名是否是main推算出mainApplicationClass </span>   <span class="token keyword">this</span><span class="token punctuation">.</span>mainApplicationClass <span class="token operator">=</span> <span class="token function">deduceMainApplicationClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>我们跟进getSpringFactoriesInstances#loadSpringFactories</p><p>发现这里它把所有的spring.factories中的key都存放在了一个cache中，包括之前的自动配置类，所以后面的自动配置类获取是直接从cache中拿的。</p><p><img src="https://blog-dm.oss-cn-shanghai.aliyuncs.com/articleimage/20210417170628.png"></p><p>ApplicationContextInitializer</p><p><img src="https://blog-dm.oss-cn-shanghai.aliyuncs.com/articleimage/20210417170816.png"></p><p>ApplicationListener</p><p><img src="https://blog-dm.oss-cn-shanghai.aliyuncs.com/articleimage/20210417170934.png"></p><h3 id="run"><a href="#run" class="headerlink" title="run"></a>run</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> ConfigurableApplicationContext <span class="token function">run</span><span class="token punctuation">(</span>String<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>   <span class="token comment" spellcheck="true">// 用来记录当前springboot启动耗时,只是简单的记录下启动时间</span>   StopWatch stopWatch <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StopWatch</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   stopWatch<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">// spring上下文的接口,后面会根据web类型创建一个Spring上下文</span>   ConfigurableApplicationContext context <span class="token operator">=</span> null<span class="token punctuation">;</span>   Collection<span class="token operator">&lt;</span>SpringBootExceptionReporter<span class="token operator">></span> exceptionReporters <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">// 开启HeadLess模式，Headless模式是系统的一种配置模式。在该模式下，系统缺少了显示设备、键盘或鼠标，正常运行</span>   <span class="token comment" spellcheck="true">// 可查看官网解释：https://www.oracle.com/technical-resources/articles/javase/headless.html</span>   <span class="token function">configureHeadlessProperty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">// 从spring.factories中获取factroies中读取了SpringApplicationRunListener这个key</span>   SpringApplicationRunListeners listeners <span class="token operator">=</span> <span class="token function">getRunListeners</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">// 发布ApplicationStartingEvent事件</span>   listeners<span class="token punctuation">.</span><span class="token function">starting</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token keyword">try</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// 实例化传入参数</span>      ApplicationArguments applicationArguments <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DefaultApplicationArguments</span><span class="token punctuation">(</span>            args<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">// 读取环境变量，读取配置文件信息（基于监听器）</span>      ConfigurableEnvironment environment <span class="token operator">=</span> <span class="token function">prepareEnvironment</span><span class="token punctuation">(</span>listeners<span class="token punctuation">,</span>            applicationArguments<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">// 忽略beaninfo的bean</span>      <span class="token function">configureIgnoreBeanInfo</span><span class="token punctuation">(</span>environment<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">// 打印banner横幅</span>      Banner printedBanner <span class="token operator">=</span> <span class="token function">printBanner</span><span class="token punctuation">(</span>environment<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">// 根据web环境创建Spring上下文，这里创建的是AnnotationConfigServletWebServerApplicationContext</span>      context <span class="token operator">=</span> <span class="token function">createApplicationContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      exceptionReporters <span class="token operator">=</span> <span class="token function">getSpringFactoriesInstances</span><span class="token punctuation">(</span>            SpringBootExceptionReporter<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span>            <span class="token keyword">new</span> <span class="token class-name">Class</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">{</span> ConfigurableApplicationContext<span class="token punctuation">.</span><span class="token keyword">class</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> context<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">//预初始化spring上下文</span>      <span class="token function">prepareContext</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> environment<span class="token punctuation">,</span> listeners<span class="token punctuation">,</span> applicationArguments<span class="token punctuation">,</span>            printedBanner<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">// 加载spring ioc容器,使用AnnotationConfigServletWebServerApplicationContext启动的spring容器所以springboot对它做了扩展,这里会调用到AbstractApplicationContext#refresh方法，来到了spring最核心的地方创建Bean</span>      <span class="token function">refreshContext</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">afterRefresh</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> applicationArguments<span class="token punctuation">)</span><span class="token punctuation">;</span>      stopWatch<span class="token punctuation">.</span><span class="token function">stop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>logStartupInfo<span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token keyword">new</span> <span class="token class-name">StartupInfoLogger</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>mainApplicationClass<span class="token punctuation">)</span>               <span class="token punctuation">.</span><span class="token function">logStarted</span><span class="token punctuation">(</span><span class="token function">getApplicationLog</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> stopWatch<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      listeners<span class="token punctuation">.</span><span class="token function">started</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">callRunners</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> applicationArguments<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span>   <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Throwable</span> ex<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token function">handleRunFailure</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> ex<span class="token punctuation">,</span> exceptionReporters<span class="token punctuation">,</span> listeners<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalStateException</span><span class="token punctuation">(</span>ex<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span>   <span class="token keyword">try</span> <span class="token punctuation">{</span>      listeners<span class="token punctuation">.</span><span class="token function">running</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span>   <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Throwable</span> ex<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token function">handleRunFailure</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> ex<span class="token punctuation">,</span> exceptionReporters<span class="token punctuation">,</span> null<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalStateException</span><span class="token punctuation">(</span>ex<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span>   <span class="token keyword">return</span> context<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h4 id="prepareEnvironment"><a href="#prepareEnvironment" class="headerlink" title="prepareEnvironment"></a>prepareEnvironment</h4><p>初始化环境</p><pre class=" language-java"><code class="language-java"><span class="token keyword">private</span> ConfigurableEnvironment <span class="token function">prepareEnvironment</span><span class="token punctuation">(</span>      SpringApplicationRunListeners listeners<span class="token punctuation">,</span>      ApplicationArguments applicationArguments<span class="token punctuation">)</span> <span class="token punctuation">{</span>   <span class="token comment" spellcheck="true">// 根据web类型创建默认环境，创建就会读取java环境变量和系统环境变量</span>   ConfigurableEnvironment environment <span class="token operator">=</span> <span class="token function">getOrCreateEnvironment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">// 将命令行参数放到环境变量</span>   <span class="token function">configureEnvironment</span><span class="token punctuation">(</span>environment<span class="token punctuation">,</span> applicationArguments<span class="token punctuation">.</span><span class="token function">getSourceArgs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">// 发布了ApplicationEnvironmentPreparedEvent的监听器，读取了全局配置文件</span>   listeners<span class="token punctuation">.</span><span class="token function">environmentPrepared</span><span class="token punctuation">(</span>environment<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">// 将所有spring.main配置信息绑定SpringApplication</span>   <span class="token function">bindToSpringApplication</span><span class="token punctuation">(</span>environment<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span>isCustomEnvironment<span class="token punctuation">)</span> <span class="token punctuation">{</span>      environment <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">EnvironmentConverter</span><span class="token punctuation">(</span><span class="token function">getClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">convertEnvironmentIfNecessary</span><span class="token punctuation">(</span>environment<span class="token punctuation">,</span> <span class="token function">deduceEnvironmentClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span>   ConfigurationPropertySources<span class="token punctuation">.</span><span class="token function">attach</span><span class="token punctuation">(</span>environment<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token keyword">return</span> environment<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h4 id="prepareContext"><a href="#prepareContext" class="headerlink" title="prepareContext"></a>prepareContext</h4><p>初始化上下文</p><pre class=" language-java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">prepareContext</span><span class="token punctuation">(</span>ConfigurableApplicationContext context<span class="token punctuation">,</span>      ConfigurableEnvironment environment<span class="token punctuation">,</span> SpringApplicationRunListeners listeners<span class="token punctuation">,</span>      ApplicationArguments applicationArguments<span class="token punctuation">,</span> Banner printedBanner<span class="token punctuation">)</span> <span class="token punctuation">{</span>   context<span class="token punctuation">.</span><span class="token function">setEnvironment</span><span class="token punctuation">(</span>environment<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token function">postProcessApplicationContext</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">// 拿到之前读取到所有ApplicationContextInitializer的组件调用initialize方法</span>   <span class="token function">applyInitializers</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token function">applyInitializers</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 发布事件，在我这个版本contextPrepared是空，没有发布任何事件，后面版本会有ApplicationContextInitializedEvent事件</span>   listeners<span class="token punctuation">.</span><span class="token function">contextPrepared</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>logStartupInfo<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token function">logStartupInfo</span><span class="token punctuation">(</span>context<span class="token punctuation">.</span><span class="token function">getParent</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> null<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">logStartupProfileInfo</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span>   <span class="token comment" spellcheck="true">// Add boot specific singleton beans</span>   <span class="token comment" spellcheck="true">// 获取当前spring上下文beanFactory (负责创建bean)</span>   context<span class="token punctuation">.</span><span class="token function">getBeanFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">registerSingleton</span><span class="token punctuation">(</span><span class="token string">"springApplicationArguments"</span><span class="token punctuation">,</span>         applicationArguments<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token keyword">if</span> <span class="token punctuation">(</span>printedBanner <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>      context<span class="token punctuation">.</span><span class="token function">getBeanFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">registerSingleton</span><span class="token punctuation">(</span><span class="token string">"springBootBanner"</span><span class="token punctuation">,</span> printedBanner<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span>   <span class="token comment" spellcheck="true">// Load the sources</span>   Set<span class="token operator">&lt;</span>Object<span class="token operator">></span> sources <span class="token operator">=</span> <span class="token function">getAllSources</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   Assert<span class="token punctuation">.</span><span class="token function">notEmpty</span><span class="token punctuation">(</span>sources<span class="token punctuation">,</span> <span class="token string">"Sources must not be empty"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">// 读取主启动类,将它注册为BeanDefinition</span>   <span class="token function">load</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> sources<span class="token punctuation">.</span><span class="token function">toArray</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">// 发布ApplicationPreparedEvent事件</span>   listeners<span class="token punctuation">.</span><span class="token function">contextLoaded</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h3 id="tomcat启动"><a href="#tomcat启动" class="headerlink" title="tomcat启动"></a>tomcat启动</h3><p>在run方法中会初始化ApplicationContext上下文AnnotationConfigServletWebServerApplicationContext它继承了AbstractApplicationContext，在这其中AnnotationConfigServletWebServerApplicationContext重写了onRefresh方法，也就是在AbstractApplicationContext#refresh中的onRefresh,所以在new一个ApplicationContext上下文的时候会通过onRefresh创建tomcat，我们通过AnnotationConfigServletWebServerApplicationContext#onRefresh看看究竟做了什么</p><h4 id="onRefresh"><a href="#onRefresh" class="headerlink" title="onRefresh"></a>onRefresh</h4><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Override</span><span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">onRefresh</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>   <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onRefresh</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token keyword">try</span> <span class="token punctuation">{</span>      <span class="token function">createWebServer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span>   <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Throwable</span> ex<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">ApplicationContextException</span><span class="token punctuation">(</span><span class="token string">"Unable to start web server"</span><span class="token punctuation">,</span> ex<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">createWebServer</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    WebServer webServer <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>webServer<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 获取servletContext，如果有外部容器这里的servletContext就有值</span>    ServletContext servletContext <span class="token operator">=</span> <span class="token function">getServletContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 启用内部tomcat</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>webServer <span class="token operator">==</span> null <span class="token operator">&amp;&amp;</span> servletContext <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>        ServletWebServerFactory factory <span class="token operator">=</span> <span class="token function">getWebServerFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>webServer <span class="token operator">=</span> factory<span class="token punctuation">.</span><span class="token function">getWebServer</span><span class="token punctuation">(</span><span class="token function">getSelfInitializer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 启用外部tomcat</span>    <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>servletContext <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token function">getSelfInitializer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">onStartup</span><span class="token punctuation">(</span>servletContext<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">ServletException</span> ex<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">ApplicationContextException</span><span class="token punctuation">(</span><span class="token string">"Cannot initialize servlet context"</span><span class="token punctuation">,</span>                                                  ex<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token function">initPropertySources</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h4 id="getWebServerFactory"><a href="#getWebServerFactory" class="headerlink" title="getWebServerFactory"></a>getWebServerFactory</h4><p>getWebServerFactory主要做的事是从bean工厂中获取ServletWebServerFactory类型的bean，</p><p>那么ServletWebServerFactory这个类型的类什么时候注入到spring容器中的呢？</p><p>我们可以看下ServletWebServerFactoryAutoConfiguration这个自动配置类</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span><span class="token annotation punctuation">@AutoConfigureOrder</span><span class="token punctuation">(</span>Ordered<span class="token punctuation">.</span>HIGHEST_PRECEDENCE<span class="token punctuation">)</span><span class="token annotation punctuation">@ConditionalOnClass</span><span class="token punctuation">(</span>ServletRequest<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token annotation punctuation">@ConditionalOnWebApplication</span><span class="token punctuation">(</span>type <span class="token operator">=</span> Type<span class="token punctuation">.</span>SERVLET<span class="token punctuation">)</span><span class="token annotation punctuation">@EnableConfigurationProperties</span><span class="token punctuation">(</span>ServerProperties<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token annotation punctuation">@Import</span><span class="token punctuation">(</span><span class="token punctuation">{</span> ServletWebServerFactoryAutoConfiguration<span class="token punctuation">.</span>BeanPostProcessorsRegistrar<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span>      ServletWebServerFactoryConfiguration<span class="token punctuation">.</span>EmbeddedTomcat<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span>      ServletWebServerFactoryConfiguration<span class="token punctuation">.</span>EmbeddedJetty<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span>      ServletWebServerFactoryConfiguration<span class="token punctuation">.</span>EmbeddedUndertow<span class="token punctuation">.</span><span class="token keyword">class</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ServletWebServerFactoryAutoConfiguration</span> <span class="token punctuation">{</span></code></pre><p>从自动配置类中发现import了一个EmbeddedTomcat类，而在这个类中又注入了bean  TomcatServletWebServerFactory</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span><span class="token annotation punctuation">@ConditionalOnClass</span><span class="token punctuation">(</span><span class="token punctuation">{</span> Servlet<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> Tomcat<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> UpgradeProtocol<span class="token punctuation">.</span><span class="token keyword">class</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token annotation punctuation">@ConditionalOnMissingBean</span><span class="token punctuation">(</span>value <span class="token operator">=</span> ServletWebServerFactory<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> search <span class="token operator">=</span> SearchStrategy<span class="token punctuation">.</span>CURRENT<span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">EmbeddedTomcat</span> <span class="token punctuation">{</span>   <span class="token annotation punctuation">@Bean</span>   <span class="token keyword">public</span> TomcatServletWebServerFactory <span class="token function">tomcatServletWebServerFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">TomcatServletWebServerFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p><img src="https://blog-dm.oss-cn-shanghai.aliyuncs.com/articleimage/20210417181810.png"></p><p><img src="https://blog-dm.oss-cn-shanghai.aliyuncs.com/articleimage/20210417181852.png"></p><h4 id="getWebServer"><a href="#getWebServer" class="headerlink" title="getWebServer"></a>getWebServer</h4><p>getWebServer主要做的事是创建内嵌tomcat</p><pre class=" language-java"><code class="language-java"><span class="token keyword">private</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>web<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>ServletContextInitializer <span class="token function">getSelfInitializer</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>   <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token operator">:</span><span class="token operator">:</span>selfInitialize<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">selfInitialize</span><span class="token punctuation">(</span>ServletContext servletContext<span class="token punctuation">)</span> <span class="token keyword">throws</span> ServletException <span class="token punctuation">{</span>   <span class="token function">prepareWebApplicationContext</span><span class="token punctuation">(</span>servletContext<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token function">registerApplicationScope</span><span class="token punctuation">(</span>servletContext<span class="token punctuation">)</span><span class="token punctuation">;</span>   WebApplicationContextUtils<span class="token punctuation">.</span><span class="token function">registerEnvironmentBeans</span><span class="token punctuation">(</span><span class="token function">getBeanFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>         servletContext<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">// 获取所有servlet组件然后回调onStart方法，将serclet注册进tomcat容器中</span>   <span class="token keyword">for</span> <span class="token punctuation">(</span>ServletContextInitializer beans <span class="token operator">:</span> <span class="token function">getServletContextInitializerBeans</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      beans<span class="token punctuation">.</span><span class="token function">onStartup</span><span class="token punctuation">(</span>servletContext<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p> factory.getWebServer(getSelfInitializer())这个方法中传入了getSelfInitializer，但并不会调用，会最后回调，回调完之后就创建了servlet组件，所以我们只需要关注它是如何回调的</p><p>这里是将传入的参一步步注入到TomcatStart中去然后将TomcatStart注入到TomcatEmbeddedContext中去。最后通过tomcat.start方法运行</p><p>大致调用栈是</p><pre><code>TomcatServletWebServerFactory#getWebServer    -- TomcatServletWebServerFactory#prepareContext        -- TomcatServletWebServerFactory#configureContext            -- context.addServletContainerInitializer(starter, NO_CLASSES);    -- TomcatServletWebServerFactory#getTomcatWebServer        -- TomcatWebServer#initialize            -- this.tomcat.start();</code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 源码 </tag>
            
            <tag> Spring </tag>
            
            <tag> SpringBoot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringBoot自动装配原理以及自定义starter</title>
      <link href="/2021/04/20/springboot-zi-dong-zhuang-pei-yuan-li/"/>
      <url>/2021/04/20/springboot-zi-dong-zhuang-pei-yuan-li/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>大家都知道一个Spring项目的搭建是及其繁琐的，需要写很多xml配置文件，集成一个框架进Spring都需要增加一个xml配置文件。即使我们可以使用javaConfig的方式减少xml的配置，其实也是没有更加方便，也是要建立很多的config的bean。</p><p>SpringBoot解决的问题的就是配置的动态注入。在这里SpringBoot的搭建就不必多说了，这篇博文主要侧重的是SpringBoot的自动装配原理。</p><h2 id="SpringBoot启动类"><a href="#SpringBoot启动类" class="headerlink" title="SpringBoot启动类"></a>SpringBoot启动类</h2><p>首先从SpringBoot启动类注解开始入手，也就是@SpringBootApplication注解</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Target</span><span class="token punctuation">(</span>ElementType<span class="token punctuation">.</span>TYPE<span class="token punctuation">)</span><span class="token annotation punctuation">@Retention</span><span class="token punctuation">(</span>RetentionPolicy<span class="token punctuation">.</span>RUNTIME<span class="token punctuation">)</span><span class="token annotation punctuation">@Documented</span><span class="token annotation punctuation">@Inherited</span><span class="token comment" spellcheck="true">// 表示这是一个SpringBoot的配置类</span><span class="token annotation punctuation">@SpringBootConfiguration</span><span class="token comment" spellcheck="true">// 开启自动配置功能,将以前所需xml配置,交由SpringBoot管理</span><span class="token annotation punctuation">@EnableAutoConfiguration</span><span class="token comment" spellcheck="true">// 扫描包</span><span class="token annotation punctuation">@ComponentScan</span><span class="token punctuation">(</span>excludeFilters <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token annotation punctuation">@Filter</span><span class="token punctuation">(</span>type <span class="token operator">=</span> FilterType<span class="token punctuation">.</span>CUSTOM<span class="token punctuation">,</span> classes <span class="token operator">=</span> TypeExcludeFilter<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token annotation punctuation">@Filter</span><span class="token punctuation">(</span>type <span class="token operator">=</span> FilterType<span class="token punctuation">.</span>CUSTOM<span class="token punctuation">,</span> classes <span class="token operator">=</span> AutoConfigurationExcludeFilter<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token keyword">public</span> @<span class="token keyword">interface</span> <span class="token class-name">SpringBootApplication</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></code></pre><p>在这里的注解中，最主要的一个就是@EnableAutoConfiguration注解，这里面有一个@Import(AutoConfigurationImportSelector.class)注解，这里表示注入了一个AutoConfigurationImportSelector class的类，这个类里面有着自动装配的原理。</p><h2 id="DeferredImportSelector"><a href="#DeferredImportSelector" class="headerlink" title="DeferredImportSelector"></a>DeferredImportSelector</h2><p>AutoConfigurationImportSelector 类实现了DeferredImportSelector，这个类是ImportSelector的一个变种，大家都知道ImportSelector的功能主要是批量注入BeanDefinition。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>core<span class="token punctuation">.</span>type<span class="token punctuation">.</span>AnnotationMetadata<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>Nullable<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">DeferredImportSelector</span> <span class="token keyword">extends</span> <span class="token class-name">ImportSelector</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Nullable</span>    <span class="token keyword">default</span> Class<span class="token operator">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">Group</span><span class="token operator">></span> <span class="token function">getImportGroup</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> null<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">interface</span> <span class="token class-name">Group</span> <span class="token punctuation">{</span>        <span class="token keyword">void</span> <span class="token function">process</span><span class="token punctuation">(</span>AnnotationMetadata metadata<span class="token punctuation">,</span> DeferredImportSelector selector<span class="token punctuation">)</span><span class="token punctuation">;</span>        Iterable<span class="token operator">&lt;</span>Entry<span class="token operator">></span> <span class="token function">selectImports</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">class</span> <span class="token class-name">Entry</span> <span class="token punctuation">{</span>            <span class="token keyword">private</span> <span class="token keyword">final</span> AnnotationMetadata metadata<span class="token punctuation">;</span>            <span class="token keyword">private</span> <span class="token keyword">final</span> String importClassName<span class="token punctuation">;</span>            <span class="token keyword">public</span> <span class="token function">Entry</span><span class="token punctuation">(</span>AnnotationMetadata metadata<span class="token punctuation">,</span> String importClassName<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">this</span><span class="token punctuation">.</span>metadata <span class="token operator">=</span> metadata<span class="token punctuation">;</span>                <span class="token keyword">this</span><span class="token punctuation">.</span>importClassName <span class="token operator">=</span> importClassName<span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">public</span> AnnotationMetadata <span class="token function">getMetadata</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>metadata<span class="token punctuation">;</span>            <span class="token punctuation">}</span>                        <span class="token keyword">public</span> String <span class="token function">getImportClassName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>importClassName<span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">equals</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Nullable</span> Object other<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span> <span class="token operator">==</span> other<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>other <span class="token operator">==</span> null <span class="token operator">||</span> <span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> other<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                Entry entry <span class="token operator">=</span> <span class="token punctuation">(</span>Entry<span class="token punctuation">)</span> other<span class="token punctuation">;</span>                <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>metadata<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>entry<span class="token punctuation">.</span>metadata<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>importClassName<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>entry<span class="token punctuation">.</span>importClassName<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>metadata<span class="token punctuation">.</span><span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">31</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>importClassName<span class="token punctuation">.</span><span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> String <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>importClassName<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>简单看下这个类，发现它继承了ImportSelector,说明它有着ImportSelector所拥有的的所有功能，它有区别于ImportSelector就是有一个</p><p>getImportGroup方法，并且有一个Group的接口。</p><p>这里我们看下官方的解释</p><p><img src="https://blog-dm.oss-cn-shanghai.aliyuncs.com/articleimage/20210414210117.png"></p><p>从这段翻译的注释中我们可以发现它所具有的功能主要是2块，</p><ul><li>延迟加载，在所有BeanDefinition都解析完成后才会解析DeferredImportSelector所注入的BeanDefiition</li><li>提供了import group功能，主要是在提供了在当前组实现排序，过滤功能，不影响其他import group</li></ul><h3 id="怎样玩转DeferredImportSelector"><a href="#怎样玩转DeferredImportSelector" class="headerlink" title="怎样玩转DeferredImportSelector"></a>怎样玩转DeferredImportSelector</h3><p>上面主要是介绍了DeferredImportSelector的实现功能，下面我们来简单说下如何使用</p><ol><li>首先他有个getImportGroup方法，首先我们得实现这个方法，这个方法返回是一个Group，这个方法具体功能返回null,走原来的ImportSelector逻辑，否则走返回的Group中的processor逻辑</li><li>实现Group接口</li></ol><p>下面我简单写了个Demo</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>dm<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>DeferredImportSelector<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>core<span class="token punctuation">.</span>type<span class="token punctuation">.</span>AnnotationMetadata<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>ArrayList<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Arrays<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Collections<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>List<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>function<span class="token punctuation">.</span>Predicate<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyDeferredImportSelector</span> <span class="token keyword">implements</span> <span class="token class-name">DeferredImportSelector</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> String<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">selectImports</span><span class="token punctuation">(</span>AnnotationMetadata importingClassMetadata<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token string">"com.dm.bean.User"</span><span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 返回值为空调用MyDeferredImportSelector#selectImports     * 不为空调用MyGroup#process selectImports     */</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> Class<span class="token operator">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">Group</span><span class="token operator">></span> <span class="token function">getImportGroup</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> MyGroup<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">MyGroup</span> <span class="token keyword">implements</span> <span class="token class-name">DeferredImportSelector<span class="token punctuation">.</span>Group</span><span class="token punctuation">{</span>        AnnotationMetadata metadata<span class="token punctuation">;</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">process</span><span class="token punctuation">(</span>AnnotationMetadata metadata<span class="token punctuation">,</span> DeferredImportSelector selector<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>metadata <span class="token operator">=</span> metadata<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> Iterable<span class="token operator">&lt;</span>Entry<span class="token operator">></span> <span class="token function">selectImports</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> Collections<span class="token punctuation">.</span><span class="token function">singletonList</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Entry</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>metadata<span class="token punctuation">,</span> <span class="token string">"com.dm.bean.Log"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>以下面代码打印出所有容器中所有bean,从结果可以反映出getImportGroup，返回值的影响</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@SpringBootApplication</span><span class="token annotation punctuation">@Slf4j</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyApplication</span> <span class="token keyword">implements</span> <span class="token class-name">CommandLineRunner</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Resource</span>    <span class="token keyword">private</span> ApplicationContext applicationContext<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        SpringApplication<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span>MyApplication<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span>String<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        String<span class="token punctuation">[</span><span class="token punctuation">]</span> names <span class="token operator">=</span> applicationContext<span class="token punctuation">.</span><span class="token function">getBeanDefinitionNames</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Arrays<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span>names<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>log<span class="token operator">:</span><span class="token operator">:</span>info<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//        log.info("项目启动成功，容器注入javaBean:{}个.",names.length);</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="源码级别看DeferredImportSelector加载逻辑"><a href="#源码级别看DeferredImportSelector加载逻辑" class="headerlink" title="源码级别看DeferredImportSelector加载逻辑"></a>源码级别看DeferredImportSelector加载逻辑</h3><p>这段逻辑主要是SpringIOC的逻辑，这里不具体跟了，首先找到入口</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// Spring 核心类</span>AbstractApplicationContext#refresh<span class="token comment" spellcheck="true">// 调用bean工厂的后置处理器</span>AbstractApplicationContext#invokeBeanFactoryPostProcessorsPostProcessorRegistrationDelegate#invokeBeanFactoryPostProcessors<span class="token comment" spellcheck="true">// 一般是解析配置类功能的bean工厂的后置处理器ConfigurationClassPostProcessor，调用带注册的bean工厂的后置处理器，一般用于bean定义的加载，比如@ComponentScan,@Import等</span>PostProcessorRegistrationDelegate#invokeBeanDefinitionRegistryPostProcessors<span class="token comment" spellcheck="true">// 解析bean定义</span>ConfigurationClassPostProcessor#postProcessBeanDefinitionRegistry<span class="token comment" spellcheck="true">// 解析</span>ConfigurationClassParser#parse</code></pre><p>在ConfigurationClassParser#parse这个方法中我们可以看到在配置类完全解析完之后调用了processDeferredImportSelectors方法来处理延时的DeferredImportSelectors。</p><p>我们看看processDeferredImportSelectors方法干了什么</p><h4 id="processDeferredImportSelectors"><a href="#processDeferredImportSelectors" class="headerlink" title="processDeferredImportSelectors"></a>processDeferredImportSelectors</h4><pre class=" language-java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">processDeferredImportSelectors</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        List<span class="token operator">&lt;</span>DeferredImportSelectorHolder<span class="token operator">></span> deferredImports <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>deferredImportSelectors<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>deferredImportSelectors <span class="token operator">=</span> null<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>deferredImports <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//对多个DeferredImportSelector进行排序分组</span>        deferredImports<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>DEFERRED_IMPORT_COMPARATOR<span class="token punctuation">)</span><span class="token punctuation">;</span>        Map<span class="token operator">&lt;</span>Object<span class="token punctuation">,</span> DeferredImportSelectorGrouping<span class="token operator">></span> groupings <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedHashMap</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Map<span class="token operator">&lt;</span>AnnotationMetadata<span class="token punctuation">,</span> ConfigurationClass<span class="token operator">></span> configurationClasses <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>DeferredImportSelectorHolder deferredImport <span class="token operator">:</span> deferredImports<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 从这可以看出你实现了自定义的Group就会使用你自己的Group否则就使用DeferredImportSelectorGrouping，就会调用你实现的默认selectImports方法</span>            <span class="token comment" spellcheck="true">// 这里也会对实现了同Group的进行分组</span>            Class<span class="token operator">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">Group</span><span class="token operator">></span> group <span class="token operator">=</span> deferredImport<span class="token punctuation">.</span><span class="token function">getImportSelector</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getImportGroup</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            DeferredImportSelectorGrouping grouping <span class="token operator">=</span> groupings<span class="token punctuation">.</span><span class="token function">computeIfAbsent</span><span class="token punctuation">(</span>                    <span class="token punctuation">(</span>group <span class="token operator">!=</span> null <span class="token operator">?</span> group <span class="token operator">:</span> deferredImport<span class="token punctuation">)</span><span class="token punctuation">,</span>                    key <span class="token operator">-</span><span class="token operator">></span> <span class="token keyword">new</span> <span class="token class-name">DeferredImportSelectorGrouping</span><span class="token punctuation">(</span><span class="token function">createGroup</span><span class="token punctuation">(</span>group<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            grouping<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>deferredImport<span class="token punctuation">)</span><span class="token punctuation">;</span>            configurationClasses<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>deferredImport<span class="token punctuation">.</span><span class="token function">getConfigurationClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getMetadata</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                    deferredImport<span class="token punctuation">.</span><span class="token function">getConfigurationClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//正在的调用延时的DeferredImportSelector的selectImport方法</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>DeferredImportSelectorGrouping grouping <span class="token operator">:</span> groupings<span class="token punctuation">.</span><span class="token function">values</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// getImports方法很重要</span>            grouping<span class="token punctuation">.</span><span class="token function">getImports</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>entry <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>                ConfigurationClass configurationClass <span class="token operator">=</span> configurationClasses<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>entry<span class="token punctuation">.</span><span class="token function">getMetadata</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">try</span> <span class="token punctuation">{</span>                    <span class="token function">processImports</span><span class="token punctuation">(</span>configurationClass<span class="token punctuation">,</span> <span class="token function">asSourceClass</span><span class="token punctuation">(</span>configurationClass<span class="token punctuation">)</span><span class="token punctuation">,</span>                            <span class="token function">asSourceClasses</span><span class="token punctuation">(</span>entry<span class="token punctuation">.</span><span class="token function">getImportClassName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">BeanDefinitionStoreException</span> ex<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">throw</span> ex<span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Throwable</span> ex<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">BeanDefinitionStoreException</span><span class="token punctuation">(</span>                            <span class="token string">"Failed to process import candidates for configuration class ["</span> <span class="token operator">+</span>                            configurationClass<span class="token punctuation">.</span><span class="token function">getMetadata</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getClassName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"]"</span><span class="token punctuation">,</span> ex<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span></code></pre><h4 id="getImports"><a href="#getImports" class="headerlink" title="getImports"></a>getImports</h4><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> Iterable<span class="token operator">&lt;</span>Group<span class="token punctuation">.</span>Entry<span class="token operator">></span> <span class="token function">getImports</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>   <span class="token keyword">for</span> <span class="token punctuation">(</span>DeferredImportSelectorHolder deferredImport <span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>deferredImports<span class="token punctuation">)</span> <span class="token punctuation">{</span>       <span class="token comment" spellcheck="true">// 调用group的process方法,如果group没有group就为DefaultDeferredImportSelectorGroup，调用默认selectImports方法</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>group<span class="token punctuation">.</span><span class="token function">process</span><span class="token punctuation">(</span>deferredImport<span class="token punctuation">.</span><span class="token function">getConfigurationClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getMetadata</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            deferredImport<span class="token punctuation">.</span><span class="token function">getImportSelector</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 调用group的selectImports方法</span>   <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>group<span class="token punctuation">.</span><span class="token function">selectImports</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h2 id="process-amp-amp-selectImports"><a href="#process-amp-amp-selectImports" class="headerlink" title="process&amp;&amp;selectImports"></a>process&amp;&amp;selectImports</h2><p>AutoConfigurationImportSelector#AutoConfigurationGroup#process&amp;&amp;selectImports</p><p>从上面所说的DeferredImportSelector逻辑可以看出springBoot会首先执行process方法，然后在执行selectImports方法，我们进入process方法看看做了什么</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">process</span><span class="token punctuation">(</span>AnnotationMetadata annotationMetadata<span class="token punctuation">,</span>                    DeferredImportSelector deferredImportSelector<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 核心方法（版本不一样代码可能不一样，但大体逻辑差不太多）</span>    String<span class="token punctuation">[</span><span class="token punctuation">]</span> imports <span class="token operator">=</span> deferredImportSelector<span class="token punctuation">.</span><span class="token function">selectImports</span><span class="token punctuation">(</span>annotationMetadata<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>String importClassName <span class="token operator">:</span> imports<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>entries<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>importClassName<span class="token punctuation">,</span> annotationMetadata<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> String<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">selectImports</span><span class="token punctuation">(</span>AnnotationMetadata annotationMetadata<span class="token punctuation">)</span> <span class="token punctuation">{</span>   <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isEnabled</span><span class="token punctuation">(</span>annotationMetadata<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> NO_IMPORTS<span class="token punctuation">;</span>   <span class="token punctuation">}</span>   AutoConfigurationMetadata autoConfigurationMetadata <span class="token operator">=</span> AutoConfigurationMetadataLoader         <span class="token punctuation">.</span><span class="token function">loadMetadata</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>beanClassLoader<span class="token punctuation">)</span><span class="token punctuation">;</span>   AnnotationAttributes attributes <span class="token operator">=</span> <span class="token function">getAttributes</span><span class="token punctuation">(</span>annotationMetadata<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//&amp;nbsp;从META‐INF/spring.factories中获得候选的自动配置类</span>   List<span class="token operator">&lt;</span>String<span class="token operator">></span> configurations <span class="token operator">=</span> <span class="token function">getCandidateConfigurations</span><span class="token punctuation">(</span>annotationMetadata<span class="token punctuation">,</span>         attributes<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">// 去重</span>   configurations <span class="token operator">=</span> <span class="token function">removeDuplicates</span><span class="token punctuation">(</span>configurations<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">// EnableAutoConfiguration属性,获取需要进行排除的类,为了后续的排除</span>   Set<span class="token operator">&lt;</span>String<span class="token operator">></span> exclusions <span class="token operator">=</span> <span class="token function">getExclusions</span><span class="token punctuation">(</span>annotationMetadata<span class="token punctuation">,</span> attributes<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//&amp;nbsp;@EnableAutoConfiguration.exclude</span>  <span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//&amp;nbsp;@EnableAutoConfiguration.excludeName</span>  <span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//&amp;nbsp;spring.autoconfigure.exclude&amp;nbsp;进行检查是否在所有配置类中，否则报错</span>   <span class="token function">checkExcludedClasses</span><span class="token punctuation">(</span>configurations<span class="token punctuation">,</span> exclusions<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">// 排除</span>   configurations<span class="token punctuation">.</span><span class="token function">removeAll</span><span class="token punctuation">(</span>exclusions<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">// 读取spring.factories</span>   <span class="token comment" spellcheck="true">// OnBeanCondition  OnClassCondition  OnWebApplicationCondition</span>   configurations <span class="token operator">=</span> <span class="token function">filter</span><span class="token punctuation">(</span>configurations<span class="token punctuation">,</span> autoConfigurationMetadata<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//&amp;nbsp;这个方法是调用实现了AutoConfigurationImportListener把候选的配置名单和排除的配置名单传进去做扩展</span>   <span class="token function">fireAutoConfigurationImportEvents</span><span class="token punctuation">(</span>configurations<span class="token punctuation">,</span> exclusions<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token keyword">return</span> StringUtils<span class="token punctuation">.</span><span class="token function">toStringArray</span><span class="token punctuation">(</span>configurations<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 获取所有的配置类</span><span class="token keyword">protected</span> List<span class="token operator">&lt;</span>String<span class="token operator">></span> <span class="token function">getCandidateConfigurations</span><span class="token punctuation">(</span>AnnotationMetadata metadata<span class="token punctuation">,</span>                                                  AnnotationAttributes attributes<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 从META-INF/spring.factories中读取</span>    List<span class="token operator">&lt;</span>String<span class="token operator">></span> configurations <span class="token operator">=</span> SpringFactoriesLoader<span class="token punctuation">.</span><span class="token function">loadFactoryNames</span><span class="token punctuation">(</span>        <span class="token function">getSpringFactoriesLoaderFactoryClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">getBeanClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    Assert<span class="token punctuation">.</span><span class="token function">notEmpty</span><span class="token punctuation">(</span>configurations<span class="token punctuation">,</span>                    <span class="token string">"No auto configuration classes found in META-INF/spring.factories. If you "</span>                    <span class="token operator">+</span> <span class="token string">"are using a custom packaging, make sure that file is correct."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> configurations<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>没排除前</p><p><img src="https://blog-dm.oss-cn-shanghai.aliyuncs.com/articleimage/20210414231848.png"></p><p>进行OnBeanCondition  OnClassCondition  OnWebApplicationCondition匹配排除后</p><p><img src="https://blog-dm.oss-cn-shanghai.aliyuncs.com/articleimage/20210414231927.png"></p><h2 id="自动配置类原理"><a href="#自动配置类原理" class="headerlink" title="自动配置类原理"></a>自动配置类原理</h2><p>这里主要讲了OnBeanCondition  OnClassCondition  OnWebApplicationCondition是怎么过滤配置类的</p><p>我们在getCandidateConfigurations下面的getSpringFactoriesLoaderFactoryClass发现它加载了spring.factories中的EnableAutoConfiguration</p><p>我们找到spring-boot-autoconfigure下面的spring.factories，这里面包含了springboot所有会自动装配的类</p><p><img src="https://blog-dm.oss-cn-shanghai.aliyuncs.com/articleimage/image-20210415113529653.png"></p><p>我们找到一个匹配到的类看看是如何进行匹配的，这里我们就找到DispatcherServletAutoConfiguration</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@AutoConfigureOrder</span><span class="token punctuation">(</span>Ordered<span class="token punctuation">.</span>HIGHEST_PRECEDENCE<span class="token punctuation">)</span><span class="token annotation punctuation">@Configuration</span><span class="token annotation punctuation">@ConditionalOnWebApplication</span><span class="token punctuation">(</span>type <span class="token operator">=</span> Type<span class="token punctuation">.</span>SERVLET<span class="token punctuation">)</span><span class="token annotation punctuation">@ConditionalOnClass</span><span class="token punctuation">(</span>DispatcherServlet<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token annotation punctuation">@AutoConfigureAfter</span><span class="token punctuation">(</span>ServletWebServerFactoryAutoConfiguration<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token annotation punctuation">@EnableConfigurationProperties</span><span class="token punctuation">(</span>ServerProperties<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DispatcherServletAutoConfiguration</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/*     * The bean name for a DispatcherServlet that will be mapped to the root URL "/"     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> String DEFAULT_DISPATCHER_SERVLET_BEAN_NAME <span class="token operator">=</span> <span class="token string">"dispatcherServlet"</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/*     * The bean name for a ServletRegistrationBean for the DispatcherServlet "/"     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> String DEFAULT_DISPATCHER_SERVLET_REGISTRATION_BEAN_NAME <span class="token operator">=</span> <span class="token string">"dispatcherServletRegistration"</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Configuration</span>    <span class="token annotation punctuation">@Conditional</span><span class="token punctuation">(</span>DefaultDispatcherServletCondition<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>    <span class="token annotation punctuation">@ConditionalOnClass</span><span class="token punctuation">(</span>ServletRegistration<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>    <span class="token annotation punctuation">@EnableConfigurationProperties</span><span class="token punctuation">(</span>WebMvcProperties<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>    <span class="token keyword">protected</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">DispatcherServletConfiguration</span> <span class="token punctuation">{</span>        <span class="token keyword">private</span> <span class="token keyword">final</span> WebMvcProperties webMvcProperties<span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token function">DispatcherServletConfiguration</span><span class="token punctuation">(</span>WebMvcProperties webMvcProperties<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>webMvcProperties <span class="token operator">=</span> webMvcProperties<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token annotation punctuation">@Bean</span><span class="token punctuation">(</span>name <span class="token operator">=</span> DEFAULT_DISPATCHER_SERVLET_BEAN_NAME<span class="token punctuation">)</span>        <span class="token keyword">public</span> DispatcherServlet <span class="token function">dispatcherServlet</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            DispatcherServlet dispatcherServlet <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DispatcherServlet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            dispatcherServlet<span class="token punctuation">.</span><span class="token function">setDispatchOptionsRequest</span><span class="token punctuation">(</span>                    <span class="token keyword">this</span><span class="token punctuation">.</span>webMvcProperties<span class="token punctuation">.</span><span class="token function">isDispatchOptionsRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            dispatcherServlet<span class="token punctuation">.</span><span class="token function">setDispatchTraceRequest</span><span class="token punctuation">(</span>                    <span class="token keyword">this</span><span class="token punctuation">.</span>webMvcProperties<span class="token punctuation">.</span><span class="token function">isDispatchTraceRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            dispatcherServlet<span class="token punctuation">.</span><span class="token function">setThrowExceptionIfNoHandlerFound</span><span class="token punctuation">(</span>                    <span class="token keyword">this</span><span class="token punctuation">.</span>webMvcProperties<span class="token punctuation">.</span><span class="token function">isThrowExceptionIfNoHandlerFound</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> dispatcherServlet<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token annotation punctuation">@Bean</span>        <span class="token annotation punctuation">@ConditionalOnBean</span><span class="token punctuation">(</span>MultipartResolver<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>        <span class="token annotation punctuation">@ConditionalOnMissingBean</span><span class="token punctuation">(</span>name <span class="token operator">=</span> DispatcherServlet<span class="token punctuation">.</span>MULTIPART_RESOLVER_BEAN_NAME<span class="token punctuation">)</span>        <span class="token keyword">public</span> MultipartResolver <span class="token function">multipartResolver</span><span class="token punctuation">(</span>MultipartResolver resolver<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// Detect if the user has created a MultipartResolver but named it incorrectly</span>            <span class="token keyword">return</span> resolver<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="EnableConfigurationProperties"><a href="#EnableConfigurationProperties" class="headerlink" title="@EnableConfigurationProperties"></a>@EnableConfigurationProperties</h3><p>这个注解主要是表示了启用的配置类，在这里启用的配置类是ServerProperties</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@ConfigurationProperties</span><span class="token punctuation">(</span>prefix <span class="token operator">=</span> <span class="token string">"server"</span><span class="token punctuation">,</span> ignoreUnknownFields <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ServerProperties</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * Server HTTP port.     */</span>    <span class="token keyword">private</span> Integer port<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * Network address to which the server should bind.     */</span>    <span class="token keyword">private</span> InetAddress address<span class="token punctuation">;</span>    <span class="token annotation punctuation">@NestedConfigurationProperty</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> ErrorProperties error <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ErrorProperties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * Whether X-Forwarded-* headers should be applied to the HttpRequest.     */</span>    <span class="token keyword">private</span> Boolean useForwardHeaders<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * Value to use for the Server response header (if empty, no header is sent).     */</span>    <span class="token keyword">private</span> String serverHeader<span class="token punctuation">;</span>        。。。。。。。。。。。</code></pre><p>简单的copy了一个局部，从这局部我们也可以看出这个自动装配类的配置项主要有哪些，比如server.port,server.address等等</p><h3 id="Conditional"><a href="#Conditional" class="headerlink" title="@Conditional"></a>@Conditional</h3><p>剩下的比较重要的就是@Conditional注解，这些注解共同决定了是否启用这个配置类</p><table><thead><tr><th>注解名字</th><th>判断条件</th></tr></thead><tbody><tr><td>@ConditionalOnJava</td><td>系统的java版本是否符合要求</td></tr><tr><td>@ConditionalOnBean</td><td>容器中存在指定Bean</td></tr><tr><td>@ConditionalOnMissingBean</td><td>容器中不存在指定Bean</td></tr><tr><td>@ConditionalOnClass</td><td>系统中有指定的类</td></tr><tr><td>@ConditionalOnMissingClass</td><td>系统中没有指定的类</td></tr><tr><td>@ConditionalOnWebApplication</td><td>当前是web环境</td></tr><tr><td>@ConditionalOnNotWebApplication</td><td>当前不是web环境</td></tr><tr><td>@ConditionalOnResource</td><td>类路径下是否存在指定资源文件</td></tr><tr><td>@ConditionalOnProperty</td><td>系统中指定的属性是否有指定的值</td></tr><tr><td>@ConditionalOnSingleCandidate</td><td>容器中只有一个指定的Bean，或者这个Bean是首选Bean</td></tr><tr><td>@ConditionalOnExpression</td><td>满足SpEL表达式指定</td></tr><tr><td>@ConditionalOnJndi</td><td>JNDI存在指定项</td></tr></tbody></table><p>在DispatcherServletAutoConfiguration中共有2个@Conditional注解，@ConditionalOnClass和@ConditionalOnWebApplication表示它满足servlet环境且存在DispatcherServlet类就加载成功。</p><p>我们在换一个AutoConfiguration看看是否会加载成功，我们选择ElasticsearchAutoConfiguration</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span><span class="token annotation punctuation">@ConditionalOnClass</span><span class="token punctuation">(</span><span class="token punctuation">{</span> Client<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> TransportClientFactoryBean<span class="token punctuation">.</span><span class="token keyword">class</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token annotation punctuation">@ConditionalOnProperty</span><span class="token punctuation">(</span>prefix <span class="token operator">=</span> <span class="token string">"spring.data.elasticsearch"</span><span class="token punctuation">,</span> name <span class="token operator">=</span> <span class="token string">"cluster-nodes"</span><span class="token punctuation">,</span> matchIfMissing <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token annotation punctuation">@EnableConfigurationProperties</span><span class="token punctuation">(</span>ElasticsearchProperties<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ElasticsearchAutoConfiguration</span> <span class="token punctuation">{</span></code></pre><p>从这里看共有2个@Conditional，@ConditionalOnClass和@ConditionalOnProperty</p><ul><li>必须存在Client.class和TransportClientFactoryBean.class</li><li>这里有个matchIfMissing，true表示不匹配也可以，false表示必须匹配，而且spring.data.elasticsearch.cluster-nodes必须存在</li></ul><h2 id="springboot自定义starter使用"><a href="#springboot自定义starter使用" class="headerlink" title="springboot自定义starter使用"></a>springboot自定义starter使用</h2><p>再使用springboot starter之前，首先先了解下命名规范</p><p>使用springboot starter会需要定义2个jar包，一个starter包一个autoconfigure包</p><h3 id="命名规范"><a href="#命名规范" class="headerlink" title="命名规范"></a>命名规范</h3><p>官方命名空间</p><ul><li>模式：spring-boot-starter-模块名，spring-boot-autoconfigure</li><li>举例：spring-boot-starter-web</li></ul><p>自定义命名空间</p><ul><li>模式：模块-spring-boot-starter，模块-spring-boot-autoconfigure</li><li>举例：mybatis-spring-boot-starter，mybatis-spring-boot-autoconfigure</li></ul><h3 id="Demo"><a href="#Demo" class="headerlink" title="Demo"></a>Demo</h3><h4 id="父pom"><a href="#父pom" class="headerlink" title="父pom"></a>父pom</h4><pre class=" language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>project</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://maven.apache.org/POM/4.0.0<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>  <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>modelVersion</span><span class="token punctuation">></span></span>4.0.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>modelVersion</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>parent</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-parent<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.0.8.RELEASE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>relativePath</span><span class="token punctuation">/></span></span> <span class="token comment" spellcheck="true">&lt;!-- lookup parent from repository --></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>parent</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.dm<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>customer-springboot-starter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.0-SNAPSHOT<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>customer-springboot-starter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>packaging</span><span class="token punctuation">></span></span>pom<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>packaging</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>description</span><span class="token punctuation">></span></span>SpringBoot自定义starter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>description</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>modules</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>module</span><span class="token punctuation">></span></span>dm-spring-boot-starter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>module</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>module</span><span class="token punctuation">></span></span>dm-spring-boot-autoconfigure<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>module</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>modules</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>properties</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>java.version</span><span class="token punctuation">></span></span>1.8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>java.version</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>properties</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>project</span><span class="token punctuation">></span></span></code></pre><h4 id="dm-spring-boot-autoconfigure"><a href="#dm-spring-boot-autoconfigure" class="headerlink" title="dm-spring-boot-autoconfigure"></a>dm-spring-boot-autoconfigure</h4><p>这个包主要就是自动装配的功能</p><h5 id="pom"><a href="#pom" class="headerlink" title="pom"></a>pom</h5><pre class=" language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>project</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://maven.apache.org/POM/4.0.0<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>  <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>modelVersion</span><span class="token punctuation">></span></span>4.0.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>modelVersion</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>parent</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.dm<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>customer-springboot-starter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.0-SNAPSHOT<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>parent</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>dm-spring-boot-autoconfigure<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>dm-spring-boot-autoconfigure<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>description</span><span class="token punctuation">></span></span>自动配置<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>description</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>properties</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>java.version</span><span class="token punctuation">></span></span>1.8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>java.version</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>properties</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-web<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--‐导入配置文件处理器，配置文件进行绑定就会有提示--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-configuration-processor<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>optional</span><span class="token punctuation">></span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>optional</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.projectlombok<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>lombok<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.18.20<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>      <span class="token comment" spellcheck="true">&lt;!--此配置保证lombok不会被父引用依赖，引入此依赖包不会引用lombok依赖--></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>optional</span><span class="token punctuation">></span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>optional</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>project</span><span class="token punctuation">></span></span></code></pre><h5 id="DmAutoConfiguration"><a href="#DmAutoConfiguration" class="headerlink" title="DmAutoConfiguration"></a>DmAutoConfiguration</h5><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span><span class="token annotation punctuation">@ConditionalOnProperty</span><span class="token punctuation">(</span>prefix <span class="token operator">=</span> <span class="token string">"dm.enable"</span><span class="token punctuation">,</span> name <span class="token operator">=</span> <span class="token string">"auto"</span><span class="token punctuation">,</span> havingValue <span class="token operator">=</span> <span class="token string">"true"</span><span class="token punctuation">)</span><span class="token annotation punctuation">@EnableConfigurationProperties</span><span class="token punctuation">(</span>DmProperties<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token annotation punctuation">@ConditionalOnClass</span><span class="token punctuation">(</span><span class="token punctuation">{</span>Slf4j<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> Data<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token annotation punctuation">@Slf4j</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DmAutoConfiguration</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Resource</span>    DmProperties dmProperties<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token annotation punctuation">@ConditionalOnMissingBean</span>    <span class="token keyword">public</span> UserServiceClient <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"================================初始化UserServiceClient================================"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        UserServiceClient userServiceClient <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">UserServiceClient</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        String name <span class="token operator">=</span> dmProperties<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        userServiceClient<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>        userServiceClient<span class="token punctuation">.</span><span class="token function">setWelcome</span><span class="token punctuation">(</span><span class="token string">"欢迎回来"</span> <span class="token operator">+</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> userServiceClient<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h5 id="DmProperties"><a href="#DmProperties" class="headerlink" title="DmProperties"></a>DmProperties</h5><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@ConfigurationProperties</span><span class="token punctuation">(</span>prefix <span class="token operator">=</span> <span class="token string">"dm"</span><span class="token punctuation">)</span><span class="token annotation punctuation">@Data</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DmProperties</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> String name<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h5 id="UserServiceClient"><a href="#UserServiceClient" class="headerlink" title="UserServiceClient"></a>UserServiceClient</h5><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Data</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserServiceClient</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> String name<span class="token punctuation">;</span>    <span class="token keyword">private</span> String welcome<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>在DmAutoConfiguration注解上我们发现生效条件</p><ul><li>dm.enable.auto=true</li><li>有lombok包下的Slf4j.class,Data.class</li></ul><p>resources下面创建META-INF/spring.factories文件</p><h5 id="spring-factories"><a href="#spring-factories" class="headerlink" title="spring.factories"></a>spring.factories</h5><pre class=" language-yml"><code class="language-yml">org.springframework.boot.autoconfigure.EnableAutoConfiguration=\  com.starter.dm.DmAutoConfiguration</code></pre><h4 id="dm-spring-boot-starter"><a href="#dm-spring-boot-starter" class="headerlink" title="dm-spring-boot-starter"></a>dm-spring-boot-starter</h4><p>这个包简单了，只是维护了一个pom包，是个空项目</p><h5 id="pom-1"><a href="#pom-1" class="headerlink" title="pom"></a>pom</h5><pre class=" language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>project</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://maven.apache.org/POM/4.0.0<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>  <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>modelVersion</span><span class="token punctuation">></span></span>4.0.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>modelVersion</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>parent</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.dm<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>customer-springboot-starter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.0-SNAPSHOT<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>parent</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>dm-spring-boot-starter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>dm-spring-boot-starter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>description</span><span class="token punctuation">></span></span>启动器<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>description</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>properties</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>java.version</span><span class="token punctuation">></span></span>1.8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>java.version</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>properties</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">></span></span>      <span class="token comment" spellcheck="true">&lt;!--引入autoconfigure--></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.dm<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>dm-spring-boot-autoconfigure<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.0-SNAPSHOT<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>      <span class="token comment" spellcheck="true">&lt;!--如果当前starter 还需要其他的类库就在这里引用--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>project</span><span class="token punctuation">></span></span></code></pre><h4 id="使用项目"><a href="#使用项目" class="headerlink" title="使用项目"></a>使用项目</h4><p>项目引入dm-spring-boot-starter包即可</p><pre class=" language-xml"><code class="language-xml"> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.dm<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>dm-spring-boot-starter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.0-SNAPSHOT<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@SpringBootApplication</span><span class="token annotation punctuation">@Slf4j</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyApplication</span> <span class="token keyword">implements</span> <span class="token class-name">CommandLineRunner</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Resource</span>    <span class="token keyword">private</span> UserServiceClient userServiceClient<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        SpringApplication<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span>MyApplication<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span>String<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span>userServiceClient<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h5 id="配置类"><a href="#配置类" class="headerlink" title="配置类"></a>配置类</h5><p>application.yml</p><pre class=" language-yml"><code class="language-yml">dm:  enable:    auto: true  name: 哈哈哈哈</code></pre><h5 id="验证"><a href="#验证" class="headerlink" title="验证"></a>验证</h5><p><img src="https://blog-dm.oss-cn-shanghai.aliyuncs.com/articleimage/20210416135824.png"></p><p><img src="https://blog-dm.oss-cn-shanghai.aliyuncs.com/articleimage/20210416140009.png"></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 源码 </tag>
            
            <tag> Spring </tag>
            
            <tag> SpringBoot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring整合MyBatis源码剖析</title>
      <link href="/2021/04/13/spring-zheng-he-mybatis-yuan-ma-pou-xi/"/>
      <url>/2021/04/13/spring-zheng-he-mybatis-yuan-ma-pou-xi/</url>
      
        <content type="html"><![CDATA[<p>MyBatis整合MyBatis源码设计很多Spring IOC的内容，要想明白MyBatis如何整合进Spring需要对Spring IOC的加载流程和扩展点很熟悉，详情可以看<a href="https://dmsupine.com/2021/02/25/springioc-rong-qi-jia-zai-liu-cheng-he-yuan-ma-pou-xi/">SpringIOC容器加载流程和源码剖析</a></p><h2 id="Demo"><a href="#Demo" class="headerlink" title="Demo"></a>Demo</h2><p>首先引入spring-mybatis依赖包</p><table><thead><tr><th align="left">MyBatis-Spring</th><th align="left">MyBatis</th><th align="left">Spring Framework</th><th align="left">Spring Batch</th><th align="left">Java</th></tr></thead><tbody><tr><td align="left"><strong>2.0</strong></td><td align="left">3.5+</td><td align="left">5.0+</td><td align="left">4.0+</td><td align="left">Java 8+</td></tr><tr><td align="left"><strong>1.3</strong></td><td align="left">3.4+</td><td align="left">3.2.2+</td><td align="left">2.1+</td><td align="left">Java 6+</td></tr></tbody></table><pre class=" language-properties"><code class="language-properties">&lt;dependency>    &lt;groupId>org.mybatis&lt;/groupId>    &lt;artifactId>mybatis-spring&lt;/artifactId>    &lt;version>2.0.3&lt;/version>&lt;/dependency></code></pre><p>配置类</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span><span class="token annotation punctuation">@MapperScan</span><span class="token punctuation">(</span>basePackages <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">"com.dm.mapper"</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token annotation punctuation">@ComponentScan</span><span class="token punctuation">(</span>basePackages <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">"com.dm"</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token annotation punctuation">@Repository</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyBatisConfig</span> <span class="token punctuation">{</span>   <span class="token annotation punctuation">@Bean</span>   <span class="token keyword">public</span> SqlSessionFactoryBean <span class="token function">sqlSessionFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>      SqlSessionFactoryBean factoryBean <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SqlSessionFactoryBean</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      factoryBean<span class="token punctuation">.</span><span class="token function">setDataSource</span><span class="token punctuation">(</span><span class="token function">dataSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">// MyBatis配置文件路径</span>      factoryBean<span class="token punctuation">.</span><span class="token function">setConfigLocation</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ClassPathResource</span><span class="token punctuation">(</span><span class="token string">"mybatis/mybatis-config.xml"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">// Mapper映射文件路径</span>      factoryBean<span class="token punctuation">.</span><span class="token function">setMapperLocations</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">PathMatchingResourcePatternResolver</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getResources</span><span class="token punctuation">(</span><span class="token string">"classpath:mybatis/mapper/*.xml"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">return</span> factoryBean<span class="token punctuation">;</span>   <span class="token punctuation">}</span>    <span class="token keyword">public</span> DataSource <span class="token function">dataSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        DruidDataSource dataSource <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DruidDataSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        dataSource<span class="token punctuation">.</span><span class="token function">setUsername</span><span class="token punctuation">(</span><span class="token string">"root"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        dataSource<span class="token punctuation">.</span><span class="token function">setPassword</span><span class="token punctuation">(</span><span class="token string">"xxxxxxx"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        dataSource<span class="token punctuation">.</span><span class="token function">setDriverClassName</span><span class="token punctuation">(</span><span class="token string">"com.mysql.jdbc.Driver"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        dataSource<span class="token punctuation">.</span><span class="token function">setUrl</span><span class="token punctuation">(</span><span class="token string">"jdbc:mysql://xx.xx.xx.xx:3306/test"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> dataSource<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>User实体类</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Data</span><span class="token annotation punctuation">@Builder</span><span class="token annotation punctuation">@AllArgsConstructor</span><span class="token annotation punctuation">@ToString</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token keyword">implements</span> <span class="token class-name">Serializable</span> <span class="token punctuation">{</span>   <span class="token keyword">private</span> Integer id<span class="token punctuation">;</span>   <span class="token keyword">private</span> String name<span class="token punctuation">;</span>   <span class="token keyword">private</span> Integer age<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>UserMapper.java</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">UserMapper</span> <span class="token punctuation">{</span>   User <span class="token function">selectById</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Param</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"id"</span><span class="token punctuation">)</span> Integer id<span class="token punctuation">)</span><span class="token punctuation">;</span>    List<span class="token operator">&lt;</span>User<span class="token operator">></span> <span class="token function">selectAllUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>UserMapper.xml</p><pre class=" language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token doctype">&lt;!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"        "http://mybatis.org/dtd/mybatis-3-mapper.dtd"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mapper</span> <span class="token attr-name">namespace</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.dm.mapper.UserMapper<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>resultMap</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>result<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.dm.entity.User<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>id<span class="token punctuation">"</span></span> <span class="token attr-name">jdbcType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>INTEGER<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>id<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span> <span class="token attr-name">jdbcType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>VARCHAR<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>age<span class="token punctuation">"</span></span> <span class="token attr-name">jdbcType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>INTEGER<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>age<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>resultMap</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>selectById<span class="token punctuation">"</span></span> <span class="token attr-name">resultMap</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>result<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      select * from user      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>where</span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>if</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>id <span class="token punctuation">></span> 0<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            and id=#{id}         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>if</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>where</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>selectAllUser<span class="token punctuation">"</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.dm.entity.User<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        select * from user    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mapper</span><span class="token punctuation">></span></span></code></pre><p>测试类</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MainStarter</span> <span class="token punctuation">{</span>   <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// 加载spring上下文</span>      AnnotationConfigApplicationContext ioc <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AnnotationConfigApplicationContext</span><span class="token punctuation">(</span>MyBatisConfig<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      UserMapper bean <span class="token operator">=</span> <span class="token punctuation">(</span>UserMapper<span class="token punctuation">)</span> ioc<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token string">"userMapper"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>bean<span class="token punctuation">.</span><span class="token function">selectById</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>我们发现这和我们普通spring bean加载有2个区别，配置类上加了@MapperScan，和注入了一个SqlSessionFactoryBean（其实注入的bean不叫sqlSessionFactoryBean而是sqlSessionFactory）</p><h2 id="注入SqlSessionFactoryBean源码"><a href="#注入SqlSessionFactoryBean源码" class="headerlink" title="注入SqlSessionFactoryBean源码"></a>注入SqlSessionFactoryBean源码</h2><p>这里我们进入SqlSessionFactoryBean发现它实现了FactoryBean和InitializingBean</p><h3 id="实现FactoryBean"><a href="#实现FactoryBean" class="headerlink" title="实现FactoryBean"></a>实现FactoryBean</h3><p>实现了FactoryBean说明它可能更改了类型，我们来到getObject()方法</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> SqlSessionFactory <span class="token function">getObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>sqlSessionFactory <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">afterPropertiesSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 返回我们的sqlSessionFactory对象</span>    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>sqlSessionFactory<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>从这也可以看出容器中容器中有sqlSessionFactory 这个bean</p><h3 id="实现InitializingBean"><a href="#实现InitializingBean" class="headerlink" title="实现InitializingBean"></a>实现InitializingBean</h3><p>InitializingBean在bean初始化之后调用，调用afterPropertiesSet</p><p>具体调用逻辑AnnotationConfigApplicationContext-&gt;refresh-&gt;finishBeanFactoryInitialization-&gt;preInstantiateSingletons-&gt;getBean-&gt;doGetBean-&gt;createBean-&gt;doCreateBean-&gt;initializeBean-&gt;invokeInitMethods</p><p>可直接跟到AbstractAutowireCapableBeanFactory#invokeInitMethods</p><pre class=" language-java"><code class="language-java">Override<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">afterPropertiesSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>  <span class="token function">notNull</span><span class="token punctuation">(</span>dataSource<span class="token punctuation">,</span> <span class="token string">"Property 'dataSource' is required"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">notNull</span><span class="token punctuation">(</span>sqlSessionFactoryBuilder<span class="token punctuation">,</span> <span class="token string">"Property 'sqlSessionFactoryBuilder' is required"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">state</span><span class="token punctuation">(</span><span class="token punctuation">(</span>configuration <span class="token operator">==</span> null <span class="token operator">&amp;&amp;</span> configLocation <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token operator">!</span><span class="token punctuation">(</span>configuration <span class="token operator">!=</span> null <span class="token operator">&amp;&amp;</span> configLocation <span class="token operator">!=</span> null<span class="token punctuation">)</span><span class="token punctuation">,</span>      <span class="token string">"Property 'configuration' and 'configLocation' can not specified with together"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>sqlSessionFactory <span class="token operator">=</span> <span class="token function">buildSqlSessionFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * 构建我们的sqlSessionFactory的实例 */</span><span class="token keyword">protected</span> SqlSessionFactory <span class="token function">buildSqlSessionFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// 声明一个Configuration对象用于保存mybatis的所有的配置信息</span>  <span class="token keyword">final</span> Configuration targetConfiguration<span class="token punctuation">;</span>  XMLConfigBuilder xmlConfigBuilder <span class="token operator">=</span> null<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 判断当前的SqlSessionFactoryBean是否在配置@Bean的时候 factoryBean.setConfiguration();</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>configuration <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 把配置的SqlSessionFactoryBean配置的configuration 赋值给targetConfiguration</span>    targetConfiguration <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>configuration<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>targetConfiguration<span class="token punctuation">.</span><span class="token function">getVariables</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>      targetConfiguration<span class="token punctuation">.</span><span class="token function">setVariables</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>configurationProperties<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>configurationProperties <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>      targetConfiguration<span class="token punctuation">.</span><span class="token function">getVariables</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">putAll</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>configurationProperties<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>configLocation <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//创建我们xml配置构建器对象,对mybatis/mybatis-config.xml配置文件进行解析 在这里以及把我们的mybaits-config.xml解析出要给document对象</span>    xmlConfigBuilder <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">XMLConfigBuilder</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>configLocation<span class="token punctuation">.</span><span class="token function">getInputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> null<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>configurationProperties<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 因为我们在创建XMLConfigBuilder的时候已经把我们的Configuration对象创建出来了</span>    targetConfiguration <span class="token operator">=</span> xmlConfigBuilder<span class="token punctuation">.</span><span class="token function">getConfiguration</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>    LOGGER<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span>        <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token string">"Property 'configuration' or 'configLocation' not specified, using default MyBatis Configuration"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    targetConfiguration <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Configuration</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 判断configurationProperties不为空,那么就调用targetConfiguration.set方法 把configurationProperties注入到Configuration对象中</span>    Optional<span class="token punctuation">.</span><span class="token function">ofNullable</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>configurationProperties<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ifPresent</span><span class="token punctuation">(</span>targetConfiguration<span class="token operator">:</span><span class="token operator">:</span>setVariables<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">// objectFactory不为空,那么就调用targetConfiguration.set方法 把objectFactory注入到Configuration对象</span>  Optional<span class="token punctuation">.</span><span class="token function">ofNullable</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>objectFactory<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ifPresent</span><span class="token punctuation">(</span>targetConfiguration<span class="token operator">:</span><span class="token operator">:</span>setObjectFactory<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// objectWrapperFactory不为空,那么就调用targetConfiguration.set方法把 ObjectWrapperFactory注入到Configuration对象中</span>  Optional<span class="token punctuation">.</span><span class="token function">ofNullable</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>objectWrapperFactory<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ifPresent</span><span class="token punctuation">(</span>targetConfiguration<span class="token operator">:</span><span class="token operator">:</span>setObjectWrapperFactory<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// vfs不为空,那么就调用targetConfiguration.set方法把 vfs注入到Configuration对象中</span>  Optional<span class="token punctuation">.</span><span class="token function">ofNullable</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>vfs<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ifPresent</span><span class="token punctuation">(</span>targetConfiguration<span class="token operator">:</span><span class="token operator">:</span>setVfsImpl<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">hasLength</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>typeAliasesPackage<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//第一步:扫描我们typeAliasesPackage 包路径下的所有的实体类的class类型 第二步:进行过滤,然后注册到Configuration的别名映射器中</span>    <span class="token function">scanClasses</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>typeAliasesPackage<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>typeAliasesSuperType<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>clazz <span class="token operator">-</span><span class="token operator">></span> <span class="token operator">!</span>clazz<span class="token punctuation">.</span><span class="token function">isAnonymousClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>clazz <span class="token operator">-</span><span class="token operator">></span> <span class="token operator">!</span>clazz<span class="token punctuation">.</span><span class="token function">isInterface</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>clazz <span class="token operator">-</span><span class="token operator">></span> <span class="token operator">!</span>clazz<span class="token punctuation">.</span><span class="token function">isMemberClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>targetConfiguration<span class="token punctuation">.</span><span class="token function">getTypeAliasRegistry</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span><span class="token operator">:</span>registerAlias<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">/**   * 判断我们SqlSessionFactory是否配置了typeAliases(class类型) 一般typeAliasesPackage配置好了 就没有必要配置typeAliases   * 注册到Configuration的别名映射器中   */</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>typeAliases<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    Stream<span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>typeAliases<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>typeAlias <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>      targetConfiguration<span class="token punctuation">.</span><span class="token function">getTypeAliasRegistry</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">registerAlias</span><span class="token punctuation">(</span>typeAlias<span class="token punctuation">)</span><span class="token punctuation">;</span>      LOGGER<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token string">"Registered type alias: '"</span> <span class="token operator">+</span> typeAlias <span class="token operator">+</span> <span class="token string">"'"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">// 把我们自定义的插件注册到我们的mybatis的配置类上</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>plugins<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    Stream<span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>plugins<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>plugin <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>      targetConfiguration<span class="token punctuation">.</span><span class="token function">addInterceptor</span><span class="token punctuation">(</span>plugin<span class="token punctuation">)</span><span class="token punctuation">;</span>      LOGGER<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token string">"Registered plugin: '"</span> <span class="token operator">+</span> plugin <span class="token operator">+</span> <span class="token string">"'"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">// 扫描我们自定义的类型处理器(用来处理我们的java类型和数据库类型的转化) 并且注册到我们的 targetConfiguration(批量注册)</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">hasLength</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>typeHandlersPackage<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">scanClasses</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>typeHandlersPackage<span class="token punctuation">,</span> TypeHandler<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>clazz <span class="token operator">-</span><span class="token operator">></span> <span class="token operator">!</span>clazz<span class="token punctuation">.</span><span class="token function">isAnonymousClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>clazz <span class="token operator">-</span><span class="token operator">></span> <span class="token operator">!</span>clazz<span class="token punctuation">.</span><span class="token function">isInterface</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>clazz <span class="token operator">-</span><span class="token operator">></span> <span class="token operator">!</span>Modifier<span class="token punctuation">.</span><span class="token function">isAbstract</span><span class="token punctuation">(</span>clazz<span class="token punctuation">.</span><span class="token function">getModifiers</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>targetConfiguration<span class="token punctuation">.</span><span class="token function">getTypeHandlerRegistry</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span><span class="token operator">:</span>register<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">// 通过配置&lt;TypeHandlers>&lt;/TypeHandlers>的形式来注册我们的类型处理器对象</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>typeHandlers<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    Stream<span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>typeHandlers<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>typeHandler <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>      targetConfiguration<span class="token punctuation">.</span><span class="token function">getTypeHandlerRegistry</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">register</span><span class="token punctuation">(</span>typeHandler<span class="token punctuation">)</span><span class="token punctuation">;</span>      LOGGER<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token string">"Registered type handler: '"</span> <span class="token operator">+</span> typeHandler <span class="token operator">+</span> <span class="token string">"'"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>scriptingLanguageDrivers<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    Stream<span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>scriptingLanguageDrivers<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>languageDriver <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>      targetConfiguration<span class="token punctuation">.</span><span class="token function">getLanguageRegistry</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">register</span><span class="token punctuation">(</span>languageDriver<span class="token punctuation">)</span><span class="token punctuation">;</span>      LOGGER<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token string">"Registered scripting language driver: '"</span> <span class="token operator">+</span> languageDriver <span class="token operator">+</span> <span class="token string">"'"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  Optional<span class="token punctuation">.</span><span class="token function">ofNullable</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>defaultScriptingLanguageDriver<span class="token punctuation">)</span>      <span class="token punctuation">.</span><span class="token function">ifPresent</span><span class="token punctuation">(</span>targetConfiguration<span class="token operator">:</span><span class="token operator">:</span>setDefaultScriptingLanguage<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 设置数据库厂商</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>databaseIdProvider <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">// fix #64 set databaseId before parse mapper xmls</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>      targetConfiguration<span class="token punctuation">.</span><span class="token function">setDatabaseId</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>databaseIdProvider<span class="token punctuation">.</span><span class="token function">getDatabaseId</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>dataSource<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">SQLException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">NestedIOException</span><span class="token punctuation">(</span><span class="token string">"Failed getting a databaseId"</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">// 若二级缓存不为空,注册二级缓存</span>  Optional<span class="token punctuation">.</span><span class="token function">ofNullable</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>cache<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ifPresent</span><span class="token punctuation">(</span>targetConfiguration<span class="token operator">:</span><span class="token operator">:</span>addCache<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>xmlConfigBuilder <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// 真正的解析我们的配置(mybatis-config.xml)的document对象</span>      xmlConfigBuilder<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      LOGGER<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token string">"Parsed configuration file: '"</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>configLocation <span class="token operator">+</span> <span class="token string">"'"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> ex<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">NestedIOException</span><span class="token punctuation">(</span><span class="token string">"Failed to parse config resource: "</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>configLocation<span class="token punctuation">,</span> ex<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>      ErrorContext<span class="token punctuation">.</span><span class="token function">instance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">reset</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">// 为我们的configuration设置一个环境变量</span>  targetConfiguration<span class="token punctuation">.</span><span class="token function">setEnvironment</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Environment</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>environment<span class="token punctuation">,</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>transactionFactory <span class="token operator">==</span> null <span class="token operator">?</span> <span class="token keyword">new</span> <span class="token class-name">SpringManagedTransactionFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>transactionFactory<span class="token punctuation">,</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>dataSource<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 循环我们的mapper.xml文件</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>mapperLocations <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>mapperLocations<span class="token punctuation">.</span>length <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      LOGGER<span class="token punctuation">.</span><span class="token function">warn</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token string">"Property 'mapperLocations' was specified but matching resources are not found."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>      <span class="token keyword">for</span> <span class="token punctuation">(</span>Resource mapperLocation <span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>mapperLocations<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>mapperLocation <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token keyword">continue</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>          <span class="token comment" spellcheck="true">// 真正的循环我们的mapper.xml文件</span>          XMLMapperBuilder xmlMapperBuilder <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">XMLMapperBuilder</span><span class="token punctuation">(</span>mapperLocation<span class="token punctuation">.</span><span class="token function">getInputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>              targetConfiguration<span class="token punctuation">,</span> mapperLocation<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> targetConfiguration<span class="token punctuation">.</span><span class="token function">getSqlFragments</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          xmlMapperBuilder<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">NestedIOException</span><span class="token punctuation">(</span><span class="token string">"Failed to parse mapping resource: '"</span> <span class="token operator">+</span> mapperLocation <span class="token operator">+</span> <span class="token string">"'"</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>          ErrorContext<span class="token punctuation">.</span><span class="token function">instance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">reset</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        LOGGER<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token string">"Parsed mapper file: '"</span> <span class="token operator">+</span> mapperLocation <span class="token operator">+</span> <span class="token string">"'"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>    LOGGER<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token string">"Property 'mapperLocations' was not specified."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">// 通过建造者模式构建我们的SqlSessionFactory对象 默认是DefaultSqlSessionFactory</span>  <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>sqlSessionFactoryBuilder<span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span>targetConfiguration<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h2 id="MapperScan源码"><a href="#MapperScan源码" class="headerlink" title="@MapperScan源码"></a>@MapperScan源码</h2><p>首先我们SqlSessionFactoryBean通过上面的@Bean注入进容器了，那么现在只差把UserMapper注入到容器中就可以了，但是问题来了，众所周知Mapper.java是接口类，而接口类是不可以解析成BeanDefinition,既然不可以解析成BeanDefinition也就不存在注入到容器，至于接口不能被注入大家可以来到ClassPathScanningCandidateComponentProvider#isCandidateComponent</p><pre class=" language-java"><code class="language-java"><span class="token keyword">protected</span> <span class="token keyword">boolean</span> <span class="token function">isCandidateComponent</span><span class="token punctuation">(</span>AnnotatedBeanDefinition beanDefinition<span class="token punctuation">)</span> <span class="token punctuation">{</span>   AnnotationMetadata metadata <span class="token operator">=</span> beanDefinition<span class="token punctuation">.</span><span class="token function">getMetadata</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">// metadata.isIndependent()=顶级类、嵌套类、静态内部类</span>   <span class="token comment" spellcheck="true">// metadata.isConcrete() =非接口、非抽象类</span>   <span class="token comment" spellcheck="true">// metadata.isAbstract() &amp;&amp; metadata.hasAnnotatedMethods(Lookup.class.getName() = 抽象类并且必须方法中有@LookUp</span>   <span class="token keyword">return</span> <span class="token punctuation">(</span>metadata<span class="token punctuation">.</span><span class="token function">isIndependent</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>metadata<span class="token punctuation">.</span><span class="token function">isConcrete</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">||</span>         <span class="token punctuation">(</span>metadata<span class="token punctuation">.</span><span class="token function">isAbstract</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> metadata<span class="token punctuation">.</span><span class="token function">hasAnnotatedMethods</span><span class="token punctuation">(</span>Lookup<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>我们来看下spring-mybatis是如何解决这个问题的</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Retention</span><span class="token punctuation">(</span>RetentionPolicy<span class="token punctuation">.</span>RUNTIME<span class="token punctuation">)</span><span class="token annotation punctuation">@Target</span><span class="token punctuation">(</span>ElementType<span class="token punctuation">.</span>TYPE<span class="token punctuation">)</span><span class="token annotation punctuation">@Documented</span><span class="token annotation punctuation">@Import</span><span class="token punctuation">(</span>MapperScannerRegistrar<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token annotation punctuation">@Repeatable</span><span class="token punctuation">(</span>MapperScans<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span></code></pre><p>从注解上看有个熟悉的@Import，它实现了ImportBeanDefinitionRegistrar接口，这个接口大家都知道是用来注册Bean定义的</p><p>我们来到实现了ImportBeanDefinitionRegistrar接口的registerBeanDefinitions</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Override</span>  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">registerBeanDefinitions</span><span class="token punctuation">(</span>AnnotationMetadata importingClassMetadata<span class="token punctuation">,</span> BeanDefinitionRegistry registry<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 从我们传入的配置类中来解析@MapperScan注解信息,然后吧MapperScan注解的属性转化为AnnotationAttributes类型</span>    AnnotationAttributes mapperScanAttrs <span class="token operator">=</span> AnnotationAttributes        <span class="token punctuation">.</span><span class="token function">fromMap</span><span class="token punctuation">(</span>importingClassMetadata<span class="token punctuation">.</span><span class="token function">getAnnotationAttributes</span><span class="token punctuation">(</span>MapperScan<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 若上一步解析出来的mapperScanAttrs不为空(说明配置类上加了@MapperScan注解)</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>mapperScanAttrs <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token function">registerBeanDefinitions</span><span class="token punctuation">(</span>mapperScanAttrs<span class="token punctuation">,</span> registry<span class="token punctuation">,</span> <span class="token function">generateBaseBeanName</span><span class="token punctuation">(</span>importingClassMetadata<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">registerBeanDefinitions</span><span class="token punctuation">(</span>AnnotationAttributes annoAttrs<span class="token punctuation">,</span> BeanDefinitionRegistry registry<span class="token punctuation">,</span> String beanName<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 创建bean定义构造器 通过够构造器来构建出我们的bean定义&lt;MapperScannerConfigurer> 应用到的设计模式[建造者模式]</span>    BeanDefinitionBuilder builder <span class="token operator">=</span> BeanDefinitionBuilder<span class="token punctuation">.</span><span class="token function">genericBeanDefinition</span><span class="token punctuation">(</span>MapperScannerConfigurer<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//手动为我们MapperScannerConfigurer 开启processPropertyPlaceHolders属性为true</span>    builder<span class="token punctuation">.</span><span class="token function">addPropertyValue</span><span class="token punctuation">(</span><span class="token string">"processPropertyPlaceHolders"</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 为我们的MapperScannerConfigurer 解析我们@MapperScanner 指定扫描的的注解类型</span>    Class<span class="token operator">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">Annotation</span><span class="token operator">></span> annotationClass <span class="token operator">=</span> annoAttrs<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token string">"annotationClass"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>Annotation<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>annotationClass<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      builder<span class="token punctuation">.</span><span class="token function">addPropertyValue</span><span class="token punctuation">(</span><span class="token string">"annotationClass"</span><span class="token punctuation">,</span> annotationClass<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 是否配置了标记接口</span>    Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> markerInterface <span class="token operator">=</span> annoAttrs<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token string">"markerInterface"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>Class<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>markerInterface<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      builder<span class="token punctuation">.</span><span class="token function">addPropertyValue</span><span class="token punctuation">(</span><span class="token string">"markerInterface"</span><span class="token punctuation">,</span> markerInterface<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 设置MapperScannerConfigurer的beanName 生成器对象</span>    Class<span class="token operator">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">BeanNameGenerator</span><span class="token operator">></span> generatorClass <span class="token operator">=</span> annoAttrs<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token string">"nameGenerator"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>BeanNameGenerator<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>generatorClass<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      builder<span class="token punctuation">.</span><span class="token function">addPropertyValue</span><span class="token punctuation">(</span><span class="token string">"nameGenerator"</span><span class="token punctuation">,</span> BeanUtils<span class="token punctuation">.</span><span class="token function">instantiateClass</span><span class="token punctuation">(</span>generatorClass<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 解析@MapperScan注解属性MapperFactoryBean 设置到MapperScannerConfigurer 声明一个自定义的MapperFactoryBean 返回一个代理对象</span>    Class<span class="token operator">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">MapperFactoryBean</span><span class="token operator">></span> mapperFactoryBeanClass <span class="token operator">=</span> annoAttrs<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token string">"factoryBean"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>MapperFactoryBean<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>mapperFactoryBeanClass<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      builder<span class="token punctuation">.</span><span class="token function">addPropertyValue</span><span class="token punctuation">(</span><span class="token string">"mapperFactoryBeanClass"</span><span class="token punctuation">,</span> mapperFactoryBeanClass<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 解析@MapperScan 的sqlSessionTemplateRef到底使用是哪个sqlSessionTemplate 设置到MapperScannerConfigurer 多数据源的情况下需要指定</span>    String sqlSessionTemplateRef <span class="token operator">=</span> annoAttrs<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span><span class="token string">"sqlSessionTemplateRef"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>StringUtils<span class="token punctuation">.</span><span class="token function">hasText</span><span class="token punctuation">(</span>sqlSessionTemplateRef<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      builder<span class="token punctuation">.</span><span class="token function">addPropertyValue</span><span class="token punctuation">(</span><span class="token string">"sqlSessionTemplateBeanName"</span><span class="token punctuation">,</span> annoAttrs<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span><span class="token string">"sqlSessionTemplateRef"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 解析@MapperScan的sqlSessionFactoryRef属性 设置到 MapperScannerConfigurer 多数据情况下的话 ，需要指定使用哪个 sqlSessionFactory</span>    String sqlSessionFactoryRef <span class="token operator">=</span> annoAttrs<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span><span class="token string">"sqlSessionFactoryRef"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>StringUtils<span class="token punctuation">.</span><span class="token function">hasText</span><span class="token punctuation">(</span>sqlSessionFactoryRef<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      builder<span class="token punctuation">.</span><span class="token function">addPropertyValue</span><span class="token punctuation">(</span><span class="token string">"sqlSessionFactoryBeanName"</span><span class="token punctuation">,</span> annoAttrs<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span><span class="token string">"sqlSessionFactoryRef"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 解析@MapperScan 扫描的的包或者是class对象</span>    List<span class="token operator">&lt;</span>String<span class="token operator">></span> basePackages <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    basePackages<span class="token punctuation">.</span><span class="token function">addAll</span><span class="token punctuation">(</span>        Arrays<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span>annoAttrs<span class="token punctuation">.</span><span class="token function">getStringArray</span><span class="token punctuation">(</span><span class="token string">"value"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>StringUtils<span class="token operator">:</span><span class="token operator">:</span>hasText<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span>Collectors<span class="token punctuation">.</span><span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    basePackages<span class="token punctuation">.</span><span class="token function">addAll</span><span class="token punctuation">(</span>Arrays<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span>annoAttrs<span class="token punctuation">.</span><span class="token function">getStringArray</span><span class="token punctuation">(</span><span class="token string">"basePackages"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>StringUtils<span class="token operator">:</span><span class="token operator">:</span>hasText<span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span>Collectors<span class="token punctuation">.</span><span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    basePackages<span class="token punctuation">.</span><span class="token function">addAll</span><span class="token punctuation">(</span>Arrays<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span>annoAttrs<span class="token punctuation">.</span><span class="token function">getClassArray</span><span class="token punctuation">(</span><span class="token string">"basePackageClasses"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>ClassUtils<span class="token operator">:</span><span class="token operator">:</span>getPackageName<span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span>Collectors<span class="token punctuation">.</span><span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 指定MapperScannerConfigurer 是否为懒加载</span>    String lazyInitialization <span class="token operator">=</span> annoAttrs<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span><span class="token string">"lazyInitialization"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>StringUtils<span class="token punctuation">.</span><span class="token function">hasText</span><span class="token punctuation">(</span>lazyInitialization<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      builder<span class="token punctuation">.</span><span class="token function">addPropertyValue</span><span class="token punctuation">(</span><span class="token string">"lazyInitialization"</span><span class="token punctuation">,</span> lazyInitialization<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    builder<span class="token punctuation">.</span><span class="token function">addPropertyValue</span><span class="token punctuation">(</span><span class="token string">"basePackage"</span><span class="token punctuation">,</span> StringUtils<span class="token punctuation">.</span><span class="token function">collectionToCommaDelimitedString</span><span class="token punctuation">(</span>basePackages<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 为我们的容器中注册了MapperScannerConfigurer的接口</span>    registry<span class="token punctuation">.</span><span class="token function">registerBeanDefinition</span><span class="token punctuation">(</span>beanName<span class="token punctuation">,</span> builder<span class="token punctuation">.</span><span class="token function">getBeanDefinition</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span></code></pre><p>这里做的事情很简单-使用建造者模式构建MapperScannerConfigurer并注册到BeanDefinition，然后进入MapperScannerConfigurer类中发现它实现了BeanDefinitionRegistryPostProcessor，InitializingBean（这里并没有什么用）</p><p>大家都知道BeanDefinitionRegistryPostProcessor#postProcessBeanDefinitionRegistry会在refresh-&gt;invokeBeanFactoryPostProcessors中会实例化刚刚注册的MapperScannerConfigurer bean定义并且会调用postProcessBeanDefinitionRegistry</p><h3 id="MapperScannerConfigurer-postProcessBeanDefinitionRegistry"><a href="#MapperScannerConfigurer-postProcessBeanDefinitionRegistry" class="headerlink" title="MapperScannerConfigurer#postProcessBeanDefinitionRegistry"></a>MapperScannerConfigurer#postProcessBeanDefinitionRegistry</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">postProcessBeanDefinitionRegistry</span><span class="token punctuation">(</span>BeanDefinitionRegistry registry<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// 若MapperScannerConfigurer属性的processPropertyPlaceHolders为ture的时候,就进行processPropertyPlaceHolders();</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>processPropertyPlaceHolders<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">processPropertyPlaceHolders</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">// 显示的new 一个ClassPathMapperScanner 包扫描器对象 这个对象是mybaits继承了spring的ClassPathBeanDefinitionScanner为我们扫描器指定@MapperScan属性</span>  ClassPathMapperScanner scanner <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ClassPathMapperScanner</span><span class="token punctuation">(</span>registry<span class="token punctuation">)</span><span class="token punctuation">;</span>  scanner<span class="token punctuation">.</span><span class="token function">setAddToConfig</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>addToConfig<span class="token punctuation">)</span><span class="token punctuation">;</span>  scanner<span class="token punctuation">.</span><span class="token function">setAnnotationClass</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>annotationClass<span class="token punctuation">)</span><span class="token punctuation">;</span>  scanner<span class="token punctuation">.</span><span class="token function">setMarkerInterface</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>markerInterface<span class="token punctuation">)</span><span class="token punctuation">;</span>  scanner<span class="token punctuation">.</span><span class="token function">setSqlSessionFactory</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>sqlSessionFactory<span class="token punctuation">)</span><span class="token punctuation">;</span>  scanner<span class="token punctuation">.</span><span class="token function">setSqlSessionTemplate</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>sqlSessionTemplate<span class="token punctuation">)</span><span class="token punctuation">;</span>  scanner<span class="token punctuation">.</span><span class="token function">setSqlSessionFactoryBeanName</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>sqlSessionFactoryBeanName<span class="token punctuation">)</span><span class="token punctuation">;</span>  scanner<span class="token punctuation">.</span><span class="token function">setSqlSessionTemplateBeanName</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>sqlSessionTemplateBeanName<span class="token punctuation">)</span><span class="token punctuation">;</span>  scanner<span class="token punctuation">.</span><span class="token function">setResourceLoader</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>applicationContext<span class="token punctuation">)</span><span class="token punctuation">;</span>  scanner<span class="token punctuation">.</span><span class="token function">setBeanNameGenerator</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>nameGenerator<span class="token punctuation">)</span><span class="token punctuation">;</span>  scanner<span class="token punctuation">.</span><span class="token function">setMapperFactoryBeanClass</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>mapperFactoryBeanClass<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>StringUtils<span class="token punctuation">.</span><span class="token function">hasText</span><span class="token punctuation">(</span>lazyInitialization<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    scanner<span class="token punctuation">.</span><span class="token function">setLazyInitialization</span><span class="token punctuation">(</span>Boolean<span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>lazyInitialization<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">// 扫描规则过滤</span>  scanner<span class="token punctuation">.</span><span class="token function">registerFilters</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 扫描我们@MapperScan指定的路径下的bean定义信息 先会去调用ClassPathMapperScanner.scan()方法然后调用ClassPathMapperScanner#doScan方法然后会调用到父类的ClassPathBeanDefinitionScanner#doScan,在父类的doScan中会调用isCandidateComponent(AnnotatedBeanDefinition beanDefinition)方法，而这个方法在子类被重写了所以这里调到子类isCandidateComponent，而子类中的不会过滤掉接口，所以接口可以被扫描注册成beanDefinition了</span>  scanner<span class="token punctuation">.</span><span class="token function">scan</span><span class="token punctuation">(</span>      StringUtils<span class="token punctuation">.</span><span class="token function">tokenizeToStringArray</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>basePackage<span class="token punctuation">,</span> ConfigurableApplicationContext<span class="token punctuation">.</span>CONFIG_LOCATION_DELIMITERS<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token annotation punctuation">@Override</span><span class="token keyword">protected</span> <span class="token keyword">boolean</span> <span class="token function">isCandidateComponent</span><span class="token punctuation">(</span>AnnotatedBeanDefinition beanDefinition<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> beanDefinition<span class="token punctuation">.</span><span class="token function">getMetadata</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isInterface</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> beanDefinition<span class="token punctuation">.</span><span class="token function">getMetadata</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isIndependent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h3 id="ClassPathMapperScanner-doScan"><a href="#ClassPathMapperScanner-doScan" class="headerlink" title="ClassPathMapperScanner#doScan"></a>ClassPathMapperScanner#doScan</h3><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> Set<span class="token operator">&lt;</span>BeanDefinitionHolder<span class="token operator">></span> <span class="token function">doScan</span><span class="token punctuation">(</span>String<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> basePackages<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 调用父类ClassPathBeanDefinitionScanner 来进行扫描</span>    Set<span class="token operator">&lt;</span>BeanDefinitionHolder<span class="token operator">></span> beanDefinitions <span class="token operator">=</span> <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">doScan</span><span class="token punctuation">(</span>basePackages<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 若扫描后 我们mapper包下有接口类,那么扫描bean定义就不会为空</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>beanDefinitions<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        LOGGER<span class="token punctuation">.</span><span class="token function">warn</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token string">"No MyBatis mapper was found in '"</span> <span class="token operator">+</span> Arrays<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>basePackages<span class="token punctuation">)</span>                    <span class="token operator">+</span> <span class="token string">"' package. Please check your configuration."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// 这里很重要</span>        <span class="token function">processBeanDefinitions</span><span class="token punctuation">(</span>beanDefinitions<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> beanDefinitions<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h3 id="ClassPathMapperScanner-processBeanDefinitions-beanDefinitions"><a href="#ClassPathMapperScanner-processBeanDefinitions-beanDefinitions" class="headerlink" title="ClassPathMapperScanner#processBeanDefinitions(beanDefinitions);"></a>ClassPathMapperScanner#processBeanDefinitions(beanDefinitions);</h3><p>Mapper生成代理对象</p><pre class=" language-java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">processBeanDefinitions</span><span class="token punctuation">(</span>Set<span class="token operator">&lt;</span>BeanDefinitionHolder<span class="token operator">></span> beanDefinitions<span class="token punctuation">)</span> <span class="token punctuation">{</span>  GenericBeanDefinition definition<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 循环我们所有扫描出mapper的bean定义出来</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span>BeanDefinitionHolder holder <span class="token operator">:</span> beanDefinitions<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 获取我们的bean定义</span>    definition <span class="token operator">=</span> <span class="token punctuation">(</span>GenericBeanDefinition<span class="token punctuation">)</span> holder<span class="token punctuation">.</span><span class="token function">getBeanDefinition</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 获取我们的bean定义的名称</span>    String beanClassName <span class="token operator">=</span> definition<span class="token punctuation">.</span><span class="token function">getBeanClassName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    LOGGER<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token string">"Creating MapperFactoryBean with name '"</span> <span class="token operator">+</span> holder<span class="token punctuation">.</span><span class="token function">getBeanName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"' and '"</span> <span class="token operator">+</span> beanClassName        <span class="token operator">+</span> <span class="token string">"' mapperInterface"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 设置ConstructorArgumentValues 会通过构造器初始化对象</span>    definition<span class="token punctuation">.</span><span class="token function">getConstructorArgumentValues</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addGenericArgumentValue</span><span class="token punctuation">(</span>beanClassName<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// issue #59</span>    <span class="token comment" spellcheck="true">// 设置成factoryBean</span>    definition<span class="token punctuation">.</span><span class="token function">setBeanClass</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>mapperFactoryBeanClass<span class="token punctuation">)</span><span class="token punctuation">;</span>    definition<span class="token punctuation">.</span><span class="token function">getPropertyValues</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"addToConfig"</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>addToConfig<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 为我们的Mapper对象绑定我们的sqlSessionFactory引用 说白了就是我们的UserMapper(实际上是就是为我们的MapperFactoryBean添加一个sqlSessionFactory的属性)     * 然后SpringIoc在实例话我们的MapperFactoryBean的时候会经历populate()方法为我么你的UserMapper(MapperFactoryBean)     * 的sqlSessionFactory赋值(调用set方法)     */</span>    <span class="token keyword">boolean</span> explicitFactoryUsed <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>StringUtils<span class="token punctuation">.</span><span class="token function">hasText</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>sqlSessionFactoryBeanName<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      definition<span class="token punctuation">.</span><span class="token function">getPropertyValues</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"sqlSessionFactory"</span><span class="token punctuation">,</span>          <span class="token keyword">new</span> <span class="token class-name">RuntimeBeanReference</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>sqlSessionFactoryBeanName<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      explicitFactoryUsed <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>sqlSessionFactory <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>      definition<span class="token punctuation">.</span><span class="token function">getPropertyValues</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"sqlSessionFactory"</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>sqlSessionFactory<span class="token punctuation">)</span><span class="token punctuation">;</span>      explicitFactoryUsed <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 为我们的Mapper对象绑定我们的sqlSessionTemplate属性对象     * 说白了就是我们的UserMapper(实际上是就是为我们的MapperFactoryBean添加一个sqlSessionTemplate的属性)     * 然后SpringIoc在实例话我们的MapperFactoryBean的时候会经历populate()方法为我么你的UserMapper(MapperFactoryBean)     * 的sqlSessionTemplate赋值(调用set方法)     */</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>StringUtils<span class="token punctuation">.</span><span class="token function">hasText</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>sqlSessionTemplateBeanName<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>explicitFactoryUsed<span class="token punctuation">)</span> <span class="token punctuation">{</span>        LOGGER<span class="token punctuation">.</span><span class="token function">warn</span><span class="token punctuation">(</span>            <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token string">"Cannot use both: sqlSessionTemplate and sqlSessionFactory together. sqlSessionFactory is ignored."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      definition<span class="token punctuation">.</span><span class="token function">getPropertyValues</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"sqlSessionTemplate"</span><span class="token punctuation">,</span>          <span class="token keyword">new</span> <span class="token class-name">RuntimeBeanReference</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>sqlSessionTemplateBeanName<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      explicitFactoryUsed <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>sqlSessionTemplate <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>explicitFactoryUsed<span class="token punctuation">)</span> <span class="token punctuation">{</span>        LOGGER<span class="token punctuation">.</span><span class="token function">warn</span><span class="token punctuation">(</span>            <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token string">"Cannot use both: sqlSessionTemplate and sqlSessionFactory together. sqlSessionFactory is ignored."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token comment" spellcheck="true">// 将sqlSessionTemplate通过AUTOWIRE_BY_TYPE自动装配</span>      definition<span class="token punctuation">.</span><span class="token function">getPropertyValues</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"sqlSessionTemplate"</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>sqlSessionTemplate<span class="token punctuation">)</span><span class="token punctuation">;</span>      explicitFactoryUsed <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>explicitFactoryUsed<span class="token punctuation">)</span> <span class="token punctuation">{</span>      LOGGER<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token string">"Enabling autowire by type for MapperFactoryBean with name '"</span> <span class="token operator">+</span> holder<span class="token punctuation">.</span><span class="token function">getBeanName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"'."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      definition<span class="token punctuation">.</span><span class="token function">setAutowireMode</span><span class="token punctuation">(</span>AbstractBeanDefinition<span class="token punctuation">.</span>AUTOWIRE_BY_TYPE<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 设置bean定义的加载模型(是否为懒加载)</span>    definition<span class="token punctuation">.</span><span class="token function">setLazyInit</span><span class="token punctuation">(</span>lazyInitialization<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>此时Mapper集成进Spring中了。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>Spring整合Mybatis最重要的点就是怎么把代理Mapper注入到spring容器中。要解决注入问题首先解决2个问题。</p><ol><li>首先Mapper是一个接口，无法生成BeanDefinition</li><li>Mapper需要生成代理对象</li></ol><p>1，Mybatis利用@Import注解注入一个BeanDefinitionRegistryPostProcessor，而这个BeanDefinition是包含注册功能的，在这个BeanDefinitionRegistryPostProcessor我们可以实现扫描功能并重写isCandidateComponent，使接口可以被扫描并注册成一个bean定义。</p><p>2，Mapper生成代理对象，利用FactoryBean进行改写，使只要getBean,便拿到了getObject改写的代理对象MapperProxy</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 源码 </tag>
            
            <tag> Spring </tag>
            
            <tag> MyBatis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MyBatis核心源码剖析</title>
      <link href="/2021/04/07/mybatis-yuan-ma-pou-xi/"/>
      <url>/2021/04/07/mybatis-yuan-ma-pou-xi/</url>
      
        <content type="html"><![CDATA[<p>MyBatis是一款ORM框架，它解决的问题是针对JDBC操作数据库和封装数据集繁琐的问题。下面我们看一下传统JDBC来创建连接和获取数据集的方式。</p><h2 id="JDBC"><a href="#JDBC" class="headerlink" title="JDBC"></a>JDBC</h2><p>maven依赖</p><pre class=" language-properties"><code class="language-properties"><span class="token attr-name">&lt;!--</span> <span class="token attr-value">mysql驱动 --></span>&lt;dependency>    &lt;groupId>mysql&lt;/groupId>    &lt;artifactId>mysql-connector-java&lt;/artifactId>    &lt;version>5.1.22&lt;/version>&lt;/dependency></code></pre><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testjdbc</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 连接</span>    Connection connection <span class="token operator">=</span> null<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 执行者</span>    PreparedStatement preparedStatement <span class="token operator">=</span> null<span class="token punctuation">;</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 加载驱动</span>        Class<span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">"com.mysql.jdbc.Driver"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 创建连接</span>        connection <span class="token operator">=</span> DriverManager<span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token string">"jdbc:mysql://xx.xx.xx.xx:3306/test"</span><span class="token punctuation">,</span> <span class="token string">"root"</span><span class="token punctuation">,</span> <span class="token string">"xxxxxx"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        String sql <span class="token operator">=</span> <span class="token string">"select id, name, age from user where id=?"</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 创建执行者 -- 执行SQL,携带参数</span>        preparedStatement <span class="token operator">=</span> connection<span class="token punctuation">.</span><span class="token function">prepareStatement</span><span class="token punctuation">(</span>sql<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 参数索引 表示SQL第几个？号参数，值为1</span>        preparedStatement<span class="token punctuation">.</span><span class="token function">setInt</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 执行sql</span>        preparedStatement<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 获取结果集</span>        ResultSet resultSet <span class="token operator">=</span> preparedStatement<span class="token punctuation">.</span><span class="token function">getResultSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>resultSet<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 封装对象</span>            User user <span class="token operator">=</span> User<span class="token punctuation">.</span><span class="token function">builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">id</span><span class="token punctuation">(</span>resultSet<span class="token punctuation">.</span><span class="token function">getInt</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">name</span><span class="token punctuation">(</span>resultSet<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">age</span><span class="token punctuation">(</span>resultSet<span class="token punctuation">.</span><span class="token function">getInt</span><span class="token punctuation">(</span><span class="token string">"age"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>user<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token keyword">finally</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 释放资源</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>connection<span class="token operator">!=</span>null<span class="token punctuation">)</span><span class="token punctuation">{</span>            connection<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>preparedStatement<span class="token operator">!=</span>null<span class="token punctuation">)</span><span class="token punctuation">{</span>            preparedStatement<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>从这可以看出整个JDBC连接数据库和数据集获取都是有一定的弊端，比如说有以下几点弊端</p><ol><li>数据库连接每连接一个就要走连接-释放过程，这是非常耗性能的。这里可以利用<strong>池化思想</strong>，建立一个数据库连接池，创建的连接可以放进数据库连接池中，释放的时候放回到连接池，避免重新创建</li><li>硬编码太多，比如SQL语句，数据库驱动，数据库连接这些都是硬编码，其实这种都可以放进配置文件</li><li>创建执行者<code>PreparedStatement</code>时，如果我的SQL语句发生了变化，下面的参数设值也会发生变化，修改起来比较麻烦</li><li>从结果集中取数据这里如果我表字段类型变了，这里也是需要做调整，不易维护</li></ol><p>上面的问题MyBatis都可以解决</p><ol><li>MyBatis可以配置数据连接池，比如Druid,Hikari，使用连接池管理数据库连接</li><li>将Sql语句配置在XXXXmapper.xml文件中与java代码分离</li><li>MyBatis自动将java对象映射至sql语句，通过statement中的parameterType定义输入参数的类型</li><li>MyBatis自动将sql执行结果映射至java对象，通过statement中的resultType定义输出结果的类型</li></ol><h2 id="MyBatis-Demo"><a href="#MyBatis-Demo" class="headerlink" title="MyBatis Demo"></a>MyBatis Demo</h2><p>db属性配置文件db.properties</p><pre class=" language-properties"><code class="language-properties"><span class="token attr-name">mysql.driverClass</span><span class="token punctuation">=</span><span class="token attr-value">com.mysql.jdbc.Driver</span><span class="token attr-name">mysql.jdbcUrl</span><span class="token punctuation">=</span><span class="token attr-value">jdbc:mysql://xx.xx.xx.xx:3306/test?characterEncoding=utf8</span><span class="token attr-name">mysql.user</span><span class="token punctuation">=</span> <span class="token attr-value">root</span><span class="token attr-name">mysql.password</span><span class="token punctuation">=</span> <span class="token attr-value">xxxxxx</span></code></pre><p>MyBatis配置文件mybatis-config.xml</p><pre class=" language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token doctype">&lt;!DOCTYPE configuration PUBLIC "-//mybatis.org//DTD Config 3.0//EN"        "http://mybatis.org/dtd/mybatis-3-config.dtd"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>configuration</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--properties 扫描属性文件db.properties  --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>properties</span> <span class="token attr-name">resource</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>db.properties<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>properties</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>settings</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>setting</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>mapUnderscoreToCamelCase<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token comment" spellcheck="true">&lt;!--开启二级缓存--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>setting</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>cacheEnabled<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>settings</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>environments</span> <span class="token attr-name">default</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>development<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>environment</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>development<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>transactionManager</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>JDBC<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>            <span class="token comment" spellcheck="true">&lt;!--mybatis内置了JNDI、POOLED、UNPOOLED三种类型的数据源,其中POOLED对应的实现org.apache.ibatis.datasource.pooled.PooledDataSource--></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dataSource</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>POOLED<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>driver<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${mysql.driverClass}<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>url<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${mysql.jdbcUrl}<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>username<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${mysql.user}<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${mysql.password}<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dataSource</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>environment</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>environments</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mappers</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>package</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.dm.mapper<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mappers</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>configuration</span><span class="token punctuation">></span></span></code></pre><p>实体类</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Data</span><span class="token annotation punctuation">@Builder</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> Integer id<span class="token punctuation">;</span>    <span class="token keyword">private</span> String name<span class="token punctuation">;</span>    <span class="token keyword">private</span> Integer age<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>Mapper接口</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">UserMapper</span> <span class="token punctuation">{</span>    User <span class="token function">selectById</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Param</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"id"</span><span class="token punctuation">)</span> Integer id<span class="token punctuation">)</span><span class="token punctuation">;</span>    List<span class="token operator">&lt;</span>User<span class="token operator">></span> <span class="token function">selectAllUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>Mapper xml</p><pre class=" language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token doctype">&lt;!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"        "http://mybatis.org/dtd/mybatis-3-mapper.dtd"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mapper</span> <span class="token attr-name">namespace</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.dm.mapper.UserMapper<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- 二级缓存作用域--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>cache</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>cache</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>resultMap</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>result<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.dm.entity.User<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>id<span class="token punctuation">"</span></span> <span class="token attr-name">jdbcType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>INTEGER<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>id<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>user_name<span class="token punctuation">"</span></span> <span class="token attr-name">jdbcType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>VARCHAR<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>age<span class="token punctuation">"</span></span> <span class="token attr-name">jdbcType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>INTEGER<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>age<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>resultMap</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>selectById<span class="token punctuation">"</span></span> <span class="token attr-name">resultMap</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>result<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        select * from user where id=${id}        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>where</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>if</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>id <span class="token punctuation">></span> 0<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                and id=#{id}            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>if</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>where</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>selectAllUser<span class="token punctuation">"</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.dm.entity.User<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        select * from user    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mapper</span><span class="token punctuation">></span></span></code></pre><p>测试代码</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>    String resource <span class="token operator">=</span> <span class="token string">"mybatis-config.xml"</span><span class="token punctuation">;</span>    Reader reader <span class="token operator">=</span> null<span class="token punctuation">;</span>    SqlSession session <span class="token operator">=</span> null<span class="token punctuation">;</span>    SqlSession session1 <span class="token operator">=</span> null<span class="token punctuation">;</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//读取xml文件</span>        reader <span class="token operator">=</span> Resources<span class="token punctuation">.</span><span class="token function">getResourceAsReader</span><span class="token punctuation">(</span>resource<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 通过加载配置文件流构建一个SqlSessionFactory--DefaultSqlSessionFactory</span>        SqlSessionFactory sqlMapper <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SqlSessionFactoryBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span>reader<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// DefaultSqlSession</span>        <span class="token comment" spellcheck="true">// 1查询</span>        session <span class="token operator">=</span> sqlMapper<span class="token punctuation">.</span><span class="token function">openSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        session1 <span class="token operator">=</span> sqlMapper<span class="token punctuation">.</span><span class="token function">openSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        UserMapper mapper <span class="token operator">=</span> session<span class="token punctuation">.</span><span class="token function">getMapper</span><span class="token punctuation">(</span>UserMapper<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 2查询</span>        UserMapper mapper1 <span class="token operator">=</span> session1<span class="token punctuation">.</span><span class="token function">getMapper</span><span class="token punctuation">(</span>UserMapper<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 输出Cache Hit Ratio判断是否走二级缓存，</span>        <span class="token comment" spellcheck="true">// session.commit();注释掉走了数据库，没注释没走数据库</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>mapper<span class="token punctuation">.</span><span class="token function">selectById</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        session<span class="token punctuation">.</span><span class="token function">commit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>mapper1<span class="token punctuation">.</span><span class="token function">selectById</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>reader <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            reader<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>session <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            session<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>session1 <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            session1<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="源码分析"><a href="#源码分析" class="headerlink" title="源码分析"></a>源码分析</h2><h3 id="初始化Configuration"><a href="#初始化Configuration" class="headerlink" title="初始化Configuration"></a>初始化Configuration</h3><p>new SqlSessionFactoryBuilder().build(read)</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> SqlSessionFactory <span class="token function">build</span><span class="token punctuation">(</span>Reader reader<span class="token punctuation">,</span> String environment<span class="token punctuation">,</span> Properties properties<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">try</span> <span class="token punctuation">{</span>    XMLConfigBuilder parser <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">XMLConfigBuilder</span><span class="token punctuation">(</span>reader<span class="token punctuation">,</span> environment<span class="token punctuation">,</span> properties<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token function">build</span><span class="token punctuation">(</span>parser<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">throw</span> ExceptionFactory<span class="token punctuation">.</span><span class="token function">wrapException</span><span class="token punctuation">(</span><span class="token string">"Error building SqlSession."</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>    ErrorContext<span class="token punctuation">.</span><span class="token function">instance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">reset</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>      reader<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// Intentionally ignore. Prefer previous error.</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token keyword">private</span> <span class="token function">XMLConfigBuilder</span><span class="token punctuation">(</span>XPathParser parser<span class="token punctuation">,</span> String environment<span class="token punctuation">,</span> Properties props<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">/**   * 调用父类的BaseBuilder的构造方法   * configuration赋值   * typeAliasRegistry别名注册器赋值   * typeAliases Map中   */</span>  <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Configuration</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  ErrorContext<span class="token punctuation">.</span><span class="token function">instance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">resource</span><span class="token punctuation">(</span><span class="token string">"SQL Mapper Configuration"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">/**   * 把props绑定到configuration的props属性上   */</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>configuration<span class="token punctuation">.</span><span class="token function">setVariables</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>parsed <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>environment <span class="token operator">=</span> environment<span class="token punctuation">;</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>parser <span class="token operator">=</span> parser<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h3 id="解析mybatis-config-xml文件"><a href="#解析mybatis-config-xml文件" class="headerlink" title="解析mybatis-config.xml文件"></a>解析mybatis-config.xml文件</h3><p>parser.parse()</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> Configuration <span class="token function">parse</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// 若已经解析过了 就抛出异常</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>parsed<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">BuilderException</span><span class="token punctuation">(</span><span class="token string">"Each XMLConfigBuilder can only be used once."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">// 设置解析标志位</span>  parsed <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 解析我们的mybatis-config.xml的configuration节点</span>  <span class="token function">parseConfiguration</span><span class="token punctuation">(</span>parser<span class="token punctuation">.</span><span class="token function">evalNode</span><span class="token punctuation">(</span><span class="token string">"/configuration"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> configuration<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>parseConfiguration</p><p>解析我们的mybatis-config.xml的configuration节点</p><pre class=" language-java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">parseConfiguration</span><span class="token punctuation">(</span>XNode root<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">/**       * 解析 properties节点       * &lt;properties resource="mybatis/db.properties" />       * 解析到org.apache.ibatis.parsing.XPathParser#variables       *      org.apache.ibatis.session.Configuration#variables       */</span>      <span class="token function">propertiesElement</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span><span class="token function">evalNode</span><span class="token punctuation">(</span><span class="token string">"properties"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">/**       * 解析我们的mybatis-config.xml中的settings节点       * 具体可以配置哪些属性:http://www.mybatis.org/mybatis-3/zh/configuration.html#settings       * &lt;settings>           &lt;setting name="mapUnderscoreToCamelCase" value="true"/>           &lt;setting name="cacheEnabled" value="true"/>            ..............         &lt;/settings>       *       */</span>      Properties settings <span class="token operator">=</span> <span class="token function">settingsAsProperties</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span><span class="token function">evalNode</span><span class="token punctuation">(</span><span class="token string">"settings"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">/**       * VFS含义是虚拟文件系统；主要是通过程序能够方便读取本地文件系统、FTP文件系统等系统中的文件资源。       * Mybatis中提供了VFS这个配置，主要是通过该配置可以加载自定义的虚拟文件系统应用程序       * 解析到：org.apache.ibatis.session.Configuration#vfsImpl       */</span>      <span class="token function">loadCustomVfs</span><span class="token punctuation">(</span>settings<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">/**       * 指定 MyBatis 所用日志的具体实现，未指定时将自动查找       * SLF4J | LOG4J | LOG4J2 | JDK_LOGGING | COMMONS_LOGGING | STDOUT_LOGGING | NO_LOGGING       * 解析到org.apache.ibatis.session.Configuration#logImpl       */</span>      <span class="token function">loadCustomLogImpl</span><span class="token punctuation">(</span>settings<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">/**       * 解析我们的别名       * &lt;typeAliases>           &lt;typeAlias alias="User" type="com.dm.entity.User"/>        &lt;/typeAliases>       &lt;typeAliases>          &lt;package name="com.dm"/>       &lt;/typeAliases>       解析到oorg.apache.ibatis.session.Configuration#typeAliasRegistry.typeAliases       */</span>      <span class="token function">typeAliasesElement</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span><span class="token function">evalNode</span><span class="token punctuation">(</span><span class="token string">"typeAliases"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">/**       * 解析我们的插件(比如分页插件)       * mybatis自带的4大插件 一般都使用Executor       * Executor (update, query, flushStatements, commit, rollback, getTransaction, close, isClosed)         ParameterHandler (getParameterObject, setParameters)         ResultSetHandler (handleResultSets, handleOutputParameters)         StatementHandler (prepare, parameterize, batch, update, query)        解析到：org.apache.ibatis.session.Configuration#interceptorChain.interceptors       */</span>      <span class="token function">pluginElement</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span><span class="token function">evalNode</span><span class="token punctuation">(</span><span class="token string">"plugins"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">objectFactoryElement</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span><span class="token function">evalNode</span><span class="token punctuation">(</span><span class="token string">"objectFactory"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">objectWrapperFactoryElement</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span><span class="token function">evalNode</span><span class="token punctuation">(</span><span class="token string">"objectWrapperFactory"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">reflectorFactoryElement</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span><span class="token function">evalNode</span><span class="token punctuation">(</span><span class="token string">"reflectorFactory"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">// 设置settings 和默认值</span>      <span class="token function">settingsElement</span><span class="token punctuation">(</span>settings<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">// read it after objectFactory and objectWrapperFactory issue #631</span>      <span class="token comment" spellcheck="true">/**       * 解析我们的mybatis环境         &lt;environments default="dev">           &lt;environment id="dev">             &lt;transactionManager type="JDBC"/>             &lt;dataSource type="POOLED">             &lt;property name="driver" value="${jdbc.driver}"/>             &lt;property name="url" value="${jdbc.url}"/>             &lt;property name="username" value="root"/>             &lt;property name="password" value="Zw726515"/>             &lt;/dataSource>           &lt;/environment>         &lt;environment id="test">           &lt;transactionManager type="JDBC"/>           &lt;dataSource type="POOLED">           &lt;property name="driver" value="${jdbc.driver}"/>           &lt;property name="url" value="${jdbc.url}"/>           &lt;property name="username" value="root"/>           &lt;property name="password" value="123456"/>           &lt;/dataSource>         &lt;/environment>       &lt;/environments>       *  解析到：org.apache.ibatis.session.Configuration#environment       *  在集成spring情况下由 spring-mybatis提供数据源 和事务工厂       */</span>      <span class="token function">environmentsElement</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span><span class="token function">evalNode</span><span class="token punctuation">(</span><span class="token string">"environments"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">/**       * 解析数据库厂商       *     &lt;databaseIdProvider type="DB_VENDOR">                &lt;property name="SQL Server" value="sqlserver"/>                &lt;property name="DB2" value="db2"/>                &lt;property name="Oracle" value="oracle" />                &lt;property name="MySql" value="mysql" />             &lt;/databaseIdProvider>       *  解析到：org.apache.ibatis.session.Configuration#databaseId       */</span>      <span class="token function">databaseIdProviderElement</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span><span class="token function">evalNode</span><span class="token punctuation">(</span><span class="token string">"databaseIdProvider"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">/**       * 解析我们的类型处理器节点       * &lt;typeHandlers>            &lt;typeHandler handler="org.mybatis.example.ExampleTypeHandler"/>          &lt;/typeHandlers>          解析到：org.apache.ibatis.session.Configuration#typeHandlerRegistry.typeHandlerMap       */</span>      <span class="token function">typeHandlerElement</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span><span class="token function">evalNode</span><span class="token punctuation">(</span><span class="token string">"typeHandlers"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">// ===========================重点===========================</span>      <span class="token comment" spellcheck="true">/**       * 解析我们的mapper       *       resource：来注册我们的class类路径下的       class：使用接口       url:来指定我们磁盘下的或者网络资源的       package:将包内的映射器接口实现全部注册为映射器       class:       若注册Mapper不带xml文件的,这里可以直接注册       若注册的Mapper带xml文件的，需要把xml文件和mapper文件同名 同路径       &lt;mappers>          &lt;mapper resource="com/dm/mapper/UserMapper.xml"/>          &lt;mapper class="com.dm.mapper.UserMapper">&lt;/mapper>\          &lt;mapper url="file:///var/mappers/UserMapper.xml">&lt;/mapper>          &lt;package name="com.dm.mapper">&lt;/package>       &lt;/mappers>       */</span>      <span class="token function">mapperElement</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span><span class="token function">evalNode</span><span class="token punctuation">(</span><span class="token string">"mappers"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">BuilderException</span><span class="token punctuation">(</span><span class="token string">"Error parsing SQL Mapper Configuration. Cause: "</span> <span class="token operator">+</span> e<span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span></code></pre><h3 id="构建二级缓存"><a href="#构建二级缓存" class="headerlink" title="构建二级缓存"></a>构建二级缓存</h3><p>cacheElement</p><p>解析二级缓存</p><pre class=" language-java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">cacheElement</span><span class="token punctuation">(</span>XNode context<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>context <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//解析cache节点的type属性</span>    String type <span class="token operator">=</span> context<span class="token punctuation">.</span><span class="token function">getStringAttribute</span><span class="token punctuation">(</span><span class="token string">"type"</span><span class="token punctuation">,</span> <span class="token string">"PERPETUAL"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//根据type的String获取class类型</span>    Class<span class="token operator">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">Cache</span><span class="token operator">></span> typeClass <span class="token operator">=</span> typeAliasRegistry<span class="token punctuation">.</span><span class="token function">resolveAlias</span><span class="token punctuation">(</span>type<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//获取缓存过期策略:默认是LRU</span>    String eviction <span class="token operator">=</span> context<span class="token punctuation">.</span><span class="token function">getStringAttribute</span><span class="token punctuation">(</span><span class="token string">"eviction"</span><span class="token punctuation">,</span> <span class="token string">"LRU"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    Class<span class="token operator">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">Cache</span><span class="token operator">></span> evictionClass <span class="token operator">=</span> typeAliasRegistry<span class="token punctuation">.</span><span class="token function">resolveAlias</span><span class="token punctuation">(</span>eviction<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//flushInterval（刷新间隔）属性可以被设置为任意的正整数，设置的值应该是一个以毫秒为单位的合理时间量。 默认情况是不设置，也就是没有刷新间隔，缓存仅仅会在调用语句时刷新。</span>    Long flushInterval <span class="token operator">=</span> context<span class="token punctuation">.</span><span class="token function">getLongAttribute</span><span class="token punctuation">(</span><span class="token string">"flushInterval"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//size（引用数目）属性可以被设置为任意正整数，要注意欲缓存对象的大小和运行环境中可用的内存资源。默认值是 1024。</span>    Integer size <span class="token operator">=</span> context<span class="token punctuation">.</span><span class="token function">getIntAttribute</span><span class="token punctuation">(</span><span class="token string">"size"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//只读）属性可以被设置为 true 或 false。只读的缓存会给所有调用者返回缓存对象的相同实例。 因此这些对象不能被修改。这就提供了可观的性能提升。而可读写的缓存会（通过序列化）返回缓存对象的拷贝。 速度上会慢一些，但是更安全，因此默认值是 false</span>    <span class="token keyword">boolean</span> readWrite <span class="token operator">=</span> <span class="token operator">!</span>context<span class="token punctuation">.</span><span class="token function">getBooleanAttribute</span><span class="token punctuation">(</span><span class="token string">"readOnly"</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">boolean</span> blocking <span class="token operator">=</span> context<span class="token punctuation">.</span><span class="token function">getBooleanAttribute</span><span class="token punctuation">(</span><span class="token string">"blocking"</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    Properties props <span class="token operator">=</span> context<span class="token punctuation">.</span><span class="token function">getChildrenAsProperties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//把缓存节点加入到Configuration中</span>    builderAssistant<span class="token punctuation">.</span><span class="token function">useNewCache</span><span class="token punctuation">(</span>typeClass<span class="token punctuation">,</span> evictionClass<span class="token punctuation">,</span> flushInterval<span class="token punctuation">,</span> size<span class="token punctuation">,</span> readWrite<span class="token punctuation">,</span> blocking<span class="token punctuation">,</span> props<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>useNewCache</p><p>构建二级缓存</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> Cache <span class="token function">useNewCache</span><span class="token punctuation">(</span>Class<span class="token operator">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">Cache</span><span class="token operator">></span> typeClass<span class="token punctuation">,</span>    Class<span class="token operator">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">Cache</span><span class="token operator">></span> evictionClass<span class="token punctuation">,</span>    Long flushInterval<span class="token punctuation">,</span>    Integer size<span class="token punctuation">,</span>    <span class="token keyword">boolean</span> readWrite<span class="token punctuation">,</span>    <span class="token keyword">boolean</span> blocking<span class="token punctuation">,</span>    Properties props<span class="token punctuation">)</span> <span class="token punctuation">{</span>  Cache cache <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CacheBuilder</span><span class="token punctuation">(</span>currentNamespace<span class="token punctuation">)</span>      <span class="token punctuation">.</span><span class="token function">implementation</span><span class="token punctuation">(</span><span class="token function">valueOrDefault</span><span class="token punctuation">(</span>typeClass<span class="token punctuation">,</span> PerpetualCache<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">)</span>      <span class="token punctuation">.</span><span class="token function">addDecorator</span><span class="token punctuation">(</span><span class="token function">valueOrDefault</span><span class="token punctuation">(</span>evictionClass<span class="token punctuation">,</span> LruCache<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">)</span>      <span class="token punctuation">.</span><span class="token function">clearInterval</span><span class="token punctuation">(</span>flushInterval<span class="token punctuation">)</span>      <span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span>size<span class="token punctuation">)</span>      <span class="token punctuation">.</span><span class="token function">readWrite</span><span class="token punctuation">(</span>readWrite<span class="token punctuation">)</span>      <span class="token punctuation">.</span><span class="token function">blocking</span><span class="token punctuation">(</span>blocking<span class="token punctuation">)</span>      <span class="token punctuation">.</span><span class="token function">properties</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span>      <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  configuration<span class="token punctuation">.</span><span class="token function">addCache</span><span class="token punctuation">(</span>cache<span class="token punctuation">)</span><span class="token punctuation">;</span>  currentCache <span class="token operator">=</span> cache<span class="token punctuation">;</span>  <span class="token keyword">return</span> cache<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> Cache <span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// implementation -- PerpetualCache</span>    <span class="token comment" spellcheck="true">// decorators -- LruCache</span>    <span class="token function">setDefaultImplementations</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    Cache cache <span class="token operator">=</span> <span class="token function">newBaseCacheInstance</span><span class="token punctuation">(</span>implementation<span class="token punctuation">,</span> id<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">setCacheProperties</span><span class="token punctuation">(</span>cache<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// issue #352, do not apply decorators to custom caches</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>PerpetualCache<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>cache<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">for</span> <span class="token punctuation">(</span>Class<span class="token operator">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">Cache</span><span class="token operator">></span> decorator <span class="token operator">:</span> decorators<span class="token punctuation">)</span> <span class="token punctuation">{</span>        cache <span class="token operator">=</span> <span class="token function">newCacheDecoratorInstance</span><span class="token punctuation">(</span>decorator<span class="token punctuation">,</span> cache<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">setCacheProperties</span><span class="token punctuation">(</span>cache<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token comment" spellcheck="true">// cache = new SerializedCache(cache)</span>      <span class="token comment" spellcheck="true">// cache = new LoggingCache(cache);</span>      <span class="token comment" spellcheck="true">// cache = new SynchronizedCache(cache);</span>      <span class="token comment" spellcheck="true">// 通过责任链构建装饰器 PerpetualCache -> LruCache -> SerializedCache -> LoggingCache -> SynchronizedCache</span>      <span class="token comment" spellcheck="true">// 调用 SynchronizedCache -> LoggingCache -> SerializedCache -> PerpetualCache -> LruCache</span>      cache <span class="token operator">=</span> <span class="token function">setStandardDecorators</span><span class="token punctuation">(</span>cache<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>LoggingCache<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">isAssignableFrom</span><span class="token punctuation">(</span>cache<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      cache <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LoggingCache</span><span class="token punctuation">(</span>cache<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> cache<span class="token punctuation">;</span>  <span class="token punctuation">}</span></code></pre><h3 id="解析-Mapper-xml文件"><a href="#解析-Mapper-xml文件" class="headerlink" title="解析**Mapper.xml文件"></a>解析**Mapper.xml文件</h3><p>如果是批量扫描也就是mapper使用package模式会调用addMapper方法，往里面跟到MapperAnnotationBuilder.parse()下的loadXmlResource也是用下面的方法进行的xml解析</p><p>如果是用得注解形式SQL在parseStatement解析成MappedStatement</p><p>mapperElement</p><p>解析我们的mybatis-config.xml的mapper节点</p><pre class=" language-java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">mapperElement</span><span class="token punctuation">(</span>XNode parent<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>parent <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 获取我们mappers节点下的一个一个的mapper节点</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>XNode child <span class="token operator">:</span> parent<span class="token punctuation">.</span><span class="token function">getChildren</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token string">"package"</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>child<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        String mapperPackage <span class="token operator">=</span> child<span class="token punctuation">.</span><span class="token function">getStringAttribute</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        configuration<span class="token punctuation">.</span><span class="token function">addMappers</span><span class="token punctuation">(</span>mapperPackage<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        String resource <span class="token operator">=</span> child<span class="token punctuation">.</span><span class="token function">getStringAttribute</span><span class="token punctuation">(</span><span class="token string">"resource"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        String url <span class="token operator">=</span> child<span class="token punctuation">.</span><span class="token function">getStringAttribute</span><span class="token punctuation">(</span><span class="token string">"url"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        String mapperClass <span class="token operator">=</span> child<span class="token punctuation">.</span><span class="token function">getStringAttribute</span><span class="token punctuation">(</span><span class="token string">"class"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>resource <span class="token operator">!=</span> null <span class="token operator">&amp;&amp;</span> url <span class="token operator">==</span> null <span class="token operator">&amp;&amp;</span> mapperClass <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>          ErrorContext<span class="token punctuation">.</span><span class="token function">instance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">resource</span><span class="token punctuation">(</span>resource<span class="token punctuation">)</span><span class="token punctuation">;</span>          InputStream inputStream <span class="token operator">=</span> Resources<span class="token punctuation">.</span><span class="token function">getResourceAsStream</span><span class="token punctuation">(</span>resource<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token comment" spellcheck="true">// 创建读取XmlMapper构建器对象,用于来解析我们的mapper.xml文件</span>          XMLMapperBuilder mapperParser <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">XMLMapperBuilder</span><span class="token punctuation">(</span>inputStream<span class="token punctuation">,</span> configuration<span class="token punctuation">,</span> resource<span class="token punctuation">,</span> configuration<span class="token punctuation">.</span><span class="token function">getSqlFragments</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token comment" spellcheck="true">// 真正的解析我们的mapper.xml配置文件,解析SQL</span>          mapperParser<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>resource <span class="token operator">==</span> null <span class="token operator">&amp;&amp;</span> url <span class="token operator">!=</span> null <span class="token operator">&amp;&amp;</span> mapperClass <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>          ErrorContext<span class="token punctuation">.</span><span class="token function">instance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">resource</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">;</span>          InputStream inputStream <span class="token operator">=</span> Resources<span class="token punctuation">.</span><span class="token function">getUrlAsStream</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">;</span>          XMLMapperBuilder mapperParser <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">XMLMapperBuilder</span><span class="token punctuation">(</span>inputStream<span class="token punctuation">,</span> configuration<span class="token punctuation">,</span> url<span class="token punctuation">,</span> configuration<span class="token punctuation">.</span><span class="token function">getSqlFragments</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          mapperParser<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>resource <span class="token operator">==</span> null <span class="token operator">&amp;&amp;</span> url <span class="token operator">==</span> null <span class="token operator">&amp;&amp;</span> mapperClass <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>          Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> mapperInterface <span class="token operator">=</span> Resources<span class="token punctuation">.</span><span class="token function">classForName</span><span class="token punctuation">(</span>mapperClass<span class="token punctuation">)</span><span class="token punctuation">;</span>          configuration<span class="token punctuation">.</span><span class="token function">addMapper</span><span class="token punctuation">(</span>mapperInterface<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>          <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">BuilderException</span><span class="token punctuation">(</span><span class="token string">"A mapper element may only specify a url, resource or class, but not more than one."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>这段代码核心点其实就是构建一个XMLMapperBuilder调用parse方法解析SQL</p><p>XMLMapperBuilder.parse</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">parse</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// 判断当前的Mapper是否被加载过</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>configuration<span class="token punctuation">.</span><span class="token function">isResourceLoaded</span><span class="token punctuation">(</span>resource<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 真正的解析我们的 &lt;mapper namespace="com.dm.mapper.UserMapper"></span>    <span class="token comment" spellcheck="true">// ================ 这个方法重要 ================</span>    <span class="token function">configurationElement</span><span class="token punctuation">(</span>parser<span class="token punctuation">.</span><span class="token function">evalNode</span><span class="token punctuation">(</span><span class="token string">"/mapper"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 把资源保存到我们Configuration中</span>    configuration<span class="token punctuation">.</span><span class="token function">addLoadedResource</span><span class="token punctuation">(</span>resource<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">bindMapperForNamespace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token function">parsePendingResultMaps</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">parsePendingCacheRefs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">parsePendingStatements</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>configurationElement</p><p>解析**Mapper.xml文件mapper节点</p><pre class=" language-java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">configurationElement</span><span class="token punctuation">(</span>XNode context<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">try</span> <span class="token punctuation">{</span>          <span class="token comment" spellcheck="true">/**     * 解析我们的namespace属性     * &lt;mapper namespace="com.dm.mapper.UserMapper">     */</span>    String namespace <span class="token operator">=</span> context<span class="token punctuation">.</span><span class="token function">getStringAttribute</span><span class="token punctuation">(</span><span class="token string">"namespace"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>namespace <span class="token operator">==</span> null <span class="token operator">||</span> namespace<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">BuilderException</span><span class="token punctuation">(</span><span class="token string">"Mapper's namespace cannot be empty"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>          <span class="token comment" spellcheck="true">/**     * 保存我们当前的namespace  并且判断接口完全类名==namespace     */</span>    builderAssistant<span class="token punctuation">.</span><span class="token function">setCurrentNamespace</span><span class="token punctuation">(</span>namespace<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token comment" spellcheck="true">/**     * 解析我们的缓存引用     * 说明我当前的缓存引用和DeptMapper的缓存引用一致     * &lt;cache-ref namespace="com.dm.mapper.DeptMapper">&lt;/cache-ref>          解析到org.apache.ibatis.session.Configuration#cacheRefMap&lt;当前namespace,ref-namespace>          异常下（引用缓存未使用缓存）：org.apache.ibatis.session.Configuration#incompleteCacheRefs     */</span>    <span class="token function">cacheRefElement</span><span class="token punctuation">(</span>context<span class="token punctuation">.</span><span class="token function">evalNode</span><span class="token punctuation">(</span><span class="token string">"cache-ref"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token comment" spellcheck="true">/**     * 解析我们的cache节点     * &lt;cache type="org.mybatis.caches.ehcache.EhcacheCache">&lt;/cache>        解析到：org.apache.ibatis.session.Configuration#caches               org.apache.ibatis.builder.MapperBuilderAssistant#currentCache     */</span>    <span class="token function">cacheElement</span><span class="token punctuation">(</span>context<span class="token punctuation">.</span><span class="token function">evalNode</span><span class="token punctuation">(</span><span class="token string">"cache"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token comment" spellcheck="true">/**     * 解析paramterMap节点     */</span>    <span class="token function">parameterMapElement</span><span class="token punctuation">(</span>context<span class="token punctuation">.</span><span class="token function">evalNodes</span><span class="token punctuation">(</span><span class="token string">"/mapper/parameterMap"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token comment" spellcheck="true">/**     * 解析我们的resultMap节点     * 解析到：org.apache.ibatis.session.Configuration#resultMaps     *    异常 org.apache.ibatis.session.Configuration#incompleteResultMap     */</span>    <span class="token function">resultMapElements</span><span class="token punctuation">(</span>context<span class="token punctuation">.</span><span class="token function">evalNodes</span><span class="token punctuation">(</span><span class="token string">"/mapper/resultMap"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token comment" spellcheck="true">/**     * 解析我们通过sql节点     *  解析到org.apache.ibatis.builder.xml.XMLMapperBuilder#sqlFragments     *   其实等于 org.apache.ibatis.session.Configuration#sqlFragments     *   因为他们是同一引用，在构建XMLMapperBuilder 时把Configuration.getSqlFragments传进去了     */</span>    <span class="token function">sqlElement</span><span class="token punctuation">(</span>context<span class="token punctuation">.</span><span class="token function">evalNodes</span><span class="token punctuation">(</span><span class="token string">"/mapper/sql"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token comment" spellcheck="true">/**     * 解析我们的select | insert |update |delete节点     * 解析到org.apache.ibatis.session.Configuration#mappedStatements     */</span>    <span class="token function">buildStatementFromContext</span><span class="token punctuation">(</span>context<span class="token punctuation">.</span><span class="token function">evalNodes</span><span class="token punctuation">(</span><span class="token string">"select|insert|update|delete"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">BuilderException</span><span class="token punctuation">(</span><span class="token string">"Error parsing Mapper XML. The XML location is '"</span> <span class="token operator">+</span> resource <span class="token operator">+</span> <span class="token string">"'. Cause: "</span> <span class="token operator">+</span> e<span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="创建SqlSession"><a href="#创建SqlSession" class="headerlink" title="创建SqlSession"></a>创建SqlSession</h3><p>通过SqlSessionFactory.openSession()创建SqlSession对象</p><p>openSessionFromDataSource</p><pre class=" language-java"><code class="language-java"><span class="token keyword">private</span> SqlSession <span class="token function">openSessionFromDataSource</span><span class="token punctuation">(</span>ExecutorType execType<span class="token punctuation">,</span> TransactionIsolationLevel level<span class="token punctuation">,</span> <span class="token keyword">boolean</span> autoCommit<span class="token punctuation">)</span> <span class="token punctuation">{</span>  Transaction tx <span class="token operator">=</span> null<span class="token punctuation">;</span>  <span class="token keyword">try</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * 获取环境变量     */</span>    <span class="token keyword">final</span> Environment environment <span class="token operator">=</span> configuration<span class="token punctuation">.</span><span class="token function">getEnvironment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 获取事务工厂     */</span>    <span class="token keyword">final</span> TransactionFactory transactionFactory <span class="token operator">=</span> <span class="token function">getTransactionFactoryFromEnvironment</span><span class="token punctuation">(</span>environment<span class="token punctuation">)</span><span class="token punctuation">;</span>    tx <span class="token operator">=</span> transactionFactory<span class="token punctuation">.</span><span class="token function">newTransaction</span><span class="token punctuation">(</span>environment<span class="token punctuation">.</span><span class="token function">getDataSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> level<span class="token punctuation">,</span> autoCommit<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 创建一个sql执行器对象     * 一般情况下 若我们的mybaits的全局配置文件的cacheEnabled默认为ture就返回     * 一个cacheExecutor,若关闭的话返回的就是一个SimpleExecutor     */</span>    <span class="token keyword">final</span> Executor executor <span class="token operator">=</span> configuration<span class="token punctuation">.</span><span class="token function">newExecutor</span><span class="token punctuation">(</span>tx<span class="token punctuation">,</span> execType<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 创建返回一个DeaultSqlSessoin对象返回     */</span>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">DefaultSqlSession</span><span class="token punctuation">(</span>configuration<span class="token punctuation">,</span> executor<span class="token punctuation">,</span> autoCommit<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">closeTransaction</span><span class="token punctuation">(</span>tx<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// may have fetched a connection so lets call close()</span>    <span class="token keyword">throw</span> ExceptionFactory<span class="token punctuation">.</span><span class="token function">wrapException</span><span class="token punctuation">(</span><span class="token string">"Error opening session.  Cause: "</span> <span class="token operator">+</span> e<span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>    ErrorContext<span class="token punctuation">.</span><span class="token function">instance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">reset</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>newExecutor</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> Executor <span class="token function">newExecutor</span><span class="token punctuation">(</span>Transaction transaction<span class="token punctuation">,</span> ExecutorType executorType<span class="token punctuation">)</span> <span class="token punctuation">{</span>  executorType <span class="token operator">=</span> executorType <span class="token operator">==</span> null <span class="token operator">?</span> defaultExecutorType <span class="token operator">:</span> executorType<span class="token punctuation">;</span>  executorType <span class="token operator">=</span> executorType <span class="token operator">==</span> null <span class="token operator">?</span> ExecutorType<span class="token punctuation">.</span>SIMPLE <span class="token operator">:</span> executorType<span class="token punctuation">;</span>  Executor executor<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//批量的执行器</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>ExecutorType<span class="token punctuation">.</span>BATCH <span class="token operator">==</span> executorType<span class="token punctuation">)</span> <span class="token punctuation">{</span>    executor <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BatchExecutor</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> transaction<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>ExecutorType<span class="token punctuation">.</span>REUSE <span class="token operator">==</span> executorType<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//可重复使用的执行器</span>    executor <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ReuseExecutor</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> transaction<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//简单的sql执行器对象</span>    executor <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SimpleExecutor</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> transaction<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">//判断mybatis的全局配置文件是否开启缓存</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>cacheEnabled<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//把当前的简单的执行器包装成一个CachingExecutor</span>    executor <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CachingExecutor</span><span class="token punctuation">(</span>executor<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">//调用所有的拦截器对象plugin方法</span>  executor <span class="token operator">=</span> <span class="token punctuation">(</span>Executor<span class="token punctuation">)</span> interceptorChain<span class="token punctuation">.</span><span class="token function">pluginAll</span><span class="token punctuation">(</span>executor<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> executor<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>从上诉代码可以发现Executor共有4种BatchExecutor，ReuseExecutor，SimpleExecutor，CachingExecutor</p><p>如果开启了二级缓存Executor就是CachingExecutor包装了一个其他三种中的Executor，没有开启就是其他三种中的一种</p><h3 id="Mapper执行流程"><a href="#Mapper执行流程" class="headerlink" title="Mapper执行流程"></a>Mapper执行流程</h3><p>Mapper在SqlSession.getMapper中获取到了Mapper代理对象MapperProxy，MapperProxy中保存了sqlSession, mapperInterface, methodCache参数，包含sqlSession，接口，和方法，到时候直接反射通过接口和方法就可以调到指定的SQL语句</p><p>直接来到MapperProxy.invoke方法</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> Object <span class="token function">invoke</span><span class="token punctuation">(</span>Object proxy<span class="token punctuation">,</span> Method method<span class="token punctuation">,</span> Object<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> Throwable <span class="token punctuation">{</span>  <span class="token keyword">try</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 判断我们的方法是不是我们的Object类定义的方法，若是直接通过反射调用</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>Object<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>method<span class="token punctuation">.</span><span class="token function">getDeclaringClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> method<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 是否接口的默认方法</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>method<span class="token punctuation">.</span><span class="token function">isDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>             <span class="token comment" spellcheck="true">// 调用我们的接口中的默认方法</span>      <span class="token keyword">return</span> <span class="token function">invokeDefaultMethod</span><span class="token punctuation">(</span>proxy<span class="token punctuation">,</span> method<span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Throwable</span> t<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">throw</span> ExceptionUtil<span class="token punctuation">.</span><span class="token function">unwrapThrowable</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">// 把我们的方法对象封装成一个MapperMethod对象(带有缓存作用的)</span>  <span class="token keyword">final</span> MapperMethod mapperMethod <span class="token operator">=</span> <span class="token function">cachedMapperMethod</span><span class="token punctuation">(</span>method<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 调用</span>  <span class="token keyword">return</span> mapperMethod<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span>sqlSession<span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> Object <span class="token function">execute</span><span class="token punctuation">(</span>SqlSession sqlSession<span class="token punctuation">,</span> Object<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>  Object result<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//判断我们执行sql命令的类型</span>  <span class="token keyword">switch</span> <span class="token punctuation">(</span>command<span class="token punctuation">.</span><span class="token function">getType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//insert操作</span>    <span class="token keyword">case</span> INSERT<span class="token operator">:</span> <span class="token punctuation">{</span>      Object param <span class="token operator">=</span> method<span class="token punctuation">.</span><span class="token function">convertArgsToSqlCommandParam</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span><span class="token punctuation">;</span>      result <span class="token operator">=</span> <span class="token function">rowCountResult</span><span class="token punctuation">(</span>sqlSession<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>command<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> param<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//update操作</span>    <span class="token keyword">case</span> UPDATE<span class="token operator">:</span> <span class="token punctuation">{</span>      Object param <span class="token operator">=</span> method<span class="token punctuation">.</span><span class="token function">convertArgsToSqlCommandParam</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span><span class="token punctuation">;</span>      result <span class="token operator">=</span> <span class="token function">rowCountResult</span><span class="token punctuation">(</span>sqlSession<span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span>command<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> param<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//delete操作</span>    <span class="token keyword">case</span> DELETE<span class="token operator">:</span> <span class="token punctuation">{</span>      Object param <span class="token operator">=</span> method<span class="token punctuation">.</span><span class="token function">convertArgsToSqlCommandParam</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span><span class="token punctuation">;</span>      result <span class="token operator">=</span> <span class="token function">rowCountResult</span><span class="token punctuation">(</span>sqlSession<span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span>command<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> param<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//select操作</span>    <span class="token keyword">case</span> SELECT<span class="token operator">:</span>      <span class="token comment" spellcheck="true">//返回值为空</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>method<span class="token punctuation">.</span><span class="token function">returnsVoid</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> method<span class="token punctuation">.</span><span class="token function">hasResultHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">executeWithResultHandler</span><span class="token punctuation">(</span>sqlSession<span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>        result <span class="token operator">=</span> null<span class="token punctuation">;</span>      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>method<span class="token punctuation">.</span><span class="token function">returnsMany</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//返回值是一个List</span>        result <span class="token operator">=</span> <span class="token function">executeForMany</span><span class="token punctuation">(</span>sqlSession<span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>method<span class="token punctuation">.</span><span class="token function">returnsMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//返回值是一个map</span>        result <span class="token operator">=</span> <span class="token function">executeForMap</span><span class="token punctuation">(</span>sqlSession<span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>method<span class="token punctuation">.</span><span class="token function">returnsCursor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//返回游标</span>        result <span class="token operator">=</span> <span class="token function">executeForCursor</span><span class="token punctuation">(</span>sqlSession<span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//查询返回单个</span>        <span class="token comment" spellcheck="true">//解析我们的参数</span>        Object param <span class="token operator">=</span> method<span class="token punctuation">.</span><span class="token function">convertArgsToSqlCommandParam</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//执行sql</span>        result <span class="token operator">=</span> sqlSession<span class="token punctuation">.</span><span class="token function">selectOne</span><span class="token punctuation">(</span>command<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> param<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>method<span class="token punctuation">.</span><span class="token function">returnsOptional</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>result <span class="token operator">==</span> null <span class="token operator">||</span> <span class="token operator">!</span>method<span class="token punctuation">.</span><span class="token function">getReturnType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>result<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          result <span class="token operator">=</span> Optional<span class="token punctuation">.</span><span class="token function">ofNullable</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>      <span class="token punctuation">}</span>      <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token keyword">case</span> FLUSH<span class="token operator">:</span>      result <span class="token operator">=</span> sqlSession<span class="token punctuation">.</span><span class="token function">flushStatements</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token keyword">default</span><span class="token operator">:</span>      <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">BindingException</span><span class="token punctuation">(</span><span class="token string">"Unknown execution method for: "</span> <span class="token operator">+</span> command<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>result <span class="token operator">==</span> null <span class="token operator">&amp;&amp;</span> method<span class="token punctuation">.</span><span class="token function">getReturnType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isPrimitive</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>method<span class="token punctuation">.</span><span class="token function">returnsVoid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">BindingException</span><span class="token punctuation">(</span><span class="token string">"Mapper method '"</span> <span class="token operator">+</span> command<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token operator">+</span> <span class="token string">" attempted to return null from a method with a primitive return type ("</span> <span class="token operator">+</span> method<span class="token punctuation">.</span><span class="token function">getReturnType</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">")."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> result<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h3 id="具体查询流程"><a href="#具体查询流程" class="headerlink" title="具体查询流程"></a>具体查询流程</h3><p>这里我们查询的是selectById所以我们这里会执行sqlSession.selectOne()，在底层selectOne还是会调selectList方法只是取了第一个</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token operator">&lt;</span>E<span class="token operator">></span> List<span class="token operator">&lt;</span>E<span class="token operator">></span> <span class="token function">selectList</span><span class="token punctuation">(</span>String statement<span class="token punctuation">,</span> Object parameter<span class="token punctuation">,</span> RowBounds rowBounds<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">try</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * 通过我们的statement去我们的全局配置类中获取MappedStatement     */</span>    MappedStatement ms <span class="token operator">=</span> configuration<span class="token punctuation">.</span><span class="token function">getMappedStatement</span><span class="token punctuation">(</span>statement<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 如果前面用插件代理了executor这里会首先执行Plugin代理类，执行拦截器调用Plugin.invoke     *      * 通过执行器去执行我们的sql对象包装我们的集合类参数     * 一般情况下是executor为CachingExecutor对象     */</span>    <span class="token keyword">return</span> executor<span class="token punctuation">.</span><span class="token function">query</span><span class="token punctuation">(</span>ms<span class="token punctuation">,</span> <span class="token function">wrapCollection</span><span class="token punctuation">(</span>parameter<span class="token punctuation">)</span><span class="token punctuation">,</span> rowBounds<span class="token punctuation">,</span> Executor<span class="token punctuation">.</span>NO_RESULT_HANDLER<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">throw</span> ExceptionFactory<span class="token punctuation">.</span><span class="token function">wrapException</span><span class="token punctuation">(</span><span class="token string">"Error querying database.  Cause: "</span> <span class="token operator">+</span> e<span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>    ErrorContext<span class="token punctuation">.</span><span class="token function">instance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">reset</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>上面的 executor.query这里具体要看是哪个executor，在newExecutor方法中有体现。开启了二级缓存是CachingExecutor没有开启是BaseExecutor，这里我们走的是CachingExecutor</p><p>如果使用的是CachingExecutor就会直接在二级缓存拿，二级缓存没拿到就调用delegate拿到封装前的类，封装前的Executor有3种，但他们都没有实现query方法就会调基类的query，这里就会调用BaseExecutor.query</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token operator">&lt;</span>E<span class="token operator">></span> List<span class="token operator">&lt;</span>E<span class="token operator">></span> <span class="token function">query</span><span class="token punctuation">(</span>MappedStatement ms<span class="token punctuation">,</span> Object parameterObject<span class="token punctuation">,</span> RowBounds rowBounds<span class="token punctuation">,</span> ResultHandler resultHandler<span class="token punctuation">)</span> <span class="token keyword">throws</span> SQLException <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">//通过参数对象解析我们的sql详细信息</span>  BoundSql boundSql <span class="token operator">=</span> ms<span class="token punctuation">.</span><span class="token function">getBoundSql</span><span class="token punctuation">(</span>parameterObject<span class="token punctuation">)</span><span class="token punctuation">;</span>  CacheKey key <span class="token operator">=</span> <span class="token function">createCacheKey</span><span class="token punctuation">(</span>ms<span class="token punctuation">,</span> parameterObject<span class="token punctuation">,</span> rowBounds<span class="token punctuation">,</span> boundSql<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token function">query</span><span class="token punctuation">(</span>ms<span class="token punctuation">,</span> parameterObject<span class="token punctuation">,</span> rowBounds<span class="token punctuation">,</span> resultHandler<span class="token punctuation">,</span> key<span class="token punctuation">,</span> boundSql<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// CachingExecutor#query</span><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token operator">&lt;</span>E<span class="token operator">></span> List<span class="token operator">&lt;</span>E<span class="token operator">></span> <span class="token function">query</span><span class="token punctuation">(</span>MappedStatement ms<span class="token punctuation">,</span> Object parameterObject<span class="token punctuation">,</span> RowBounds rowBounds<span class="token punctuation">,</span> ResultHandler resultHandler<span class="token punctuation">,</span> CacheKey key<span class="token punctuation">,</span> BoundSql boundSql<span class="token punctuation">)</span> <span class="token keyword">throws</span> SQLException <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 判断我们我们的mapper中是否开启了二级缓存&lt;cache>&lt;/cache></span>    Cache cache <span class="token operator">=</span> ms<span class="token punctuation">.</span><span class="token function">getCache</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 判断是否配置了cache</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>cache <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// 判断是否需要刷新缓存</span>      <span class="token function">flushCacheIfRequired</span><span class="token punctuation">(</span>ms<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>ms<span class="token punctuation">.</span><span class="token function">isUseCache</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> resultHandler <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">ensureNoOutParams</span><span class="token punctuation">(</span>ms<span class="token punctuation">,</span> boundSql<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 先去二级缓存中获取</span>        <span class="token annotation punctuation">@SuppressWarnings</span><span class="token punctuation">(</span><span class="token string">"unchecked"</span><span class="token punctuation">)</span>        List<span class="token operator">&lt;</span>E<span class="token operator">></span> list <span class="token operator">=</span> <span class="token punctuation">(</span>List<span class="token operator">&lt;</span>E<span class="token operator">></span><span class="token punctuation">)</span> tcm<span class="token punctuation">.</span><span class="token function">getObject</span><span class="token punctuation">(</span>cache<span class="token punctuation">,</span> key<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 二级缓存中没有获取到</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>list <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token comment" spellcheck="true">//通过查询数据库去查询</span>          list <span class="token operator">=</span> delegate<span class="token punctuation">.</span><span class="token function">query</span><span class="token punctuation">(</span>ms<span class="token punctuation">,</span> parameterObject<span class="token punctuation">,</span> rowBounds<span class="token punctuation">,</span> resultHandler<span class="token punctuation">,</span> key<span class="token punctuation">,</span> boundSql<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token comment" spellcheck="true">//加入到二级缓存中</span>          tcm<span class="token punctuation">.</span><span class="token function">putObject</span><span class="token punctuation">(</span>cache<span class="token punctuation">,</span> key<span class="token punctuation">,</span> list<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// issue #578 and #116</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> list<span class="token punctuation">;</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//没有整合二级缓存,直接去查询</span>    <span class="token keyword">return</span> delegate<span class="token punctuation">.</span><span class="token function">query</span><span class="token punctuation">(</span>ms<span class="token punctuation">,</span> parameterObject<span class="token punctuation">,</span> rowBounds<span class="token punctuation">,</span> resultHandler<span class="token punctuation">,</span> key<span class="token punctuation">,</span> boundSql<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token comment" spellcheck="true">// BaseExecutor#query</span><span class="token keyword">public</span> <span class="token operator">&lt;</span>E<span class="token operator">></span> List<span class="token operator">&lt;</span>E<span class="token operator">></span> <span class="token function">query</span><span class="token punctuation">(</span>MappedStatement ms<span class="token punctuation">,</span> Object parameter<span class="token punctuation">,</span> RowBounds rowBounds<span class="token punctuation">,</span> ResultHandler resultHandler<span class="token punctuation">,</span> CacheKey key<span class="token punctuation">,</span> BoundSql boundSql<span class="token punctuation">)</span> <span class="token keyword">throws</span> SQLException <span class="token punctuation">{</span>    ErrorContext<span class="token punctuation">.</span><span class="token function">instance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">resource</span><span class="token punctuation">(</span>ms<span class="token punctuation">.</span><span class="token function">getResource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">activity</span><span class="token punctuation">(</span><span class="token string">"executing a query"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">object</span><span class="token punctuation">(</span>ms<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//已经关闭，则抛出 ExecutorException 异常</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>closed<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">ExecutorException</span><span class="token punctuation">(</span><span class="token string">"Executor was closed."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 清空本地缓存，如果queryStack为零，并且要求清空本地缓存。</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>queryStack <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> ms<span class="token punctuation">.</span><span class="token function">isFlushCacheRequired</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token function">clearLocalCache</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    List<span class="token operator">&lt;</span>E<span class="token operator">></span> list<span class="token punctuation">;</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// 从一级缓存中，获取查询结果</span>      queryStack<span class="token operator">++</span><span class="token punctuation">;</span>      list <span class="token operator">=</span> resultHandler <span class="token operator">==</span> null <span class="token operator">?</span> <span class="token punctuation">(</span>List<span class="token operator">&lt;</span>E<span class="token operator">></span><span class="token punctuation">)</span> localCache<span class="token punctuation">.</span><span class="token function">getObject</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span> <span class="token operator">:</span> null<span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">// 获取到，则进行处理</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>list <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//处理存过的</span>        <span class="token function">handleLocallyCachedOutputParameters</span><span class="token punctuation">(</span>ms<span class="token punctuation">,</span> key<span class="token punctuation">,</span> parameter<span class="token punctuation">,</span> boundSql<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 获得不到，则从数据库中查询</span>        list <span class="token operator">=</span> <span class="token function">queryFromDatabase</span><span class="token punctuation">(</span>ms<span class="token punctuation">,</span> parameter<span class="token punctuation">,</span> rowBounds<span class="token punctuation">,</span> resultHandler<span class="token punctuation">,</span> key<span class="token punctuation">,</span> boundSql<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>      queryStack<span class="token operator">--</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>queryStack <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">for</span> <span class="token punctuation">(</span>DeferredLoad deferredLoad <span class="token operator">:</span> deferredLoads<span class="token punctuation">)</span> <span class="token punctuation">{</span>        deferredLoad<span class="token punctuation">.</span><span class="token function">load</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token comment" spellcheck="true">// issue #601</span>      deferredLoads<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>configuration<span class="token punctuation">.</span><span class="token function">getLocalCacheScope</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> LocalCacheScope<span class="token punctuation">.</span>STATEMENT<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// issue #482</span>        <span class="token function">clearLocalCache</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> list<span class="token punctuation">;</span>  <span class="token punctuation">}</span></code></pre><p>在BaseExecutor中queryFromDatabase走了doQuery，这个方法由创建的具体Executor类实现有BatchExecutor，ReuseExecutor，SimpleExecutor三种，这里我们进入SimpleExecutor</p><p>SimpleExecutor#doQuery</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token operator">&lt;</span>E<span class="token operator">></span> List<span class="token operator">&lt;</span>E<span class="token operator">></span> <span class="token function">doQuery</span><span class="token punctuation">(</span>MappedStatement ms<span class="token punctuation">,</span> Object parameter<span class="token punctuation">,</span> RowBounds rowBounds<span class="token punctuation">,</span> ResultHandler resultHandler<span class="token punctuation">,</span> BoundSql boundSql<span class="token punctuation">)</span> <span class="token keyword">throws</span> SQLException <span class="token punctuation">{</span>  Statement stmt <span class="token operator">=</span> null<span class="token punctuation">;</span>  <span class="token keyword">try</span> <span class="token punctuation">{</span>    Configuration configuration <span class="token operator">=</span> ms<span class="token punctuation">.</span><span class="token function">getConfiguration</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 内部封装了ParameterHandler和ResultSetHandler</span>    StatementHandler handler <span class="token operator">=</span> configuration<span class="token punctuation">.</span><span class="token function">newStatementHandler</span><span class="token punctuation">(</span>wrapper<span class="token punctuation">,</span> ms<span class="token punctuation">,</span> parameter<span class="token punctuation">,</span> rowBounds<span class="token punctuation">,</span> resultHandler<span class="token punctuation">,</span> boundSql<span class="token punctuation">)</span><span class="token punctuation">;</span>    stmt <span class="token operator">=</span> <span class="token function">prepareStatement</span><span class="token punctuation">(</span>handler<span class="token punctuation">,</span> ms<span class="token punctuation">.</span><span class="token function">getStatementLog</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> handler<span class="token punctuation">.</span><span class="token function">query</span><span class="token punctuation">(</span>stmt<span class="token punctuation">,</span> resultHandler<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>    <span class="token function">closeStatement</span><span class="token punctuation">(</span>stmt<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>从这一部分代码可以看出插件代理调用顺序 <code>Executer-&gt;StatementHandler-&gt;ParameterHandler-&gt;ResultSetHandler</code></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 源码 </tag>
            
            <tag> MyBatis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringMVC核心源码剖析</title>
      <link href="/2021/03/26/springmvc-he-xin-yuan-ma-pou-xi/"/>
      <url>/2021/03/26/springmvc-he-xin-yuan-ma-pou-xi/</url>
      
        <content type="html"><![CDATA[<p>SpringMVC是基于MVC的架构模式，MVC是有Model(模型)，V(视图)，C(控制器)三部分组成的。C负责接收客户端请求，对请求进行处理然后转发到模型进行业务逻辑处理最后转发到相应的V进行显示处理。</p><h2 id="SpringMVC执行过程"><a href="#SpringMVC执行过程" class="headerlink" title="SpringMVC执行过程"></a>SpringMVC执行过程</h2><ol><li>客户端发送请求到服务端，前端控制器（DispatcherServlet）接收请求，通过处理器映射器HandlerMapping找到处理器执行链HandlerExecutorChain（拦截器就在这）</li><li>通过处理器适配器HandlerAdapter找到合适的调用处理器的适配器</li><li>通过处理器适配器调用处理器方法，也就是我们的Controller,Controller返回ModelAndView</li><li>前端控制器接收到处理器适配器返回的ModelAndView通过视图解析器ViewResolver进行视图解析</li><li>前端控制器将ModelAndView中的Model渲染到View中返回给客户端进行响应</li></ol><p>上面有几个重要的概念，</p><ul><li><p>前端控制器(DispatcherServlet)：接收请求，处理响应结果</p></li><li><p>处理器映射器(HandlerMapping)：根据请求URL，找到对应的Handler</p></li><li><p>处理器适配器(HandlerAdapter)：调用处理器</p><table><thead><tr><th>Handler类别</th><th>对应适配器</th><th>描述</th></tr></thead><tbody><tr><td>Controller</td><td>SimpleControllerHandlerAdapter</td><td>标准控制器，返回ModelAndView</td></tr><tr><td>HttpRequestHandler</td><td>HttpRequestHandlerAdapter</td><td>业务自行处理 请求，不需要通过modelAndView转到视图</td></tr><tr><td>Servlet</td><td>SimpleServletHandlerAdapter</td><td>基于标准的servlet 处理</td></tr><tr><td>HandlerMethod</td><td>RequestMappingHandlerAdapter</td><td>基于@requestMapping对应方法处理</td></tr></tbody></table></li><li><p>视图解析器(ViewResolver)：视图解析，把逻辑视图名称解析成真正的物理视图</p></li></ul><h2 id="Demo"><a href="#Demo" class="headerlink" title="Demo"></a>Demo</h2><p>这里我们不使用传统的xml形式配置，我们使用注解形式的配置</p><p>添加初始化类</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyStarterInitializer</span> <span class="token keyword">extends</span> <span class="token class-name">AbstractAnnotationConfigDispatcherServletInitializer</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * IOC父容器的启动类     */</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">getRootConfigClasses</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Class</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span>RootConfig<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * IOC子容器配置 web容器配置     */</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">getServletConfigClasses</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Class</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span>WebAppConfig<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 前端控制器DispatcherServlet的拦截路径     */</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> String<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">getServletMappings</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token string">"/"</span><span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>RootConfig</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * IOC容器,不扫描Controller的注解 */</span><span class="token annotation punctuation">@Configuration</span><span class="token annotation punctuation">@ComponentScan</span><span class="token punctuation">(</span>basePackages <span class="token operator">=</span> <span class="token string">"com.dm"</span>        <span class="token punctuation">,</span> excludeFilters <span class="token operator">=</span> <span class="token punctuation">{</span>        <span class="token annotation punctuation">@ComponentScan</span><span class="token punctuation">.</span><span class="token function">Filter</span><span class="token punctuation">(</span>type <span class="token operator">=</span> FilterType<span class="token punctuation">.</span>ANNOTATION<span class="token punctuation">,</span>value<span class="token operator">=</span><span class="token punctuation">{</span>RestController<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span>Controller<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token annotation punctuation">@ComponentScan</span><span class="token punctuation">.</span><span class="token function">Filter</span><span class="token punctuation">(</span>type <span class="token operator">=</span> ASSIGNABLE_TYPE<span class="token punctuation">,</span>value <span class="token operator">=</span> com<span class="token punctuation">.</span>dm<span class="token punctuation">.</span>config<span class="token punctuation">.</span>WebAppConfig<span class="token punctuation">.</span><span class="token keyword">class</span> <span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RootConfig</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></code></pre><p>WebAppConfig</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span><span class="token annotation punctuation">@ComponentScan</span><span class="token punctuation">(</span>basePackages <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">"com.dm"</span><span class="token punctuation">}</span><span class="token punctuation">,</span>includeFilters <span class="token operator">=</span> <span class="token punctuation">{</span>        <span class="token annotation punctuation">@ComponentScan</span><span class="token punctuation">.</span><span class="token function">Filter</span><span class="token punctuation">(</span>type <span class="token operator">=</span> FilterType<span class="token punctuation">.</span>ANNOTATION<span class="token punctuation">,</span>value <span class="token operator">=</span> <span class="token punctuation">{</span>RestController<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> Controller<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">,</span>useDefaultFilters <span class="token operator">=</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token annotation punctuation">@EnableWebMvc</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">WebAppConfig</span> <span class="token keyword">implements</span> <span class="token class-name">WebMvcConfigurer</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * 配置试图解析器     */</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> InternalResourceViewResolver <span class="token function">internalResourceViewResolver</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        InternalResourceViewResolver viewResolver <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">InternalResourceViewResolver</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        viewResolver<span class="token punctuation">.</span><span class="token function">setSuffix</span><span class="token punctuation">(</span><span class="token string">".jsp"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        viewResolver<span class="token punctuation">.</span><span class="token function">setPrefix</span><span class="token punctuation">(</span><span class="token string">"/WEB-INF/jsp/"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> viewResolver<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * JSON     */</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">configureMessageConverters</span><span class="token punctuation">(</span>List<span class="token operator">&lt;</span>HttpMessageConverter<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">>></span> converters<span class="token punctuation">)</span> <span class="token punctuation">{</span>        converters<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">MappingJackson2HttpMessageConverter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>测试controller</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Controller</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DemoController</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/hello"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> ModelAndView <span class="token function">index</span><span class="token punctuation">(</span>ModelAndView modelAndView<span class="token punctuation">)</span> <span class="token punctuation">{</span>        modelAndView<span class="token punctuation">.</span><span class="token function">addObject</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">,</span><span class="token string">"dm"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        modelAndView<span class="token punctuation">.</span><span class="token function">setViewName</span><span class="token punctuation">(</span><span class="token string">"hello"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> modelAndView<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>根目录下webapp下新建WEB-INF/jsp/hello.jsp,启动即可。</p><h2 id="SpringMVC容器启动源码分析"><a href="#SpringMVC容器启动源码分析" class="headerlink" title="SpringMVC容器启动源码分析"></a>SpringMVC容器启动源码分析</h2><p>我们这里没有使用xml形式，是如何启动的呢，还有按照我们上面SpringMVC流程分析前端控制器DispatcherServlet在哪？</p><p>首先我们这里配置了MyStarterInitializer看一下类图发现它实现了WebApplicationInitializer接口</p><p><img src="C:\Users\DELL\AppData\Roaming\Typora\typora-user-images\image-20210224195000883.png" alt="image-20210224195000883"></p><p>然后我们发现在spring-web-版本.jar下面META-INF/services下有个文件，文件名为接口javax.servlet.ServletContainerInitializer，内容为实现了文件名接口的类全路径名org.springframework.web.SpringServletContainerInitializer，通过这一重要发现就明白这可能使用了SPI机制。</p><p>我们进到SpringServletContainerInitializer看下</p><h3 id="SpringServletContainerInitializer类"><a href="#SpringServletContainerInitializer类" class="headerlink" title="SpringServletContainerInitializer类"></a>SpringServletContainerInitializer类</h3><p>类里面有个onStartup方法且实现了ServletContainerInitializer，我们知道根据Servlet3的规范，web容器（tomcat）要负责回调项目中实现了ServletContainerInitializer接口的类的onStartup方法，同时，如果方法上添加了@HandlesTypes注解，还要把@HandlesTypes注解当中的class作为参数传递到onStartup方法中</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@HandlesTypes</span><span class="token punctuation">(</span>WebApplicationInitializer<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SpringServletContainerInitializer</span> <span class="token keyword">implements</span> <span class="token class-name">ServletContainerInitializer</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * 容器启动的时候会调用该方法，并且传入@HandlesTypes(WebApplicationInitializer.class)类型的所有子类作为入参.     我们发现我们刚刚实现的MyStarterInitializer就是实现的WebApplicationInitializer接口     * @param webAppInitializerClasses 感兴趣类的集合     * @param servletContext 我们应用的上下文对象     */</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onStartup</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Nullable</span> Set<span class="token operator">&lt;</span>Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">>></span> webAppInitializerClasses<span class="token punctuation">,</span> ServletContext servletContext<span class="token punctuation">)</span>            <span class="token keyword">throws</span> ServletException <span class="token punctuation">{</span>        List<span class="token operator">&lt;</span>WebApplicationInitializer<span class="token operator">></span> initializers <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//传入webAppInitializerClasses的所有子类</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>webAppInitializerClasses <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span>Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> waiClass <span class="token operator">:</span> webAppInitializerClasses<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">//不是接口，不是抽象类</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>waiClass<span class="token punctuation">.</span><span class="token function">isInterface</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>Modifier<span class="token punctuation">.</span><span class="token function">isAbstract</span><span class="token punctuation">(</span>waiClass<span class="token punctuation">.</span><span class="token function">getModifiers</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span>                        WebApplicationInitializer<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">isAssignableFrom</span><span class="token punctuation">(</span>waiClass<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">try</span> <span class="token punctuation">{</span>                        <span class="token comment" spellcheck="true">//通过反射调用创感兴趣类的实例，然后加入到initializers</span>                        initializers<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token punctuation">(</span>WebApplicationInitializer<span class="token punctuation">)</span>                                ReflectionUtils<span class="token punctuation">.</span><span class="token function">accessibleConstructor</span><span class="token punctuation">(</span>waiClass<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                    <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Throwable</span> ex<span class="token punctuation">)</span> <span class="token punctuation">{</span>                        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">ServletException</span><span class="token punctuation">(</span><span class="token string">"Failed to instantiate WebApplicationInitializer class"</span><span class="token punctuation">,</span> ex<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>initializers<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            servletContext<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"No Spring WebApplicationInitializer types detected on classpath"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        servletContext<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>initializers<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" Spring WebApplicationInitializers detected on classpath"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//若我们的WebApplicationInitializer的实现类 实现了Orderd接口或者是标注了@Order注解,会进行排序</span>        AnnotationAwareOrderComparator<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>initializers<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//依次循环调用我们的感兴趣的类的实例的onStartup方法</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>WebApplicationInitializer initializer <span class="token operator">:</span> initializers<span class="token punctuation">)</span> <span class="token punctuation">{</span>            initializer<span class="token punctuation">.</span><span class="token function">onStartup</span><span class="token punctuation">(</span>servletContext<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>从这发现他会调用我们的MyStarterInitializer中的onStartup()方法</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onStartup</span><span class="token punctuation">(</span>ServletContext servletContext<span class="token punctuation">)</span> <span class="token keyword">throws</span> ServletException <span class="token punctuation">{</span>   <span class="token comment" spellcheck="true">//实例化我们的spring的上下文，父容器</span>   <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onStartup</span><span class="token punctuation">(</span>servletContext<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//注册我们的DispatcherServlet 创建我们spring web 上下文对象</span>   <span class="token function">registerDispatcherServlet</span><span class="token punctuation">(</span>servletContext<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>进到super.onStartup发现调用了registerContextLoaderListener方法</p><h3 id="registerContextLoaderListener"><a href="#registerContextLoaderListener" class="headerlink" title="registerContextLoaderListener"></a>registerContextLoaderListener</h3><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * 注册我们上下文监听器对象 */</span><span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">registerContextLoaderListener</span><span class="token punctuation">(</span>ServletContext servletContext<span class="token punctuation">)</span> <span class="token punctuation">{</span>   <span class="token comment" spellcheck="true">/**    * 创建我们的根的上下文环境WebApplicationContext(AnnotationConfigWebApplicationContext)对象，但是该方在本类中没有被实现，留个了子类实现    * AbstractAnnotationConfigDispatcherServletInitializer实现    *    */</span>   WebApplicationContext rootAppContext <span class="token operator">=</span> <span class="token function">createRootApplicationContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//创建的对象WebApplicationContext不为空</span>   <span class="token keyword">if</span> <span class="token punctuation">(</span>rootAppContext <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">/**       * &lt;listener>       *       &lt;listener-class>org.springframework.web.context.ContextLoaderListener&lt;/listener-class>       *  &lt;/listener>       *       *  &lt;context-param>       *      &lt;param-name>contextConfigLocation&lt;/param-name>       *      &lt;param-value>/WEB-INF/app-context.xml&lt;/param-value>       *   &lt;/context-param>       * 创建一个监听器对象，容器启动完成后会回调listener的contextInitialized       */</span>      ContextLoaderListener listener <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ContextLoaderListener</span><span class="token punctuation">(</span>rootAppContext<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">/**       * 第一步:获取根应用的getRootApplicationContextInitializers()       * 第二步:把初始化器设置到监听器中       */</span>      listener<span class="token punctuation">.</span><span class="token function">setContextInitializers</span><span class="token punctuation">(</span><span class="token function">getRootApplicationContextInitializers</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">//把监听器加入到我们上下文中.</span>      servletContext<span class="token punctuation">.</span><span class="token function">addListener</span><span class="token punctuation">(</span>listener<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span>   <span class="token keyword">else</span> <span class="token punctuation">{</span>      logger<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">"No ContextLoaderListener registered, as "</span> <span class="token operator">+</span>            <span class="token string">"createRootApplicationContext() did not return an application context"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="registerDispatcherServlet方法"><a href="#registerDispatcherServlet方法" class="headerlink" title="registerDispatcherServlet方法"></a>registerDispatcherServlet方法</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">registerDispatcherServlet</span><span class="token punctuation">(</span>ServletContext servletContext<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//获取我们的DispatcherServlet的名称</span>    String servletName <span class="token operator">=</span> <span class="token function">getServletName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    Assert<span class="token punctuation">.</span><span class="token function">hasLength</span><span class="token punctuation">(</span>servletName<span class="token punctuation">,</span> <span class="token string">"getServletName() must not return null or empty"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//创建WebApplicationContext对象</span>    WebApplicationContext servletAppContext <span class="token operator">=</span> <span class="token function">createServletApplicationContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    Assert<span class="token punctuation">.</span><span class="token function">notNull</span><span class="token punctuation">(</span>servletAppContext<span class="token punctuation">,</span> <span class="token string">"createServletApplicationContext() must not return null"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**         * 创建我们的DispatcherServlet对象,所以tomcat会对DispatcherServlet进行生命周期管理         */</span>    FrameworkServlet dispatcherServlet <span class="token operator">=</span> <span class="token function">createDispatcherServlet</span><span class="token punctuation">(</span>servletAppContext<span class="token punctuation">)</span><span class="token punctuation">;</span>    Assert<span class="token punctuation">.</span><span class="token function">notNull</span><span class="token punctuation">(</span>dispatcherServlet<span class="token punctuation">,</span> <span class="token string">"createDispatcherServlet(WebApplicationContext) must not return null"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**         * 获取我们的ServletApplicationContextInitializers对象，然后把ServletApplicationContextInitializers         * 注册到我们的dispatcherServlet         */</span>    dispatcherServlet<span class="token punctuation">.</span><span class="token function">setContextInitializers</span><span class="token punctuation">(</span><span class="token function">getServletApplicationContextInitializers</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//注册我们的dispatcherServlet</span>    ServletRegistration<span class="token punctuation">.</span>Dynamic registration <span class="token operator">=</span> servletContext<span class="token punctuation">.</span><span class="token function">addServlet</span><span class="token punctuation">(</span>servletName<span class="token punctuation">,</span> dispatcherServlet<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>registration <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalStateException</span><span class="token punctuation">(</span><span class="token string">"Failed to register servlet with name '"</span> <span class="token operator">+</span> servletName <span class="token operator">+</span> <span class="token string">"'. "</span> <span class="token operator">+</span>                                        <span class="token string">"Check if there is another servlet registered under the same name."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//设置我们的dispatcherServlet的属性</span>    registration<span class="token punctuation">.</span><span class="token function">setLoadOnStartup</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    registration<span class="token punctuation">.</span><span class="token function">addMapping</span><span class="token punctuation">(</span><span class="token function">getServletMappings</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    registration<span class="token punctuation">.</span><span class="token function">setAsyncSupported</span><span class="token punctuation">(</span><span class="token function">isAsyncSupported</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    Filter<span class="token punctuation">[</span><span class="token punctuation">]</span> filters <span class="token operator">=</span> <span class="token function">getServletFilters</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>ObjectUtils<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span>filters<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>Filter filter <span class="token operator">:</span> filters<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">registerServletFilter</span><span class="token punctuation">(</span>servletContext<span class="token punctuation">,</span> filter<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token function">customizeRegistration</span><span class="token punctuation">(</span>registration<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>进到的ContextLoaderListener.contextInitialized发现调用initWebApplicationContext方法</p><h3 id="initWebApplicationContext方法"><a href="#initWebApplicationContext方法" class="headerlink" title="initWebApplicationContext方法"></a>initWebApplicationContext方法</h3><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/**  * 初始化我们的根容器的上下文对象  */</span><span class="token keyword">public</span> WebApplicationContext <span class="token function">initWebApplicationContext</span><span class="token punctuation">(</span>ServletContext servletContext<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>servletContext<span class="token punctuation">.</span><span class="token function">getAttribute</span><span class="token punctuation">(</span>WebApplicationContext<span class="token punctuation">.</span>ROOT_WEB_APPLICATION_CONTEXT_ATTRIBUTE<span class="token punctuation">)</span> <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalStateException</span><span class="token punctuation">(</span>            <span class="token string">"Cannot initialize context because there is already a root application context present - "</span> <span class="token operator">+</span>            <span class="token string">"check whether you have multiple ContextLoader* definitions in your web.xml!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    Log logger <span class="token operator">=</span> LogFactory<span class="token punctuation">.</span><span class="token function">getLog</span><span class="token punctuation">(</span>ContextLoader<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    servletContext<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"Initializing Spring root WebApplicationContext"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>logger<span class="token punctuation">.</span><span class="token function">isInfoEnabled</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        logger<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"Root WebApplicationContext: initialization started"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">long</span> startTime <span class="token operator">=</span> System<span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 在创建xml版本的时候context是空的 所以我们在这里需要在这里创建根容器对象</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>context <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 注意：由于xml版本中context为空，所以这个if逻辑是用来创建我们的 根容器对象</span>           <span class="token keyword">this</span><span class="token punctuation">.</span>context <span class="token operator">=</span> <span class="token function">createWebApplicationContext</span><span class="token punctuation">(</span>servletContext<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">/**          * 不为空，很明显我们，这个是注解版本进来的，在外面就已经传递          * 进来了context对象 AnnotationConfigWebApplicationContext,          * 判断我们的AnnotationConfigWebApplicationContext是不是ConfigurableWebApplicationContext类型的          */</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>context <span class="token keyword">instanceof</span> <span class="token class-name">ConfigurableWebApplicationContext</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//强制转化成ConfigurableWebApplicationContext</span>            ConfigurableWebApplicationContext cwac <span class="token operator">=</span> <span class="token punctuation">(</span>ConfigurableWebApplicationContext<span class="token punctuation">)</span> <span class="token keyword">this</span><span class="token punctuation">.</span>context<span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//判断ConfigurableWebApplicationContext 配置上下文版本的是不是激活了</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>cwac<span class="token punctuation">.</span><span class="token function">isActive</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">//没有激活</span>                <span class="token comment" spellcheck="true">//若此时ConfigurableWebApplicationContext对象的父容器为空</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>cwac<span class="token punctuation">.</span><span class="token function">getParent</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token comment" spellcheck="true">//为我们的Root Context加载我们的父容器</span>                    ApplicationContext parent <span class="token operator">=</span> <span class="token function">loadParentContext</span><span class="token punctuation">(</span>servletContext<span class="token punctuation">)</span><span class="token punctuation">;</span>                    cwac<span class="token punctuation">.</span><span class="token function">setParent</span><span class="token punctuation">(</span>parent<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token comment" spellcheck="true">//配置和刷新我们的根容器对象</span>                <span class="token function">configureAndRefreshWebApplicationContext</span><span class="token punctuation">(</span>cwac<span class="token punctuation">,</span> servletContext<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">/**          * 把我们的spring上下文保存到 应用上下文对象中          * 方便我们在Spring web 上下文对象实例化过程会从servletContext取出来          */</span>        servletContext<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span>WebApplicationContext<span class="token punctuation">.</span>ROOT_WEB_APPLICATION_CONTEXT_ATTRIBUTE<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>context<span class="token punctuation">)</span><span class="token punctuation">;</span>        ClassLoader ccl <span class="token operator">=</span> Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getContextClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>ccl <span class="token operator">==</span> ContextLoader<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            currentContext <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>context<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>ccl <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            currentContextPerThread<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>ccl<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>context<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>logger<span class="token punctuation">.</span><span class="token function">isDebugEnabled</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            logger<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">"Published root WebApplicationContext as ServletContext attribute with name ["</span> <span class="token operator">+</span>                         WebApplicationContext<span class="token punctuation">.</span>ROOT_WEB_APPLICATION_CONTEXT_ATTRIBUTE <span class="token operator">+</span> <span class="token string">"]"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>logger<span class="token punctuation">.</span><span class="token function">isInfoEnabled</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">long</span> elapsedTime <span class="token operator">=</span> System<span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> startTime<span class="token punctuation">;</span>            logger<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"Root WebApplicationContext: initialization completed in "</span> <span class="token operator">+</span> elapsedTime <span class="token operator">+</span> <span class="token string">" ms"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>context<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">RuntimeException</span> ex<span class="token punctuation">)</span> <span class="token punctuation">{</span>        logger<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"Context initialization failed"</span><span class="token punctuation">,</span> ex<span class="token punctuation">)</span><span class="token punctuation">;</span>        servletContext<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span>WebApplicationContext<span class="token punctuation">.</span>ROOT_WEB_APPLICATION_CONTEXT_ATTRIBUTE<span class="token punctuation">,</span> ex<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">throw</span> ex<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Error</span> err<span class="token punctuation">)</span> <span class="token punctuation">{</span>        logger<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"Context initialization failed"</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span><span class="token punctuation">;</span>        servletContext<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span>WebApplicationContext<span class="token punctuation">.</span>ROOT_WEB_APPLICATION_CONTEXT_ATTRIBUTE<span class="token punctuation">,</span> err<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">throw</span> err<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>listener调用完毕后，容器会回调DispatcherServlet-&gt;init-&gt;FrameworkServlet.initServletBean-&gt;initWebApplicationContext</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 在该方法中,我们创建了Spring web应用的上下文对象</span><span class="token keyword">protected</span> WebApplicationContext <span class="token function">initWebApplicationContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>   <span class="token comment" spellcheck="true">/**    * 从我们的ServletContext对象中获取到Spring root 上下文对象    * 我们在Spring 根容器上下文创建成功后放入到ServletContext对象中    */</span>   WebApplicationContext rootContext <span class="token operator">=</span>         WebApplicationContextUtils<span class="token punctuation">.</span><span class="token function">getWebApplicationContext</span><span class="token punctuation">(</span><span class="token function">getServletContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   WebApplicationContext wac <span class="token operator">=</span> null<span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">/**    * webApplicationContext对象是在创建DispatcherServlet对象的时候，存放进来的一个    * springmvc web的上下文对象    */</span>   <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>webApplicationContext <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>      wac <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>webApplicationContext<span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">//判断webApplicationContext不为空</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>wac <span class="token keyword">instanceof</span> <span class="token class-name">ConfigurableWebApplicationContext</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>         ConfigurableWebApplicationContext cwac <span class="token operator">=</span> <span class="token punctuation">(</span>ConfigurableWebApplicationContext<span class="token punctuation">)</span> wac<span class="token punctuation">;</span>         <span class="token comment" spellcheck="true">//判断是否激活</span>         <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>cwac<span class="token punctuation">.</span><span class="token function">isActive</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//设置父的上下文对象</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>cwac<span class="token punctuation">.</span><span class="token function">getParent</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>               <span class="token comment" spellcheck="true">// The context instance was injected without an explicit parent -> set</span>               <span class="token comment" spellcheck="true">// the root application context (if any; may be null) as the parent</span>               cwac<span class="token punctuation">.</span><span class="token function">setParent</span><span class="token punctuation">(</span>rootContext<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">/**             * 作为SpringMvc 上下文刷新             */</span>            <span class="token function">configureAndRefreshWebApplicationContext</span><span class="token punctuation">(</span>cwac<span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token punctuation">}</span>      <span class="token punctuation">}</span>   <span class="token punctuation">}</span>   <span class="token keyword">if</span> <span class="token punctuation">(</span>wac <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// No context instance was injected at construction time -> see if one</span>      <span class="token comment" spellcheck="true">// has been registered in the servlet context. If one exists, it is assumed</span>      <span class="token comment" spellcheck="true">// that the parent context (if any) has already been set and that the</span>      <span class="token comment" spellcheck="true">// user has performed any initialization such as setting the context id</span>      wac <span class="token operator">=</span> <span class="token function">findWebApplicationContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span>   <span class="token keyword">if</span> <span class="token punctuation">(</span>wac <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// No context instance is defined for this servlet -> create a local one</span>      wac <span class="token operator">=</span> <span class="token function">createWebApplicationContext</span><span class="token punctuation">(</span>rootContext<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span>   <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span>refreshEventReceived<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// Either the context is not a ConfigurableApplicationContext with refresh</span>      <span class="token comment" spellcheck="true">// support or the context injected at construction time had already been</span>      <span class="token comment" spellcheck="true">// refreshed -> trigger initial onRefresh manually here.</span>      <span class="token keyword">synchronized</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>onRefreshMonitor<span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token comment" spellcheck="true">// 这里初始化了springMVC组件</span>         <span class="token function">onRefresh</span><span class="token punctuation">(</span>wac<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>   <span class="token punctuation">}</span>   <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>publishContext<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// Publish the context as a servlet context attribute.</span>      String attrName <span class="token operator">=</span> <span class="token function">getServletContextAttributeName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">getServletContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span>attrName<span class="token punctuation">,</span> wac<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>logger<span class="token punctuation">.</span><span class="token function">isDebugEnabled</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token keyword">this</span><span class="token punctuation">.</span>logger<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">"Published WebApplicationContext of servlet '"</span> <span class="token operator">+</span> <span class="token function">getServletName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span>               <span class="token string">"' as ServletContext attribute with name ["</span> <span class="token operator">+</span> attrName <span class="token operator">+</span> <span class="token string">"]"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>   <span class="token punctuation">}</span>   <span class="token keyword">return</span> wac<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>至此父子容器均启动完毕</p><h3 id="onRefresh方法"><a href="#onRefresh方法" class="headerlink" title="onRefresh方法"></a>onRefresh方法</h3><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Override</span><span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">onRefresh</span><span class="token punctuation">(</span>ApplicationContext context<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">initStrategies</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">initStrategies</span><span class="token punctuation">(</span>ApplicationContext context<span class="token punctuation">)</span> <span class="token punctuation">{</span>   <span class="token comment" spellcheck="true">//初始化我们web上下文对象的 用于文件上传下载的解析器对象</span>   <span class="token function">initMultipartResolver</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//初始化我们web上下文对象用于处理国际化资源的</span>   <span class="token function">initLocaleResolver</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//主题解析器对象初始化</span>   <span class="token function">initThemeResolver</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//初始化我们的HandlerMapping</span>   <span class="token function">initHandlerMappings</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//实例化我们的HandlerAdapters</span>   <span class="token function">initHandlerAdapters</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//实例化我们处理器异常解析器对象</span>   <span class="token function">initHandlerExceptionResolvers</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token function">initRequestToViewNameTranslator</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//给DispatcherSerlvet的ViewResolvers处理器</span>   <span class="token function">initViewResolvers</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token function">initFlashMapManager</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h2 id="springMVC流程源码分析"><a href="#springMVC流程源码分析" class="headerlink" title="springMVC流程源码分析"></a>springMVC流程源码分析</h2><p>在启动过程中我们的前端控制器DispatcherServlet已经实例化完毕，然后客户端发送一个请求到服务端我们会出现什么情况呢？</p><p>一般而言一个servlet请求会根据请求类型走doGet，doPost等方法，</p><p>我们发现DispatcherServlet的doPost方法还是doGet方法都会调processRequest然后processRequest会调用doService。所以所有的请求解析的步骤都在doService里面进行，我们看一下doService做了什么</p><h3 id="doService方法"><a href="#doService方法" class="headerlink" title="doService方法"></a>doService方法</h3><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Override</span><span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doService</span><span class="token punctuation">(</span>HttpServletRequest request<span class="token punctuation">,</span> HttpServletResponse response<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>   <span class="token keyword">if</span> <span class="token punctuation">(</span>logger<span class="token punctuation">.</span><span class="token function">isDebugEnabled</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      String resumed <span class="token operator">=</span> WebAsyncUtils<span class="token punctuation">.</span><span class="token function">getAsyncManager</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">hasConcurrentResult</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token string">" resumed"</span> <span class="token operator">:</span> <span class="token string">""</span><span class="token punctuation">;</span>      logger<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">"DispatcherServlet with name '"</span> <span class="token operator">+</span> <span class="token function">getServletName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"'"</span> <span class="token operator">+</span> resumed <span class="token operator">+</span>            <span class="token string">" processing "</span> <span class="token operator">+</span> request<span class="token punctuation">.</span><span class="token function">getMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" request for ["</span> <span class="token operator">+</span> <span class="token function">getRequestUri</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"]"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span>   <span class="token comment" spellcheck="true">// Keep a snapshot of the request attributes in case of an include,</span>   <span class="token comment" spellcheck="true">// to be able to restore the original attributes after the include.</span>   Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Object<span class="token operator">></span> attributesSnapshot <span class="token operator">=</span> null<span class="token punctuation">;</span>   <span class="token keyword">if</span> <span class="token punctuation">(</span>WebUtils<span class="token punctuation">.</span><span class="token function">isIncludeRequest</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      attributesSnapshot <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      Enumeration<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> attrNames <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getAttributeNames</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">while</span> <span class="token punctuation">(</span>attrNames<span class="token punctuation">.</span><span class="token function">hasMoreElements</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>         String attrName <span class="token operator">=</span> <span class="token punctuation">(</span>String<span class="token punctuation">)</span> attrNames<span class="token punctuation">.</span><span class="token function">nextElement</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>cleanupAfterInclude <span class="token operator">||</span> attrName<span class="token punctuation">.</span><span class="token function">startsWith</span><span class="token punctuation">(</span>DEFAULT_STRATEGIES_PREFIX<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            attributesSnapshot<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>attrName<span class="token punctuation">,</span> request<span class="token punctuation">.</span><span class="token function">getAttribute</span><span class="token punctuation">(</span>attrName<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token punctuation">}</span>      <span class="token punctuation">}</span>   <span class="token punctuation">}</span>   <span class="token comment" spellcheck="true">//把Spring上下文对象存放到Request的attribute中</span>   request<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span>WEB_APPLICATION_CONTEXT_ATTRIBUTE<span class="token punctuation">,</span> <span class="token function">getWebApplicationContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//把Spring国际化支持解析器对象存放到Request的attribute中</span>   request<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span>LOCALE_RESOLVER_ATTRIBUTE<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>localeResolver<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//主题解析器对象</span>   request<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span>THEME_RESOLVER_ATTRIBUTE<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>themeResolver<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//主题对象</span>   request<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span>THEME_SOURCE_ATTRIBUTE<span class="token punctuation">,</span> <span class="token function">getThemeSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>flashMapManager <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>      FlashMap inputFlashMap <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>flashMapManager<span class="token punctuation">.</span><span class="token function">retrieveAndUpdate</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> response<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>inputFlashMap <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>         request<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span>INPUT_FLASH_MAP_ATTRIBUTE<span class="token punctuation">,</span> Collections<span class="token punctuation">.</span><span class="token function">unmodifiableMap</span><span class="token punctuation">(</span>inputFlashMap<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      request<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span>OUTPUT_FLASH_MAP_ATTRIBUTE<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">FlashMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      request<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span>FLASH_MAP_MANAGER_ATTRIBUTE<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>flashMapManager<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span>   <span class="token keyword">try</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">//真正的进行处理转发</span>      <span class="token function">doDispatch</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> response<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span>   <span class="token keyword">finally</span> <span class="token punctuation">{</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>WebAsyncUtils<span class="token punctuation">.</span><span class="token function">getAsyncManager</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isConcurrentHandlingStarted</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token comment" spellcheck="true">// Restore the original attribute snapshot, in case of an include.</span>         <span class="token keyword">if</span> <span class="token punctuation">(</span>attributesSnapshot <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">restoreAttributesAfterInclude</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> attributesSnapshot<span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token punctuation">}</span>      <span class="token punctuation">}</span>   <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="doDispatch方法"><a href="#doDispatch方法" class="headerlink" title="doDispatch方法"></a>doDispatch方法</h3><p>这个方法是找到对应Controller去调用</p><pre class=" language-java"><code class="language-java"><span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doDispatch</span><span class="token punctuation">(</span>HttpServletRequest request<span class="token punctuation">,</span> HttpServletResponse response<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>   HttpServletRequest processedRequest <span class="token operator">=</span> request<span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">// 声明一个处理器执行链条</span>   HandlerExecutionChain mappedHandler <span class="token operator">=</span> null<span class="token punctuation">;</span>   <span class="token keyword">boolean</span> multipartRequestParsed <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>   WebAsyncManager asyncManager <span class="token operator">=</span> WebAsyncUtils<span class="token punctuation">.</span><span class="token function">getAsyncManager</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token keyword">try</span> <span class="token punctuation">{</span>      ModelAndView mv <span class="token operator">=</span> null<span class="token punctuation">;</span>      Exception dispatchException <span class="token operator">=</span> null<span class="token punctuation">;</span>      <span class="token keyword">try</span> <span class="token punctuation">{</span>         <span class="token comment" spellcheck="true">//判断我们的请求是不是文件上传的请求</span>         processedRequest <span class="token operator">=</span> <span class="token function">checkMultipart</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment" spellcheck="true">/**          * 判断是不是我们文件上传的请求 若是的话返回的processedRequest是MultipartHttpServletRequest          * 那么显然和原始的request对象 不是同一个对象,那么就multipartRequestParsed为true(表示文件上传下载)          */</span>         multipartRequestParsed <span class="token operator">=</span> <span class="token punctuation">(</span>processedRequest <span class="token operator">!=</span> request<span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment" spellcheck="true">/**          * 上面所写的springMVC的【第一步】，构建处理器执行链包含Handler（请求对应Controller）和拦截器          * 从我们当前的请求中推断出我们的HandlerExecuteChain处理器执行链对象          * 这个方法很重要          */</span>         mappedHandler <span class="token operator">=</span> <span class="token function">getHandler</span><span class="token punctuation">(</span>processedRequest<span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token keyword">if</span> <span class="token punctuation">(</span>mappedHandler <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">noHandlerFound</span><span class="token punctuation">(</span>processedRequest<span class="token punctuation">,</span> response<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>         <span class="token punctuation">}</span>         <span class="token comment" spellcheck="true">/**          * 上面所写的springMVC的【第二步】，找适配器          * 根据Handler选择我们的HandlerAdpater对象          * 默认是RequestMappingHandlerAdapter对象          */</span>         HandlerAdapter ha <span class="token operator">=</span> <span class="token function">getHandlerAdapter</span><span class="token punctuation">(</span>mappedHandler<span class="token punctuation">.</span><span class="token function">getHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment" spellcheck="true">// Process last-modified header, if supported by the handler.</span>         String method <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token keyword">boolean</span> isGet <span class="token operator">=</span> <span class="token string">"GET"</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>method<span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token keyword">if</span> <span class="token punctuation">(</span>isGet <span class="token operator">||</span> <span class="token string">"HEAD"</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>method<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">long</span> lastModified <span class="token operator">=</span> ha<span class="token punctuation">.</span><span class="token function">getLastModified</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> mappedHandler<span class="token punctuation">.</span><span class="token function">getHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>logger<span class="token punctuation">.</span><span class="token function">isDebugEnabled</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>               logger<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">"Last-Modified value for ["</span> <span class="token operator">+</span> <span class="token function">getRequestUri</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"] is: "</span> <span class="token operator">+</span> lastModified<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ServletWebRequest</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> response<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">checkNotModified</span><span class="token punctuation">(</span>lastModified<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> isGet<span class="token punctuation">)</span> <span class="token punctuation">{</span>               <span class="token keyword">return</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>         <span class="token punctuation">}</span>         <span class="token comment" spellcheck="true">//触发我们的拦截器的pre方法,返回false,就不进行处理了</span>         <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>mappedHandler<span class="token punctuation">.</span><span class="token function">applyPreHandle</span><span class="token punctuation">(</span>processedRequest<span class="token punctuation">,</span> response<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>         <span class="token punctuation">}</span>         <span class="token comment" spellcheck="true">/**          * 上面所写的springMVC的【第三步】，调用目标方法          * 通过我们的适配器真正的调用我们的目标方法          * RequestMappingHandlerAdapter.handle===>          * AbstractHandlerMethodAdapter#handle(HttpServletRequest, HttpServletResponse,Object)          */</span>         mv <span class="token operator">=</span> ha<span class="token punctuation">.</span><span class="token function">handle</span><span class="token punctuation">(</span>processedRequest<span class="token punctuation">,</span> response<span class="token punctuation">,</span> mappedHandler<span class="token punctuation">.</span><span class="token function">getHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token keyword">if</span> <span class="token punctuation">(</span>asyncManager<span class="token punctuation">.</span><span class="token function">isConcurrentHandlingStarted</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>         <span class="token punctuation">}</span>         <span class="token function">applyDefaultViewName</span><span class="token punctuation">(</span>processedRequest<span class="token punctuation">,</span> mv<span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment" spellcheck="true">/**          * 触发我们拦截器链的post方法          */</span>         mappedHandler<span class="token punctuation">.</span><span class="token function">applyPostHandle</span><span class="token punctuation">(</span>processedRequest<span class="token punctuation">,</span> response<span class="token punctuation">,</span> mv<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> ex<span class="token punctuation">)</span> <span class="token punctuation">{</span>         dispatchException <span class="token operator">=</span> ex<span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Throwable</span> err<span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token comment" spellcheck="true">// As of 4.3, we're processing Errors thrown from handler methods as well,</span>         <span class="token comment" spellcheck="true">// making them available for @ExceptionHandler methods and other scenarios.</span>         dispatchException <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">NestedServletException</span><span class="token punctuation">(</span><span class="token string">"Handler dispatch failed"</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token comment" spellcheck="true">/**       * 上面所写的springMVC的【第四步】，找到视图解析器并解析视图并渲染视图       * 处理目标方法返回的结果,主要就是渲染视图       */</span>      <span class="token function">processDispatchResult</span><span class="token punctuation">(</span>processedRequest<span class="token punctuation">,</span> response<span class="token punctuation">,</span> mappedHandler<span class="token punctuation">,</span> mv<span class="token punctuation">,</span> dispatchException<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span>   <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> ex<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">/**       * 抛出异常:处理我们拦截器的afterCompletion方法       */</span>      <span class="token function">triggerAfterCompletion</span><span class="token punctuation">(</span>processedRequest<span class="token punctuation">,</span> response<span class="token punctuation">,</span> mappedHandler<span class="token punctuation">,</span> ex<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span>   <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Throwable</span> err<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">/**       * 抛出异常:处理我们拦截器的afterCompletion方法       */</span>      <span class="token function">triggerAfterCompletion</span><span class="token punctuation">(</span>processedRequest<span class="token punctuation">,</span> response<span class="token punctuation">,</span> mappedHandler<span class="token punctuation">,</span>            <span class="token keyword">new</span> <span class="token class-name">NestedServletException</span><span class="token punctuation">(</span><span class="token string">"Handler processing failed"</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span>   <span class="token keyword">finally</span> <span class="token punctuation">{</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>asyncManager<span class="token punctuation">.</span><span class="token function">isConcurrentHandlingStarted</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token comment" spellcheck="true">// Instead of postHandle and afterCompletion</span>         <span class="token keyword">if</span> <span class="token punctuation">(</span>mappedHandler <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            mappedHandler<span class="token punctuation">.</span><span class="token function">applyAfterConcurrentHandlingStarted</span><span class="token punctuation">(</span>processedRequest<span class="token punctuation">,</span> response<span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token punctuation">}</span>      <span class="token punctuation">}</span>      <span class="token keyword">else</span> <span class="token punctuation">{</span>         <span class="token comment" spellcheck="true">/**          * 清楚文件上传时候生成的临时文件          */</span>         <span class="token keyword">if</span> <span class="token punctuation">(</span>multipartRequestParsed<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">cleanupMultipart</span><span class="token punctuation">(</span>processedRequest<span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token punctuation">}</span>      <span class="token punctuation">}</span>   <span class="token punctuation">}</span><span class="token punctuation">}</span>     </code></pre><h3 id="getHandler方法"><a href="#getHandler方法" class="headerlink" title="getHandler方法"></a>getHandler方法</h3><p>从请求中推断出处理器执行链对象是什么</p><pre class=" language-java"><code class="language-java"><span class="token keyword">protected</span> HandlerExecutionChain <span class="token function">getHandler</span><span class="token punctuation">(</span>HttpServletRequest request<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>   <span class="token comment" spellcheck="true">/**    * 判断我们spring web容器中配置的所有的handlerMapping集合对象    * 在本类中的initHandlerMappings()方法为我们的DispatcherServlet类    * 初始化赋值我们的handlerMappings集合    */</span>   <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>handlerMappings <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">/**       * 循环遍历我们所有的handlerMappings对象,依次调用我们的handlerMappings的getHandler(request)       * 来获取我们的处理器执行链对象,有且有一个handlerMapping对象返回了我们的HandlerExecutionChain       * 那么就不会走下一个逻辑，而是直接返回。       */</span>      <span class="token keyword">for</span> <span class="token punctuation">(</span>HandlerMapping hm <span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>handlerMappings<span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token keyword">if</span> <span class="token punctuation">(</span>logger<span class="token punctuation">.</span><span class="token function">isTraceEnabled</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            logger<span class="token punctuation">.</span><span class="token function">trace</span><span class="token punctuation">(</span>                  <span class="token string">"Testing handler map ["</span> <span class="token operator">+</span> hm <span class="token operator">+</span> <span class="token string">"] in DispatcherServlet with name '"</span> <span class="token operator">+</span> <span class="token function">getServletName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"'"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token punctuation">}</span>         <span class="token comment" spellcheck="true">/**          * 依次循环调用我们的HandlerMapping的getHandler方法进行获取HandlerExecutionChain          * 但是会调用我们所有的HandlerMapping的父类的          * AbstractHandlerMapping#getHandler(request)          */</span>         HandlerExecutionChain handler <span class="token operator">=</span> hm<span class="token punctuation">.</span><span class="token function">getHandler</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token keyword">if</span> <span class="token punctuation">(</span>handler <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> handler<span class="token punctuation">;</span>         <span class="token punctuation">}</span>      <span class="token punctuation">}</span>   <span class="token punctuation">}</span>   <span class="token comment" spellcheck="true">/**    *通过所有的handlerMapping 对象 还没有获取到对应的HandlerExecutionChain,    * 那么就认为该次请求无法匹配    */</span>   <span class="token keyword">return</span> null<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>AbstractHandlerMapping.getHandler方法</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">final</span> HandlerExecutionChain <span class="token function">getHandler</span><span class="token punctuation">(</span>HttpServletRequest request<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>   <span class="token comment" spellcheck="true">/**    * 1:找到我们的处理器对象    * 子类的AbstractHandlerMapping的子类RequestMappingHanlderMapping的生命回调接口InitializingBean中    * 把我们的@RequestMapping注解信息和方法映射对象保存到我们的路径映射注册表中    */</span>   Object handler <span class="token operator">=</span> <span class="token function">getHandlerInternal</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//判断上一步的handler是否为空</span>   <span class="token keyword">if</span> <span class="token punctuation">(</span>handler <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">//返回默认的handler</span>      handler <span class="token operator">=</span> <span class="token function">getDefaultHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span>   <span class="token keyword">if</span> <span class="token punctuation">(</span>handler <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> null<span class="token punctuation">;</span>   <span class="token punctuation">}</span>   <span class="token comment" spellcheck="true">//若我们的解析出来的handler是String 那么就要通过Web 容器创建我么你的handler对象</span>   <span class="token keyword">if</span> <span class="token punctuation">(</span>handler <span class="token keyword">instanceof</span> <span class="token class-name">String</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      String handlerName <span class="token operator">=</span> <span class="token punctuation">(</span>String<span class="token punctuation">)</span> handler<span class="token punctuation">;</span>      handler <span class="token operator">=</span> <span class="token function">obtainApplicationContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span>handlerName<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span>   <span class="token comment" spellcheck="true">// 根据我们的处理器来构建我们的处理器执行链对象</span>   HandlerExecutionChain executionChain <span class="token operator">=</span> <span class="token function">getHandlerExecutionChain</span><span class="token punctuation">(</span>handler<span class="token punctuation">,</span> request<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//处理跨越的  暂时不看</span>   <span class="token keyword">if</span> <span class="token punctuation">(</span>CorsUtils<span class="token punctuation">.</span><span class="token function">isCorsRequest</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      CorsConfiguration globalConfig <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>globalCorsConfigSource<span class="token punctuation">.</span><span class="token function">getCorsConfiguration</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">;</span>      CorsConfiguration handlerConfig <span class="token operator">=</span> <span class="token function">getCorsConfiguration</span><span class="token punctuation">(</span>handler<span class="token punctuation">,</span> request<span class="token punctuation">)</span><span class="token punctuation">;</span>      CorsConfiguration config <span class="token operator">=</span> <span class="token punctuation">(</span>globalConfig <span class="token operator">!=</span> null <span class="token operator">?</span> globalConfig<span class="token punctuation">.</span><span class="token function">combine</span><span class="token punctuation">(</span>handlerConfig<span class="token punctuation">)</span> <span class="token operator">:</span> handlerConfig<span class="token punctuation">)</span><span class="token punctuation">;</span>      executionChain <span class="token operator">=</span> <span class="token function">getCorsHandlerExecutionChain</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> executionChain<span class="token punctuation">,</span> config<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span>   <span class="token keyword">return</span> executionChain<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>getHandlerInternal方法</p><p>从请求中拿到路径名称，从映射注册表中匹配到Handler，找到返回</p><pre class=" language-java"><code class="language-java"><span class="token keyword">protected</span> HandlerMethod <span class="token function">getHandlerInternal</span><span class="token punctuation">(</span>HttpServletRequest request<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>   <span class="token comment" spellcheck="true">// 获取UrlPathHelper对象，用于来解析从们的request中解析出请求映射路径</span>   String lookupPath <span class="token operator">=</span> <span class="token function">getUrlPathHelper</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getLookupPathForRequest</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token keyword">if</span> <span class="token punctuation">(</span>logger<span class="token punctuation">.</span><span class="token function">isDebugEnabled</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      logger<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">"Looking up handler method for path "</span> <span class="token operator">+</span> lookupPath<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span>   <span class="token comment" spellcheck="true">//通过映射注册表获取lock对象</span>   <span class="token keyword">this</span><span class="token punctuation">.</span>mappingRegistry<span class="token punctuation">.</span><span class="token function">acquireReadLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token keyword">try</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// 通过我们从Request对象中解析出来的lookupPath 然后通过lookupPath获取HandlerMethod对象</span>      HandlerMethod handlerMethod <span class="token operator">=</span> <span class="token function">lookupHandlerMethod</span><span class="token punctuation">(</span>lookupPath<span class="token punctuation">,</span> request<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>logger<span class="token punctuation">.</span><span class="token function">isDebugEnabled</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token keyword">if</span> <span class="token punctuation">(</span>handlerMethod <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            logger<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">"Returning handler method ["</span> <span class="token operator">+</span> handlerMethod <span class="token operator">+</span> <span class="token string">"]"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token punctuation">}</span>         <span class="token keyword">else</span> <span class="token punctuation">{</span>            logger<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">"Did not find handler method for ["</span> <span class="token operator">+</span> lookupPath <span class="token operator">+</span> <span class="token string">"]"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token punctuation">}</span>      <span class="token punctuation">}</span>      <span class="token keyword">return</span> <span class="token punctuation">(</span>handlerMethod <span class="token operator">!=</span> null <span class="token operator">?</span> handlerMethod<span class="token punctuation">.</span><span class="token function">createWithResolvedBean</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">:</span> null<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span>   <span class="token keyword">finally</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">//释放锁对象</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>mappingRegistry<span class="token punctuation">.</span><span class="token function">releaseReadLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>getHandlerExecutionChain方法</p><p>构建处理器执行链</p><pre class=" language-java"><code class="language-java"><span class="token keyword">protected</span> HandlerExecutionChain <span class="token function">getHandlerExecutionChain</span><span class="token punctuation">(</span>Object handler<span class="token punctuation">,</span> HttpServletRequest request<span class="token punctuation">)</span> <span class="token punctuation">{</span>   <span class="token comment" spellcheck="true">//创建我们处理器执行链对象</span>   HandlerExecutionChain chain <span class="token operator">=</span> <span class="token punctuation">(</span>handler <span class="token keyword">instanceof</span> <span class="token class-name">HandlerExecutionChain</span> <span class="token operator">?</span>         <span class="token punctuation">(</span>HandlerExecutionChain<span class="token punctuation">)</span> handler <span class="token operator">:</span> <span class="token keyword">new</span> <span class="token class-name">HandlerExecutionChain</span><span class="token punctuation">(</span>handler<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//从我们的请求中获取我们的请求映射路径</span>   String lookupPath <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>urlPathHelper<span class="token punctuation">.</span><span class="token function">getLookupPathForRequest</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//循环获取我们的所有的拦截器对象</span>   <span class="token keyword">for</span> <span class="token punctuation">(</span>HandlerInterceptor interceptor <span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>adaptedInterceptors<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">//判断拦截器对象是不是实现  HandlerInterceptor</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>interceptor <span class="token keyword">instanceof</span> <span class="token class-name">MappedInterceptor</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>         MappedInterceptor mappedInterceptor <span class="token operator">=</span> <span class="token punctuation">(</span>MappedInterceptor<span class="token punctuation">)</span> interceptor<span class="token punctuation">;</span>         <span class="token comment" spellcheck="true">//通过路径匹配 看该拦截器是否会拦截本次请求路径</span>         <span class="token keyword">if</span> <span class="token punctuation">(</span>mappedInterceptor<span class="token punctuation">.</span><span class="token function">matches</span><span class="token punctuation">(</span>lookupPath<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>pathMatcher<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            chain<span class="token punctuation">.</span><span class="token function">addInterceptor</span><span class="token punctuation">(</span>mappedInterceptor<span class="token punctuation">.</span><span class="token function">getInterceptor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token punctuation">}</span>      <span class="token punctuation">}</span>      <span class="token keyword">else</span> <span class="token punctuation">{</span>         chain<span class="token punctuation">.</span><span class="token function">addInterceptor</span><span class="token punctuation">(</span>interceptor<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>   <span class="token punctuation">}</span>   <span class="token comment" spellcheck="true">//返回我们的拦截器链执行器对象</span>   <span class="token keyword">return</span> chain<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h3 id="handle方法"><a href="#handle方法" class="headerlink" title="handle方法"></a>handle方法</h3><p>通过找到的适配器调用处理器执行链中Hadler（Controller）方法，我这里用的是注解@Controller所以它调用的时候会选择RequestMappingHandlerAdapter适配器。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> ModelAndView <span class="token function">handle</span><span class="token punctuation">(</span>HttpServletRequest request<span class="token punctuation">,</span> HttpServletResponse response<span class="token punctuation">,</span> Object handler<span class="token punctuation">)</span>      <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>   <span class="token punctuation">(</span><span class="token punctuation">(</span>HttpRequestHandler<span class="token punctuation">)</span> handler<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">handleRequest</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> response<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token keyword">return</span> null<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>我们一直跟进去发现到了AbstractHandlerMethodAdapter.handleInternal方法</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Override</span><span class="token keyword">protected</span> ModelAndView <span class="token function">handleInternal</span><span class="token punctuation">(</span>HttpServletRequest request<span class="token punctuation">,</span>      HttpServletResponse response<span class="token punctuation">,</span> HandlerMethod handlerMethod<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>   ModelAndView mav<span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//检查我们的请求对象</span>   <span class="token function">checkRequest</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">/**    * 判断当前是否需要支持在同一个session中只能线性地处理请求    * 因为锁是通过 synchronized 是 JVM 进程级，所以在分布式环境下，    * 无法达到同步相同 Session 的功能。默认情况下，synchronizeOnSession 为 false    */</span>   <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>synchronizeOnSession<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// 获取当前请求的session对象</span>      HttpSession session <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getSession</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>session <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token comment" spellcheck="true">// 为当前session生成一个唯一的可以用于锁定的key</span>         Object mutex <span class="token operator">=</span> WebUtils<span class="token punctuation">.</span><span class="token function">getSessionMutex</span><span class="token punctuation">(</span>session<span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>mutex<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 对HandlerMethod进行参数等的适配处理，并调用目标handler</span>            mav <span class="token operator">=</span> <span class="token function">invokeHandlerMethod</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> response<span class="token punctuation">,</span> handlerMethod<span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token punctuation">}</span>      <span class="token punctuation">}</span>      <span class="token keyword">else</span> <span class="token punctuation">{</span>         <span class="token comment" spellcheck="true">// 如果当前不存在session，则直接对HandlerMethod进行适配</span>         mav <span class="token operator">=</span> <span class="token function">invokeHandlerMethod</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> response<span class="token punctuation">,</span> handlerMethod<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>   <span class="token punctuation">}</span>   <span class="token keyword">else</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// 如果当前不需要对session进行同步处理，则直接对HandlerMethod进行适配</span>      mav <span class="token operator">=</span> <span class="token function">invokeHandlerMethod</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> response<span class="token punctuation">,</span> handlerMethod<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span>   <span class="token comment" spellcheck="true">//判断当前请求头中是否包含Cache-Control请求头，如果不包含，则对当前response进行处理</span>   <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>response<span class="token punctuation">.</span><span class="token function">containsHeader</span><span class="token punctuation">(</span>HEADER_CACHE_CONTROL<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// 如果当前SessionAttribute中存在配置的attributes，则为其设置过期时间。</span>      <span class="token comment" spellcheck="true">// 这里SessionAttribute主要是通过@SessionAttribute注解生成的</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">getSessionAttributesHandler</span><span class="token punctuation">(</span>handlerMethod<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">hasSessionAttributes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token function">applyCacheSeconds</span><span class="token punctuation">(</span>response<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>cacheSecondsForSessionAttributeHandlers<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token keyword">else</span> <span class="token punctuation">{</span>         <span class="token comment" spellcheck="true">// 如果当前不存在SessionAttributes，则判断当前是否存在Cache-Control设置，</span>         <span class="token comment" spellcheck="true">// 如果存在，则按照该设置进行response处理，如果不存在，则设置response中的</span>         <span class="token comment" spellcheck="true">// Cache的过期时间为-1，即立即失效</span>         <span class="token function">prepareResponse</span><span class="token punctuation">(</span>response<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>   <span class="token punctuation">}</span>   <span class="token keyword">return</span> mav<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h3 id="processDispatchResult方法"><a href="#processDispatchResult方法" class="headerlink" title="processDispatchResult方法"></a>processDispatchResult方法</h3><p>找到视图解析器并解析视图并渲染视图</p><pre class=" language-java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">processDispatchResult</span><span class="token punctuation">(</span>HttpServletRequest request<span class="token punctuation">,</span> HttpServletResponse response<span class="token punctuation">,</span>      <span class="token annotation punctuation">@Nullable</span> HandlerExecutionChain mappedHandler<span class="token punctuation">,</span> <span class="token annotation punctuation">@Nullable</span> ModelAndView mv<span class="token punctuation">,</span>      <span class="token annotation punctuation">@Nullable</span> Exception exception<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>   <span class="token keyword">boolean</span> errorView <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//异常页面处理</span>   <span class="token keyword">if</span> <span class="token punctuation">(</span>exception <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>exception <span class="token keyword">instanceof</span> <span class="token class-name">ModelAndViewDefiningException</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>         logger<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">"ModelAndViewDefiningException encountered"</span><span class="token punctuation">,</span> exception<span class="token punctuation">)</span><span class="token punctuation">;</span>         mv <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>ModelAndViewDefiningException<span class="token punctuation">)</span> exception<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getModelAndView</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token keyword">else</span> <span class="token punctuation">{</span>         Object handler <span class="token operator">=</span> <span class="token punctuation">(</span>mappedHandler <span class="token operator">!=</span> null <span class="token operator">?</span> mappedHandler<span class="token punctuation">.</span><span class="token function">getHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">:</span> null<span class="token punctuation">)</span><span class="token punctuation">;</span>         mv <span class="token operator">=</span> <span class="token function">processHandlerException</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> response<span class="token punctuation">,</span> handler<span class="token punctuation">,</span> exception<span class="token punctuation">)</span><span class="token punctuation">;</span>         errorView <span class="token operator">=</span> <span class="token punctuation">(</span>mv <span class="token operator">!=</span> null<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>   <span class="token punctuation">}</span>   <span class="token comment" spellcheck="true">//渲染我们的视图</span>   <span class="token keyword">if</span> <span class="token punctuation">(</span>mv <span class="token operator">!=</span> null <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>mv<span class="token punctuation">.</span><span class="token function">wasCleared</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// 重点方法-视图解析，渲染视图</span>      <span class="token function">render</span><span class="token punctuation">(</span>mv<span class="token punctuation">,</span> request<span class="token punctuation">,</span> response<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>errorView<span class="token punctuation">)</span> <span class="token punctuation">{</span>         WebUtils<span class="token punctuation">.</span><span class="token function">clearErrorRequestAttributes</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>   <span class="token punctuation">}</span>   <span class="token keyword">else</span> <span class="token punctuation">{</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>logger<span class="token punctuation">.</span><span class="token function">isDebugEnabled</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>         logger<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">"Null ModelAndView returned to DispatcherServlet with name '"</span> <span class="token operator">+</span> <span class="token function">getServletName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span>               <span class="token string">"': assuming HandlerAdapter completed request handling"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>   <span class="token punctuation">}</span>   <span class="token keyword">if</span> <span class="token punctuation">(</span>WebAsyncUtils<span class="token punctuation">.</span><span class="token function">getAsyncManager</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isConcurrentHandlingStarted</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// Concurrent handling started during a forward</span>      <span class="token keyword">return</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span>   <span class="token keyword">if</span> <span class="token punctuation">(</span>mappedHandler <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>      mappedHandler<span class="token punctuation">.</span><span class="token function">triggerAfterCompletion</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> response<span class="token punctuation">,</span> null<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>render方法</p><pre class=" language-java"><code class="language-java"><span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">render</span><span class="token punctuation">(</span>ModelAndView mv<span class="token punctuation">,</span> HttpServletRequest request<span class="token punctuation">,</span> HttpServletResponse response<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>   <span class="token comment" spellcheck="true">//获取我们国际化语言解析器对象</span>   Locale locale <span class="token operator">=</span>         <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>localeResolver <span class="token operator">!=</span> null <span class="token operator">?</span> <span class="token keyword">this</span><span class="token punctuation">.</span>localeResolver<span class="token punctuation">.</span><span class="token function">resolveLocale</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span> <span class="token operator">:</span> request<span class="token punctuation">.</span><span class="token function">getLocale</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   response<span class="token punctuation">.</span><span class="token function">setLocale</span><span class="token punctuation">(</span>locale<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//获取我们视图名称</span>   View view<span class="token punctuation">;</span>   String viewName <span class="token operator">=</span> mv<span class="token punctuation">.</span><span class="token function">getViewName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token keyword">if</span> <span class="token punctuation">(</span>viewName <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">//根据我们的视图名称 解析成为我们真正的物理视图(通过视图解析器对象)</span>      view <span class="token operator">=</span> <span class="token function">resolveViewName</span><span class="token punctuation">(</span>viewName<span class="token punctuation">,</span> mv<span class="token punctuation">.</span><span class="token function">getModelInternal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> locale<span class="token punctuation">,</span> request<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>view <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">ServletException</span><span class="token punctuation">(</span><span class="token string">"Could not resolve view with name '"</span> <span class="token operator">+</span> mv<span class="token punctuation">.</span><span class="token function">getViewName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span>               <span class="token string">"' in servlet with name '"</span> <span class="token operator">+</span> <span class="token function">getServletName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"'"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>   <span class="token punctuation">}</span>   <span class="token keyword">else</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// No need to lookup: the ModelAndView object contains the actual View object.</span>      view <span class="token operator">=</span> mv<span class="token punctuation">.</span><span class="token function">getView</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>view <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">ServletException</span><span class="token punctuation">(</span><span class="token string">"ModelAndView ["</span> <span class="token operator">+</span> mv <span class="token operator">+</span> <span class="token string">"] neither contains a view name nor a "</span> <span class="token operator">+</span>               <span class="token string">"View object in servlet with name '"</span> <span class="token operator">+</span> <span class="token function">getServletName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"'"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>   <span class="token punctuation">}</span>   <span class="token comment" spellcheck="true">// Delegate to the View object for rendering.</span>   <span class="token keyword">if</span> <span class="token punctuation">(</span>logger<span class="token punctuation">.</span><span class="token function">isDebugEnabled</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      logger<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">"Rendering view ["</span> <span class="token operator">+</span> view <span class="token operator">+</span> <span class="token string">"] in DispatcherServlet with name '"</span> <span class="token operator">+</span> <span class="token function">getServletName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"'"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span>   <span class="token keyword">try</span> <span class="token punctuation">{</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>mv<span class="token punctuation">.</span><span class="token function">getStatus</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>         response<span class="token punctuation">.</span><span class="token function">setStatus</span><span class="token punctuation">(</span>mv<span class="token punctuation">.</span><span class="token function">getStatus</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token comment" spellcheck="true">//渲染模型视图</span>      view<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span>mv<span class="token punctuation">.</span><span class="token function">getModelInternal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> request<span class="token punctuation">,</span> response<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span>   <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> ex<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>logger<span class="token punctuation">.</span><span class="token function">isDebugEnabled</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>         logger<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">"Error rendering view ["</span> <span class="token operator">+</span> view <span class="token operator">+</span> <span class="token string">"] in DispatcherServlet with name '"</span> <span class="token operator">+</span>               <span class="token function">getServletName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"'"</span><span class="token punctuation">,</span> ex<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token keyword">throw</span> ex<span class="token punctuation">;</span>   <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>resolveViewName</p><p>找视图解析器</p><pre class=" language-java"><code class="language-java"><span class="token keyword">protected</span> View <span class="token function">resolveViewName</span><span class="token punctuation">(</span>String viewName<span class="token punctuation">,</span> <span class="token annotation punctuation">@Nullable</span> Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Object<span class="token operator">></span> model<span class="token punctuation">,</span>      Locale locale<span class="token punctuation">,</span> HttpServletRequest request<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>   <span class="token comment" spellcheck="true">//判断当前的视图解析器集合是否为空</span>   <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>viewResolvers <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">//循环调用我们的视图解析器对象解析视图</span>      <span class="token keyword">for</span> <span class="token punctuation">(</span>ViewResolver viewResolver <span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>viewResolvers<span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token comment" spellcheck="true">// 一旦有我们的视图解析器能够解析出视图，后面的视图解析器不在参与解析,直接返回</span>         View view <span class="token operator">=</span> viewResolver<span class="token punctuation">.</span><span class="token function">resolveViewName</span><span class="token punctuation">(</span>viewName<span class="token punctuation">,</span> locale<span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token keyword">if</span> <span class="token punctuation">(</span>view <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> view<span class="token punctuation">;</span>         <span class="token punctuation">}</span>      <span class="token punctuation">}</span>   <span class="token punctuation">}</span>   <span class="token keyword">return</span> null<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 源码 </tag>
            
            <tag> Spring </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring声明式事务源码剖析</title>
      <link href="/2021/03/17/spring-shi-wu-guan-li-yuan-ma-pou-xi/"/>
      <url>/2021/03/17/spring-shi-wu-guan-li-yuan-ma-pou-xi/</url>
      
        <content type="html"><![CDATA[<p>事务包含范围较广不仅仅包括数据库事务也包括事务消息。事务是使有限操作满足ACID属性，A:原子性，C:一致性，I:隔离性，D:持久性，严格遵循ACID规则的叫做刚性事务，事务执行的中间状态可以暂时不支持ACID的叫柔性事务。</p><p>关于MySQL的MVCC事务隔离级别可以走向我的另一篇博文<a href="https://dmsupine.com/2020/08/25/mysql-shi-wu-xi-tong-jie-xi/">MySQL事务系统解析</a></p><h2 id="事务基本概念"><a href="#事务基本概念" class="headerlink" title="事务基本概念"></a>事务基本概念</h2><h3 id="事务基本属性"><a href="#事务基本属性" class="headerlink" title="事务基本属性"></a>事务基本属性</h3><ul><li>A（原子性）：事务要么全部成功，要么全部失败</li><li>C（一致性）：不管什么时候，数据都是一致的，不会读到中间状态的数据</li><li>I（隔离性）：多个事务之间相互不影响</li><li>D（持久性）：在事务执行过程中，不管怎么样数据都不能丢，会持久化</li></ul><h3 id="事务传播行为"><a href="#事务传播行为" class="headerlink" title="事务传播行为"></a>事务传播行为</h3><table><thead><tr><th>行为</th><th>不存在嵌套事务</th><th>存在嵌套事务</th></tr></thead><tbody><tr><td>REQUIRED</td><td>开启新的事务</td><td>融合到外部事务</td></tr><tr><td>REQUIRES_NEW</td><td>开启新的事务</td><td>挂起外部事务</td></tr><tr><td>NESTED</td><td>开启新的事务</td><td>融合到外部事务中,SavePoint机制，外层影响内层， 内层不会影响外层</td></tr><tr><td>SUPPORTS</td><td>不开启新的事务</td><td>融合到外部事务</td></tr><tr><td>NOT_SUPPORTED</td><td>不开启新的事务</td><td>挂起外部事务</td></tr><tr><td>NEVER</td><td>不开启新的事务</td><td>抛出异常</td></tr><tr><td>MANDATORY</td><td>抛出异常</td><td>融合到外部事务</td></tr></tbody></table><p>默认方式是REQUIRED，使用方式，要开启事务方法上面注解@Transactional(propagation = Propagation.REQUIRED)</p><h2 id="Demo"><a href="#Demo" class="headerlink" title="Demo"></a>Demo</h2><p>配置类</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@EnableTransactionManagement</span><span class="token annotation punctuation">@EnableAspectJAutoProxy</span><span class="token punctuation">(</span>exposeProxy <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token annotation punctuation">@ComponentScan</span><span class="token punctuation">(</span>basePackages <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">"com.tuling"</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MainConfig</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     *  配置数据源     */</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> DataSource <span class="token function">dataSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        DruidDataSource dataSource <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DruidDataSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        dataSource<span class="token punctuation">.</span><span class="token function">setUsername</span><span class="token punctuation">(</span><span class="token string">"root"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        dataSource<span class="token punctuation">.</span><span class="token function">setPassword</span><span class="token punctuation">(</span><span class="token string">"root"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        dataSource<span class="token punctuation">.</span><span class="token function">setUrl</span><span class="token punctuation">(</span><span class="token string">"jdbc:mysql://xx.xx.xx.xx:3306/test"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        dataSource<span class="token punctuation">.</span><span class="token function">setDriverClassName</span><span class="token punctuation">(</span><span class="token string">"com.mysql.jdbc.Driver"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> dataSource<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     *  配置JdbcTemplate     */</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> JdbcTemplate <span class="token function">jdbcTemplate</span><span class="token punctuation">(</span>DataSource dataSource<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">JdbcTemplate</span><span class="token punctuation">(</span>dataSource<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     *  配置事务管理器     */</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> PlatformTransactionManager <span class="token function">transactionManager</span><span class="token punctuation">(</span>DataSource dataSource<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">DataSourceTransactionManager</span><span class="token punctuation">(</span>dataSource<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>配置类写好只需在需要开启事务的方法/接口/类上加上注解@Transactional(propagation = Propagation.REQUIRED)即可</p><p>这里有个点要注意，如果A方法，B方法在同一个类中，且2个方法都开启了事务，这时候A方法如果调用B方法，B的事务是不会生效的，如果生效需要把B方法重新声明一个类，或者开启AOP配置exposeProxy = true暴露代理到线程然后通过AopContext.currentProxy().methodB();方式调用。</p><p>因为spring事务也是用了AOP的方式，动态代理分为Jdk动态代理和Cglib动态代理</p><p>jdk动态代理本身就有这么个特性同一个类的方法互相调用不会再生成代理</p><p>Cglib动态代理中是通过责任链调用增强代码中显式调用methodA-&gt;methodB,这时候的调用是责任链调用而不是代理类调用</p><h2 id="spring声明式事务与AOP的关系"><a href="#spring声明式事务与AOP的关系" class="headerlink" title="spring声明式事务与AOP的关系"></a>spring声明式事务与AOP的关系</h2><p>如果要实现事务的功能一般想到的都是在要执行方法前开启事务，捕获执行方法异常里面回滚事务，最后执行提交事务。spring如果要实现这个很明显使用AOP就可以了。</p><p>我们进到@EnableTransactionManagement注解中可以跟到注册Bean的方法（下面会具体跟代码），发现它注册了InfrastructureAdvisorAutoProxyCreator方法。</p><p><img src="https://blog-dm.oss-cn-shanghai.aliyuncs.com/articleimage/20210220154333.png"></p><p>我们在看下AOP注册的Bean方法</p><p><img src="https://blog-dm.oss-cn-shanghai.aliyuncs.com/articleimage/20210220154426.png"></p><p>发现他们之间公用一个基类AbstractAdvisorAutoProxyCreator，而大部分后置处理器都是在这个基类上实现的</p><p>所以基本可以判定事务是在AOP基础上实现的。</p><h2 id="spring事务源码分析"><a href="#spring事务源码分析" class="headerlink" title="spring事务源码分析"></a>spring事务源码分析</h2><p>了解spring事务源码之前可以先看下我之前写的一篇springAOP源码解析 TODO</p><p>从@EnableTransactionManagement跟入发现标注了@Import从import的方法跟入，发现实现了ImportSelector接口，这时跟入到selectImports方法</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Override</span><span class="token keyword">protected</span> String<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">selectImports</span><span class="token punctuation">(</span>AdviceMode adviceMode<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">switch</span> <span class="token punctuation">(</span>adviceMode<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 为我们的容器中导入了二个组件 一个是AutoProxyRegistrar</span>        <span class="token comment" spellcheck="true">//一个是ProxyTransactionManagementConfiguration</span>        <span class="token keyword">case</span> PROXY<span class="token operator">:</span>            <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">{</span>AutoProxyRegistrar<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                                 ProxyTransactionManagementConfiguration<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token keyword">case</span> ASPECTJ<span class="token operator">:</span>            <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">{</span>                TransactionManagementConfigUtils<span class="token punctuation">.</span>TRANSACTION_ASPECT_CONFIGURATION_CLASS_NAME<span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token keyword">default</span><span class="token operator">:</span>            <span class="token keyword">return</span> null<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>selectImports返回的是一个String[]表示我们要注册的Bean。所以这段代码表示我们的容器需要注册AutoProxyRegistrar，ProxyTransactionManagementConfiguration这2个组件</p><p>注意：这里有个switch…case,ASPECTJ分支不要care，这里基本不会走，这里表示的我们不使用动态代理而是使用AspectJ,AspectJ需要新的编译器，基本不会有人把mode设为ASPECTJ</p><h3 id="AutoProxyRegistrar类"><a href="#AutoProxyRegistrar类" class="headerlink" title="AutoProxyRegistrar类"></a>AutoProxyRegistrar类</h3><p>发现里面的registerBeanDefinitions方法，似乎找到了注册BeanDefinition的方法</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">registerBeanDefinitions</span><span class="token punctuation">(</span>AnnotationMetadata importingClassMetadata<span class="token punctuation">,</span> BeanDefinitionRegistry registry<span class="token punctuation">)</span> <span class="token punctuation">{</span>   <span class="token keyword">boolean</span> candidateFound <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>   Set<span class="token operator">&lt;</span>String<span class="token operator">></span> annTypes <span class="token operator">=</span> importingClassMetadata<span class="token punctuation">.</span><span class="token function">getAnnotationTypes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token keyword">for</span> <span class="token punctuation">(</span>String annType <span class="token operator">:</span> annTypes<span class="token punctuation">)</span> <span class="token punctuation">{</span>      AnnotationAttributes candidate <span class="token operator">=</span> AnnotationConfigUtils<span class="token punctuation">.</span><span class="token function">attributesFor</span><span class="token punctuation">(</span>importingClassMetadata<span class="token punctuation">,</span> annType<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>candidate <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token keyword">continue</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      Object mode <span class="token operator">=</span> candidate<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"mode"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      Object proxyTargetClass <span class="token operator">=</span> candidate<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"proxyTargetClass"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>mode <span class="token operator">!=</span> null <span class="token operator">&amp;&amp;</span> proxyTargetClass <span class="token operator">!=</span> null <span class="token operator">&amp;&amp;</span> AdviceMode<span class="token punctuation">.</span><span class="token keyword">class</span> <span class="token operator">==</span> mode<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span>            Boolean<span class="token punctuation">.</span><span class="token keyword">class</span> <span class="token operator">==</span> proxyTargetClass<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>         candidateFound <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>         <span class="token keyword">if</span> <span class="token punctuation">(</span>mode <span class="token operator">==</span> AdviceMode<span class="token punctuation">.</span>PROXY<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 注册BeanDefinition</span>            AopConfigUtils<span class="token punctuation">.</span><span class="token function">registerAutoProxyCreatorIfNecessary</span><span class="token punctuation">(</span>registry<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>Boolean<span class="token punctuation">)</span> proxyTargetClass<span class="token punctuation">)</span> <span class="token punctuation">{</span>               AopConfigUtils<span class="token punctuation">.</span><span class="token function">forceAutoProxyCreatorToUseClassProxying</span><span class="token punctuation">(</span>registry<span class="token punctuation">)</span><span class="token punctuation">;</span>               <span class="token keyword">return</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>         <span class="token punctuation">}</span>      <span class="token punctuation">}</span>   <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>这个方法其实主要就是调用了registerAutoProxyCreatorIfNecessary，从这继续往里面跟发现registerOrEscalateApcAsRequired方法</p><p>这个方法有点熟悉，因为AOP中也是调用的这个方法进行的注册，跟进去看看。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">static</span> BeanDefinition <span class="token function">registerOrEscalateApcAsRequired</span><span class="token punctuation">(</span>            Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> cls<span class="token punctuation">,</span> BeanDefinitionRegistry registry<span class="token punctuation">,</span> <span class="token annotation punctuation">@Nullable</span> Object source<span class="token punctuation">)</span> <span class="token punctuation">{</span>    Assert<span class="token punctuation">.</span><span class="token function">notNull</span><span class="token punctuation">(</span>registry<span class="token punctuation">,</span> <span class="token string">"BeanDefinitionRegistry must not be null"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 这里表明了同时注解事务和AOP,会怎么操作</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>registry<span class="token punctuation">.</span><span class="token function">containsBeanDefinition</span><span class="token punctuation">(</span>AUTO_PROXY_CREATOR_BEAN_NAME<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 拿到之前注册的BeanDefinition</span>        BeanDefinition apcDefinition <span class="token operator">=</span> registry<span class="token punctuation">.</span><span class="token function">getBeanDefinition</span><span class="token punctuation">(</span>AUTO_PROXY_CREATOR_BEAN_NAME<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 之前的BeanDefinition和现在是否一致，不一致说明同时注册了事务和AOP</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>cls<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>apcDefinition<span class="token punctuation">.</span><span class="token function">getBeanClassName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 这里的索引</span>            <span class="token comment" spellcheck="true">// 0-InfrastructureAdvisorAutoProxyCreator--事务的</span>            <span class="token comment" spellcheck="true">// 1-AspectJAwareAdvisorAutoProxyCreator</span>            <span class="token comment" spellcheck="true">// 2-AnnotationAwareAspectJAutoProxyCreator--AOP的</span>            <span class="token comment" spellcheck="true">// 拿到之前的BeanDefinition的索引</span>            <span class="token keyword">int</span> currentPriority <span class="token operator">=</span> <span class="token function">findPriorityForClass</span><span class="token punctuation">(</span>apcDefinition<span class="token punctuation">.</span><span class="token function">getBeanClassName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 拿到现在的BeanDefinition的索引</span>            <span class="token keyword">int</span> requiredPriority <span class="token operator">=</span> <span class="token function">findPriorityForClass</span><span class="token punctuation">(</span>cls<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 谁索引大谁就是bean定义，这里AOP的bean会覆盖事务的bean</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>currentPriority <span class="token operator">&lt;</span> requiredPriority<span class="token punctuation">)</span> <span class="token punctuation">{</span>                apcDefinition<span class="token punctuation">.</span><span class="token function">setBeanClassName</span><span class="token punctuation">(</span>cls<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> null<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    RootBeanDefinition beanDefinition <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RootBeanDefinition</span><span class="token punctuation">(</span>cls<span class="token punctuation">)</span><span class="token punctuation">;</span>    beanDefinition<span class="token punctuation">.</span><span class="token function">setSource</span><span class="token punctuation">(</span>source<span class="token punctuation">)</span><span class="token punctuation">;</span>    beanDefinition<span class="token punctuation">.</span><span class="token function">getPropertyValues</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"order"</span><span class="token punctuation">,</span> Ordered<span class="token punctuation">.</span>HIGHEST_PRECEDENCE<span class="token punctuation">)</span><span class="token punctuation">;</span>    beanDefinition<span class="token punctuation">.</span><span class="token function">setRole</span><span class="token punctuation">(</span>BeanDefinition<span class="token punctuation">.</span>ROLE_INFRASTRUCTURE<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 注册Bean定义name是org.springframework.aop.config.internalAutoProxyCreator</span>    registry<span class="token punctuation">.</span><span class="token function">registerBeanDefinition</span><span class="token punctuation">(</span>AUTO_PROXY_CREATOR_BEAN_NAME<span class="token punctuation">,</span> beanDefinition<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> beanDefinition<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>这里的代码解释了AOP注解事务注解同时注册到底听谁的，是同时注册还是某一个成功</p><p>同时注册不可能，2个bean的beanName是一样的，所以不可能同时注册，必定hi覆盖，谁覆盖谁呢</p><p>AOP优先级大于事务，2者都注册就注册AOP</p><h3 id="ProxyTransactionManagementConfiguration类"><a href="#ProxyTransactionManagementConfiguration类" class="headerlink" title="ProxyTransactionManagementConfiguration类"></a>ProxyTransactionManagementConfiguration类</h3><p>这个方法注册了几个Bean，定义了Advisor</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ProxyTransactionManagementConfiguration</span> <span class="token keyword">extends</span> <span class="token class-name">AbstractTransactionManagementConfiguration</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * 定义了关于事务的切面信息     * org.springframework.transaction.config.internalTransactionAdvisor     */</span>    <span class="token annotation punctuation">@Bean</span><span class="token punctuation">(</span>name <span class="token operator">=</span> TransactionManagementConfigUtils<span class="token punctuation">.</span>TRANSACTION_ADVISOR_BEAN_NAME<span class="token punctuation">)</span>    <span class="token annotation punctuation">@Role</span><span class="token punctuation">(</span>BeanDefinition<span class="token punctuation">.</span>ROLE_INFRASTRUCTURE<span class="token punctuation">)</span>    <span class="token keyword">public</span> BeanFactoryTransactionAttributeSourceAdvisor <span class="token function">transactionAdvisor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        BeanFactoryTransactionAttributeSourceAdvisor advisor <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BeanFactoryTransactionAttributeSourceAdvisor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 定义了获取事务的解析器，可以理解成这里是为了找到标注了@Transactional的方法</span>         advisor<span class="token punctuation">.</span><span class="token function">setTransactionAttributeSource</span><span class="token punctuation">(</span><span class="token function">transactionAttributeSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment" spellcheck="true">// 定义了切面</span>        advisor<span class="token punctuation">.</span><span class="token function">setAdvice</span><span class="token punctuation">(</span><span class="token function">transactionInterceptor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>enableTx <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            advisor<span class="token punctuation">.</span><span class="token function">setOrder</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>enableTx<span class="token punctuation">.</span>&lt;Integer<span class="token operator">></span><span class="token function">getNumber</span><span class="token punctuation">(</span><span class="token string">"order"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> advisor<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 事务属性源对象:用于获取事务属性对象，可以理解成这里是为了找到标注了@Transactional的方法     */</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token annotation punctuation">@Role</span><span class="token punctuation">(</span>BeanDefinition<span class="token punctuation">.</span>ROLE_INFRASTRUCTURE<span class="token punctuation">)</span>    <span class="token keyword">public</span> TransactionAttributeSource <span class="token function">transactionAttributeSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">AnnotationTransactionAttributeSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 用户拦截事务方法执行的     */</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token annotation punctuation">@Role</span><span class="token punctuation">(</span>BeanDefinition<span class="token punctuation">.</span>ROLE_INFRASTRUCTURE<span class="token punctuation">)</span>    <span class="token keyword">public</span> TransactionInterceptor <span class="token function">transactionInterceptor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        TransactionInterceptor interceptor <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TransactionInterceptor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        interceptor<span class="token punctuation">.</span><span class="token function">setTransactionAttributeSource</span><span class="token punctuation">(</span><span class="token function">transactionAttributeSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>txManager <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            interceptor<span class="token punctuation">.</span><span class="token function">setTransactionManager</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>txManager<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> interceptor<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>走到这里我们大致就清楚应该怎么看事务的源码了，首先我们应该还是要和看AOP的方式去看事务源码，首先会解析切面（实例化之前的后置处理器执行）-&gt;创建代理（初始化之后的后置处理器执行，循环依赖创建早期对象）-&gt;调用（代理调用）</p><p>这里我们看InfrastructureAdvisorAutoProxyCreator还是AnnotationAwareAspectJAutoProxyCreator都可以</p><p>和AOP一样我们看AnnotationAwareAspectJAutoProxyCreator方法，AOP看过的都不在看了</p><h3 id="切面解析"><a href="#切面解析" class="headerlink" title="切面解析"></a>切面解析</h3><p>我们直接进到postProcessBeforeInstantiation-&gt;shouldSkip(子类)-&gt;findCandidateAdvisors(子类)-&gt;findCandidateAdvisors(父类)-&gt;findAdvisorBeans</p><h4 id="findAdvisorBeans方法"><a href="#findAdvisorBeans方法" class="headerlink" title="findAdvisorBeans方法"></a>findAdvisorBeans方法</h4><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> List<span class="token operator">&lt;</span>Advisor<span class="token operator">></span> <span class="token function">findAdvisorBeans</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>   <span class="token comment" spellcheck="true">// 缓存cachedAdvisorBeanNames 是用来保存我们的Advisor全类名会在第一个单实例bean的中会去把这个advisor名称解析出来</span>   String<span class="token punctuation">[</span><span class="token punctuation">]</span> advisorNames <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>cachedAdvisorBeanNames<span class="token punctuation">;</span>   <span class="token keyword">if</span> <span class="token punctuation">(</span>advisorNames <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// 去我们的容器中获取到实现了Advisor接口的实现类,这里其实之前我们注册了一个实现了Advisor接口的实现类，就是在 ProxyTransactionManagementConfiguration类中BeanFactoryTransactionAttributeSourceAdvisor这个Bean,bean名字是org.springframework.transaction.config.internalTransactionAdvisor</span>      advisorNames <span class="token operator">=</span> BeanFactoryUtils<span class="token punctuation">.</span><span class="token function">beanNamesForTypeIncludingAncestors</span><span class="token punctuation">(</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>beanFactory<span class="token punctuation">,</span> Advisor<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>cachedAdvisorBeanNames <span class="token operator">=</span> advisorNames<span class="token punctuation">;</span>   <span class="token punctuation">}</span>   <span class="token comment" spellcheck="true">//若在容器中没有找到，直接返回一个空的集合</span>   <span class="token keyword">if</span> <span class="token punctuation">(</span>advisorNames<span class="token punctuation">.</span>length <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span>   List<span class="token operator">&lt;</span>Advisor<span class="token operator">></span> advisors <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//ioc容器中找到了我们配置的BeanFactoryTransactionAttributeSourceAdvisor</span>   <span class="token keyword">for</span> <span class="token punctuation">(</span>String name <span class="token operator">:</span> advisorNames<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">//判断他是不是一个合适的 是我们想要的</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isEligibleBean</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token comment" spellcheck="true">//BeanFactoryTransactionAttributeSourceAdvisor是不是正在创建的bean</span>         <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>beanFactory<span class="token punctuation">.</span><span class="token function">isCurrentlyInCreation</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>logger<span class="token punctuation">.</span><span class="token function">isDebugEnabled</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>               logger<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">"Skipping currently created advisor '"</span> <span class="token operator">+</span> name <span class="token operator">+</span> <span class="token string">"'"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>         <span class="token punctuation">}</span>         <span class="token comment" spellcheck="true">//不是的话</span>         <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>               <span class="token comment" spellcheck="true">//显示的调用getBean方法方法创建我们的BeanFactoryTransactionAttributeSourceAdvisor返回</span>               advisors<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>beanFactory<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> Advisor<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">BeanCreationException</span> ex<span class="token punctuation">)</span> <span class="token punctuation">{</span>               Throwable rootCause <span class="token operator">=</span> ex<span class="token punctuation">.</span><span class="token function">getMostSpecificCause</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>               <span class="token keyword">if</span> <span class="token punctuation">(</span>rootCause <span class="token keyword">instanceof</span> <span class="token class-name">BeanCurrentlyInCreationException</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                  BeanCreationException bce <span class="token operator">=</span> <span class="token punctuation">(</span>BeanCreationException<span class="token punctuation">)</span> rootCause<span class="token punctuation">;</span>                  String bceBeanName <span class="token operator">=</span> bce<span class="token punctuation">.</span><span class="token function">getBeanName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                  <span class="token keyword">if</span> <span class="token punctuation">(</span>bceBeanName <span class="token operator">!=</span> null <span class="token operator">&amp;&amp;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>beanFactory<span class="token punctuation">.</span><span class="token function">isCurrentlyInCreation</span><span class="token punctuation">(</span>bceBeanName<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                     <span class="token keyword">if</span> <span class="token punctuation">(</span>logger<span class="token punctuation">.</span><span class="token function">isDebugEnabled</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                        logger<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">"Skipping advisor '"</span> <span class="token operator">+</span> name <span class="token operator">+</span>                              <span class="token string">"' with dependency on currently created bean: "</span> <span class="token operator">+</span> ex<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                     <span class="token punctuation">}</span>                     <span class="token comment" spellcheck="true">// Ignore: indicates a reference back to the bean we're trying to advise.</span>                     <span class="token comment" spellcheck="true">// We want to find advisors other than the currently created bean itself.</span>                     <span class="token keyword">continue</span><span class="token punctuation">;</span>                  <span class="token punctuation">}</span>               <span class="token punctuation">}</span>               <span class="token keyword">throw</span> ex<span class="token punctuation">;</span>            <span class="token punctuation">}</span>         <span class="token punctuation">}</span>      <span class="token punctuation">}</span>   <span class="token punctuation">}</span>   <span class="token keyword">return</span> advisors<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h3 id="创建代理"><a href="#创建代理" class="headerlink" title="创建代理"></a>创建代理</h3><p>大部分跟AOP差不多主要差别就在匹配那部分代码，我们直接来到匹配的代码</p><p>我们直接进到postProcessAfterInitialization-&gt;wrapIfNecessary-&gt;getAdvicesAndAdvisorsForBean-&gt;findEligibleAdvisors-&gt;findAdvisorsThatCanApply-&gt; AopUtils.findAdvisorsThatCanApply-&gt;canApply</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">boolean</span> <span class="token function">canApply</span><span class="token punctuation">(</span>Advisor advisor<span class="token punctuation">,</span> Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> targetClass<span class="token punctuation">,</span> <span class="token keyword">boolean</span> hasIntroductions<span class="token punctuation">)</span> <span class="token punctuation">{</span>   <span class="token keyword">if</span> <span class="token punctuation">(</span>advisor <span class="token keyword">instanceof</span> <span class="token class-name">IntroductionAdvisor</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>IntroductionAdvisor<span class="token punctuation">)</span> advisor<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getClassFilter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">matches</span><span class="token punctuation">(</span>targetClass<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span>   <span class="token comment" spellcheck="true">//判断我们事务的增强器BeanFactoryTransactionAttributeSourceAdvisor是否实现了PointcutAdvisor</span>   <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>advisor <span class="token keyword">instanceof</span> <span class="token class-name">PointcutAdvisor</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">//转为PointcutAdvisor类型</span>      PointcutAdvisor pca <span class="token operator">=</span> <span class="token punctuation">(</span>PointcutAdvisor<span class="token punctuation">)</span> advisor<span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">//找到真正能用的增强器</span>      <span class="token keyword">return</span> <span class="token function">canApply</span><span class="token punctuation">(</span>pca<span class="token punctuation">.</span><span class="token function">getPointcut</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> targetClass<span class="token punctuation">,</span> hasIntroductions<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span>   <span class="token keyword">else</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// It doesn't have a pointcut so we assume it applies.</span>      <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="canApply-pca-getPointcut-targetClass-hasIntroductions"><a href="#canApply-pca-getPointcut-targetClass-hasIntroductions" class="headerlink" title="canApply(pca.getPointcut(), targetClass, hasIntroductions)"></a>canApply(pca.getPointcut(), targetClass, hasIntroductions)</h4><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 这里的pointcut已经跟AOP不一样了，是BeanFactoryTransactionAttributeSourceAdvisor中的pointCut是TransactionAttributeSourcePointcut</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">boolean</span> <span class="token function">canApply</span><span class="token punctuation">(</span>Pointcut pc<span class="token punctuation">,</span> Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> targetClass<span class="token punctuation">,</span> <span class="token keyword">boolean</span> hasIntroductions<span class="token punctuation">)</span> <span class="token punctuation">{</span>   Assert<span class="token punctuation">.</span><span class="token function">notNull</span><span class="token punctuation">(</span>pc<span class="token punctuation">,</span> <span class="token string">"Pointcut must not be null"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">// 分析可知这里走的是StaticMethodMatcherPointcut，是TransactionAttributeSourcePointcut的父类</span>   <span class="token comment" spellcheck="true">// pc.getClassFilter() = ClassFilter.TRUE = TrueClassFilter.INSTANCE</span>   <span class="token comment" spellcheck="true">// 又TrueClassFilter.matches 始终为 true</span>   <span class="token comment" spellcheck="true">// 所以这个判断基本作废</span>   <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>pc<span class="token punctuation">.</span><span class="token function">getClassFilter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">matches</span><span class="token punctuation">(</span>targetClass<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//如果pc.getMethodMatcher()返回TrueMethodMatcher则匹配所有方法</span>   MethodMatcher methodMatcher <span class="token operator">=</span> pc<span class="token punctuation">.</span><span class="token function">getMethodMatcher</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token keyword">if</span> <span class="token punctuation">(</span>methodMatcher <span class="token operator">==</span> MethodMatcher<span class="token punctuation">.</span>TRUE<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// No need to iterate the methods if we're matching any method anyway...</span>      <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span>   <span class="token comment" spellcheck="true">//事务不用管这里 只有AspectJExpressionPointCut才会实现这个接口</span>   IntroductionAwareMethodMatcher introductionAwareMethodMatcher <span class="token operator">=</span> null<span class="token punctuation">;</span>   <span class="token keyword">if</span> <span class="token punctuation">(</span>methodMatcher <span class="token keyword">instanceof</span> <span class="token class-name">IntroductionAwareMethodMatcher</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      introductionAwareMethodMatcher <span class="token operator">=</span> <span class="token punctuation">(</span>IntroductionAwareMethodMatcher<span class="token punctuation">)</span> methodMatcher<span class="token punctuation">;</span>   <span class="token punctuation">}</span>   <span class="token comment" spellcheck="true">//创建一个集合用于保存targetClass 的class对象</span>   Set<span class="token operator">&lt;</span>Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">>></span> classes <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedHashSet</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//判断当前class是不是代理的class对象</span>   <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>Proxy<span class="token punctuation">.</span><span class="token function">isProxyClass</span><span class="token punctuation">(</span>targetClass<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">//加入到集合中去</span>      classes<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>ClassUtils<span class="token punctuation">.</span><span class="token function">getUserClass</span><span class="token punctuation">(</span>targetClass<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span>   <span class="token comment" spellcheck="true">//获取到targetClass所实现的接口的class对象，然后加入到集合中</span>   classes<span class="token punctuation">.</span><span class="token function">addAll</span><span class="token punctuation">(</span>ClassUtils<span class="token punctuation">.</span><span class="token function">getAllInterfacesForClassAsSet</span><span class="token punctuation">(</span>targetClass<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//循环所有的class对象</span>   <span class="token keyword">for</span> <span class="token punctuation">(</span>Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> clazz <span class="token operator">:</span> classes<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">//通过class获取到所有的方法</span>      Method<span class="token punctuation">[</span><span class="token punctuation">]</span> methods <span class="token operator">=</span> ReflectionUtils<span class="token punctuation">.</span><span class="token function">getAllDeclaredMethods</span><span class="token punctuation">(</span>clazz<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">//循环我们的方法</span>      <span class="token keyword">for</span> <span class="token punctuation">(</span>Method method <span class="token operator">:</span> methods<span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token comment" spellcheck="true">//通过methodMatcher.matches来匹配我们的方法 introductionAwareMethodMatcher肯定是空走methodMatcher.matches(method, targetClass)方法，TransactionAttributeSourcePointcut.matches方法</span>         <span class="token keyword">if</span> <span class="token punctuation">(</span>introductionAwareMethodMatcher <span class="token operator">!=</span> null <span class="token operator">?</span>               <span class="token comment" spellcheck="true">// 通过切点表达式进行匹配 AspectJ方式</span>               introductionAwareMethodMatcher<span class="token punctuation">.</span><span class="token function">matches</span><span class="token punctuation">(</span>method<span class="token punctuation">,</span> targetClass<span class="token punctuation">,</span> hasIntroductions<span class="token punctuation">)</span> <span class="token operator">:</span>               <span class="token comment" spellcheck="true">// 通过方法匹配器进行匹配 内置aop接口方式</span>               methodMatcher<span class="token punctuation">.</span><span class="token function">matches</span><span class="token punctuation">(</span>method<span class="token punctuation">,</span> targetClass<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 只要有1个方法匹配上了就创建代理</span>            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>         <span class="token punctuation">}</span>      <span class="token punctuation">}</span>   <span class="token punctuation">}</span>   <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h4 id="TransactionAttributeSourcePointcut-matches"><a href="#TransactionAttributeSourcePointcut-matches" class="headerlink" title="TransactionAttributeSourcePointcut.matches"></a>TransactionAttributeSourcePointcut.matches</h4><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">matches</span><span class="token punctuation">(</span>Method method<span class="token punctuation">,</span> <span class="token annotation punctuation">@Nullable</span> Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> targetClass<span class="token punctuation">)</span> <span class="token punctuation">{</span>   <span class="token keyword">if</span> <span class="token punctuation">(</span>targetClass <span class="token operator">!=</span> null <span class="token operator">&amp;&amp;</span> TransactionalProxy<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">isAssignableFrom</span><span class="token punctuation">(</span>targetClass<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span>   <span class="token comment" spellcheck="true">// @EnableTransactionManagement注解导入的ProxyTransactionManagementConfiguration配置类中的TransactionAttributeSource对象这里是AnnotationTransactionAttributeSource</span>   TransactionAttributeSource tas <span class="token operator">=</span> <span class="token function">getTransactionAttributeSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">// 通过getTransactionAttribute看是否有@Transactional注解</span>   <span class="token keyword">return</span> <span class="token punctuation">(</span>tas <span class="token operator">==</span> null <span class="token operator">||</span> tas<span class="token punctuation">.</span><span class="token function">getTransactionAttribute</span><span class="token punctuation">(</span>method<span class="token punctuation">,</span> targetClass<span class="token punctuation">)</span> <span class="token operator">!=</span> null<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>AnnotationTransactionAttributeSource.getTransactionAttribute方法</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Override</span>    <span class="token annotation punctuation">@Nullable</span>    <span class="token keyword">public</span> TransactionAttribute <span class="token function">getTransactionAttribute</span><span class="token punctuation">(</span>Method method<span class="token punctuation">,</span> <span class="token annotation punctuation">@Nullable</span> Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> targetClass<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//判断method所在的class 是不是Object类型</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>method<span class="token punctuation">.</span><span class="token function">getDeclaringClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> Object<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> null<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//构建我们的缓存key</span>        Object cacheKey <span class="token operator">=</span> <span class="token function">getCacheKey</span><span class="token punctuation">(</span>method<span class="token punctuation">,</span> targetClass<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//先去我们的缓存中获取</span>        TransactionAttribute cached <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>attributeCache<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>cacheKey<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//缓存中不为空</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>cached <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//判断缓存中的对象是不是空事务属性的对象</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>cached <span class="token operator">==</span> NULL_TRANSACTION_ATTRIBUTE<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> null<span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">//不是的话 就进行返回</span>            <span class="token keyword">else</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> cached<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//我们需要查找我们的事务注解 --解析这块重要代码--</span>            TransactionAttribute txAttr <span class="token operator">=</span> <span class="token function">computeTransactionAttribute</span><span class="token punctuation">(</span>method<span class="token punctuation">,</span> targetClass<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 若解析出来的事务注解属性为空</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>txAttr <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">//往缓存中存放空事务注解属性</span>                <span class="token keyword">this</span><span class="token punctuation">.</span>attributeCache<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>cacheKey<span class="token punctuation">,</span> NULL_TRANSACTION_ATTRIBUTE<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">else</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">//我们执行方法的描述符 全类名+方法名</span>                String methodIdentification <span class="token operator">=</span> ClassUtils<span class="token punctuation">.</span><span class="token function">getQualifiedMethodName</span><span class="token punctuation">(</span>method<span class="token punctuation">,</span> targetClass<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">//把方法描述设置到事务属性上去</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>txAttr <span class="token keyword">instanceof</span> <span class="token class-name">DefaultTransactionAttribute</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token punctuation">(</span><span class="token punctuation">(</span>DefaultTransactionAttribute<span class="token punctuation">)</span> txAttr<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setDescriptor</span><span class="token punctuation">(</span>methodIdentification<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>logger<span class="token punctuation">.</span><span class="token function">isDebugEnabled</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    logger<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">"Adding transactional method '"</span> <span class="token operator">+</span> methodIdentification <span class="token operator">+</span> <span class="token string">"' with attribute: "</span> <span class="token operator">+</span> txAttr<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token comment" spellcheck="true">//加入到缓存</span>                <span class="token keyword">this</span><span class="token punctuation">.</span>attributeCache<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>cacheKey<span class="token punctuation">,</span> txAttr<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">return</span> txAttr<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span></code></pre><h4 id="computeTransactionAttribute方法"><a href="#computeTransactionAttribute方法" class="headerlink" title="computeTransactionAttribute方法"></a><strong>computeTransactionAttribute方法</strong></h4><pre class=" language-java"><code class="language-java"><span class="token keyword">protected</span> TransactionAttribute <span class="token function">computeTransactionAttribute</span><span class="token punctuation">(</span>Method method<span class="token punctuation">,</span> <span class="token annotation punctuation">@Nullable</span> Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> targetClass<span class="token punctuation">)</span> <span class="token punctuation">{</span>   <span class="token comment" spellcheck="true">//判断我们的事务方法上的修饰符是不是public的</span>   <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">allowPublicMethodsOnly</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>Modifier<span class="token punctuation">.</span><span class="token function">isPublic</span><span class="token punctuation">(</span>method<span class="token punctuation">.</span><span class="token function">getModifiers</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> null<span class="token punctuation">;</span>   <span class="token punctuation">}</span>   <span class="token comment" spellcheck="true">// The method may be on an interface, but we need attributes from the target class.</span>   <span class="token comment" spellcheck="true">// If the target class is null, the method will be unchanged.</span>   Method specificMethod <span class="token operator">=</span> AopUtils<span class="token punctuation">.</span><span class="token function">getMostSpecificMethod</span><span class="token punctuation">(</span>method<span class="token punctuation">,</span> targetClass<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//第一步，我们先去目标class的方法上去找我们的事务注解 这里面其实也找了接口方法，父类方法</span>   TransactionAttribute txAttr <span class="token operator">=</span> <span class="token function">findTransactionAttribute</span><span class="token punctuation">(</span>specificMethod<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token keyword">if</span> <span class="token punctuation">(</span>txAttr <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> txAttr<span class="token punctuation">;</span>   <span class="token punctuation">}</span>   <span class="token comment" spellcheck="true">//第二步:去我们实现类上找事务注解 这里面其实也找了接口类和父类</span>   txAttr <span class="token operator">=</span> <span class="token function">findTransactionAttribute</span><span class="token punctuation">(</span>specificMethod<span class="token punctuation">.</span><span class="token function">getDeclaringClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token keyword">if</span> <span class="token punctuation">(</span>txAttr <span class="token operator">!=</span> null <span class="token operator">&amp;&amp;</span> ClassUtils<span class="token punctuation">.</span><span class="token function">isUserLevelMethod</span><span class="token punctuation">(</span>method<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> txAttr<span class="token punctuation">;</span>   <span class="token punctuation">}</span>   <span class="token comment" spellcheck="true">// 具体方法不是当前的方法说明 当前方法是接口方法 ,其实这里是走不到的接口相关的在上面就已经解析了，后面spring好像优化掉了，上面的逻辑不会再查接口方法接口类，我这是spring4暂时是这样的</span>   <span class="token keyword">if</span> <span class="token punctuation">(</span>specificMethod <span class="token operator">!=</span> method<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">//去我们的实现类的接口上的方法去找事务注解</span>      txAttr <span class="token operator">=</span> <span class="token function">findTransactionAttribute</span><span class="token punctuation">(</span>method<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>txAttr <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token keyword">return</span> txAttr<span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token comment" spellcheck="true">//去我们的实现类的接口上去找事务注解</span>      txAttr <span class="token operator">=</span> <span class="token function">findTransactionAttribute</span><span class="token punctuation">(</span>method<span class="token punctuation">.</span><span class="token function">getDeclaringClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>txAttr <span class="token operator">!=</span> null <span class="token operator">&amp;&amp;</span> ClassUtils<span class="token punctuation">.</span><span class="token function">isUserLevelMethod</span><span class="token punctuation">(</span>method<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token keyword">return</span> txAttr<span class="token punctuation">;</span>      <span class="token punctuation">}</span>   <span class="token punctuation">}</span>   <span class="token keyword">return</span> null<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>从上面逻辑看大致是实现类方法-&gt;实现类-&gt;接口方法-&gt;接口类，其实不是这样的findTransactionAttribute这个方法里面会把接口类，接口方法也给查了，所以大致匹配逻辑是实现类方法-&gt;接口方法-&gt;实现类-&gt;接口类</p><h3 id="代理调用"><a href="#代理调用" class="headerlink" title="代理调用"></a>代理调用</h3><p>这里我们依然是看Jdk动态代理</p><p>来到JdkDynamicAopProxy.invoke-&gt;invocation.proceed-&gt;ReflectiveMethodInvocation.proceed-&gt;TransactionInterceptor.invoke(TransactionInterceptor是事务注解注入的配置类中的Advisor中的增强)-&gt;invokeWithinTransaction</p><h4 id="invokeWithinTransaction"><a href="#invokeWithinTransaction" class="headerlink" title="invokeWithinTransaction"></a>invokeWithinTransaction</h4><pre class=" language-java"><code class="language-java"><span class="token keyword">protected</span> Object <span class="token function">invokeWithinTransaction</span><span class="token punctuation">(</span>Method method<span class="token punctuation">,</span> <span class="token annotation punctuation">@Nullable</span> Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> targetClass<span class="token punctuation">,</span>            <span class="token keyword">final</span> InvocationCallback invocation<span class="token punctuation">)</span> <span class="token keyword">throws</span> Throwable <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 获取我们的事务属源对象 在配置类中添加的</span>    TransactionAttributeSource tas <span class="token operator">=</span> <span class="token function">getTransactionAttributeSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 获取解析后的事务属性信息</span>    <span class="token keyword">final</span> TransactionAttribute txAttr <span class="token operator">=</span> <span class="token punctuation">(</span>tas <span class="token operator">!=</span> null <span class="token operator">?</span> tas<span class="token punctuation">.</span><span class="token function">getTransactionAttribute</span><span class="token punctuation">(</span>method<span class="token punctuation">,</span> targetClass<span class="token punctuation">)</span> <span class="token operator">:</span> null<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 获取我们配置的事务管理器对象</span>    <span class="token keyword">final</span> PlatformTransactionManager tm <span class="token operator">=</span> <span class="token function">determineTransactionManager</span><span class="token punctuation">(</span>txAttr<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 从txAttr属性对象中获取出标注了@Transactionl的方法描述符</span>    <span class="token keyword">final</span> String joinpointIdentification <span class="token operator">=</span> <span class="token function">methodIdentification</span><span class="token punctuation">(</span>method<span class="token punctuation">,</span> targetClass<span class="token punctuation">,</span> txAttr<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//处理声明式事务</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>txAttr <span class="token operator">==</span> null <span class="token operator">||</span> <span class="token operator">!</span><span class="token punctuation">(</span>tm <span class="token keyword">instanceof</span> <span class="token class-name">CallbackPreferringPlatformTransactionManager</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//有没有必要创建事务</span>        TransactionInfo txInfo <span class="token operator">=</span> <span class="token function">createTransactionIfNecessary</span><span class="token punctuation">(</span>tm<span class="token punctuation">,</span> txAttr<span class="token punctuation">,</span> joinpointIdentification<span class="token punctuation">)</span><span class="token punctuation">;</span>        Object retVal<span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//调用钩子函数进行回调目标方法</span>            retVal <span class="token operator">=</span> invocation<span class="token punctuation">.</span><span class="token function">proceedWithInvocation</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Throwable</span> ex<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//抛出异常进行回滚处理</span>            <span class="token function">completeTransactionAfterThrowing</span><span class="token punctuation">(</span>txInfo<span class="token punctuation">,</span> ex<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">throw</span> ex<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">finally</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//清空我们的线程变量中transactionInfo的值</span>            <span class="token function">cleanupTransactionInfo</span><span class="token punctuation">(</span>txInfo<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//提交事务</span>        <span class="token function">commitTransactionAfterReturning</span><span class="token punctuation">(</span>txInfo<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> retVal<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 编程式事务：（回调偏向）</span>    <span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token keyword">final</span> ThrowableHolder throwableHolder <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ThrowableHolder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// It's a CallbackPreferringPlatformTransactionManager: pass a TransactionCallback in.</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            Object result <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>CallbackPreferringPlatformTransactionManager<span class="token punctuation">)</span> tm<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span>txAttr<span class="token punctuation">,</span> status <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>                TransactionInfo txInfo <span class="token operator">=</span> <span class="token function">prepareTransactionInfo</span><span class="token punctuation">(</span>tm<span class="token punctuation">,</span> txAttr<span class="token punctuation">,</span> joinpointIdentification<span class="token punctuation">,</span> status<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">try</span> <span class="token punctuation">{</span>                    <span class="token keyword">return</span> invocation<span class="token punctuation">.</span><span class="token function">proceedWithInvocation</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Throwable</span> ex<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>txAttr<span class="token punctuation">.</span><span class="token function">rollbackOn</span><span class="token punctuation">(</span>ex<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                        <span class="token comment" spellcheck="true">// A RuntimeException: will lead to a rollback.</span>                        <span class="token keyword">if</span> <span class="token punctuation">(</span>ex <span class="token keyword">instanceof</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                            <span class="token keyword">throw</span> <span class="token punctuation">(</span>RuntimeException<span class="token punctuation">)</span> ex<span class="token punctuation">;</span>                        <span class="token punctuation">}</span>                        <span class="token keyword">else</span> <span class="token punctuation">{</span>                            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">ThrowableHolderException</span><span class="token punctuation">(</span>ex<span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token punctuation">}</span>                    <span class="token punctuation">}</span>                    <span class="token keyword">else</span> <span class="token punctuation">{</span>                        <span class="token comment" spellcheck="true">// A normal return value: will lead to a commit.</span>                        throwableHolder<span class="token punctuation">.</span>throwable <span class="token operator">=</span> ex<span class="token punctuation">;</span>                        <span class="token keyword">return</span> null<span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span>                <span class="token keyword">finally</span> <span class="token punctuation">{</span>                    <span class="token function">cleanupTransactionInfo</span><span class="token punctuation">(</span>txInfo<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// Check result state: It might indicate a Throwable to rethrow.</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>throwableHolder<span class="token punctuation">.</span>throwable <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">throw</span> throwableHolder<span class="token punctuation">.</span>throwable<span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">return</span> result<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">ThrowableHolderException</span> ex<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">throw</span> ex<span class="token punctuation">.</span><span class="token function">getCause</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">TransactionSystemException</span> ex2<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>throwableHolder<span class="token punctuation">.</span>throwable <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                logger<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"Application exception overridden by commit exception"</span><span class="token punctuation">,</span> throwableHolder<span class="token punctuation">.</span>throwable<span class="token punctuation">)</span><span class="token punctuation">;</span>                ex2<span class="token punctuation">.</span><span class="token function">initApplicationException</span><span class="token punctuation">(</span>throwableHolder<span class="token punctuation">.</span>throwable<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">throw</span> ex2<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Throwable</span> ex2<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>throwableHolder<span class="token punctuation">.</span>throwable <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                logger<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"Application exception overridden by commit exception"</span><span class="token punctuation">,</span> throwableHolder<span class="token punctuation">.</span>throwable<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">throw</span> ex2<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="createTransactionIfNecessary方法（创建事务就在这）"><a href="#createTransactionIfNecessary方法（创建事务就在这）" class="headerlink" title="createTransactionIfNecessary方法（创建事务就在这）"></a>createTransactionIfNecessary方法（创建事务就在这）</h4><pre class=" language-java"><code class="language-java"><span class="token keyword">protected</span> TransactionInfo <span class="token function">createTransactionIfNecessary</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Nullable</span> PlatformTransactionManager tm<span class="token punctuation">,</span>      <span class="token annotation punctuation">@Nullable</span> TransactionAttribute txAttr<span class="token punctuation">,</span> <span class="token keyword">final</span> String joinpointIdentification<span class="token punctuation">)</span> <span class="token punctuation">{</span>   <span class="token comment" spellcheck="true">// 如果还没有定义名字，把连接点的ID定义成事务的名称</span>   <span class="token keyword">if</span> <span class="token punctuation">(</span>txAttr <span class="token operator">!=</span> null <span class="token operator">&amp;&amp;</span> txAttr<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>      txAttr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DelegatingTransactionAttribute</span><span class="token punctuation">(</span>txAttr<span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token annotation punctuation">@Override</span>         <span class="token keyword">public</span> String <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> joinpointIdentification<span class="token punctuation">;</span>         <span class="token punctuation">}</span>      <span class="token punctuation">}</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span>   TransactionStatus status <span class="token operator">=</span> null<span class="token punctuation">;</span>   <span class="token keyword">if</span> <span class="token punctuation">(</span>txAttr <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>tm <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token comment" spellcheck="true">//获取一个事务状态,这里的tm就是事务管理器是在配置类中定义的DataSourceTransactionManager</span>         status <span class="token operator">=</span> tm<span class="token punctuation">.</span><span class="token function">getTransaction</span><span class="token punctuation">(</span>txAttr<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token keyword">else</span> <span class="token punctuation">{</span>         <span class="token keyword">if</span> <span class="token punctuation">(</span>logger<span class="token punctuation">.</span><span class="token function">isDebugEnabled</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            logger<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">"Skipping transactional joinpoint ["</span> <span class="token operator">+</span> joinpointIdentification <span class="token operator">+</span>                  <span class="token string">"] because no transaction manager has been configured"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token punctuation">}</span>      <span class="token punctuation">}</span>   <span class="token punctuation">}</span>   <span class="token comment" spellcheck="true">//把事务状态和事务属性等信息封装成一个TransactionInfo对象</span>   <span class="token keyword">return</span> <span class="token function">prepareTransactionInfo</span><span class="token punctuation">(</span>tm<span class="token punctuation">,</span> txAttr<span class="token punctuation">,</span> joinpointIdentification<span class="token punctuation">,</span> status<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h4 id="DataSourceTransactionManager-getTransaction（事务传播行为就在这处理的）"><a href="#DataSourceTransactionManager-getTransaction（事务传播行为就在这处理的）" class="headerlink" title="DataSourceTransactionManager.getTransaction（事务传播行为就在这处理的）"></a>DataSourceTransactionManager.getTransaction（事务传播行为就在这处理的）</h4><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token keyword">final</span> TransactionStatus <span class="token function">getTransaction</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Nullable</span> TransactionDefinition definition<span class="token punctuation">)</span> <span class="token keyword">throws</span> TransactionException <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//尝试获取一个事务对象</span>    Object transaction <span class="token operator">=</span> <span class="token function">doGetTransaction</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// Cache debug flag to avoid repeated checks.</span>    <span class="token keyword">boolean</span> debugEnabled <span class="token operator">=</span> logger<span class="token punctuation">.</span><span class="token function">isDebugEnabled</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//判断从上一个方法传递进来的事务属性是不是为空</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>definition <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>        definition <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DefaultTransactionDefinition</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//判断是不是已经存在了事务对象,这里判断的是存不存在connectionHolder这个属性，存在这个属性表示事务开启，挂起suspend还是开启事务doBegin都会对这个属性进行操作（事务嵌套）</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isExistingTransaction</span><span class="token punctuation">(</span>transaction<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//处理存在的事务</span>        <span class="token keyword">return</span> <span class="token function">handleExistingTransaction</span><span class="token punctuation">(</span>definition<span class="token punctuation">,</span> transaction<span class="token punctuation">,</span> debugEnabled<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//检查事务设置的超时时间</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>definition<span class="token punctuation">.</span><span class="token function">getTimeout</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> TransactionDefinition<span class="token punctuation">.</span>TIMEOUT_DEFAULT<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">InvalidTimeoutException</span><span class="token punctuation">(</span><span class="token string">"Invalid transaction timeout"</span><span class="token punctuation">,</span> definition<span class="token punctuation">.</span><span class="token function">getTimeout</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//若当前的事务属性 PROPAGATION_MANDATORY 表示必须运行在事务中，若当前没有事务就抛出异常</span>    <span class="token comment" spellcheck="true">//由于isExistingTransaction(transaction)说明当前是不存在事务的，那么就会抛出异常</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>definition<span class="token punctuation">.</span><span class="token function">getPropagationBehavior</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> TransactionDefinition<span class="token punctuation">.</span>PROPAGATION_MANDATORY<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalTransactionStateException</span><span class="token punctuation">(</span>            <span class="token string">"No existing transaction found for transaction marked with propagation 'mandatory'"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * PROPAGATION_REQUIRED 开启事务，存在事务嵌套融合事务     * PROPAGATION_REQUIRES_NEW 开启事务，存在事务嵌套挂起事务     * PROPAGATION_NESTED: PROPAGATION_NESTED 开启事务     * 表示如果当前正有一个事务在运行中，则该方法应该运行在 一个嵌套的事务中，     * 被嵌套的事务可以独立于封装事务进行提交或者回滚(保存点)     * 其实走到这里，表明是没有事务嵌套情况，所以判断里面只要开启事务即可     */</span>    <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>definition<span class="token punctuation">.</span><span class="token function">getPropagationBehavior</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> TransactionDefinition<span class="token punctuation">.</span>PROPAGATION_REQUIRED <span class="token operator">||</span>             definition<span class="token punctuation">.</span><span class="token function">getPropagationBehavior</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> TransactionDefinition<span class="token punctuation">.</span>PROPAGATION_REQUIRES_NEW <span class="token operator">||</span>             definition<span class="token punctuation">.</span><span class="token function">getPropagationBehavior</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> TransactionDefinition<span class="token punctuation">.</span>PROPAGATION_NESTED<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">/**         * 走到这里了,经过了上面的isExistingTransaction(transaction) 判断当前是不存在事务的         * 所有再这里是挂起当前事务传递一个null进去         */</span>        SuspendedResourcesHolder suspendedResources <span class="token operator">=</span> <span class="token function">suspend</span><span class="token punctuation">(</span>null<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>debugEnabled<span class="token punctuation">)</span> <span class="token punctuation">{</span>            logger<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">"Creating new transaction with name ["</span> <span class="token operator">+</span> definition<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"]: "</span> <span class="token operator">+</span> definition<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 意思是可以进行同步</span>            <span class="token keyword">boolean</span> newSynchronization <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token function">getTransactionSynchronization</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> SYNCHRONIZATION_NEVER<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 构造事务状态对象,newTransaction=true代表是一个新事务</span>            DefaultTransactionStatus status <span class="token operator">=</span> <span class="token function">newTransactionStatus</span><span class="token punctuation">(</span>                definition<span class="token punctuation">,</span> transaction<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">,</span> newSynchronization<span class="token punctuation">,</span> debugEnabled<span class="token punctuation">,</span> suspendedResources<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 开启一个新的事务</span>            <span class="token function">doBegin</span><span class="token punctuation">(</span>transaction<span class="token punctuation">,</span> definition<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 把当前的事务信息绑定到线程变量去</span>            <span class="token function">prepareSynchronization</span><span class="token punctuation">(</span>status<span class="token punctuation">,</span> definition<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> status<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">RuntimeException</span> <span class="token operator">|</span> Error ex<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">resume</span><span class="token punctuation">(</span>null<span class="token punctuation">,</span> suspendedResources<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">throw</span> ex<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">else</span> <span class="token punctuation">{</span>         <span class="token comment" spellcheck="true">//创建一个空的事务</span>        <span class="token comment" spellcheck="true">// Create "empty" transaction: no actual transaction, but potentially synchronization.</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>definition<span class="token punctuation">.</span><span class="token function">getIsolationLevel</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> TransactionDefinition<span class="token punctuation">.</span>ISOLATION_DEFAULT <span class="token operator">&amp;&amp;</span> logger<span class="token punctuation">.</span><span class="token function">isWarnEnabled</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            logger<span class="token punctuation">.</span><span class="token function">warn</span><span class="token punctuation">(</span><span class="token string">"Custom isolation level specified but no actual transaction initiated; "</span> <span class="token operator">+</span>                        <span class="token string">"isolation level will effectively be ignored: "</span> <span class="token operator">+</span> definition<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">boolean</span> newSynchronization <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token function">getTransactionSynchronization</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> SYNCHRONIZATION_ALWAYS<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token function">prepareTransactionStatus</span><span class="token punctuation">(</span>definition<span class="token punctuation">,</span> null<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">,</span> newSynchronization<span class="token punctuation">,</span> debugEnabled<span class="token punctuation">,</span> null<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="handleExistingTransaction方法-处理嵌套事务"><a href="#handleExistingTransaction方法-处理嵌套事务" class="headerlink" title="handleExistingTransaction方法(处理嵌套事务)"></a>handleExistingTransaction方法(处理嵌套事务)</h4><pre class=" language-java"><code class="language-java"><span class="token keyword">private</span> TransactionStatus <span class="token function">handleExistingTransaction</span><span class="token punctuation">(</span>            TransactionDefinition definition<span class="token punctuation">,</span> Object transaction<span class="token punctuation">,</span> <span class="token keyword">boolean</span> debugEnabled<span class="token punctuation">)</span>            <span class="token keyword">throws</span> TransactionException <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// NEVER 存在外部事务 抛出异常</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>definition<span class="token punctuation">.</span><span class="token function">getPropagationBehavior</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> TransactionDefinition<span class="token punctuation">.</span>PROPAGATION_NEVER<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalTransactionStateException</span><span class="token punctuation">(</span>                    <span class="token string">"Existing transaction found for transaction marked with propagation 'never'"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// NOT_SUPPORTED 存在外部事务 挂起外部事务</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>definition<span class="token punctuation">.</span><span class="token function">getPropagationBehavior</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> TransactionDefinition<span class="token punctuation">.</span>PROPAGATION_NOT_SUPPORTED<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>debugEnabled<span class="token punctuation">)</span> <span class="token punctuation">{</span>                logger<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">"Suspending current transaction"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">// 挂起存在的事务</span>            Object suspendedResources <span class="token operator">=</span> <span class="token function">suspend</span><span class="token punctuation">(</span>transaction<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">boolean</span> newSynchronization <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token function">getTransactionSynchronization</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> SYNCHRONIZATION_ALWAYS<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 创建一个新的非事务状态(保存了上一个存在事务状态的属性)</span>            <span class="token keyword">return</span> <span class="token function">prepareTransactionStatus</span><span class="token punctuation">(</span>                    definition<span class="token punctuation">,</span> null<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> newSynchronization<span class="token punctuation">,</span> debugEnabled<span class="token punctuation">,</span> suspendedResources<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// REQUIRES_NEW 存在外部事务 挂起外部事务,创建新的事务</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>definition<span class="token punctuation">.</span><span class="token function">getPropagationBehavior</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> TransactionDefinition<span class="token punctuation">.</span>PROPAGATION_REQUIRES_NEW<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>debugEnabled<span class="token punctuation">)</span> <span class="token punctuation">{</span>                logger<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">"Suspending current transaction, creating new transaction with name ["</span> <span class="token operator">+</span>                        definition<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"]"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">// 挂起已经存在的事务</span>            SuspendedResourcesHolder suspendedResources <span class="token operator">=</span> <span class="token function">suspend</span><span class="token punctuation">(</span>transaction<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// 是否需要新开启同步</span>                <span class="token keyword">boolean</span> newSynchronization <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token function">getTransactionSynchronization</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> SYNCHRONIZATION_NEVER<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">// 创建一个新的事务状态(包含了挂起的事务的属性)</span>                DefaultTransactionStatus status <span class="token operator">=</span> <span class="token function">newTransactionStatus</span><span class="token punctuation">(</span>                        definition<span class="token punctuation">,</span> transaction<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">,</span> newSynchronization<span class="token punctuation">,</span> debugEnabled<span class="token punctuation">,</span> suspendedResources<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">// 开启新的事务</span>                <span class="token function">doBegin</span><span class="token punctuation">(</span>transaction<span class="token punctuation">,</span> definition<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">// 把新的事务状态设置到当前的线程变量中去</span>                <span class="token function">prepareSynchronization</span><span class="token punctuation">(</span>status<span class="token punctuation">,</span> definition<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">return</span> status<span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">RuntimeException</span> <span class="token operator">|</span> Error beginEx<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token function">resumeAfterBeginException</span><span class="token punctuation">(</span>transaction<span class="token punctuation">,</span> suspendedResources<span class="token punctuation">,</span> beginEx<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">throw</span> beginEx<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// NESTED 存在外部事务 融合到外部事务中</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>definition<span class="token punctuation">.</span><span class="token function">getPropagationBehavior</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> TransactionDefinition<span class="token punctuation">.</span>PROPAGATION_NESTED<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isNestedTransactionAllowed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">NestedTransactionNotSupportedException</span><span class="token punctuation">(</span>                        <span class="token string">"Transaction manager does not allow nested transactions by default - "</span> <span class="token operator">+</span>                        <span class="token string">"specify 'nestedTransactionAllowed' property with value 'true'"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>debugEnabled<span class="token punctuation">)</span> <span class="token punctuation">{</span>                logger<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">"Creating nested transaction with name ["</span> <span class="token operator">+</span> definition<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"]"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">// 是否支持保存点：非JTA事务走这个分支。</span>             <span class="token comment" spellcheck="true">// AbstractPlatformTransactionManager默认是true，JtaTransactionManager复写了该方法false，DataSourceTransactionManager没有复写，还是true,</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">useSavepointForNestedTransaction</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// 开启一个新的事务</span>                DefaultTransactionStatus status <span class="token operator">=</span>                        <span class="token function">prepareTransactionStatus</span><span class="token punctuation">(</span>definition<span class="token punctuation">,</span> transaction<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> debugEnabled<span class="token punctuation">,</span> null<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">// 为事务设置一个回退点</span>                <span class="token comment" spellcheck="true">//savepoint可以在一组事务中,设置一个回滚点,点以上的不受影响,点以下的回滚.（外层影响内层,内层不会影响外层）</span>                status<span class="token punctuation">.</span><span class="token function">createAndHoldSavepoint</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">return</span> status<span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">else</span> <span class="token punctuation">{</span>                 <span class="token comment" spellcheck="true">// JTA事务走这个分支，创建新事务</span>                <span class="token keyword">boolean</span> newSynchronization <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token function">getTransactionSynchronization</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> SYNCHRONIZATION_NEVER<span class="token punctuation">)</span><span class="token punctuation">;</span>                DefaultTransactionStatus status <span class="token operator">=</span> <span class="token function">newTransactionStatus</span><span class="token punctuation">(</span>                        definition<span class="token punctuation">,</span> transaction<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">,</span> newSynchronization<span class="token punctuation">,</span> debugEnabled<span class="token punctuation">,</span> null<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token function">doBegin</span><span class="token punctuation">(</span>transaction<span class="token punctuation">,</span> definition<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token function">prepareSynchronization</span><span class="token punctuation">(</span>status<span class="token punctuation">,</span> definition<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">return</span> status<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// Assumably PROPAGATION_SUPPORTS or PROPAGATION_REQUIRED.</span>        <span class="token comment" spellcheck="true">// 省略代码</span>        <span class="token keyword">boolean</span> newSynchronization <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token function">getTransactionSynchronization</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> SYNCHRONIZATION_NEVER<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token function">prepareTransactionStatus</span><span class="token punctuation">(</span>definition<span class="token punctuation">,</span> transaction<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> newSynchronization<span class="token punctuation">,</span> debugEnabled<span class="token punctuation">,</span> null<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><p>不管是在处理顶层事务还是嵌套事务，只要是开启事务就会调用doBegin方法，挂起事务就会执行suspend方法</p><h4 id="doBegin方法"><a href="#doBegin方法" class="headerlink" title="doBegin方法"></a>doBegin方法</h4><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Override</span><span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doBegin</span><span class="token punctuation">(</span>Object transaction<span class="token punctuation">,</span> TransactionDefinition definition<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//强制转化事务对象</span>    DataSourceTransactionObject txObject <span class="token operator">=</span> <span class="token punctuation">(</span>DataSourceTransactionObject<span class="token punctuation">)</span> transaction<span class="token punctuation">;</span>    Connection con <span class="token operator">=</span> null<span class="token punctuation">;</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//判断事务对象没有数据库连接持有器</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>txObject<span class="token punctuation">.</span><span class="token function">hasConnectionHolder</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">||</span>            txObject<span class="token punctuation">.</span><span class="token function">getConnectionHolder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isSynchronizedWithTransaction</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//通过数据源获取一个数据库连接对象</span>            Connection newCon <span class="token operator">=</span> <span class="token function">obtainDataSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>logger<span class="token punctuation">.</span><span class="token function">isDebugEnabled</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                logger<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">"Acquired Connection ["</span> <span class="token operator">+</span> newCon <span class="token operator">+</span> <span class="token string">"] for JDBC transaction"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">//把我们的数据库连接包装成一个ConnectionHolder对象 然后设置到我们的txObject对象中去</span>            txObject<span class="token punctuation">.</span><span class="token function">setConnectionHolder</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ConnectionHolder</span><span class="token punctuation">(</span>newCon<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//标记当前的连接是一个同步事务</span>        txObject<span class="token punctuation">.</span><span class="token function">getConnectionHolder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setSynchronizedWithTransaction</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        con <span class="token operator">=</span> txObject<span class="token punctuation">.</span><span class="token function">getConnectionHolder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 设置isReadOnly、隔离级别（null表示默认的事务隔离级别是数据库的事务隔离级别）</span>        Integer previousIsolationLevel <span class="token operator">=</span> DataSourceUtils<span class="token punctuation">.</span><span class="token function">prepareConnectionForTransaction</span><span class="token punctuation">(</span>con<span class="token punctuation">,</span> definition<span class="token punctuation">)</span><span class="token punctuation">;</span>        txObject<span class="token punctuation">.</span><span class="token function">setPreviousIsolationLevel</span><span class="token punctuation">(</span>previousIsolationLevel<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//setAutoCommit 默认为true，即每条SQL语句在各自的一个事务中执行。</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>con<span class="token punctuation">.</span><span class="token function">getAutoCommit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            txObject<span class="token punctuation">.</span><span class="token function">setMustRestoreAutoCommit</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>logger<span class="token punctuation">.</span><span class="token function">isDebugEnabled</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                logger<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">"Switching JDBC Connection ["</span> <span class="token operator">+</span> con <span class="token operator">+</span> <span class="token string">"] to manual commit"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            con<span class="token punctuation">.</span><span class="token function">setAutoCommit</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 开启事务</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//事务为只读事务即设置为只读事务否则跳过</span>        <span class="token function">prepareTransactionalConnection</span><span class="token punctuation">(</span>con<span class="token punctuation">,</span> definition<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//设置事务激活</span>        txObject<span class="token punctuation">.</span><span class="token function">getConnectionHolder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setTransactionActive</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//设置事务超时时间</span>        <span class="token keyword">int</span> timeout <span class="token operator">=</span> <span class="token function">determineTimeout</span><span class="token punctuation">(</span>definition<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>timeout <span class="token operator">!=</span> TransactionDefinition<span class="token punctuation">.</span>TIMEOUT_DEFAULT<span class="token punctuation">)</span> <span class="token punctuation">{</span>            txObject<span class="token punctuation">.</span><span class="token function">getConnectionHolder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setTimeoutInSeconds</span><span class="token punctuation">(</span>timeout<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 绑定我们的数据源和连接到我们的同步管理器上,把数据源作为key,数据库连接作为value,设置到线程变量中</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>txObject<span class="token punctuation">.</span><span class="token function">isNewConnectionHolder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 在doGetTransaction中会获取</span>            TransactionSynchronizationManager<span class="token punctuation">.</span><span class="token function">bindResource</span><span class="token punctuation">(</span><span class="token function">obtainDataSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> txObject<span class="token punctuation">.</span><span class="token function">getConnectionHolder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Throwable</span> ex<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>txObject<span class="token punctuation">.</span><span class="token function">isNewConnectionHolder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//释放数据库连接</span>            DataSourceUtils<span class="token punctuation">.</span><span class="token function">releaseConnection</span><span class="token punctuation">(</span>con<span class="token punctuation">,</span> <span class="token function">obtainDataSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            txObject<span class="token punctuation">.</span><span class="token function">setConnectionHolder</span><span class="token punctuation">(</span>null<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">CannotCreateTransactionException</span><span class="token punctuation">(</span><span class="token string">"Could not open JDBC Connection for transaction"</span><span class="token punctuation">,</span> ex<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="suspend方法"><a href="#suspend方法" class="headerlink" title="suspend方法"></a>suspend方法</h4><p>这里执行的是挂起事务，主要操作是将原有事务对象放到暂存资源持有器SuspendedResourcesHolder，原有事务对象值全部置为默认值，重新开启事务会放入新的事务对象，在当前事务commit或rollback的时候在吧这个事务对象重新放回事务同步管理器TransactionSynchronizationManager</p><pre class=" language-java"><code class="language-java"><span class="token keyword">protected</span> <span class="token keyword">final</span> SuspendedResourcesHolder <span class="token function">suspend</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Nullable</span> Object transaction<span class="token punctuation">)</span> <span class="token keyword">throws</span> TransactionException <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 嵌套事务 已经激活，在doBegin后激活</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>TransactionSynchronizationManager<span class="token punctuation">.</span><span class="token function">isSynchronizationActive</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        List<span class="token operator">&lt;</span>TransactionSynchronization<span class="token operator">></span> suspendedSynchronizations <span class="token operator">=</span> <span class="token function">doSuspendSynchronization</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            Object suspendedResources <span class="token operator">=</span> null<span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>transaction <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">//connectionHolder置为空，解绑我们的数据源和同步管理器</span>                suspendedResources <span class="token operator">=</span> <span class="token function">doSuspend</span><span class="token punctuation">(</span>transaction<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">//获取已存在的事务的名称</span>            String name <span class="token operator">=</span> TransactionSynchronizationManager<span class="token punctuation">.</span><span class="token function">getCurrentTransactionName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//清空线程变量的</span>            TransactionSynchronizationManager<span class="token punctuation">.</span><span class="token function">setCurrentTransactionName</span><span class="token punctuation">(</span>null<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//获取出只读事务的名称</span>            <span class="token keyword">boolean</span> readOnly <span class="token operator">=</span> TransactionSynchronizationManager<span class="token punctuation">.</span><span class="token function">isCurrentTransactionReadOnly</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//清空线程变量的</span>            TransactionSynchronizationManager<span class="token punctuation">.</span><span class="token function">setCurrentTransactionReadOnly</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//获取已存在事务的隔离级别</span>            Integer isolationLevel <span class="token operator">=</span> TransactionSynchronizationManager<span class="token punctuation">.</span><span class="token function">getCurrentTransactionIsolationLevel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//清空隔离级别</span>            TransactionSynchronizationManager<span class="token punctuation">.</span><span class="token function">setCurrentTransactionIsolationLevel</span><span class="token punctuation">(</span>null<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//获取激活标志</span>            <span class="token keyword">boolean</span> wasActive <span class="token operator">=</span> TransactionSynchronizationManager<span class="token punctuation">.</span><span class="token function">isActualTransactionActive</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//清空标记Actual-外层事务</span>            TransactionSynchronizationManager<span class="token punctuation">.</span><span class="token function">setActualTransactionActive</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//把上诉从线程变量中获取出来的存在事务属性封装为挂起的事务属性返回出去</span>            <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">SuspendedResourcesHolder</span><span class="token punctuation">(</span>                suspendedResources<span class="token punctuation">,</span> suspendedSynchronizations<span class="token punctuation">,</span> name<span class="token punctuation">,</span> readOnly<span class="token punctuation">,</span> isolationLevel<span class="token punctuation">,</span> wasActive<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">RuntimeException</span> <span class="token operator">|</span> Error ex<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// doSuspend failed - original transaction is still active...</span>            <span class="token function">doResumeSynchronization</span><span class="token punctuation">(</span>suspendedSynchronizations<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">throw</span> ex<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>transaction <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// Transaction active but no synchronization active.</span>        Object suspendedResources <span class="token operator">=</span> <span class="token function">doSuspend</span><span class="token punctuation">(</span>transaction<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">SuspendedResourcesHolder</span><span class="token punctuation">(</span>suspendedResources<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// Neither transaction nor synchronization active.</span>        <span class="token keyword">return</span> null<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 源码 </tag>
            
            <tag> Spring </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring AOP原理解析</title>
      <link href="/2021/03/10/springaop/"/>
      <url>/2021/03/10/springaop/</url>
      
        <content type="html"><![CDATA[<p>Spring AOP 具体应用就是面向切面编程。AOP就是在我们原先的目标类上面进行一定程度的封装，在方法执行前、方法执行后、方法抛出异常，方法返回后调用某个方法。Spring AOP是基于动态代理实现的，默认使用JDK动态代理（可以强制使用CGLIB代理）。</p><h2 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h2><p>切面（Aspect）：切面是指将切点和通知模块化，通常用<code>@Aspect</code>注解来标注切面</p><p>连接点（Join point）：在程序执行过程中某个特定的点，例如某个方法调用的时间点或者处理异常的时间点。在Spring AOP中，一个连接点总是代表一个方法的执行</p><p>通知（Advice）：在某个连接点上执行的方法，通常有前置通知，后置通知，环绕通知，异常通知等等。</p><p>切点（Pointcut）：匹配连接点的断言。通知和切点表达式相关联，并在满足这个切点的连接点上运行（例如，当执行某个特定名称的方法时）。切点表达式如何和连接点匹配是AOP的核心：Spring默认使用AspectJ切点语义</p><p>引入（Introduction）：声明额外的方法或者某个类型的字段。Spring允许引入新的接口（以及一个对应的实现）到任何被通知的对象上。例如，可以使用引入来使bean实现 <code>IsModified</code>接口， 以便简化缓存机制（在AspectJ社区，引入也被称为内部类型声明（inter））</p><p>目标对象（Target object）：被一个或者多个切面所通知的对象。也被称作被通知（advised）对象。既然Spring AOP是通过运行时代理实现的，那么这个对象永远是一个被代理（proxied）的对象。</p><p>AOP代理（AOP proxy）：AOP框架创建的对象，用来实现切面契约（aspect contract）（包括通知方法执行等功能）。在Spring中，AOP代理可以是JDK动态代理或CGLIB代理。</p><p>织入（Weaving）： 把切面连接到其它的应用程序类型或者对象上，并创建一个被被通知的对象的过程。这个过程可以在编译时（例如使用AspectJ编译器）、类加载时或运行时中完成。 Spring和其他纯Java AOP框架一样，是在运行时完成织入的。</p><p>通知类型：</p><ul><li><p>前置通知（Before advice）: 在连接点之前运行但无法阻止执行流程进入连接点的通知（除非它引发异常）</p></li><li><p>后置返回通知（After returning advice）:在连接点正常完成后执行的通知（例如，当方法没有抛出任何异常并正常返回时）</p><p>后置异常通知（After throwing advice）: 在方法抛出异常退出时执行的通知</p></li><li><p>后置通知（总会执行）（After (finally) advice）: 当连接点退出的时候执行的通知（无论是正常返回还是异常退出）</p></li><li><p>环绕通知（Around Advice）:环绕连接点的通知，例如方法调用。这是最强大的一种通知类型，环绕通知可以在方法调用前后完成自定义的行为。它可以选择是否继续执行连接点或直接返回自定义的返回值又或抛出异常将执行结束</p></li></ul><h2 id="spring-aop源码解析"><a href="#spring-aop源码解析" class="headerlink" title="spring aop源码解析"></a>spring aop源码解析</h2><p>Spring基本使用很简单，不需要多说，这里简单贴个demo</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Aspect</span><span class="token annotation punctuation">@Order</span><span class="token annotation punctuation">@Component</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LogAspect</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Pointcut</span><span class="token punctuation">(</span><span class="token string">"execution(* com.dm.Calculate.*(..))"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">pointCut</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Before</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"pointCut()"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">methodBefore</span><span class="token punctuation">(</span>JoinPoint joinPoint<span class="token punctuation">)</span> <span class="token keyword">throws</span> Throwable <span class="token punctuation">{</span>        String methodName <span class="token operator">=</span> joinPoint<span class="token punctuation">.</span><span class="token function">getSignature</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"执行目标方法【"</span><span class="token operator">+</span>methodName<span class="token operator">+</span><span class="token string">"】的&lt;前置通知>,入参"</span><span class="token operator">+</span> Arrays<span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span>joinPoint<span class="token punctuation">.</span><span class="token function">getArgs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@After</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"pointCut()"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">methodAfter</span><span class="token punctuation">(</span>JoinPoint joinPoint<span class="token punctuation">)</span> <span class="token punctuation">{</span>        String methodName <span class="token operator">=</span> joinPoint<span class="token punctuation">.</span><span class="token function">getSignature</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"执行目标方法【"</span><span class="token operator">+</span>methodName<span class="token operator">+</span><span class="token string">"】的&lt;后置通知>,入参"</span><span class="token operator">+</span>Arrays<span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span>joinPoint<span class="token punctuation">.</span><span class="token function">getArgs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@AfterReturning</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"pointCut()"</span><span class="token punctuation">,</span>returning <span class="token operator">=</span> <span class="token string">"result"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">methodReturning</span><span class="token punctuation">(</span>JoinPoint joinPoint<span class="token punctuation">,</span> Object result<span class="token punctuation">)</span> <span class="token punctuation">{</span>        String methodName <span class="token operator">=</span> joinPoint<span class="token punctuation">.</span><span class="token function">getSignature</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"执行目标方法【"</span><span class="token operator">+</span>methodName<span class="token operator">+</span><span class="token string">"】的&lt;返回通知>,入参"</span><span class="token operator">+</span>Arrays<span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span>joinPoint<span class="token punctuation">.</span><span class="token function">getArgs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@AfterThrowing</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"pointCut()"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">methodAfterThrowing</span><span class="token punctuation">(</span>JoinPoint joinPoint<span class="token punctuation">)</span> <span class="token punctuation">{</span>        String methodName <span class="token operator">=</span> joinPoint<span class="token punctuation">.</span><span class="token function">getSignature</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"执行目标方法【"</span><span class="token operator">+</span>methodName<span class="token operator">+</span><span class="token string">"】的&lt;异常通知>,入参"</span><span class="token operator">+</span>Arrays<span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span>joinPoint<span class="token punctuation">.</span><span class="token function">getArgs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>使用AOP配置类需要配置<code>@EnableAspectJAutoProxy</code>这个注解</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span><span class="token annotation punctuation">@EnableAspectJAutoProxy</span><span class="token annotation punctuation">@ComponentScan</span><span class="token punctuation">(</span><span class="token string">"com.dm"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MainConfig</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></code></pre><p>我们从<code>@EnableAspectJAutoProxy</code>这个注解入手，到@Import(AspectJAutoProxyRegistrar.class)</p><p>然后通过父类的<code>registerBeanDefinitions</code>方法注册Bean定义，分析<code>registerBeanDefinitions</code>方法发现注册了<code>AnnotationAwareAspectJAutoProxyCreator</code>这个类并且解析了注解上配置的属性proxyTargetClass和exposeProxy</p><p>现在重点关注<code>AnnotationAwareAspectJAutoProxyCreator</code>这个类</p><p><img src="https://blog-dm.oss-cn-shanghai.aliyuncs.com/articleimage/20210218151647.png"></p><h3 id="切面解析"><a href="#切面解析" class="headerlink" title="切面解析"></a>切面解析</h3><p>发现<code>AnnotationAwareAspectJAutoProxyCreator</code>实现了InstantiationAwareBeanPostProcessor这个类，这个后置处理器在创建Bean之前执行，这里AOP重写这个postProcessBeforeInstantiation方法实现了AOP 切面的解析。</p><h4 id="InstantiationAwareBeanPostProcessor-postProcessBeforeInstantiation方法"><a href="#InstantiationAwareBeanPostProcessor-postProcessBeforeInstantiation方法" class="headerlink" title="InstantiationAwareBeanPostProcessor.postProcessBeforeInstantiation方法"></a>InstantiationAwareBeanPostProcessor.postProcessBeforeInstantiation方法</h4><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> Object <span class="token function">postProcessBeforeInstantiation</span><span class="token punctuation">(</span>Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> beanClass<span class="token punctuation">,</span> String beanName<span class="token punctuation">)</span> <span class="token keyword">throws</span> BeansException <span class="token punctuation">{</span>   <span class="token comment" spellcheck="true">//构建我们的缓存key,下次调用不会重新解析bean</span>   Object cacheKey <span class="token operator">=</span> <span class="token function">getCacheKey</span><span class="token punctuation">(</span>beanClass<span class="token punctuation">,</span> beanName<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//没有beanName或者没有包含在targetSourcedBeans中（一般都不会包含,因为targetSource需要手动设置,一般情况不会设置）</span>   <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>StringUtils<span class="token punctuation">.</span><span class="token function">hasLength</span><span class="token punctuation">(</span>beanName<span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span>targetSourcedBeans<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span>beanName<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">//被解析过直接返回</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>advisedBeans<span class="token punctuation">.</span><span class="token function">containsKey</span><span class="token punctuation">(</span>cacheKey<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token keyword">return</span> null<span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token comment" spellcheck="true">//判断是不是基础的bean（是不是切面类、通知、切点等）</span>      <span class="token comment" spellcheck="true">//判断是不是应该跳过 默认false（切面解析也在其中）</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isInfrastructureClass</span><span class="token punctuation">(</span>beanClass<span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token function">shouldSkip</span><span class="token punctuation">(</span>beanClass<span class="token punctuation">,</span> beanName<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token keyword">this</span><span class="token punctuation">.</span>advisedBeans<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>cacheKey<span class="token punctuation">,</span> Boolean<span class="token punctuation">.</span>FALSE<span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token keyword">return</span> null<span class="token punctuation">;</span>      <span class="token punctuation">}</span>   <span class="token punctuation">}</span>   <span class="token comment" spellcheck="true">/**    * TargetSource代理逻辑的实现,在创建代理时默认是SingletonTargetSource    * 所以如果指定了TargetSource 说明有自己的代理逻辑实现，在这就直接创建代理    */</span>   TargetSource targetSource <span class="token operator">=</span> <span class="token function">getCustomTargetSource</span><span class="token punctuation">(</span>beanClass<span class="token punctuation">,</span> beanName<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token keyword">if</span> <span class="token punctuation">(</span>targetSource <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>StringUtils<span class="token punctuation">.</span><span class="token function">hasLength</span><span class="token punctuation">(</span>beanName<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token keyword">this</span><span class="token punctuation">.</span>targetSourcedBeans<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>beanName<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      Object<span class="token punctuation">[</span><span class="token punctuation">]</span> specificInterceptors <span class="token operator">=</span> <span class="token function">getAdvicesAndAdvisorsForBean</span><span class="token punctuation">(</span>beanClass<span class="token punctuation">,</span> beanName<span class="token punctuation">,</span> targetSource<span class="token punctuation">)</span><span class="token punctuation">;</span>      Object proxy <span class="token operator">=</span> <span class="token function">createProxy</span><span class="token punctuation">(</span>beanClass<span class="token punctuation">,</span> beanName<span class="token punctuation">,</span> specificInterceptors<span class="token punctuation">,</span> targetSource<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>proxyTypes<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>cacheKey<span class="token punctuation">,</span> proxy<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">return</span> proxy<span class="token punctuation">;</span>   <span class="token punctuation">}</span>   <span class="token keyword">return</span> null<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Override</span><span class="token keyword">protected</span> <span class="token keyword">boolean</span> <span class="token function">isInfrastructureClass</span><span class="token punctuation">(</span>Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> beanClass<span class="token punctuation">)</span> <span class="token punctuation">{</span>   <span class="token comment" spellcheck="true">// 除了是切面相关的基础的bean(Advice,Pointcut,Advisor,AopInfrastructureBean) 还判断了是不是切面</span>   <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">isInfrastructureClass</span><span class="token punctuation">(</span>beanClass<span class="token punctuation">)</span> <span class="token operator">||</span>         <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>aspectJAdvisorFactory <span class="token operator">!=</span> null <span class="token operator">&amp;&amp;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>aspectJAdvisorFactory<span class="token punctuation">.</span><span class="token function">isAspect</span><span class="token punctuation">(</span>beanClass<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Override</span><span class="token keyword">protected</span> <span class="token keyword">boolean</span> <span class="token function">shouldSkip</span><span class="token punctuation">(</span>Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> beanClass<span class="token punctuation">,</span> String beanName<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 找到候选的Advisors(通知  前置通知、后置通知等..)</span>    List<span class="token operator">&lt;</span>Advisor<span class="token operator">></span> candidateAdvisors <span class="token operator">=</span> <span class="token function">findCandidateAdvisors</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>Advisor advisor <span class="token operator">:</span> candidateAdvisors<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>advisor <span class="token keyword">instanceof</span> <span class="token class-name">AspectJPointcutAdvisor</span> <span class="token operator">&amp;&amp;</span>            <span class="token punctuation">(</span><span class="token punctuation">(</span>AspectJPointcutAdvisor<span class="token punctuation">)</span> advisor<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getAspectName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>beanName<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">shouldSkip</span><span class="token punctuation">(</span>beanClass<span class="token punctuation">,</span> beanName<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>findCandidateAdvisors-&gt;findAdvisorBeans</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Override</span><span class="token keyword">protected</span> List<span class="token operator">&lt;</span>Advisor<span class="token operator">></span> <span class="token function">findCandidateAdvisors</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 找实现了Advisors接口的实现类，我们用的是注解方式，这里返回是空，其实这里还跟事务有关，暂时不做了解</span>    List<span class="token operator">&lt;</span>Advisor<span class="token operator">></span> advisors <span class="token operator">=</span> <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">findCandidateAdvisors</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//找出Aspect相关的信息之后封装为一个advisor</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>aspectJAdvisorsBuilder <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>        advisors<span class="token punctuation">.</span><span class="token function">addAll</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>aspectJAdvisorsBuilder<span class="token punctuation">.</span><span class="token function">buildAspectJAdvisors</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//返回我们所有的通知</span>    <span class="token keyword">return</span> advisors<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>aspectJAdvisorsBuilder.buildAspectJAdvisors方法</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> List<span class="token operator">&lt;</span>Advisor<span class="token operator">></span> <span class="token function">buildAspectJAdvisors</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 用于保存切面的名称,该地方aspectNames 是我们的类级别的缓存，用户缓存已经解析出来的切面信息</span>    List<span class="token operator">&lt;</span>String<span class="token operator">></span> aspectNames <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>aspectBeanNames<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 缓存字段aspectNames没有值 会在第一个单例执行后置处理器（AnnotationAwareAspectJAutoProxyCreator注册之后）的时候就会触发解析切面的操作</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>aspectNames <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 加上同步锁， 防止多线程同时加载Aspect</span>        <span class="token keyword">synchronized</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            aspectNames <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>aspectBeanNames<span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//做了双重检查加锁</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>aspectNames <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// 保存所有通知的集合</span>                List<span class="token operator">&lt;</span>Advisor<span class="token operator">></span> advisors <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">// 保存切面的名称的集合</span>                aspectNames <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">//aop去容器中获取到所有的组件的名称,然后再经过遍历，这个过程是十分的消耗性能的</span>                <span class="token comment" spellcheck="true">//所以spring再这里加入了保存切面信息的缓存</span>                String<span class="token punctuation">[</span><span class="token punctuation">]</span> beanNames <span class="token operator">=</span> BeanFactoryUtils<span class="token punctuation">.</span><span class="token function">beanNamesForTypeIncludingAncestors</span><span class="token punctuation">(</span>                    <span class="token keyword">this</span><span class="token punctuation">.</span>beanFactory<span class="token punctuation">,</span> Object<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">//遍历我们从IOC容器中获取处的所有bean的名称</span>                <span class="token keyword">for</span> <span class="token punctuation">(</span>String beanName <span class="token operator">:</span> beanNames<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isEligibleBean</span><span class="token punctuation">(</span>beanName<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                        <span class="token keyword">continue</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                    <span class="token comment" spellcheck="true">//通过beanName去容器中获取到对应class对象</span>                    Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> beanType <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>beanFactory<span class="token punctuation">.</span><span class="token function">getType</span><span class="token punctuation">(</span>beanName<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>beanType <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                        <span class="token keyword">continue</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                    <span class="token comment" spellcheck="true">//根据class对象判断是不是切面</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>advisorFactory<span class="token punctuation">.</span><span class="token function">isAspect</span><span class="token punctuation">(</span>beanType<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                        <span class="token comment" spellcheck="true">//是切面类,加入到缓存中</span>                        aspectNames<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>beanName<span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token comment" spellcheck="true">//把beanName和class对象构建成为一个AspectMetadata</span>                        AspectMetadata amd <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AspectMetadata</span><span class="token punctuation">(</span>beanType<span class="token punctuation">,</span> beanName<span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token keyword">if</span> <span class="token punctuation">(</span>amd<span class="token punctuation">.</span><span class="token function">getAjType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getPerClause</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getKind</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> PerClauseKind<span class="token punctuation">.</span>SINGLETON<span class="token punctuation">)</span> <span class="token punctuation">{</span>                            <span class="token comment" spellcheck="true">//构建切面注解的实例工厂</span>                            MetadataAwareAspectInstanceFactory factory <span class="token operator">=</span>                                <span class="token keyword">new</span> <span class="token class-name">BeanFactoryAspectInstanceFactory</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>beanFactory<span class="token punctuation">,</span> beanName<span class="token punctuation">)</span><span class="token punctuation">;</span>                            <span class="token comment" spellcheck="true">//获取我们的通知对象</span>                            List<span class="token operator">&lt;</span>Advisor<span class="token operator">></span> classAdvisors <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>advisorFactory<span class="token punctuation">.</span><span class="token function">getAdvisors</span><span class="token punctuation">(</span>factory<span class="token punctuation">)</span><span class="token punctuation">;</span>                            <span class="token comment" spellcheck="true">//加入到缓存中</span>                            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>beanFactory<span class="token punctuation">.</span><span class="token function">isSingleton</span><span class="token punctuation">(</span>beanName<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                                <span class="token keyword">this</span><span class="token punctuation">.</span>advisorsCache<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>beanName<span class="token punctuation">,</span> classAdvisors<span class="token punctuation">)</span><span class="token punctuation">;</span>                            <span class="token punctuation">}</span>                            <span class="token keyword">else</span> <span class="token punctuation">{</span>                                <span class="token keyword">this</span><span class="token punctuation">.</span>aspectFactoryCache<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>beanName<span class="token punctuation">,</span> factory<span class="token punctuation">)</span><span class="token punctuation">;</span>                            <span class="token punctuation">}</span>                            advisors<span class="token punctuation">.</span><span class="token function">addAll</span><span class="token punctuation">(</span>classAdvisors<span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token punctuation">}</span>                        <span class="token keyword">else</span> <span class="token punctuation">{</span>                            <span class="token comment" spellcheck="true">// Per target or per this.</span>                            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>beanFactory<span class="token punctuation">.</span><span class="token function">isSingleton</span><span class="token punctuation">(</span>beanName<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalArgumentException</span><span class="token punctuation">(</span><span class="token string">"Bean with name '"</span> <span class="token operator">+</span> beanName <span class="token operator">+</span>                                                                   <span class="token string">"' is a singleton, but aspect instantiation model is not singleton"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                            <span class="token punctuation">}</span>                            MetadataAwareAspectInstanceFactory factory <span class="token operator">=</span>                                <span class="token keyword">new</span> <span class="token class-name">PrototypeAspectInstanceFactory</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>beanFactory<span class="token punctuation">,</span> beanName<span class="token punctuation">)</span><span class="token punctuation">;</span>                            <span class="token keyword">this</span><span class="token punctuation">.</span>aspectFactoryCache<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>beanName<span class="token punctuation">,</span> factory<span class="token punctuation">)</span><span class="token punctuation">;</span>                            advisors<span class="token punctuation">.</span><span class="token function">addAll</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>advisorFactory<span class="token punctuation">.</span><span class="token function">getAdvisors</span><span class="token punctuation">(</span>factory<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token punctuation">}</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span>                <span class="token keyword">this</span><span class="token punctuation">.</span>aspectBeanNames <span class="token operator">=</span> aspectNames<span class="token punctuation">;</span>                <span class="token keyword">return</span> advisors<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>aspectNames<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> Collections<span class="token punctuation">.</span><span class="token function">emptyList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//真正的创建切面的时候，我们不需要去解析了而是直接去缓存中获取处 </span>    List<span class="token operator">&lt;</span>Advisor<span class="token operator">></span> advisors <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>String aspectName <span class="token operator">:</span> aspectNames<span class="token punctuation">)</span> <span class="token punctuation">{</span>        List<span class="token operator">&lt;</span>Advisor<span class="token operator">></span> cachedAdvisors <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>advisorsCache<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>aspectName<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>cachedAdvisors <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            advisors<span class="token punctuation">.</span><span class="token function">addAll</span><span class="token punctuation">(</span>cachedAdvisors<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">else</span> <span class="token punctuation">{</span>            MetadataAwareAspectInstanceFactory factory <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>aspectFactoryCache<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>aspectName<span class="token punctuation">)</span><span class="token punctuation">;</span>            advisors<span class="token punctuation">.</span><span class="token function">addAll</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>advisorFactory<span class="token punctuation">.</span><span class="token function">getAdvisors</span><span class="token punctuation">(</span>factory<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> advisors<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h3 id="创建代理"><a href="#创建代理" class="headerlink" title="创建代理"></a>创建代理</h3><p>创建代理准备来说有2个地方</p><ol><li>正常来说都是初始化之后调用后置处理器<code>BeanPostProcessors.postProcessAfterInitialization</code>方法创建代理</li><li>循环依赖的时候，在getSingleton方法中调用三级缓存中钩子方法创建早期对象创建代理，是后置处理器<code>SmartInstantiationAwareBeanPostProcessor.getEarlyBeanReference</code>方法</li></ol><p>我们看正常调用<code>AnnotationAwareAspectJAutoProxyCreator.postProcessAfterInitialization</code>方法</p><h4 id="AnnotationAwareAspectJAutoProxyCreator-postProcessAfterInitialization方法"><a href="#AnnotationAwareAspectJAutoProxyCreator-postProcessAfterInitialization方法" class="headerlink" title="AnnotationAwareAspectJAutoProxyCreator.postProcessAfterInitialization方法"></a>AnnotationAwareAspectJAutoProxyCreator.postProcessAfterInitialization方法</h4><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> Object <span class="token function">postProcessAfterInitialization</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Nullable</span> Object bean<span class="token punctuation">,</span> String beanName<span class="token punctuation">)</span> <span class="token keyword">throws</span> BeansException <span class="token punctuation">{</span>   <span class="token keyword">if</span> <span class="token punctuation">(</span>bean <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">//获取缓存key</span>      Object cacheKey <span class="token operator">=</span> <span class="token function">getCacheKey</span><span class="token punctuation">(</span>bean<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> beanName<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">// 之前循环依赖创建的动态代理 如果是现在的bean 就不再创建，，并且移除</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>earlyProxyReferences<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>cacheKey<span class="token punctuation">)</span> <span class="token operator">!=</span> bean<span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token comment" spellcheck="true">// 该方法将会返回动态代理实例</span>         <span class="token keyword">return</span> <span class="token function">wrapIfNecessary</span><span class="token punctuation">(</span>bean<span class="token punctuation">,</span> beanName<span class="token punctuation">,</span> cacheKey<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>   <span class="token punctuation">}</span>   <span class="token keyword">return</span> bean<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>wrapIfNecessary()方法</p><pre class=" language-java"><code class="language-java"><span class="token keyword">protected</span> Object <span class="token function">wrapIfNecessary</span><span class="token punctuation">(</span>Object bean<span class="token punctuation">,</span> String beanName<span class="token punctuation">,</span> Object cacheKey<span class="token punctuation">)</span> <span class="token punctuation">{</span>   <span class="token comment" spellcheck="true">//已经被处理过（解析切面时targetSourcedBeans出现过） 就是自己实现创建动态代理逻辑</span>   <span class="token keyword">if</span> <span class="token punctuation">(</span>StringUtils<span class="token punctuation">.</span><span class="token function">hasLength</span><span class="token punctuation">(</span>beanName<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>targetSourcedBeans<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span>beanName<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> bean<span class="token punctuation">;</span>   <span class="token punctuation">}</span>   <span class="token comment" spellcheck="true">//不需要增强的</span>   <span class="token keyword">if</span> <span class="token punctuation">(</span>Boolean<span class="token punctuation">.</span>FALSE<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>advisedBeans<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>cacheKey<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> bean<span class="token punctuation">;</span>   <span class="token punctuation">}</span>   <span class="token comment" spellcheck="true">//之前解析切面的时候判断过了（防止bean被修改出现切面不一致）</span>   <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isInfrastructureClass</span><span class="token punctuation">(</span>bean<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token function">shouldSkip</span><span class="token punctuation">(</span>bean<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> beanName<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>advisedBeans<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>cacheKey<span class="token punctuation">,</span> Boolean<span class="token punctuation">.</span>FALSE<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">return</span> bean<span class="token punctuation">;</span>   <span class="token punctuation">}</span>   <span class="token comment" spellcheck="true">// 根据当前bean找到匹配的advisor --重点方法--</span>   Object<span class="token punctuation">[</span><span class="token punctuation">]</span> specificInterceptors <span class="token operator">=</span> <span class="token function">getAdvicesAndAdvisorsForBean</span><span class="token punctuation">(</span>bean<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> beanName<span class="token punctuation">,</span> null<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">// 当前bean匹配到了advisor</span>   <span class="token keyword">if</span> <span class="token punctuation">(</span>specificInterceptors <span class="token operator">!=</span> DO_NOT_PROXY<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// 标记为已处理</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>advisedBeans<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>cacheKey<span class="token punctuation">,</span> Boolean<span class="token punctuation">.</span>TRUE<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">//创建我们的真正的代理对象</span>      Object proxy <span class="token operator">=</span> <span class="token function">createProxy</span><span class="token punctuation">(</span>            bean<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> beanName<span class="token punctuation">,</span> specificInterceptors<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">SingletonTargetSource</span><span class="token punctuation">(</span>bean<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">//加入到缓存</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>proxyTypes<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>cacheKey<span class="token punctuation">,</span> proxy<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">return</span> proxy<span class="token punctuation">;</span>   <span class="token punctuation">}</span>   <span class="token keyword">this</span><span class="token punctuation">.</span>advisedBeans<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>cacheKey<span class="token punctuation">,</span> Boolean<span class="token punctuation">.</span>FALSE<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token keyword">return</span> bean<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h4 id="getAdvicesAndAdvisorsForBean方法"><a href="#getAdvicesAndAdvisorsForBean方法" class="headerlink" title="getAdvicesAndAdvisorsForBean方法"></a>getAdvicesAndAdvisorsForBean方法</h4><pre class=" language-java"><code class="language-java"><span class="token keyword">protected</span> Object<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">getAdvicesAndAdvisorsForBean</span><span class="token punctuation">(</span>      Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> beanClass<span class="token punctuation">,</span> String beanName<span class="token punctuation">,</span> <span class="token annotation punctuation">@Nullable</span> TargetSource targetSource<span class="token punctuation">)</span> <span class="token punctuation">{</span>   <span class="token comment" spellcheck="true">//找到和当前bean匹配的advisor</span>   List<span class="token operator">&lt;</span>Advisor<span class="token operator">></span> advisors <span class="token operator">=</span> <span class="token function">findEligibleAdvisors</span><span class="token punctuation">(</span>beanClass<span class="token punctuation">,</span> beanName<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//如果没找到,不创建代理</span>   <span class="token keyword">if</span> <span class="token punctuation">(</span>advisors<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> DO_NOT_PROXY<span class="token punctuation">;</span>   <span class="token punctuation">}</span>   <span class="token keyword">return</span> advisors<span class="token punctuation">.</span><span class="token function">toArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>findEligibleAdvisors</p><pre class=" language-java"><code class="language-java"><span class="token keyword">protected</span> List<span class="token operator">&lt;</span>Advisor<span class="token operator">></span> <span class="token function">findEligibleAdvisors</span><span class="token punctuation">(</span>Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> beanClass<span class="token punctuation">,</span> String beanName<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//拿到接口方式的AOP</span>    List<span class="token operator">&lt;</span>Advisor<span class="token operator">></span> candidateAdvisors <span class="token operator">=</span> <span class="token function">findCandidateAdvisors</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//判断我们的通知能不能作用到当前的类上（切点是否命中当前Bean）</span>    List<span class="token operator">&lt;</span>Advisor<span class="token operator">></span> eligibleAdvisors <span class="token operator">=</span> <span class="token function">findAdvisorsThatCanApply</span><span class="token punctuation">(</span>candidateAdvisors<span class="token punctuation">,</span> beanClass<span class="token punctuation">,</span> beanName<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">extendAdvisors</span><span class="token punctuation">(</span>eligibleAdvisors<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//对我们的advisor进行排序</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>eligibleAdvisors<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        eligibleAdvisors <span class="token operator">=</span> <span class="token function">sortAdvisors</span><span class="token punctuation">(</span>eligibleAdvisors<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> eligibleAdvisors<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>findAdvisorsThatCanApply这里面做的事情主要是调用Aspectj的2次筛选，看Advisor是否命中class。</p><p>下面就是Aspectj看是否命中class的代码</p><p>findAdvisorsThatCanApply-&gt; AopUtils.findAdvisorsThatCanApply-&gt;canApply-&gt;canApply-&gt;canApply</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">boolean</span> <span class="token function">canApply</span><span class="token punctuation">(</span>Pointcut pc<span class="token punctuation">,</span> Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> targetClass<span class="token punctuation">,</span> <span class="token keyword">boolean</span> hasIntroductions<span class="token punctuation">)</span> <span class="token punctuation">{</span>   Assert<span class="token punctuation">.</span><span class="token function">notNull</span><span class="token punctuation">(</span>pc<span class="token punctuation">,</span> <span class="token string">"Pointcut must not be null"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">// 第一次过滤，进行类级别过滤(通过AspectJ)</span>   <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>pc<span class="token punctuation">.</span><span class="token function">getClassFilter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">matches</span><span class="token punctuation">(</span>targetClass<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span>   <span class="token comment" spellcheck="true">// 进行方法级别过滤</span>   <span class="token comment" spellcheck="true">//如果pc.getMethodMatcher()返回TrueMethodMatcher则匹配所有方法</span>   MethodMatcher methodMatcher <span class="token operator">=</span> pc<span class="token punctuation">.</span><span class="token function">getMethodMatcher</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token keyword">if</span> <span class="token punctuation">(</span>methodMatcher <span class="token operator">==</span> MethodMatcher<span class="token punctuation">.</span>TRUE<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// No need to iterate the methods if we're matching any method anyway...</span>      <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span>   <span class="token comment" spellcheck="true">//判断匹配器是不是IntroductionAwareMethodMatcher  只有AspectJExpressionPointCut才会实现这个接口</span>   IntroductionAwareMethodMatcher introductionAwareMethodMatcher <span class="token operator">=</span> null<span class="token punctuation">;</span>   <span class="token keyword">if</span> <span class="token punctuation">(</span>methodMatcher <span class="token keyword">instanceof</span> <span class="token class-name">IntroductionAwareMethodMatcher</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      introductionAwareMethodMatcher <span class="token operator">=</span> <span class="token punctuation">(</span>IntroductionAwareMethodMatcher<span class="token punctuation">)</span> methodMatcher<span class="token punctuation">;</span>   <span class="token punctuation">}</span>   <span class="token comment" spellcheck="true">//创建一个集合用于保存targetClass 的class对象</span>   Set<span class="token operator">&lt;</span>Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">>></span> classes <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedHashSet</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//判断当前class是不是代理的class对象</span>   <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>Proxy<span class="token punctuation">.</span><span class="token function">isProxyClass</span><span class="token punctuation">(</span>targetClass<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">//加入到集合中去</span>      classes<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>ClassUtils<span class="token punctuation">.</span><span class="token function">getUserClass</span><span class="token punctuation">(</span>targetClass<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span>   <span class="token comment" spellcheck="true">//获取到targetClass所实现的接口的class对象，然后加入到集合中</span>   classes<span class="token punctuation">.</span><span class="token function">addAll</span><span class="token punctuation">(</span>ClassUtils<span class="token punctuation">.</span><span class="token function">getAllInterfacesForClassAsSet</span><span class="token punctuation">(</span>targetClass<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//循环所有的class对象</span>   <span class="token keyword">for</span> <span class="token punctuation">(</span>Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> clazz <span class="token operator">:</span> classes<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">//通过class获取到所有的方法</span>      Method<span class="token punctuation">[</span><span class="token punctuation">]</span> methods <span class="token operator">=</span> ReflectionUtils<span class="token punctuation">.</span><span class="token function">getAllDeclaredMethods</span><span class="token punctuation">(</span>clazz<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">//循环我们的方法</span>      <span class="token keyword">for</span> <span class="token punctuation">(</span>Method method <span class="token operator">:</span> methods<span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token comment" spellcheck="true">//第二次过滤，通过methodMatcher.matches来匹配我们的方法</span>         <span class="token keyword">if</span> <span class="token punctuation">(</span>introductionAwareMethodMatcher <span class="token operator">!=</span> null <span class="token operator">?</span>               <span class="token comment" spellcheck="true">// 通过切点表达式进行匹配 AspectJ方式</span>               introductionAwareMethodMatcher<span class="token punctuation">.</span><span class="token function">matches</span><span class="token punctuation">(</span>method<span class="token punctuation">,</span> targetClass<span class="token punctuation">,</span> hasIntroductions<span class="token punctuation">)</span> <span class="token operator">:</span>               <span class="token comment" spellcheck="true">// 通过方法匹配器进行匹配 内置aop接口方式</span>               methodMatcher<span class="token punctuation">.</span><span class="token function">matches</span><span class="token punctuation">(</span>method<span class="token punctuation">,</span> targetClass<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 只要有1个方法匹配上了就创建代理</span>            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>         <span class="token punctuation">}</span>      <span class="token punctuation">}</span>   <span class="token punctuation">}</span>   <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h4 id="createProxy方法"><a href="#createProxy方法" class="headerlink" title="createProxy方法"></a>createProxy方法</h4><pre class=" language-java"><code class="language-java"><span class="token keyword">protected</span> Object <span class="token function">createProxy</span><span class="token punctuation">(</span>Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> beanClass<span class="token punctuation">,</span> <span class="token annotation punctuation">@Nullable</span> String beanName<span class="token punctuation">,</span>      <span class="token annotation punctuation">@Nullable</span> Object<span class="token punctuation">[</span><span class="token punctuation">]</span> specificInterceptors<span class="token punctuation">,</span> TargetSource targetSource<span class="token punctuation">)</span> <span class="token punctuation">{</span>   <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>beanFactory <span class="token keyword">instanceof</span> <span class="token class-name">ConfigurableListableBeanFactory</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      AutoProxyUtils<span class="token punctuation">.</span><span class="token function">exposeTargetClass</span><span class="token punctuation">(</span><span class="token punctuation">(</span>ConfigurableListableBeanFactory<span class="token punctuation">)</span> <span class="token keyword">this</span><span class="token punctuation">.</span>beanFactory<span class="token punctuation">,</span> beanName<span class="token punctuation">,</span> beanClass<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span>   <span class="token comment" spellcheck="true">//创建一个代理对象工厂</span>   ProxyFactory proxyFactory <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ProxyFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   proxyFactory<span class="token punctuation">.</span><span class="token function">copyFrom</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//为proxyFactory设置创建jdk代理还是cglib代理</span>   <span class="token comment" spellcheck="true">//如果设置了 &lt;aop:aspectj-autoproxy proxy-target-class="true"/>或者配置上加@EnableAspectJAutoProxy(proxyTargetClass = true)，说明强制使用cglib</span>   <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>proxyFactory<span class="token punctuation">.</span><span class="token function">isProxyTargetClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// 内部设置的,配置类就会设置这个属性</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">shouldProxyTargetClass</span><span class="token punctuation">(</span>beanClass<span class="token punctuation">,</span> beanName<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>         proxyFactory<span class="token punctuation">.</span><span class="token function">setProxyTargetClass</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token keyword">else</span> <span class="token punctuation">{</span>         <span class="token comment" spellcheck="true">// 检查有没有接口</span>         <span class="token function">evaluateProxyInterfaces</span><span class="token punctuation">(</span>beanClass<span class="token punctuation">,</span> proxyFactory<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>   <span class="token punctuation">}</span>   <span class="token comment" spellcheck="true">//把我们的specificInterceptors数组中的Advisor转化为数组形式的</span>   Advisor<span class="token punctuation">[</span><span class="token punctuation">]</span> advisors <span class="token operator">=</span> <span class="token function">buildAdvisors</span><span class="token punctuation">(</span>beanName<span class="token punctuation">,</span> specificInterceptors<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//为我们的代理工厂加入通知器，</span>   proxyFactory<span class="token punctuation">.</span><span class="token function">addAdvisors</span><span class="token punctuation">(</span>advisors<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//设置targetSource对象</span>   proxyFactory<span class="token punctuation">.</span><span class="token function">setTargetSource</span><span class="token punctuation">(</span>targetSource<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token function">customizeProxyFactory</span><span class="token punctuation">(</span>proxyFactory<span class="token punctuation">)</span><span class="token punctuation">;</span>   proxyFactory<span class="token punctuation">.</span><span class="token function">setFrozen</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>freezeProxy<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">// 代表之前是否筛选advise.</span>   <span class="token comment" spellcheck="true">// 因为继承了AbstractAdvisorAutoProxyCreator,并且之前调用了findEligibleAdvisors进行筛选， 所以是true</span>   <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">advisorsPreFiltered</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      proxyFactory<span class="token punctuation">.</span><span class="token function">setPreFiltered</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span>   <span class="token comment" spellcheck="true">//真正的创建代理对象</span>   <span class="token keyword">return</span> proxyFactory<span class="token punctuation">.</span><span class="token function">getProxy</span><span class="token punctuation">(</span><span class="token function">getProxyClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h4 id="代理方式的选用"><a href="#代理方式的选用" class="headerlink" title="代理方式的选用"></a>代理方式的选用</h4><p>proxyFactory.getProxy方法-&gt;createAopProxy方法-&gt; getAopProxyFactory().createAopProxy()</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> AopProxy <span class="token function">createAopProxy</span><span class="token punctuation">(</span>AdvisedSupport config<span class="token punctuation">)</span> <span class="token keyword">throws</span> AopConfigException <span class="token punctuation">{</span>   <span class="token comment" spellcheck="true">//判断我们是否前置指定使用cglib代理ProxyTargetClass=true</span>   <span class="token keyword">if</span> <span class="token punctuation">(</span>config<span class="token punctuation">.</span><span class="token function">isOptimize</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">||</span> config<span class="token punctuation">.</span><span class="token function">isProxyTargetClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token function">hasNoUserSuppliedProxyInterfaces</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> targetClass <span class="token operator">=</span> config<span class="token punctuation">.</span><span class="token function">getTargetClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>targetClass <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">AopConfigException</span><span class="token punctuation">(</span><span class="token string">"TargetSource cannot determine target class: "</span> <span class="token operator">+</span>               <span class="token string">"Either an interface or a target is required for proxy creation."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token comment" spellcheck="true">//targetClass是接口,使用的就是jdk代理,一般不走</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>targetClass<span class="token punctuation">.</span><span class="token function">isInterface</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">||</span> Proxy<span class="token punctuation">.</span><span class="token function">isProxyClass</span><span class="token punctuation">(</span>targetClass<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">JdkDynamicAopProxy</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token comment" spellcheck="true">//cglib代理</span>      <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ObjenesisCglibAopProxy</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span>   <span class="token keyword">else</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">//动态代理</span>      <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">JdkDynamicAopProxy</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>从这也可以看出，springAOP 默认就是JDK动态代理，除非指定proxyTargetClass=true才会是Cglib代理</p><h3 id="代理调用"><a href="#代理调用" class="headerlink" title="代理调用"></a>代理调用</h3><p>从JDK动态代理入手JdkDynamicAopProxy</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> Object <span class="token function">invoke</span><span class="token punctuation">(</span>Object proxy<span class="token punctuation">,</span> Method method<span class="token punctuation">,</span> Object<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> Throwable <span class="token punctuation">{</span>   Object oldProxy <span class="token operator">=</span> null<span class="token punctuation">;</span>   <span class="token keyword">boolean</span> setProxyContext <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//获取到我们的目标对象</span>   TargetSource targetSource <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>advised<span class="token punctuation">.</span>targetSource<span class="token punctuation">;</span>   Object target <span class="token operator">=</span> null<span class="token punctuation">;</span>   <span class="token keyword">try</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">//若执行代理对象的equals方法不需要代理</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span>equalsDefined <span class="token operator">&amp;&amp;</span> AopUtils<span class="token punctuation">.</span><span class="token function">isEqualsMethod</span><span class="token punctuation">(</span>method<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token comment" spellcheck="true">// The target does not implement the equals(Object) method itself.</span>         <span class="token keyword">return</span> <span class="token function">equals</span><span class="token punctuation">(</span>args<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token comment" spellcheck="true">//若执行的是hashCode方法不需要代理</span>      <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span>hashCodeDefined <span class="token operator">&amp;&amp;</span> AopUtils<span class="token punctuation">.</span><span class="token function">isHashCodeMethod</span><span class="token punctuation">(</span>method<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token comment" spellcheck="true">// The target does not implement the hashCode() method itself.</span>         <span class="token keyword">return</span> <span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token comment" spellcheck="true">//若执行的class对象是DecoratingProxy则不会对其应用切面进行方法的增强,返回源目标类型</span>      <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>method<span class="token punctuation">.</span><span class="token function">getDeclaringClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> DecoratingProxy<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token comment" spellcheck="true">// There is only getDecoratedClass() declared -> dispatch to proxy config.</span>         <span class="token keyword">return</span> AopProxyUtils<span class="token punctuation">.</span><span class="token function">ultimateTargetClass</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>advised<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token comment" spellcheck="true">// 如果目标对象实现的Advised接口,则不会对其应用切面进行方法的增强,直接执行方法</span>      <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span>advised<span class="token punctuation">.</span>opaque <span class="token operator">&amp;&amp;</span> method<span class="token punctuation">.</span><span class="token function">getDeclaringClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isInterface</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span>            method<span class="token punctuation">.</span><span class="token function">getDeclaringClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isAssignableFrom</span><span class="token punctuation">(</span>Advised<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token comment" spellcheck="true">// Service invocations on ProxyConfig with the proxy config...</span>         <span class="token keyword">return</span> AopUtils<span class="token punctuation">.</span><span class="token function">invokeJoinpointUsingReflection</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>advised<span class="token punctuation">,</span> method<span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      Object retVal<span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">//【暴露我们的代理对象到线程变量中】需要搭配@EnableAspectJAutoProxy(exposeProxy = true)</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>advised<span class="token punctuation">.</span>exposeProxy<span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token comment" spellcheck="true">//把我们的代理对象暴露到线程变量中</span>         oldProxy <span class="token operator">=</span> AopContext<span class="token punctuation">.</span><span class="token function">setCurrentProxy</span><span class="token punctuation">(</span>proxy<span class="token punctuation">)</span><span class="token punctuation">;</span>         setProxyContext <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token comment" spellcheck="true">//获取我们的目标对象</span>      target <span class="token operator">=</span> targetSource<span class="token punctuation">.</span><span class="token function">getTarget</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">//获取我们目标对象的class</span>      Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> targetClass <span class="token operator">=</span> <span class="token punctuation">(</span>target <span class="token operator">!=</span> null <span class="token operator">?</span> target<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">:</span> null<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">//把我们的aop的advisor全部转化为拦截器,通过责任链模式调用(责任链调用需要类型一致，所以这里需要转化)</span>      List<span class="token operator">&lt;</span>Object<span class="token operator">></span> chain <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>advised<span class="token punctuation">.</span><span class="token function">getInterceptorsAndDynamicInterceptionAdvice</span><span class="token punctuation">(</span>method<span class="token punctuation">,</span> targetClass<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">//如果我们的拦截器链为空</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>chain<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token comment" spellcheck="true">//通过反射直接调用执行</span>         Object<span class="token punctuation">[</span><span class="token punctuation">]</span> argsToUse <span class="token operator">=</span> AopProxyUtils<span class="token punctuation">.</span><span class="token function">adaptArgumentsIfNecessary</span><span class="token punctuation">(</span>method<span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>         retVal <span class="token operator">=</span> AopUtils<span class="token punctuation">.</span><span class="token function">invokeJoinpointUsingReflection</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> method<span class="token punctuation">,</span> argsToUse<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token keyword">else</span> <span class="token punctuation">{</span>         <span class="token comment" spellcheck="true">//创建一个方法调用对象</span>         MethodInvocation invocation <span class="token operator">=</span>               <span class="token keyword">new</span> <span class="token class-name">ReflectiveMethodInvocation</span><span class="token punctuation">(</span>proxy<span class="token punctuation">,</span> target<span class="token punctuation">,</span> method<span class="token punctuation">,</span> args<span class="token punctuation">,</span> targetClass<span class="token punctuation">,</span> chain<span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment" spellcheck="true">//调用执行</span>         retVal <span class="token operator">=</span> invocation<span class="token punctuation">.</span><span class="token function">proceed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token comment" spellcheck="true">// Massage return value if necessary.</span>      Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> returnType <span class="token operator">=</span> method<span class="token punctuation">.</span><span class="token function">getReturnType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>retVal <span class="token operator">!=</span> null <span class="token operator">&amp;&amp;</span> retVal <span class="token operator">==</span> target <span class="token operator">&amp;&amp;</span>            returnType <span class="token operator">!=</span> Object<span class="token punctuation">.</span><span class="token keyword">class</span> <span class="token operator">&amp;&amp;</span> returnType<span class="token punctuation">.</span><span class="token function">isInstance</span><span class="token punctuation">(</span>proxy<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span>            <span class="token operator">!</span>RawTargetAccess<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">isAssignableFrom</span><span class="token punctuation">(</span>method<span class="token punctuation">.</span><span class="token function">getDeclaringClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token comment" spellcheck="true">// Special case: it returned "this" and the return type of the method</span>         <span class="token comment" spellcheck="true">// is type-compatible. Note that we can't help if the target sets</span>         <span class="token comment" spellcheck="true">// a reference to itself in another returned object.</span>         retVal <span class="token operator">=</span> proxy<span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>retVal <span class="token operator">==</span> null <span class="token operator">&amp;&amp;</span> returnType <span class="token operator">!=</span> Void<span class="token punctuation">.</span>TYPE <span class="token operator">&amp;&amp;</span> returnType<span class="token punctuation">.</span><span class="token function">isPrimitive</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">AopInvocationException</span><span class="token punctuation">(</span>               <span class="token string">"Null return value from advice does not match primitive return type for: "</span> <span class="token operator">+</span> method<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token keyword">return</span> retVal<span class="token punctuation">;</span>   <span class="token punctuation">}</span>   <span class="token keyword">finally</span> <span class="token punctuation">{</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>target <span class="token operator">!=</span> null <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>targetSource<span class="token punctuation">.</span><span class="token function">isStatic</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token comment" spellcheck="true">// Must have come from TargetSource.</span>         targetSource<span class="token punctuation">.</span><span class="token function">releaseTarget</span><span class="token punctuation">(</span>target<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>setProxyContext<span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token comment" spellcheck="true">// Restore old proxy.</span>         AopContext<span class="token punctuation">.</span><span class="token function">setCurrentProxy</span><span class="token punctuation">(</span>oldProxy<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>   <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>责任链调用</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> Object <span class="token function">proceed</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> Throwable <span class="token punctuation">{</span>   <span class="token comment" spellcheck="true">//从-1开始,结束条件执行目标方法是下标=拦截器的长度-1(执行到了最后一个拦截器的时候)</span>   <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>currentInterceptorIndex <span class="token operator">==</span> <span class="token keyword">this</span><span class="token punctuation">.</span>interceptorsAndDynamicMethodMatchers<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> <span class="token function">invokeJoinpoint</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span>   <span class="token comment" spellcheck="true">//获取第一个方法拦截器使用的是前++</span>   Object interceptorOrInterceptionAdvice <span class="token operator">=</span>         <span class="token keyword">this</span><span class="token punctuation">.</span>interceptorsAndDynamicMethodMatchers<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token operator">++</span><span class="token keyword">this</span><span class="token punctuation">.</span>currentInterceptorIndex<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token keyword">if</span> <span class="token punctuation">(</span>interceptorOrInterceptionAdvice <span class="token keyword">instanceof</span> <span class="token class-name">InterceptorAndDynamicMethodMatcher</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// Evaluate dynamic method matcher here: static part will already have</span>      <span class="token comment" spellcheck="true">// been evaluated and found to match.</span>      InterceptorAndDynamicMethodMatcher dm <span class="token operator">=</span>            <span class="token punctuation">(</span>InterceptorAndDynamicMethodMatcher<span class="token punctuation">)</span> interceptorOrInterceptionAdvice<span class="token punctuation">;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>dm<span class="token punctuation">.</span>methodMatcher<span class="token punctuation">.</span><span class="token function">matches</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>method<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>targetClass<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>arguments<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token keyword">return</span> dm<span class="token punctuation">.</span>interceptor<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token keyword">else</span> <span class="token punctuation">{</span>         <span class="token comment" spellcheck="true">// Dynamic matching failed.</span>         <span class="token comment" spellcheck="true">// Skip this interceptor and invoke the next in the chain.</span>         <span class="token keyword">return</span> <span class="token function">proceed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>   <span class="token punctuation">}</span>   <span class="token keyword">else</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">//在这个地方需要注意，抵用第一个拦截器的invoke方法，传入的是this当前的方法拦截器对象</span>      <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>MethodInterceptor<span class="token punctuation">)</span> interceptorOrInterceptionAdvice<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="流程图"><a href="#流程图" class="headerlink" title="流程图"></a>流程图</h2><p>![](<a href="https://blog-dm.oss-cn-shanghai.aliyuncs.com/articleimage/Spring">https://blog-dm.oss-cn-shanghai.aliyuncs.com/articleimage/Spring</a> AOP.png)</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 源码 </tag>
            
            <tag> Spring </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring解决循环依赖</title>
      <link href="/2021/03/05/spring-jie-jue-xun-huan-yi-lai-yu-sheng-ming-zhou-qi/"/>
      <url>/2021/03/05/spring-jie-jue-xun-huan-yi-lai-yu-sheng-ming-zhou-qi/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>这篇文章是接着前一篇SpringIOC容器加载流程和源码剖析一起的。主要内容Spring  Bean定义到Bean的过程以及源码剖析和部分Spring的扩展节点。</p><p>这里我们从refresh-&gt;finishBeanFactoryInitialization开始看</p><h2 id="循环依赖"><a href="#循环依赖" class="headerlink" title="循环依赖"></a>循环依赖</h2><p>什么是循环依赖，循环依赖就是A依赖B,B依赖A,这就产生了循环依赖。比如说A类注入了B类，B类注入了A类，这时候我调用bean工厂的getBean方法就会产生循环依赖，具体过程是getBean(A);</p><ol><li>bean工厂生产beanA,发现A里面注入了B，我们就要getBean(B)</li><li>bean工厂生产beanB,发现B里面注入了A，我们就要getBean(A)</li></ol><p>此时产生了死循环，这就是循环依赖，那么我们看spring是怎样解决的？</p><p>spring用了传说中的三级缓存</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 一级缓存 这个就是单例缓存池,用于保存我们所有的完整的单例bean</span><span class="token keyword">private</span> <span class="token keyword">final</span> Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Object<span class="token operator">></span> singletonObjects <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ConcurrentHashMap</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token number">256</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 三级缓存 该map用户缓存key为beanName value为ObjectFactory(包装为早期对象,钩子方法) </span><span class="token keyword">private</span> <span class="token keyword">final</span> Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> ObjectFactory<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">>></span> singletonFactories <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 二级缓存 用户缓存我们的key为beanName value是我们的早期对象(对象属性还没有来得及进行赋值)</span><span class="token keyword">private</span> <span class="token keyword">final</span> Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Object<span class="token operator">></span> earlySingletonObjects <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 用户缓存当前正在创建bean的名称</span><span class="token keyword">private</span> <span class="token keyword">final</span> Set<span class="token operator">&lt;</span>String<span class="token operator">></span> singletonsCurrentlyInCreation <span class="token operator">=</span>            Collections<span class="token punctuation">.</span><span class="token function">newSetFromMap</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ConcurrentHashMap</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>这里简单说下spring解决循环依赖过程，详细源码在下面</p><p>我们还是以上面的例子继续说</p><ol><li>bean工厂开始生产beanA，我们会先从一级缓存中看是不是存在，存在直接返回，不存在就在singletonsCurrentlyInCreation集合里面看是不是存在，这时候肯定是不存在的</li><li>从一级缓存没有拿到，就开始创建bean，首先把当前bean放在singletonsCurrentlyInCreation集合里面，表示正在创建</li><li>实例化bean，并把一个创建早期方法的钩子方法放在三级缓存中</li><li>属性赋值，循环所有属性拿到Autowired，找到注入的属性B,然后getBean(B)</li><li>getBean(B)的过程中走了1~4步，然后肯定会再次执行getBean(A)</li><li>这时候会先从一级缓存中看是不是存在，不存在，就再在singletonsCurrentlyInCreation集合里面看是不是存在，这时候是存在</li><li>再从二级缓存中拿，二级缓存也没有，这时候从三级缓存中拿，找到了钩子方法，调用钩子方法获得早期对象，把早期对象放到二级缓存，然后返回。</li><li>这时候B中的A是一个代理对象，原实例A是正在属性赋值过程中。接下来B属性赋值结束，从三级，二级，当前创建这几个集合中移除B，一级缓存加入B</li><li>B创建完成，来到A，A继续走，放入一级缓存，getBean(A)结束。</li></ol><p>这里三级缓存的钩子方法是通过后置处理器解决的是SmartInstantiationAwareBeanPostProcessor.getEarlyBeanReference；可以通过这里进行扩展。</p><p><strong>为什么需要二级缓存？</strong></p><p>二级缓存是为了分离成熟Bean和纯净Bean(未注入属性)的存放， 防止多线程中在Bean还未创建完成时读取到的Bean时不完整的。所<br>以也是为了保证我们getBean是完整最终的Bean。</p><p><strong>为什么需要三级缓存？</strong></p><p>Bean的AOP动态代理创建在bean初始化之后，但是循环依赖的Bean，会在循环的时候就创建好了bean，这时候在创建动态代理就晚了，属性已经注入。如果循环依赖的Bean使用了AOP,  需要提前创建AOP。</p><p>三级缓存的存在主要是位为了解耦和解决循环依赖的AOP。</p><h2 id="实例化Bean源码"><a href="#实例化Bean源码" class="headerlink" title="实例化Bean源码"></a>实例化Bean源码</h2><h3 id="finishBeanFactoryInitialization方法"><a href="#finishBeanFactoryInitialization方法" class="headerlink" title="finishBeanFactoryInitialization方法"></a>finishBeanFactoryInitialization方法</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">finishBeanFactoryInitialization</span><span class="token punctuation">(</span>ConfigurableListableBeanFactory beanFactory<span class="token punctuation">)</span> <span class="token punctuation">{</span>   <span class="token comment" spellcheck="true">// 为我们的bean工厂创建类型转化器</span>   <span class="token keyword">if</span> <span class="token punctuation">(</span>beanFactory<span class="token punctuation">.</span><span class="token function">containsBean</span><span class="token punctuation">(</span>CONVERSION_SERVICE_BEAN_NAME<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span>         beanFactory<span class="token punctuation">.</span><span class="token function">isTypeMatch</span><span class="token punctuation">(</span>CONVERSION_SERVICE_BEAN_NAME<span class="token punctuation">,</span> ConversionService<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      beanFactory<span class="token punctuation">.</span><span class="token function">setConversionService</span><span class="token punctuation">(</span>            beanFactory<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span>CONVERSION_SERVICE_BEAN_NAME<span class="token punctuation">,</span> ConversionService<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span>       <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>beanFactory<span class="token punctuation">.</span><span class="token function">hasEmbeddedValueResolver</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      beanFactory<span class="token punctuation">.</span><span class="token function">addEmbeddedValueResolver</span><span class="token punctuation">(</span>strVal <span class="token operator">-</span><span class="token operator">></span> <span class="token function">getEnvironment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">resolvePlaceholders</span><span class="token punctuation">(</span>strVal<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span>   String<span class="token punctuation">[</span><span class="token punctuation">]</span> weaverAwareNames <span class="token operator">=</span> beanFactory<span class="token punctuation">.</span><span class="token function">getBeanNamesForType</span><span class="token punctuation">(</span>LoadTimeWeaverAware<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token keyword">for</span> <span class="token punctuation">(</span>String weaverAwareName <span class="token operator">:</span> weaverAwareNames<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token function">getBean</span><span class="token punctuation">(</span>weaverAwareName<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span>   beanFactory<span class="token punctuation">.</span><span class="token function">setTempClassLoader</span><span class="token punctuation">(</span>null<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">// 冻结所有的bean定义,这时候Bean定义已经不能通过Bean工厂后置处理器进行修改</span>   <span class="token comment" spellcheck="true">// 这里面实现很简单就是赋值configurationFrozen=true;我们可以通过configurationFrozen这个属性判定Bean定义是否可以修改</span>   beanFactory<span class="token punctuation">.</span><span class="token function">freezeConfiguration</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//实例化剩余的单实例bean</span>   beanFactory<span class="token punctuation">.</span><span class="token function">preInstantiateSingletons</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>这一块有2个重点一个是冻结bean定义另一个是实例化单例bean</p><h3 id="preInstantiateSingletons方法"><a href="#preInstantiateSingletons方法" class="headerlink" title="preInstantiateSingletons方法"></a>preInstantiateSingletons方法</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">preInstantiateSingletons</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> BeansException <span class="token punctuation">{</span>   <span class="token keyword">if</span> <span class="token punctuation">(</span>logger<span class="token punctuation">.</span><span class="token function">isDebugEnabled</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      logger<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">"Pre-instantiating singletons in "</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span>   <span class="token comment" spellcheck="true">//获取我们容器中所有bean定义的名称,这里是从bean定义名称集合里面去拿，而不是从beanDefinitionMap中拿</span>   <span class="token comment" spellcheck="true">//是由于bean定义是有类型的</span>   List<span class="token operator">&lt;</span>String<span class="token operator">></span> beanNames <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>beanDefinitionNames<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//循环我们所有的bean定义名称</span>   <span class="token keyword">for</span> <span class="token punctuation">(</span>String beanName <span class="token operator">:</span> beanNames<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">//合并我们的bean定义，转换为统一的RootBeanDefinition类型(在)， 方便后续处理</span>      RootBeanDefinition bd <span class="token operator">=</span> <span class="token function">getMergedLocalBeanDefinition</span><span class="token punctuation">(</span>beanName<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">//根据bean定义判断 不是抽象的&amp;&amp;是单例的&amp;&amp;不是懒加载的</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>bd<span class="token punctuation">.</span><span class="token function">isAbstract</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> bd<span class="token punctuation">.</span><span class="token function">isSingleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>bd<span class="token punctuation">.</span><span class="token function">isLazyInit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token comment" spellcheck="true">//是不是工厂bean</span>         <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isFactoryBean</span><span class="token punctuation">(</span>beanName<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 是factoryBean会先生成实际的bean  &amp;beanName 是用来获取实际bean的</span>            Object bean <span class="token operator">=</span> <span class="token function">getBean</span><span class="token punctuation">(</span>FACTORY_BEAN_PREFIX <span class="token operator">+</span> beanName<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>bean <span class="token keyword">instanceof</span> <span class="token class-name">FactoryBean</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>               <span class="token keyword">final</span> FactoryBean<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> factory <span class="token operator">=</span> <span class="token punctuation">(</span>FactoryBean<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span><span class="token punctuation">)</span> bean<span class="token punctuation">;</span>               <span class="token keyword">boolean</span> isEagerInit<span class="token punctuation">;</span>               <span class="token keyword">if</span> <span class="token punctuation">(</span>System<span class="token punctuation">.</span><span class="token function">getSecurityManager</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> null <span class="token operator">&amp;&amp;</span> factory <span class="token keyword">instanceof</span> <span class="token class-name">SmartFactoryBean</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                  isEagerInit <span class="token operator">=</span> AccessController<span class="token punctuation">.</span><span class="token function">doPrivileged</span><span class="token punctuation">(</span><span class="token punctuation">(</span>PrivilegedAction<span class="token operator">&lt;</span>Boolean<span class="token operator">></span><span class="token punctuation">)</span>                              <span class="token punctuation">(</span><span class="token punctuation">(</span>SmartFactoryBean<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span><span class="token punctuation">)</span> factory<span class="token punctuation">)</span><span class="token operator">:</span><span class="token operator">:</span>isEagerInit<span class="token punctuation">,</span>                        <span class="token function">getAccessControlContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>               <span class="token punctuation">}</span>               <span class="token keyword">else</span> <span class="token punctuation">{</span>                  isEagerInit <span class="token operator">=</span> <span class="token punctuation">(</span>factory <span class="token keyword">instanceof</span> <span class="token class-name">SmartFactoryBean</span> <span class="token operator">&amp;&amp;</span>                        <span class="token punctuation">(</span><span class="token punctuation">(</span>SmartFactoryBean<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span><span class="token punctuation">)</span> factory<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isEagerInit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>               <span class="token punctuation">}</span>               <span class="token comment" spellcheck="true">//调用真正的getBean的流程</span>               <span class="token keyword">if</span> <span class="token punctuation">(</span>isEagerInit<span class="token punctuation">)</span> <span class="token punctuation">{</span>                  <span class="token function">getBean</span><span class="token punctuation">(</span>beanName<span class="token punctuation">)</span><span class="token punctuation">;</span>               <span class="token punctuation">}</span>            <span class="token punctuation">}</span>         <span class="token punctuation">}</span>         <span class="token keyword">else</span> <span class="token punctuation">{</span>             <span class="token comment" spellcheck="true">//非工厂Bean 就是普通的bean</span>            <span class="token function">getBean</span><span class="token punctuation">(</span>beanName<span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token punctuation">}</span>      <span class="token punctuation">}</span>   <span class="token punctuation">}</span>   <span class="token comment" spellcheck="true">//所有的单例bean已经缓存单例bean到一级缓存singletonObjects</span>   <span class="token keyword">for</span> <span class="token punctuation">(</span>String beanName <span class="token operator">:</span> beanNames<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">//从单例缓存池中获取所有的对象</span>      Object singletonInstance <span class="token operator">=</span> <span class="token function">getSingleton</span><span class="token punctuation">(</span>beanName<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">//判断当前的bean是否实现了SmartInitializingSingleton接口，</span>      <span class="token comment" spellcheck="true">// 在初期注册的6个后置处理器中有一个是实现了这个接口就是处理监听方法的注解@EventListener解析器EventListenerMethodProcessor</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>singletonInstance <span class="token keyword">instanceof</span> <span class="token class-name">SmartInitializingSingleton</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token keyword">final</span> SmartInitializingSingleton smartSingleton <span class="token operator">=</span> <span class="token punctuation">(</span>SmartInitializingSingleton<span class="token punctuation">)</span> singletonInstance<span class="token punctuation">;</span>         <span class="token keyword">if</span> <span class="token punctuation">(</span>System<span class="token punctuation">.</span><span class="token function">getSecurityManager</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            AccessController<span class="token punctuation">.</span><span class="token function">doPrivileged</span><span class="token punctuation">(</span><span class="token punctuation">(</span>PrivilegedAction<span class="token operator">&lt;</span>Object<span class="token operator">></span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>               smartSingleton<span class="token punctuation">.</span><span class="token function">afterSingletonsInstantiated</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>               <span class="token keyword">return</span> null<span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token function">getAccessControlContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token punctuation">}</span>         <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//触发实例化之后的方法afterSingletonsInstantiated</span>            smartSingleton<span class="token punctuation">.</span><span class="token function">afterSingletonsInstantiated</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token punctuation">}</span>      <span class="token punctuation">}</span>   <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>这里主要是开始解析成bean的前期准备工作和，解析完后的扩展工作。</p><p>前期准备会判断是不是FactoryBean,这里的FactoryBean和BeanFactory是不一样的，后面会做解释。</p><p>getBean之后会调用实现了SmartInitializingSingleton接口的实现类,<strong>这里是一个扩展点，解析带注解的时间监听器就是这里处理的</strong></p><p>其实不管是FactoryBean还是普通Bean都会走getBean这个方法，这个号方法才是解析Bean的最重要的方法。getBean-&gt;doGetBean</p><h3 id="doGetBean方法"><a href="#doGetBean方法" class="headerlink" title="doGetBean方法"></a>doGetBean方法</h3><p>再看getBean前先介绍一下几个集合类</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 一级缓存 这个就是单例缓存池,用于保存我们所有的完整的单例bean</span><span class="token keyword">private</span> <span class="token keyword">final</span> Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Object<span class="token operator">></span> singletonObjects <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ConcurrentHashMap</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token number">256</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 三级缓存 该map用户缓存key为beanName value为ObjectFactory(包装为早期对象,钩子方法) </span><span class="token keyword">private</span> <span class="token keyword">final</span> Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> ObjectFactory<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">>></span> singletonFactories <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 二级缓存 用户缓存我们的key为beanName value是我们的早期对象(对象属性还没有来得及进行赋值)</span><span class="token keyword">private</span> <span class="token keyword">final</span> Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Object<span class="token operator">></span> earlySingletonObjects <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 已注册的单例名称set</span><span class="token keyword">private</span> <span class="token keyword">final</span> Set<span class="token operator">&lt;</span>String<span class="token operator">></span> registeredSingletons <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedHashSet</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token number">256</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 用户缓存当前正在创建bean的名称</span><span class="token keyword">private</span> <span class="token keyword">final</span> Set<span class="token operator">&lt;</span>String<span class="token operator">></span> singletonsCurrentlyInCreation <span class="token operator">=</span>            Collections<span class="token punctuation">.</span><span class="token function">newSetFromMap</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ConcurrentHashMap</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 排除当前创建检查的</span><span class="token keyword">private</span> <span class="token keyword">final</span> Set<span class="token operator">&lt;</span>String<span class="token operator">></span> inCreationCheckExclusions <span class="token operator">=</span>            Collections<span class="token punctuation">.</span><span class="token function">newSetFromMap</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ConcurrentHashMap</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/**  * @param name bean名称或别名  * @param requiredType 需要获取bean的类型  * @param args 通过该参数传递进来,到调用构造方法时候发现有多个构造方法,我们就可以通过该参数来指定想要的构造方法了  * 不需要去推断构造方法(因为推断构造方法很耗时)  * @param typeCheckOnly 判断当前的bean是不是一个检查类型的bean，这类型用的很少.  * @return 返回一个bean实例,该实例可能是单例bean,也有可能是原型bean  */</span><span class="token keyword">protected</span> <span class="token operator">&lt;</span>T<span class="token operator">></span> T <span class="token function">doGetBean</span><span class="token punctuation">(</span><span class="token keyword">final</span> String name<span class="token punctuation">,</span> <span class="token annotation punctuation">@Nullable</span> <span class="token keyword">final</span> Class<span class="token operator">&lt;</span>T<span class="token operator">></span> requiredType<span class="token punctuation">,</span>      <span class="token annotation punctuation">@Nullable</span> <span class="token keyword">final</span> Object<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">,</span> <span class="token keyword">boolean</span> typeCheckOnly<span class="token punctuation">)</span> <span class="token keyword">throws</span> BeansException <span class="token punctuation">{</span>   <span class="token comment" spellcheck="true">//传入进来的name可能是别名, 也有可能是FactoryBean的name,所以在这里需要转换</span>   <span class="token keyword">final</span> String beanName <span class="token operator">=</span> <span class="token function">transformedBeanName</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>   Object bean<span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//尝试去缓存中获取对象 --getSingleton重点方法，注意下面也有一个getSingleton，这2者功能不一样--</span>   Object sharedInstance <span class="token operator">=</span> <span class="token function">getSingleton</span><span class="token punctuation">(</span>beanName<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//缓存中拿到了</span>   <span class="token keyword">if</span> <span class="token punctuation">(</span>sharedInstance <span class="token operator">!=</span> null <span class="token operator">&amp;&amp;</span> args <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>logger<span class="token punctuation">.</span><span class="token function">isDebugEnabled</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token comment" spellcheck="true">// 判断是不是当前正在创建的</span>         <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isSingletonCurrentlyInCreation</span><span class="token punctuation">(</span>beanName<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            logger<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">"Returning eagerly cached instance of singleton bean '"</span> <span class="token operator">+</span> beanName <span class="token operator">+</span>                  <span class="token string">"' that is not fully initialized yet - a consequence of a circular reference"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token punctuation">}</span>         <span class="token keyword">else</span> <span class="token punctuation">{</span>            logger<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">"Returning cached instance of singleton bean '"</span> <span class="token operator">+</span> beanName <span class="token operator">+</span> <span class="token string">"'"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token punctuation">}</span>      <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">//如果sharedInstance是普通的单例bean,下面的方法会直接返回。</span>      <span class="token comment" spellcheck="true">//但如果sharedInstance是FactoryBean,则需调用getObject工厂方法获取真正的bean实例。如果用户想获取FactoryBean本身，这里也不会做特别的处理，直接返回. --这个方法下面源码会剖析--</span>      bean <span class="token operator">=</span> <span class="token function">getObjectForBeanInstance</span><span class="token punctuation">(</span>sharedInstance<span class="token punctuation">,</span> name<span class="token punctuation">,</span> beanName<span class="token punctuation">,</span> null<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span>    <span class="token keyword">else</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">//spring只能解决单例对象的setter 注入的循环依赖,不能解决构造器注入</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isPrototypeCurrentlyInCreation</span><span class="token punctuation">(</span>beanName<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">BeanCurrentlyInCreationException</span><span class="token punctuation">(</span>beanName<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token comment" spellcheck="true">//====================================父子容器，先不用管-Begin=================================</span>      <span class="token comment" spellcheck="true">/**       * 判断AbstractBeanFacotry工厂是否有父工厂(一般情况下是没有父工厂因为abstractBeanFactory直接是抽象类,不存在父工厂       * 一般情况下,只有Spring和SpringMvc整合的时才会有父子容器的概念,       * 比如我们的Controller中注入Service的时候，发现我们依赖的是一个引用对象，那么他就会调用getBean去把service找出来       * 但是当前所在的容器是web子容器，那么就会在这里的先去父容器找       */</span>      BeanFactory parentBeanFactory <span class="token operator">=</span> <span class="token function">getParentBeanFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">//若存在父工厂,切当前的bean工厂不存在当前的bean定义,那么bean定义是存在于父beanFacotry中</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>parentBeanFactory <span class="token operator">!=</span> null <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span><span class="token function">containsBeanDefinition</span><span class="token punctuation">(</span>beanName<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token comment" spellcheck="true">//获取bean的原始名称</span>         String nameToLookup <span class="token operator">=</span> <span class="token function">originalBeanName</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment" spellcheck="true">//若为 AbstractBeanFactory 类型，委托父类处理</span>         <span class="token keyword">if</span> <span class="token punctuation">(</span>parentBeanFactory <span class="token keyword">instanceof</span> <span class="token class-name">AbstractBeanFactory</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>AbstractBeanFactory<span class="token punctuation">)</span> parentBeanFactory<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">doGetBean</span><span class="token punctuation">(</span>                  nameToLookup<span class="token punctuation">,</span> requiredType<span class="token punctuation">,</span> args<span class="token punctuation">,</span> typeCheckOnly<span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token punctuation">}</span>         <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>args <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//  委托给构造函数 getBean() 处理</span>            <span class="token keyword">return</span> <span class="token punctuation">(</span>T<span class="token punctuation">)</span> parentBeanFactory<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span>nameToLookup<span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token punctuation">}</span>         <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 没有 args，委托给标准的 getBean() 处理</span>            <span class="token keyword">return</span> parentBeanFactory<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span>nameToLookup<span class="token punctuation">,</span> requiredType<span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token punctuation">}</span>      <span class="token punctuation">}</span>     <span class="token comment" spellcheck="true">//====================================父子容器，先不用管-END=================================</span>             <span class="token comment" spellcheck="true">/**       * 方法参数typeCheckOnly,是用来判断调用getBean方法时，表示是否为仅仅进行类型检查获取Bean对象       * 如果不是做类型检查,而是创建Bean对象,则需要调用markBeanAsCreated方法,进行记录       * 一般都会执行markBeanAsCreated方法, 这个方法比较简单 --这个方法下面源码会剖析--       */</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>typeCheckOnly<span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token function">markBeanAsCreated</span><span class="token punctuation">(</span>beanName<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token keyword">try</span> <span class="token punctuation">{</span>         <span class="token comment" spellcheck="true">// 从容器中获取beanName相应的GenericBeanDefinition对象,并将其转换为RootBeanDefinition对象</span>         <span class="token keyword">final</span> RootBeanDefinition mbd <span class="token operator">=</span> <span class="token function">getMergedLocalBeanDefinition</span><span class="token punctuation">(</span>beanName<span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment" spellcheck="true">//检查当前创建的bean定义是不是抽象的bean定义</span>         <span class="token function">checkMergedBeanDefinition</span><span class="token punctuation">(</span>mbd<span class="token punctuation">,</span> beanName<span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment" spellcheck="true">// ===============================解决@DependsOn的情况,一般不会走，BEGIN============</span>         <span class="token comment" spellcheck="true">/**           @Bean           public DependsA dependsA() {               return new DependsA();           }           @Bean           @DependsOn(value = {"dependsA"})           public DependsB dependsB() {              return new DependsB();           }           * 处理@DependsOn注解的依赖(这个不是我们所谓的循环依赖,而是bean创建前后的依赖,是我们手动希望在解析这个bean之前需要先解析DependsOn中的方法)           */</span>         <span class="token comment" spellcheck="true">//依赖bean的名称</span>         String<span class="token punctuation">[</span><span class="token punctuation">]</span> dependsOn <span class="token operator">=</span> mbd<span class="token punctuation">.</span><span class="token function">getDependsOn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>dependsOn <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 若给定的依赖bean已经注册为依赖给定的 bean</span>            <span class="token comment" spellcheck="true">// 即循环依赖的情况,抛出 BeanCreationException 异常</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span>String dep <span class="token operator">:</span> dependsOn<span class="token punctuation">)</span> <span class="token punctuation">{</span>               <span class="token comment" spellcheck="true">//beanName是当前正在创建的bean,dep是正在创建的bean的依赖的bean的名称</span>               <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isDependent</span><span class="token punctuation">(</span>beanName<span class="token punctuation">,</span> dep<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                  <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">BeanCreationException</span><span class="token punctuation">(</span>mbd<span class="token punctuation">.</span><span class="token function">getResourceDescription</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> beanName<span class="token punctuation">,</span>                        <span class="token string">"Circular depends-on relationship between '"</span> <span class="token operator">+</span> beanName <span class="token operator">+</span> <span class="token string">"' and '"</span> <span class="token operator">+</span> dep <span class="token operator">+</span> <span class="token string">"'"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>               <span class="token punctuation">}</span>               <span class="token comment" spellcheck="true">//保存的是依赖 beanName 之间的映射关系：依赖 beanName - > beanName 的集合</span>               <span class="token function">registerDependentBean</span><span class="token punctuation">(</span>dep<span class="token punctuation">,</span> beanName<span class="token punctuation">)</span><span class="token punctuation">;</span>               <span class="token keyword">try</span> <span class="token punctuation">{</span>                  <span class="token comment" spellcheck="true">//获取depentceOn的bean</span>                  <span class="token function">getBean</span><span class="token punctuation">(</span>dep<span class="token punctuation">)</span><span class="token punctuation">;</span>               <span class="token punctuation">}</span>               <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">NoSuchBeanDefinitionException</span> ex<span class="token punctuation">)</span> <span class="token punctuation">{</span>                  <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">BeanCreationException</span><span class="token punctuation">(</span>mbd<span class="token punctuation">.</span><span class="token function">getResourceDescription</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> beanName<span class="token punctuation">,</span>                        <span class="token string">"'"</span> <span class="token operator">+</span> beanName <span class="token operator">+</span> <span class="token string">"' depends on missing bean '"</span> <span class="token operator">+</span> dep <span class="token operator">+</span> <span class="token string">"'"</span><span class="token punctuation">,</span> ex<span class="token punctuation">)</span><span class="token punctuation">;</span>               <span class="token punctuation">}</span>            <span class="token punctuation">}</span>         <span class="token punctuation">}</span>         <span class="token comment" spellcheck="true">// ===============================解决@DependsOn的情况,一般不会走，END============</span>                   <span class="token comment" spellcheck="true">// ===============================创建单例bean,重点必看,START=======================</span>         <span class="token keyword">if</span> <span class="token punctuation">(</span>mbd<span class="token punctuation">.</span><span class="token function">isSingleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//把beanName和一个singletonFactory，并且传入一个回调对象 --带回调的getSingleton方法源码分析--</span>            sharedInstance <span class="token operator">=</span> <span class="token function">getSingleton</span><span class="token punctuation">(</span>beanName<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>               <span class="token keyword">try</span> <span class="token punctuation">{</span>                  <span class="token comment" spellcheck="true">//进入创建bean的逻辑 --重点逻辑，下面源码分析--</span>                  <span class="token keyword">return</span> <span class="token function">createBean</span><span class="token punctuation">(</span>beanName<span class="token punctuation">,</span> mbd<span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>               <span class="token punctuation">}</span>               <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">BeansException</span> ex<span class="token punctuation">)</span> <span class="token punctuation">{</span>                  <span class="token comment" spellcheck="true">//创建bean的过程中发生异常,需要销毁关于当前bean的所有信息</span>                  <span class="token function">destroySingleton</span><span class="token punctuation">(</span>beanName<span class="token punctuation">)</span><span class="token punctuation">;</span>                  <span class="token keyword">throw</span> ex<span class="token punctuation">;</span>               <span class="token punctuation">}</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            bean <span class="token operator">=</span> <span class="token function">getObjectForBeanInstance</span><span class="token punctuation">(</span>sharedInstance<span class="token punctuation">,</span> name<span class="token punctuation">,</span> beanName<span class="token punctuation">,</span> mbd<span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// ===============================创建单例bean,重点必看,END=======================</span>                   <span class="token comment" spellcheck="true">// ===============================创建多例bean,暂时忽略,START=======================</span>         <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>mbd<span class="token punctuation">.</span><span class="token function">isPrototype</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// It's a prototype -> create a new instance.</span>            Object prototypeInstance <span class="token operator">=</span> null<span class="token punctuation">;</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>               <span class="token function">beforePrototypeCreation</span><span class="token punctuation">(</span>beanName<span class="token punctuation">)</span><span class="token punctuation">;</span>               prototypeInstance <span class="token operator">=</span> <span class="token function">createBean</span><span class="token punctuation">(</span>beanName<span class="token punctuation">,</span> mbd<span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">finally</span> <span class="token punctuation">{</span>               <span class="token function">afterPrototypeCreation</span><span class="token punctuation">(</span>beanName<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            bean <span class="token operator">=</span> <span class="token function">getObjectForBeanInstance</span><span class="token punctuation">(</span>prototypeInstance<span class="token punctuation">,</span> name<span class="token punctuation">,</span> beanName<span class="token punctuation">,</span> mbd<span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// ===============================创建多例bean,暂时忽略,END=======================</span>         <span class="token keyword">else</span> <span class="token punctuation">{</span>            String scopeName <span class="token operator">=</span> mbd<span class="token punctuation">.</span><span class="token function">getScope</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">final</span> Scope scope <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>scopes<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>scopeName<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>scope <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>               <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalStateException</span><span class="token punctuation">(</span><span class="token string">"No Scope registered for scope name '"</span> <span class="token operator">+</span> scopeName <span class="token operator">+</span> <span class="token string">"'"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>               Object scopedInstance <span class="token operator">=</span> scope<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>beanName<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>                  <span class="token function">beforePrototypeCreation</span><span class="token punctuation">(</span>beanName<span class="token punctuation">)</span><span class="token punctuation">;</span>                  <span class="token keyword">try</span> <span class="token punctuation">{</span>                     <span class="token keyword">return</span> <span class="token function">createBean</span><span class="token punctuation">(</span>beanName<span class="token punctuation">,</span> mbd<span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>                  <span class="token punctuation">}</span>                  <span class="token keyword">finally</span> <span class="token punctuation">{</span>                     <span class="token function">afterPrototypeCreation</span><span class="token punctuation">(</span>beanName<span class="token punctuation">)</span><span class="token punctuation">;</span>                  <span class="token punctuation">}</span>               <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>               bean <span class="token operator">=</span> <span class="token function">getObjectForBeanInstance</span><span class="token punctuation">(</span>scopedInstance<span class="token punctuation">,</span> name<span class="token punctuation">,</span> beanName<span class="token punctuation">,</span> mbd<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IllegalStateException</span> ex<span class="token punctuation">)</span> <span class="token punctuation">{</span>               <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">BeanCreationException</span><span class="token punctuation">(</span>beanName<span class="token punctuation">,</span>                     <span class="token string">"Scope '"</span> <span class="token operator">+</span> scopeName <span class="token operator">+</span> <span class="token string">"' is not active for the current thread; consider "</span> <span class="token operator">+</span>                     <span class="token string">"defining a scoped proxy for this bean if you intend to refer to it from a singleton"</span><span class="token punctuation">,</span>                     ex<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>         <span class="token punctuation">}</span>      <span class="token punctuation">}</span>      <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">BeansException</span> ex<span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token function">cleanupAfterBeanCreationFailure</span><span class="token punctuation">(</span>beanName<span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token keyword">throw</span> ex<span class="token punctuation">;</span>      <span class="token punctuation">}</span>   <span class="token punctuation">}</span>   <span class="token comment" spellcheck="true">// Check if required type matches the type of the actual bean instance.</span>   <span class="token keyword">if</span> <span class="token punctuation">(</span>requiredType <span class="token operator">!=</span> null <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>requiredType<span class="token punctuation">.</span><span class="token function">isInstance</span><span class="token punctuation">(</span>bean<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">try</span> <span class="token punctuation">{</span>         T convertedBean <span class="token operator">=</span> <span class="token function">getTypeConverter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">convertIfNecessary</span><span class="token punctuation">(</span>bean<span class="token punctuation">,</span> requiredType<span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token keyword">if</span> <span class="token punctuation">(</span>convertedBean <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">BeanNotOfRequiredTypeException</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> requiredType<span class="token punctuation">,</span> bean<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token punctuation">}</span>         <span class="token keyword">return</span> convertedBean<span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">TypeMismatchException</span> ex<span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token keyword">if</span> <span class="token punctuation">(</span>logger<span class="token punctuation">.</span><span class="token function">isDebugEnabled</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            logger<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">"Failed to convert bean '"</span> <span class="token operator">+</span> name <span class="token operator">+</span> <span class="token string">"' to required type '"</span> <span class="token operator">+</span>                  ClassUtils<span class="token punctuation">.</span><span class="token function">getQualifiedName</span><span class="token punctuation">(</span>requiredType<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"'"</span><span class="token punctuation">,</span> ex<span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token punctuation">}</span>         <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">BeanNotOfRequiredTypeException</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> requiredType<span class="token punctuation">,</span> bean<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>   <span class="token punctuation">}</span>   <span class="token keyword">return</span> <span class="token punctuation">(</span>T<span class="token punctuation">)</span> bean<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>getObjectForBeanInstance方法</p><p>获取Bean实例，如果普通bean（包含工厂bean中的&amp;beanname）直接返回，工厂bean调用getObject返回</p><pre class=" language-java"><code class="language-java"><span class="token keyword">protected</span> Object <span class="token function">getObjectForBeanInstance</span><span class="token punctuation">(</span>      Object beanInstance<span class="token punctuation">,</span> String name<span class="token punctuation">,</span> String beanName<span class="token punctuation">,</span> <span class="token annotation punctuation">@Nullable</span> RootBeanDefinition mbd<span class="token punctuation">)</span> <span class="token punctuation">{</span>   <span class="token comment" spellcheck="true">//如果 name以&amp;开头,但beanInstance 却不是FactoryBean,则认为有问题。</span>   <span class="token keyword">if</span> <span class="token punctuation">(</span>BeanFactoryUtils<span class="token punctuation">.</span><span class="token function">isFactoryDereference</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>beanInstance <span class="token keyword">instanceof</span> <span class="token class-name">NullBean</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token keyword">return</span> beanInstance<span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span>beanInstance <span class="token keyword">instanceof</span> <span class="token class-name">FactoryBean</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">BeanIsNotAFactoryException</span><span class="token punctuation">(</span>beanName<span class="token punctuation">,</span> beanInstance<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>   <span class="token punctuation">}</span>   <span class="token comment" spellcheck="true">// 如果是一个普通的 bean或&amp;beanname直接返回beanInstance</span>   <span class="token comment" spellcheck="true">// 否则就是FactoryBean,需要调用工厂方法生成一个bean实例。</span>   <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span>beanInstance <span class="token keyword">instanceof</span> <span class="token class-name">FactoryBean</span><span class="token punctuation">)</span> <span class="token operator">||</span> BeanFactoryUtils<span class="token punctuation">.</span><span class="token function">isFactoryDereference</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> beanInstance<span class="token punctuation">;</span>   <span class="token punctuation">}</span>   <span class="token comment" spellcheck="true">// ========================下面表示了它是一个FactoryBean--START=================</span>   Object object <span class="token operator">=</span> null<span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">// mbd 不为空说明当前不是创建,是获取bean的操作</span>   <span class="token keyword">if</span> <span class="token punctuation">(</span>mbd <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// 从缓存中拿， 第一次肯定没有缓存， 在下面getObjectFromFactoryBean缓存的</span>      object <span class="token operator">=</span> <span class="token function">getCachedObjectForFactoryBean</span><span class="token punctuation">(</span>beanName<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span>   <span class="token keyword">if</span> <span class="token punctuation">(</span>object <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// 经过前面的判断，到这里可以保证 beanInstance 是 FactoryBean 类型的，所以可以进行类型转换</span>      FactoryBean<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> factory <span class="token operator">=</span> <span class="token punctuation">(</span>FactoryBean<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span><span class="token punctuation">)</span> beanInstance<span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">// 如果 mbd 为空，则判断是否存在名字为 beanName 的 BeanDefinition</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>mbd <span class="token operator">==</span> null <span class="token operator">&amp;&amp;</span> <span class="token function">containsBeanDefinition</span><span class="token punctuation">(</span>beanName<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>         mbd <span class="token operator">=</span> <span class="token function">getMergedLocalBeanDefinition</span><span class="token punctuation">(</span>beanName<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>             <span class="token comment" spellcheck="true">// TODO 暂不清楚</span>      <span class="token keyword">boolean</span> synthetic <span class="token operator">=</span> <span class="token punctuation">(</span>mbd <span class="token operator">!=</span> null <span class="token operator">&amp;&amp;</span> mbd<span class="token punctuation">.</span><span class="token function">isSynthetic</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">// 在这里会调用getObject()</span>      object <span class="token operator">=</span> <span class="token function">getObjectFromFactoryBean</span><span class="token punctuation">(</span>factory<span class="token punctuation">,</span> beanName<span class="token punctuation">,</span> <span class="token operator">!</span>synthetic<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span>   <span class="token comment" spellcheck="true">// ========================下面表示了它是一个FactoryBean--END=================</span>   <span class="token keyword">return</span> object<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>markBeanAsCreated方法</p><p>标记Bean是否创建</p><pre class=" language-java"><code class="language-java"><span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">markBeanAsCreated</span><span class="token punctuation">(</span>String beanName<span class="token punctuation">)</span> <span class="token punctuation">{</span>   <span class="token comment" spellcheck="true">//没有创建</span>   <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span>alreadyCreated<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span>beanName<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">//全局加锁</span>      <span class="token keyword">synchronized</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>mergedBeanDefinitions<span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token comment" spellcheck="true">//再次检查一次：DCL 双检查模式</span>         <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span>alreadyCreated<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span>beanName<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//从 mergedBeanDefinitions 中删除 beanName，并在下次访问时重新创建它</span>            <span class="token function">clearMergedBeanDefinition</span><span class="token punctuation">(</span>beanName<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 添加到已创建 bean 集合中</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>alreadyCreated<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>beanName<span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token punctuation">}</span>      <span class="token punctuation">}</span>   <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>带回调的getSingleton方法</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// singletonFactory 是一个回调方法，在这个回调方法中执行createBean方法</span><span class="token keyword">public</span> Object <span class="token function">getSingleton</span><span class="token punctuation">(</span>String beanName<span class="token punctuation">,</span> ObjectFactory<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> singletonFactory<span class="token punctuation">)</span> <span class="token punctuation">{</span>   Assert<span class="token punctuation">.</span><span class="token function">notNull</span><span class="token punctuation">(</span>beanName<span class="token punctuation">,</span> <span class="token string">"Bean name must not be null"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//加锁</span>   <span class="token keyword">synchronized</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>singletonObjects<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">//尝试从单例缓存池中获取对象</span>      Object singletonObject <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>singletonObjects<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>beanName<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>singletonObject <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>singletonsCurrentlyInDestruction<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">BeanCreationNotAllowedException</span><span class="token punctuation">(</span>beanName<span class="token punctuation">,</span>                  <span class="token string">"Singleton bean creation not allowed while singletons of this factory are in destruction "</span> <span class="token operator">+</span>                  <span class="token string">"(Do not request a bean from a BeanFactory in a destroy method implementation!)"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token punctuation">}</span>         <span class="token keyword">if</span> <span class="token punctuation">(</span>logger<span class="token punctuation">.</span><span class="token function">isDebugEnabled</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            logger<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">"Creating shared instance of singleton bean '"</span> <span class="token operator">+</span> beanName <span class="token operator">+</span> <span class="token string">"'"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token punctuation">}</span>               <span class="token comment" spellcheck="true">// 标记当前的bean马上就要被创建了</span>         <span class="token comment" spellcheck="true">// singletonsCurrentlyInCreation 在这里会把beanName加入进来，若第二次循环依赖（构造器注入会抛出异常）</span>         <span class="token function">beforeSingletonCreation</span><span class="token punctuation">(</span>beanName<span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token keyword">boolean</span> newSingleton <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>         <span class="token keyword">boolean</span> recordSuppressedExceptions <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>suppressedExceptions <span class="token operator">==</span> null<span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token keyword">if</span> <span class="token punctuation">(</span>recordSuppressedExceptions<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>suppressedExceptions <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedHashSet</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token punctuation">}</span>         <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 初始化bean,这里调用钩子方法 createBean方法</span>            singletonObject <span class="token operator">=</span> singletonFactory<span class="token punctuation">.</span><span class="token function">getObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            newSingleton <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>         <span class="token punctuation">}</span>         <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IllegalStateException</span> ex<span class="token punctuation">)</span> <span class="token punctuation">{</span>            singletonObject <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>singletonObjects<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>beanName<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>singletonObject <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>               <span class="token keyword">throw</span> ex<span class="token punctuation">;</span>            <span class="token punctuation">}</span>         <span class="token punctuation">}</span>         <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">BeanCreationException</span> ex<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>recordSuppressedExceptions<span class="token punctuation">)</span> <span class="token punctuation">{</span>               <span class="token keyword">for</span> <span class="token punctuation">(</span>Exception suppressedException <span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>suppressedExceptions<span class="token punctuation">)</span> <span class="token punctuation">{</span>                  ex<span class="token punctuation">.</span><span class="token function">addRelatedCause</span><span class="token punctuation">(</span>suppressedException<span class="token punctuation">)</span><span class="token punctuation">;</span>               <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            <span class="token keyword">throw</span> ex<span class="token punctuation">;</span>         <span class="token punctuation">}</span>         <span class="token keyword">finally</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>recordSuppressedExceptions<span class="token punctuation">)</span> <span class="token punctuation">{</span>               <span class="token keyword">this</span><span class="token punctuation">.</span>suppressedExceptions <span class="token operator">=</span> null<span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">//后置处理</span>            <span class="token comment" spellcheck="true">//主要做的事情就是把singletonsCurrentlyInCreation标记正在创建的bean从集合中移除</span>            <span class="token function">afterSingletonCreation</span><span class="token punctuation">(</span>beanName<span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token punctuation">}</span>         <span class="token keyword">if</span> <span class="token punctuation">(</span>newSingleton<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//加入到单例缓存池中,从三级缓存中移除,从二级缓存中移除,记录保存已经处理的bean</span>            <span class="token comment" spellcheck="true">//this.singletonObjects.put(beanName, singletonObject);</span>           <span class="token comment" spellcheck="true">//this.singletonFactories.remove(beanName);</span>           <span class="token comment" spellcheck="true">//this.earlySingletonObjects.remove(beanName);</span>           <span class="token comment" spellcheck="true">//this.registeredSingletons.add(beanName);</span>            <span class="token function">addSingleton</span><span class="token punctuation">(</span>beanName<span class="token punctuation">,</span> singletonObject<span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token punctuation">}</span>      <span class="token punctuation">}</span>      <span class="token keyword">return</span> singletonObject<span class="token punctuation">;</span>   <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>createBean方法</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Override</span><span class="token keyword">protected</span> Object <span class="token function">createBean</span><span class="token punctuation">(</span>String beanName<span class="token punctuation">,</span> RootBeanDefinition mbd<span class="token punctuation">,</span> <span class="token annotation punctuation">@Nullable</span> Object<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span>      <span class="token keyword">throws</span> BeanCreationException <span class="token punctuation">{</span>   <span class="token keyword">if</span> <span class="token punctuation">(</span>logger<span class="token punctuation">.</span><span class="token function">isDebugEnabled</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      logger<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">"Creating instance of bean '"</span> <span class="token operator">+</span> beanName <span class="token operator">+</span> <span class="token string">"'"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span>   RootBeanDefinition mbdToUse <span class="token operator">=</span> mbd<span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">// 确保此时的bean已经被解析了</span>   Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> resolvedClass <span class="token operator">=</span> <span class="token function">resolveBeanClass</span><span class="token punctuation">(</span>mbd<span class="token punctuation">,</span> beanName<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token keyword">if</span> <span class="token punctuation">(</span>resolvedClass <span class="token operator">!=</span> null <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>mbd<span class="token punctuation">.</span><span class="token function">hasBeanClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> mbd<span class="token punctuation">.</span><span class="token function">getBeanClassName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>      mbdToUse <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RootBeanDefinition</span><span class="token punctuation">(</span>mbd<span class="token punctuation">)</span><span class="token punctuation">;</span>      mbdToUse<span class="token punctuation">.</span><span class="token function">setBeanClass</span><span class="token punctuation">(</span>resolvedClass<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span>   <span class="token comment" spellcheck="true">// Prepare method overrides.</span>   <span class="token keyword">try</span> <span class="token punctuation">{</span>      mbdToUse<span class="token punctuation">.</span><span class="token function">prepareMethodOverrides</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span>   <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">BeanDefinitionValidationException</span> ex<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">BeanDefinitionStoreException</span><span class="token punctuation">(</span>mbdToUse<span class="token punctuation">.</span><span class="token function">getResourceDescription</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            beanName<span class="token punctuation">,</span> <span class="token string">"Validation of method overrides failed"</span><span class="token punctuation">,</span> ex<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span>   <span class="token keyword">try</span> <span class="token punctuation">{</span>       <span class="token comment" spellcheck="true">// 通过bean的后置处理器来进行后置处理生成代理对象,一般情况下在此处不会生成代理对象,为什么不能生成代理对象,不管是我们的jdk代理还是cglib代理都不会在此处进行代理，因为我们的真实的对象没有生成,所以在这里不会生成代理对象，那么在这一步是我们aop和事务的关键，因为在这里解析我们的aop切面信息进行缓存</span>       <span class="token comment" spellcheck="true">// --这个方法挺重要的里面包含了几个扩展点 resolveBeforeInstantiation方法源码分析--</span>      Object bean <span class="token operator">=</span> <span class="token function">resolveBeforeInstantiation</span><span class="token punctuation">(</span>beanName<span class="token punctuation">,</span> mbdToUse<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>bean <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token keyword">return</span> bean<span class="token punctuation">;</span>      <span class="token punctuation">}</span>   <span class="token punctuation">}</span>   <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Throwable</span> ex<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">BeanCreationException</span><span class="token punctuation">(</span>mbdToUse<span class="token punctuation">.</span><span class="token function">getResourceDescription</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> beanName<span class="token punctuation">,</span>            <span class="token string">"BeanPostProcessor before instantiation of bean failed"</span><span class="token punctuation">,</span> ex<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span>   <span class="token keyword">try</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// 该步骤是我们真正的创建我们的bean的实例对象的过程--重要代码，后续doCreateBean方法源码分析--</span>      Object beanInstance <span class="token operator">=</span> <span class="token function">doCreateBean</span><span class="token punctuation">(</span>beanName<span class="token punctuation">,</span> mbdToUse<span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>logger<span class="token punctuation">.</span><span class="token function">isDebugEnabled</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>         logger<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">"Finished creating instance of bean '"</span> <span class="token operator">+</span> beanName <span class="token operator">+</span> <span class="token string">"'"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span>      <span class="token keyword">return</span> beanInstance<span class="token punctuation">;</span>   <span class="token punctuation">}</span>   <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">BeanCreationException</span> <span class="token operator">|</span> ImplicitlyAppearedSingletonException ex<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// A previously detected exception with proper bean creation context already,</span>      <span class="token comment" spellcheck="true">// or illegal singleton state to be communicated up to DefaultSingletonBeanRegistry.</span>      <span class="token keyword">throw</span> ex<span class="token punctuation">;</span>   <span class="token punctuation">}</span>   <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Throwable</span> ex<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">BeanCreationException</span><span class="token punctuation">(</span>            mbdToUse<span class="token punctuation">.</span><span class="token function">getResourceDescription</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> beanName<span class="token punctuation">,</span> <span class="token string">"Unexpected exception during bean creation"</span><span class="token punctuation">,</span> ex<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>getSingleton方法</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// allowEarlyReference通过这个参数可以控制解决循环依赖</span><span class="token keyword">protected</span> Object <span class="token function">getSingleton</span><span class="token punctuation">(</span>String beanName<span class="token punctuation">,</span> <span class="token keyword">boolean</span> allowEarlyReference<span class="token punctuation">)</span> <span class="token punctuation">{</span>   <span class="token comment" spellcheck="true">/**    * 1: 我们尝试去一级缓存(单例缓存池中去获取对象,一般情况从该map中获取的对象是直接可以使用的)    * IOC容器初始化加载单实例bean的时候第一次进来的时候 该map中一般返回空    */</span>   Object singletonObject <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>singletonObjects<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>beanName<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">/**    * 若在第一级缓存中没有获取到对象,并且singletonsCurrentlyInCreation这个list包含该beanName    * IOC容器初始化加载单实例bean的时候第一次进来的时候,该list中一般返回空,但是循环依赖的时候可以满足该条件    */</span>   <span class="token keyword">if</span> <span class="token punctuation">(</span>singletonObject <span class="token operator">==</span> null <span class="token operator">&amp;&amp;</span> <span class="token function">isSingletonCurrentlyInCreation</span><span class="token punctuation">(</span>beanName<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">synchronized</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>singletonObjects<span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token comment" spellcheck="true">/**          * 尝试去二级缓存中获取对象(二级缓存中的对象是一个早期对象)          * 何为早期对象:就是bean刚刚调用了构造方法，还来不及给bean的属性进行赋值的对象(纯净态)          * 就是早期对象          */</span>         singletonObject <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>earlySingletonObjects<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>beanName<span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment" spellcheck="true">//二级缓存中也没有获取到对象,allowEarlyReference为true</span>         <span class="token keyword">if</span> <span class="token punctuation">(</span>singletonObject <span class="token operator">==</span> null <span class="token operator">&amp;&amp;</span> allowEarlyReference<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">/**             * 直接从三级缓存中获取 ObjectFactory对象 这个对接就是用来解决循环依赖的关键所在             * 在ioc后期的过程中,当bean调用了构造方法的时候,把早期对象包裹成一个ObjectFactory             * 暴露到三级缓存中             */</span>            ObjectFactory<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> singletonFactory <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>singletonFactories<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>beanName<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//从三级缓存中获取到对象不为空</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>singletonFactory <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>               <span class="token comment" spellcheck="true">/**                * 在这里通过暴露的ObjectFactory 包装对象中,通过调用他的getObject()来获取我们的早期对象                * 在这个环节中会调用到 getEarlyBeanReference()来进行后置处理                */</span>               singletonObject <span class="token operator">=</span> singletonFactory<span class="token punctuation">.</span><span class="token function">getObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>               <span class="token comment" spellcheck="true">//把早期对象放置在二级缓存,</span>               <span class="token keyword">this</span><span class="token punctuation">.</span>earlySingletonObjects<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>beanName<span class="token punctuation">,</span> singletonObject<span class="token punctuation">)</span><span class="token punctuation">;</span>               <span class="token comment" spellcheck="true">//ObjectFactory 包装对象从三级缓存中删除掉</span>               <span class="token keyword">this</span><span class="token punctuation">.</span>singletonFactories<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>beanName<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>         <span class="token punctuation">}</span>      <span class="token punctuation">}</span>   <span class="token punctuation">}</span>   <span class="token keyword">return</span> singletonObject<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>resolveBeforeInstantiation方法</p><pre class=" language-java"><code class="language-java"><span class="token keyword">protected</span> Object <span class="token function">resolveBeforeInstantiation</span><span class="token punctuation">(</span>String beanName<span class="token punctuation">,</span> RootBeanDefinition mbd<span class="token punctuation">)</span> <span class="token punctuation">{</span>   Object bean <span class="token operator">=</span> null<span class="token punctuation">;</span>   <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>Boolean<span class="token punctuation">.</span>FALSE<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>mbd<span class="token punctuation">.</span>beforeInstantiationResolved<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">//判断容器中是否有InstantiationAwareBeanPostProcessors</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>mbd<span class="token punctuation">.</span><span class="token function">isSynthetic</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token function">hasInstantiationAwareBeanPostProcessors</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token comment" spellcheck="true">//获取当前bea的class对象</span>         Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> targetType <span class="token operator">=</span> <span class="token function">determineTargetType</span><span class="token punctuation">(</span>beanName<span class="token punctuation">,</span> mbd<span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token keyword">if</span> <span class="token punctuation">(</span>targetType <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//后置处理器的【第一次】调用 总共有九处调用 事务在这里不会被调用,aop的才会被调用,因为在此处需要解析出对应的切面报错到缓存中，InstantiationAwareBeanPostProcessor.postProcessBeforeInstantiation</span>            bean <span class="token operator">=</span> <span class="token function">applyBeanPostProcessorsBeforeInstantiation</span><span class="token punctuation">(</span>targetType<span class="token punctuation">,</span> beanName<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//若InstantiationAwareBeanPostProcessors后置处理器的postProcessBeforeInstantiation返回不为null</span>            <span class="token comment" spellcheck="true">//说明生成了代理对象那么我们就调用</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>bean <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>               <span class="token comment" spellcheck="true">// 后置处理器的再次调用，该后置处理器若被调用的话，那么第一处的处理器肯定返回的不是null</span>               <span class="token comment" spellcheck="true">// InstantiationAwareBeanPostProcessors后置处理器postProcessAfterInitialization</span>               bean <span class="token operator">=</span> <span class="token function">applyBeanPostProcessorsAfterInitialization</span><span class="token punctuation">(</span>bean<span class="token punctuation">,</span> beanName<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>         <span class="token punctuation">}</span>      <span class="token punctuation">}</span>      mbd<span class="token punctuation">.</span>beforeInstantiationResolved <span class="token operator">=</span> <span class="token punctuation">(</span>bean <span class="token operator">!=</span> null<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span>   <span class="token keyword">return</span> bean<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h3 id="doCreateBean方法"><a href="#doCreateBean方法" class="headerlink" title="doCreateBean方法"></a>doCreateBean方法</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">protected</span> Object <span class="token function">doCreateBean</span><span class="token punctuation">(</span><span class="token keyword">final</span> String beanName<span class="token punctuation">,</span> <span class="token keyword">final</span> RootBeanDefinition mbd<span class="token punctuation">,</span> <span class="token keyword">final</span> <span class="token annotation punctuation">@Nullable</span> Object<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span>      <span class="token keyword">throws</span> BeanCreationException <span class="token punctuation">{</span>   <span class="token comment" spellcheck="true">//BeanWrapper 是对 Bean 的包装，其接口中所定义的功能很简单包括设置获取被包装的对象，获取被包装 bean 的属性描述器</span>   BeanWrapper instanceWrapper <span class="token operator">=</span> null<span class="token punctuation">;</span>   <span class="token keyword">if</span> <span class="token punctuation">(</span>mbd<span class="token punctuation">.</span><span class="token function">isSingleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">//从没有完成的FactoryBean中移除</span>      instanceWrapper <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>factoryBeanInstanceCache<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>beanName<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span>   <span class="token keyword">if</span> <span class="token punctuation">(</span>instanceWrapper <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">//创建bean实例化 使用合适的实例化策略来创建新的实例：工厂方法、构造函数自动注入、简单初始化 该方法很复杂也很重要</span>      <span class="token comment" spellcheck="true">//这里进行了【第二次】bean后置处理器的调用, SmartInstantiationAwareBeanPostProcessor.determineCandidateConstructors</span>      instanceWrapper <span class="token operator">=</span> <span class="token function">createBeanInstance</span><span class="token punctuation">(</span>beanName<span class="token punctuation">,</span> mbd<span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span>   <span class="token comment" spellcheck="true">//从beanWrapper中获取我们的早期对象</span>   <span class="token keyword">final</span> Object bean <span class="token operator">=</span> instanceWrapper<span class="token punctuation">.</span><span class="token function">getWrappedInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> beanType <span class="token operator">=</span> instanceWrapper<span class="token punctuation">.</span><span class="token function">getWrappedClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token keyword">if</span> <span class="token punctuation">(</span>beanType <span class="token operator">!=</span> NullBean<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      mbd<span class="token punctuation">.</span>resolvedTargetType <span class="token operator">=</span> beanType<span class="token punctuation">;</span>   <span class="token punctuation">}</span>   <span class="token comment" spellcheck="true">// Allow post-processors to modify the merged bean definition.</span>   <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>mbd<span class="token punctuation">.</span>postProcessingLock<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>mbd<span class="token punctuation">.</span>postProcessed<span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//进行后置处理 @AutoWired @Value的注解的预解析</span>            <span class="token comment" spellcheck="true">//【第三次】bean后置处理器调用MergedBeanDefinitionPostProcessor.postProcessMergedBeanDefinition</span>            <span class="token function">applyMergedBeanDefinitionPostProcessors</span><span class="token punctuation">(</span>mbd<span class="token punctuation">,</span> beanType<span class="token punctuation">,</span> beanName<span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token punctuation">}</span>         <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Throwable</span> ex<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">BeanCreationException</span><span class="token punctuation">(</span>mbd<span class="token punctuation">.</span><span class="token function">getResourceDescription</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> beanName<span class="token punctuation">,</span>                  <span class="token string">"Post-processing of merged bean definition failed"</span><span class="token punctuation">,</span> ex<span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token punctuation">}</span>         mbd<span class="token punctuation">.</span>postProcessed <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>   <span class="token punctuation">}</span>   <span class="token comment" spellcheck="true">/**    * 缓存单例到三级缓存中，以防循环依赖    * 判断是否早期引用的Bean,如果是，则允许提前暴露引用    * 判断是否能够暴露早期对象的条件:    * 是否单例    * 是否允许循环依赖    * 是否正在创建的Bean    */</span>   <span class="token keyword">boolean</span> earlySingletonExposure <span class="token operator">=</span> <span class="token punctuation">(</span>mbd<span class="token punctuation">.</span><span class="token function">isSingleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>allowCircularReferences <span class="token operator">&amp;&amp;</span>         <span class="token function">isSingletonCurrentlyInCreation</span><span class="token punctuation">(</span>beanName<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//上述条件满足，允许中期暴露对象</span>   <span class="token keyword">if</span> <span class="token punctuation">(</span>earlySingletonExposure<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>logger<span class="token punctuation">.</span><span class="token function">isDebugEnabled</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>         logger<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">"Eagerly caching bean '"</span> <span class="token operator">+</span> beanName <span class="token operator">+</span>               <span class="token string">"' to allow for resolving potential circular references"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token comment" spellcheck="true">//把我们的早期对象包装成一个singletonFactory对象 该对象提供了一个getObject方法,该方法内部调用getEarlyBeanReference方法</span>      <span class="token comment" spellcheck="true">//【第四次】bean后置处理器调用,通过回调方法调用</span>      <span class="token comment" spellcheck="true">// SmartInstantiationAwareBeanPostProcessor.getEarlyBeanReference</span>      <span class="token function">addSingletonFactory</span><span class="token punctuation">(</span>beanName<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token function">getEarlyBeanReference</span><span class="token punctuation">(</span>beanName<span class="token punctuation">,</span> mbd<span class="token punctuation">,</span> bean<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span>   <span class="token comment" spellcheck="true">// Initialize the bean instance.</span>   Object exposedObject <span class="token operator">=</span> bean<span class="token punctuation">;</span>   <span class="token keyword">try</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">//属性赋值 给我们的属性进行赋值(调用set方法进行赋值)</span>      <span class="token comment" spellcheck="true">//【第五次】bean后置处理器调用InstantiationAwareBeanPostProcessor.postProcessAfterInstantiation</span>      <span class="token comment" spellcheck="true">//【第六次】bean后置处理器调用InstantiationAwareBeanPostProcessor.postProcessPropertyValues</span>      <span class="token function">populateBean</span><span class="token punctuation">(</span>beanName<span class="token punctuation">,</span> mbd<span class="token punctuation">,</span> instanceWrapper<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">//进行对象初始化操作(在这里可能生成代理对象)</span>      <span class="token comment" spellcheck="true">//【第七次】bean后置处理器调用 BeanPostProcessors.postProcessBeforeInitialization 初始化前调用解决@PostConstruct注解，在这里会调用ApplicationContextAwareProcessor.postProcessBeforeInitialization里面会调用7个*Aware方法,包括EnvironmentAware，EmbeddedValueResolverAware，ResourceLoaderAware，ApplicationEventPublisherAware，MessageSourceAware，ApplicationContextAware</span>      <span class="token comment" spellcheck="true">//【第八次】bean后置处理器调用 BeanPostProcessors.postProcessAfterInitialization aop和事务都会在这里生存代理对象</span>      <span class="token comment" spellcheck="true">//initializeBean里面有一个invokeAwareMethods方法很重要，是调用几个Aware方法，也是扩展点包含BeanNameAware，BeanClassLoaderAware，BeanFactoryAware</span>      exposedObject <span class="token operator">=</span> <span class="token function">initializeBean</span><span class="token punctuation">(</span>beanName<span class="token punctuation">,</span> exposedObject<span class="token punctuation">,</span> mbd<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span>   <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Throwable</span> ex<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>ex <span class="token keyword">instanceof</span> <span class="token class-name">BeanCreationException</span> <span class="token operator">&amp;&amp;</span> beanName<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span>BeanCreationException<span class="token punctuation">)</span> ex<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getBeanName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token keyword">throw</span> <span class="token punctuation">(</span>BeanCreationException<span class="token punctuation">)</span> ex<span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token keyword">else</span> <span class="token punctuation">{</span>         <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">BeanCreationException</span><span class="token punctuation">(</span>               mbd<span class="token punctuation">.</span><span class="token function">getResourceDescription</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> beanName<span class="token punctuation">,</span> <span class="token string">"Initialization of bean failed"</span><span class="token punctuation">,</span> ex<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>   <span class="token punctuation">}</span>   <span class="token comment" spellcheck="true">// 是早期对象暴露</span>   <span class="token keyword">if</span> <span class="token punctuation">(</span>earlySingletonExposure<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">/**       * 去缓存中获取到我们的对象 由于传递的allowEarlyReference 是false 要求只能在一级二级缓存中去获取       * 正常普通的bean(不存在循环依赖的bean) 创建的过程中，压根不会把三级缓存提升到二级缓存中       */</span>      Object earlySingletonReference <span class="token operator">=</span> <span class="token function">getSingleton</span><span class="token punctuation">(</span>beanName<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">//能够获取到</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>earlySingletonReference <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token comment" spellcheck="true">//经过后置处理的bean和早期的bean引用还相等的话(表示当前的bean没有被代理过)</span>         <span class="token keyword">if</span> <span class="token punctuation">(</span>exposedObject <span class="token operator">==</span> bean<span class="token punctuation">)</span> <span class="token punctuation">{</span>            exposedObject <span class="token operator">=</span> earlySingletonReference<span class="token punctuation">;</span>         <span class="token punctuation">}</span>         <span class="token comment" spellcheck="true">//处理依赖的bean</span>         <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span>allowRawInjectionDespiteWrapping <span class="token operator">&amp;&amp;</span> <span class="token function">hasDependentBean</span><span class="token punctuation">(</span>beanName<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            String<span class="token punctuation">[</span><span class="token punctuation">]</span> dependentBeans <span class="token operator">=</span> <span class="token function">getDependentBeans</span><span class="token punctuation">(</span>beanName<span class="token punctuation">)</span><span class="token punctuation">;</span>            Set<span class="token operator">&lt;</span>String<span class="token operator">></span> actualDependentBeans <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedHashSet</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span>dependentBeans<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span>String dependentBean <span class="token operator">:</span> dependentBeans<span class="token punctuation">)</span> <span class="token punctuation">{</span>               <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">removeSingletonIfCreatedForTypeCheckOnly</span><span class="token punctuation">(</span>dependentBean<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                  actualDependentBeans<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>dependentBean<span class="token punctuation">)</span><span class="token punctuation">;</span>               <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>actualDependentBeans<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>               <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">BeanCurrentlyInCreationException</span><span class="token punctuation">(</span>beanName<span class="token punctuation">,</span>                     <span class="token string">"Bean with name '"</span> <span class="token operator">+</span> beanName <span class="token operator">+</span> <span class="token string">"' has been injected into other beans ["</span> <span class="token operator">+</span>                     StringUtils<span class="token punctuation">.</span><span class="token function">collectionToCommaDelimitedString</span><span class="token punctuation">(</span>actualDependentBeans<span class="token punctuation">)</span> <span class="token operator">+</span>                     <span class="token string">"] in its raw version as part of a circular reference, but has eventually been "</span> <span class="token operator">+</span>                     <span class="token string">"wrapped. This means that said other beans do not use the final version of the "</span> <span class="token operator">+</span>                     <span class="token string">"bean. This is often the result of over-eager type matching - consider using "</span> <span class="token operator">+</span>                     <span class="token string">"'getBeanNamesOfType' with the 'allowEagerInit' flag turned off, for example."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>         <span class="token punctuation">}</span>      <span class="token punctuation">}</span>   <span class="token punctuation">}</span>   <span class="token comment" spellcheck="true">// Register bean as disposable.</span>   <span class="token keyword">try</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">//注册销毁的bean的销毁接口</span>      <span class="token function">registerDisposableBeanIfNecessary</span><span class="token punctuation">(</span>beanName<span class="token punctuation">,</span> bean<span class="token punctuation">,</span> mbd<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span>   <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">BeanDefinitionValidationException</span> ex<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">BeanCreationException</span><span class="token punctuation">(</span>            mbd<span class="token punctuation">.</span><span class="token function">getResourceDescription</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> beanName<span class="token punctuation">,</span> <span class="token string">"Invalid destruction signature"</span><span class="token punctuation">,</span> ex<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span>   <span class="token keyword">return</span> exposedObject<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>这个方法主要是创建Bean,在这个方法最重要的就是8个扩展点也是bean后置处理器调用的几个位置，还有Aware的调用。</p><h2 id="BeanFactory和FactoryBean"><a href="#BeanFactory和FactoryBean" class="headerlink" title="BeanFactory和FactoryBean"></a>BeanFactory和FactoryBean</h2><p>BeanFasctory顾名思义就是Bean工厂，它是一个容器，是用来生产bean的。</p><p>FactoryBean是一个特殊的Bean,如果我们一个普通的Bean实现了FactoryBean接口，接着实现他的2个方法，我们getBean的时候获取到的时候就是实现方法里面的Bean,而不是本身Bean,如果要获取到本身Bean,就要getBean(&amp;beanName).</p><h2 id="流程图"><a href="#流程图" class="headerlink" title="流程图"></a>流程图</h2><p>![](<a href="https://blog-dm.oss-cn-shanghai.aliyuncs.com/articleimage/SpringIOC%E6%B5%81%E7%A8%8B">https://blog-dm.oss-cn-shanghai.aliyuncs.com/articleimage/SpringIOC流程</a> (1).png)</p><h2 id="扩展点"><a href="#扩展点" class="headerlink" title="扩展点"></a>扩展点</h2><h3 id="bean的后置处理器扩展点"><a href="#bean的后置处理器扩展点" class="headerlink" title="bean的后置处理器扩展点"></a>bean的后置处理器扩展点</h3><p>创建Bean之前</p><p>InstantiationAwareBeanPostProcessor.postProcessBeforeInstantiation：可终止AOP解析切面</p><p>实例化过程</p><p>SmartInstantiationAwareBeanPostProcessor.determineCandidateConstructors：指定实例化构造函数</p><p>实例化到属性赋值之间</p><p>MergedBeanDefinitionPostProcessor.postProcessMergedBeanDefinition：@Autowired,@Value预解析</p><p>SmartInstantiationAwareBeanPostProcessor.getEarlyBeanReference：解决循环依赖AOP</p><p>属性赋值</p><p>InstantiationAwareBeanPostProcessor.postProcessAfterInstantiation：终止赋值</p><p>InstantiationAwareBeanPostProcessor.postProcessPropertyValues：属性配置值修改，@Autowired注入</p><p>初始化</p><p>BeanPostProcessors.postProcessBeforeInitialization 初始化前调用解决@PostConstruct注解</p><p>BeanPostProcessors.postProcessAfterInitialization aop和事务都会在这里生存代理对象</p><h3 id="Aware扩展点"><a href="#Aware扩展点" class="headerlink" title="Aware扩展点"></a>Aware扩展点</h3><p>初始化之前调用</p><p>BeanNameAware</p><p>BeanClassLoaderAware</p><p>BeanFactoryAware</p><p>初始化之前在ApplicationContextAwareProcessor.postProcessBeforeInitialization调用</p><p>EnvironmentAware</p><p>EmbeddedValueResolverAware</p><p>ResourceLoaderAware</p><p>ApplicationEventPublisherAware</p><p>MessageSourceAware</p><p>ApplicationContextAware</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 源码 </tag>
            
            <tag> Spring </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringIOC容器加载流程和源码剖析</title>
      <link href="/2021/02/25/springioc-rong-qi-jia-zai-liu-cheng-he-yuan-ma-pou-xi/"/>
      <url>/2021/02/25/springioc-rong-qi-jia-zai-liu-cheng-he-yuan-ma-pou-xi/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>说道SpringIOC大家想到的都是控制反转，依赖注入。控制反转是将Bean的创建过程由Spring接手，由Spring创建而不需要我们自己来创建。而依赖注入就是实现控制反转的方式。</p><h2 id="SpringIOC基本概念"><a href="#SpringIOC基本概念" class="headerlink" title="SpringIOC基本概念"></a>SpringIOC基本概念</h2><h3 id="BeanFactory"><a href="#BeanFactory" class="headerlink" title="BeanFactory"></a>BeanFactory</h3><p>Spring Bean的创建使用的是工厂模式，简单而言只要实现了<code>BeanFactory</code>接口就有了创建Bean的能力，但在Spring中提供了很多的容器实现，我们配置方式一般使用<code>AnnotationConfigApplicationContext</code>容器，xml方式我们一般可以使用<code>ClassPathXmlApplicationContext</code>容器。那么问题来了，**<code>BeanFactory</code>和<code>ApplicationContext</code>有什么区别？**</p><p><code>ApplicationContext</code>是继承于<code>BeanFactory</code>，所以<code>ApplicationContext</code>有许多<code>BeanFactory</code>没有的能力。在Spring中我们推荐使用<code>ApplicationContext</code>，除了一些资源受限的情况下我们为了更轻会使用BeanFactory。</p><table><thead><tr><th>Feature</th><th><code>BeanFactory</code></th><th><code>ApplicationContext</code></th></tr></thead><tbody><tr><td>Bean Bean实例化/装配</td><td>Yes</td><td>Yes</td></tr><tr><td>集成的生命周期管理</td><td>No</td><td>Yes</td></tr><tr><td>自动注册 <code>BeanPostProcessor</code></td><td>No</td><td>Yes</td></tr><tr><td>自动注册 <code>BeanFactoryPostProcessor</code></td><td>No</td><td>Yes</td></tr><tr><td>便利的 <code>MessageSource</code> 访问 (国际化)</td><td>No</td><td>Yes</td></tr><tr><td>内置<code>ApplicationEvent</code> 发布机制</td><td>No</td><td>Yes</td></tr></tbody></table><p><img src="https://blog-dm.oss-cn-shanghai.aliyuncs.com/articleimage/20210214135451.png"></p><h3 id="BeanDefinition"><a href="#BeanDefinition" class="headerlink" title="BeanDefinition"></a>BeanDefinition</h3><p><code>BeanDefinition</code>顾名思义叫Bean定义，其实在这个阶段，Bean还没有完全创建，以<code>BeanDefinition</code>来称呼。</p><p>Spring会把class解析成Bean定义放在<code>BeanDefinitionMap</code>中.这个时候Bean定义存的是一些源信息，主要是用来给后面的BeanFactory来创建Bean。大概过程是class-&gt;BeanDefinition-&gt;经过BeanFactory-&gt;Bean。</p><h2 id="SpringIOC流程源码分析"><a href="#SpringIOC流程源码分析" class="headerlink" title="SpringIOC流程源码分析"></a>SpringIOC流程源码分析</h2><p>这里我们以<code>AnnotationConfigApplicationContext</code>进入。<strong>主要看怎样加载类成BeanDefinition，然后BeanDefinition生成Bean的过程。</strong></p><p>在初始化主要做的事情有以下</p><ol><li>初始化<code>BeanFactory</code></li><li>注册一些内置的后置处理器（包括了<code>ConfigurationClassPostProcessor</code>（配置类解析后置处理器））</li><li>创建<code>BeanDefinition</code>扫描器（这里创建的<code>BeanDefinition</code>扫描器不是后续Spring用来扫描的，而是给我们自己扫描的）</li><li>注册配置类</li><li>refresh()方法中加载解析配置类</li></ol><p>测试代码</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MainStart</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        AnnotationConfigApplicationContext ctx <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AnnotationConfigApplicationContext</span><span class="token punctuation">(</span>MainConfig<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ctx<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token string">"people"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>我们首先进入<code>AnnotationConfigApplicationContext</code>方法的父类<code>GenericApplicationContext</code>的无参构造方法,这里我们看到了</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token function">GenericApplicationContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">/**     * ApplicationContext spring上下文对象初始beanFactory     */</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>beanFactory <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DefaultListableBeanFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>注意到这里使用的是<code>DefaultListableBeanFactory</code>是因为这个BeanFactory是最上层的，实现的功能最多。</p><p><img src="https://blog-dm.oss-cn-shanghai.aliyuncs.com/articleimage/20210214142304.png"></p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token function">AnnotationConfigApplicationContext</span><span class="token punctuation">(</span>Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> annotatedClasses<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 调用构造函数</span>    <span class="token keyword">this</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 注册传进来的配置类</span>    <span class="token function">register</span><span class="token punctuation">(</span>annotatedClasses<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 调用一堆方法</span>    <span class="token function">refresh</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h3 id="AnnotationConfigApplicationContext构造方法"><a href="#AnnotationConfigApplicationContext构造方法" class="headerlink" title="AnnotationConfigApplicationContext构造方法"></a>AnnotationConfigApplicationContext构造方法</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token function">AnnotationConfigApplicationContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 注册一些内置的后置处理器包括了ConfigurationClassPostProcessor（配置类解析后置处理器）</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>reader <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AnnotatedBeanDefinitionReader</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 创建BeanDefinition扫描器,扫描包或者类，继而转换为BeanDefinition</span>    <span class="token comment" spellcheck="true">// spring默认的扫描包不是这个scanner对象，这是给我们自己调用context.scan()扫描的</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>scanner <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ClassPathBeanDefinitionScanner</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h3 id="AnnotatedBeanDefinitionReader构造方法"><a href="#AnnotatedBeanDefinitionReader构造方法" class="headerlink" title="AnnotatedBeanDefinitionReader构造方法"></a>AnnotatedBeanDefinitionReader构造方法</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token function">AnnotatedBeanDefinitionReader</span><span class="token punctuation">(</span>BeanDefinitionRegistry registry<span class="token punctuation">,</span> Environment environment<span class="token punctuation">)</span> <span class="token punctuation">{</span>   Assert<span class="token punctuation">.</span><span class="token function">notNull</span><span class="token punctuation">(</span>registry<span class="token punctuation">,</span> <span class="token string">"BeanDefinitionRegistry must not be null"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   Assert<span class="token punctuation">.</span><span class="token function">notNull</span><span class="token punctuation">(</span>environment<span class="token punctuation">,</span> <span class="token string">"Environment must not be null"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//初始化BeanDefinition注册器</span>   <span class="token keyword">this</span><span class="token punctuation">.</span>registry <span class="token operator">=</span> registry<span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//处理条件注解 @Conditional</span>   <span class="token keyword">this</span><span class="token punctuation">.</span>conditionEvaluator <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ConditionEvaluator</span><span class="token punctuation">(</span>registry<span class="token punctuation">,</span> environment<span class="token punctuation">,</span> null<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//注册一些内置的后置处理器（包含解析配置类后置处理器）</span>   AnnotationConfigUtils<span class="token punctuation">.</span><span class="token function">registerAnnotationConfigProcessors</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>registry<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h3 id="registerAnnotationConfigProcessors方法"><a href="#registerAnnotationConfigProcessors方法" class="headerlink" title="registerAnnotationConfigProcessors方法"></a>registerAnnotationConfigProcessors方法</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> Set<span class="token operator">&lt;</span>BeanDefinitionHolder<span class="token operator">></span> <span class="token function">registerAnnotationConfigProcessors</span><span class="token punctuation">(</span>      BeanDefinitionRegistry registry<span class="token punctuation">,</span> <span class="token annotation punctuation">@Nullable</span> Object source<span class="token punctuation">)</span> <span class="token punctuation">{</span>   DefaultListableBeanFactory beanFactory <span class="token operator">=</span> <span class="token function">unwrapDefaultListableBeanFactory</span><span class="token punctuation">(</span>registry<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token keyword">if</span> <span class="token punctuation">(</span>beanFactory <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span>beanFactory<span class="token punctuation">.</span><span class="token function">getDependencyComparator</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">instanceof</span> <span class="token class-name">AnnotationAwareOrderComparator</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token comment" spellcheck="true">//注册了实现Order接口的排序器</span>         beanFactory<span class="token punctuation">.</span><span class="token function">setDependencyComparator</span><span class="token punctuation">(</span>AnnotationAwareOrderComparator<span class="token punctuation">.</span>INSTANCE<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token comment" spellcheck="true">// 设置@AutoWired的候选的解析器：ContextAnnotationAutowireCandidateResolver</span>      <span class="token comment" spellcheck="true">// getLazyResolutionProxyIfNecessary方法，它也是唯一实现。</span>      <span class="token comment" spellcheck="true">// 如果字段上带有@Lazy注解，表示进行懒加载 Spring不会立即创建注入属性的实例，而是生成代理对象，来代替实例</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span>beanFactory<span class="token punctuation">.</span><span class="token function">getAutowireCandidateResolver</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">instanceof</span> <span class="token class-name">ContextAnnotationAutowireCandidateResolver</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>         beanFactory<span class="token punctuation">.</span><span class="token function">setAutowireCandidateResolver</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ContextAnnotationAutowireCandidateResolver</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>   <span class="token punctuation">}</span>   Set<span class="token operator">&lt;</span>BeanDefinitionHolder<span class="token operator">></span> beanDefs <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedHashSet</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">// 为我们容器中注册了解析我们配置类的后置处理器ConfigurationClassPostProcessor</span>   <span class="token comment" spellcheck="true">// org.springframework.context.annotation.internalConfigurationAnnotationProcessor</span>   <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>registry<span class="token punctuation">.</span><span class="token function">containsBeanDefinition</span><span class="token punctuation">(</span>CONFIGURATION_ANNOTATION_PROCESSOR_BEAN_NAME<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      RootBeanDefinition def <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RootBeanDefinition</span><span class="token punctuation">(</span>ConfigurationClassPostProcessor<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      def<span class="token punctuation">.</span><span class="token function">setSource</span><span class="token punctuation">(</span>source<span class="token punctuation">)</span><span class="token punctuation">;</span>      beanDefs<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token function">registerPostProcessor</span><span class="token punctuation">(</span>registry<span class="token punctuation">,</span> def<span class="token punctuation">,</span> CONFIGURATION_ANNOTATION_PROCESSOR_BEAN_NAME<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span>   <span class="token comment" spellcheck="true">// 为我们容器中注册了处理@Autowired注解的处理器AutowiredAnnotationBeanPostProcessor</span>   <span class="token comment" spellcheck="true">// org.springframework.context.annotation.internalAutowiredAnnotationProcessor</span>   <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>registry<span class="token punctuation">.</span><span class="token function">containsBeanDefinition</span><span class="token punctuation">(</span>AUTOWIRED_ANNOTATION_PROCESSOR_BEAN_NAME<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      RootBeanDefinition def <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RootBeanDefinition</span><span class="token punctuation">(</span>AutowiredAnnotationBeanPostProcessor<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      def<span class="token punctuation">.</span><span class="token function">setSource</span><span class="token punctuation">(</span>source<span class="token punctuation">)</span><span class="token punctuation">;</span>      beanDefs<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token function">registerPostProcessor</span><span class="token punctuation">(</span>registry<span class="token punctuation">,</span> def<span class="token punctuation">,</span> AUTOWIRED_ANNOTATION_PROCESSOR_BEAN_NAME<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span>   <span class="token comment" spellcheck="true">// 为我们容器中注册处理@Required属性的注解处理器RequiredAnnotationBeanPostProcessor</span>   <span class="token comment" spellcheck="true">// org.springframework.context.annotation.internalRequiredAnnotationProcessor</span>   <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>registry<span class="token punctuation">.</span><span class="token function">containsBeanDefinition</span><span class="token punctuation">(</span>REQUIRED_ANNOTATION_PROCESSOR_BEAN_NAME<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      RootBeanDefinition def <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RootBeanDefinition</span><span class="token punctuation">(</span>RequiredAnnotationBeanPostProcessor<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      def<span class="token punctuation">.</span><span class="token function">setSource</span><span class="token punctuation">(</span>source<span class="token punctuation">)</span><span class="token punctuation">;</span>      beanDefs<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token function">registerPostProcessor</span><span class="token punctuation">(</span>registry<span class="token punctuation">,</span> def<span class="token punctuation">,</span> REQUIRED_ANNOTATION_PROCESSOR_BEAN_NAME<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span>   <span class="token comment" spellcheck="true">// 为我们容器注册处理JSR规范的注解处理器CommonAnnotationBeanPostProcessor</span>   <span class="token comment" spellcheck="true">// org.springframework.context.annotation.internalCommonAnnotationProcessor</span>   <span class="token keyword">if</span> <span class="token punctuation">(</span>jsr250Present <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>registry<span class="token punctuation">.</span><span class="token function">containsBeanDefinition</span><span class="token punctuation">(</span>COMMON_ANNOTATION_PROCESSOR_BEAN_NAME<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      RootBeanDefinition def <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RootBeanDefinition</span><span class="token punctuation">(</span>CommonAnnotationBeanPostProcessor<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      def<span class="token punctuation">.</span><span class="token function">setSource</span><span class="token punctuation">(</span>source<span class="token punctuation">)</span><span class="token punctuation">;</span>      beanDefs<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token function">registerPostProcessor</span><span class="token punctuation">(</span>registry<span class="token punctuation">,</span> def<span class="token punctuation">,</span> COMMON_ANNOTATION_PROCESSOR_BEAN_NAME<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span>   <span class="token comment" spellcheck="true">// 处理jpa注解的处理器</span>   <span class="token comment" spellcheck="true">// org.springframework.orm.jpa.support.PersistenceAnnotationBeanPostProcessor</span>   <span class="token keyword">if</span> <span class="token punctuation">(</span>jpaPresent <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>registry<span class="token punctuation">.</span><span class="token function">containsBeanDefinition</span><span class="token punctuation">(</span>PERSISTENCE_ANNOTATION_PROCESSOR_BEAN_NAME<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      RootBeanDefinition def <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RootBeanDefinition</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">try</span> <span class="token punctuation">{</span>         def<span class="token punctuation">.</span><span class="token function">setBeanClass</span><span class="token punctuation">(</span>ClassUtils<span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span>PERSISTENCE_ANNOTATION_PROCESSOR_CLASS_NAME<span class="token punctuation">,</span>               AnnotationConfigUtils<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">ClassNotFoundException</span> ex<span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalStateException</span><span class="token punctuation">(</span>               <span class="token string">"Cannot load optional framework class: "</span> <span class="token operator">+</span> PERSISTENCE_ANNOTATION_PROCESSOR_CLASS_NAME<span class="token punctuation">,</span> ex<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      def<span class="token punctuation">.</span><span class="token function">setSource</span><span class="token punctuation">(</span>source<span class="token punctuation">)</span><span class="token punctuation">;</span>      beanDefs<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token function">registerPostProcessor</span><span class="token punctuation">(</span>registry<span class="token punctuation">,</span> def<span class="token punctuation">,</span> PERSISTENCE_ANNOTATION_PROCESSOR_BEAN_NAME<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span>   <span class="token comment" spellcheck="true">// 处理监听方法的注解@EventListener解析器EventListenerMethodProcessor</span>   <span class="token comment" spellcheck="true">// org.springframework.context.event.internalEventListenerProcessor</span>   <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>registry<span class="token punctuation">.</span><span class="token function">containsBeanDefinition</span><span class="token punctuation">(</span>EVENT_LISTENER_PROCESSOR_BEAN_NAME<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      RootBeanDefinition def <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RootBeanDefinition</span><span class="token punctuation">(</span>EventListenerMethodProcessor<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      def<span class="token punctuation">.</span><span class="token function">setSource</span><span class="token punctuation">(</span>source<span class="token punctuation">)</span><span class="token punctuation">;</span>      beanDefs<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token function">registerPostProcessor</span><span class="token punctuation">(</span>registry<span class="token punctuation">,</span> def<span class="token punctuation">,</span> EVENT_LISTENER_PROCESSOR_BEAN_NAME<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span>   <span class="token comment" spellcheck="true">// 注册事件监听器工厂</span>   <span class="token comment" spellcheck="true">// org.springframework.context.event.internalEventListenerFactory</span>   <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>registry<span class="token punctuation">.</span><span class="token function">containsBeanDefinition</span><span class="token punctuation">(</span>EVENT_LISTENER_FACTORY_BEAN_NAME<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      RootBeanDefinition def <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RootBeanDefinition</span><span class="token punctuation">(</span>DefaultEventListenerFactory<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      def<span class="token punctuation">.</span><span class="token function">setSource</span><span class="token punctuation">(</span>source<span class="token punctuation">)</span><span class="token punctuation">;</span>      beanDefs<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token function">registerPostProcessor</span><span class="token punctuation">(</span>registry<span class="token punctuation">,</span> def<span class="token punctuation">,</span> EVENT_LISTENER_FACTORY_BEAN_NAME<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span>   <span class="token keyword">return</span> beanDefs<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>这里最主要的就是注册了解析我们配置类的后置处理器ConfigurationClassPostProcessor。这个后置处理器在后面refresh中会调用</p><p>现在我们回到AnnotationConfigApplicationContext中的构造方法中register方法一直跟进去到doRegisterBean方法</p><h3 id="doRegisterBean方法"><a href="#doRegisterBean方法" class="headerlink" title="doRegisterBean方法"></a>doRegisterBean方法</h3><pre class=" language-java"><code class="language-java"><span class="token operator">&lt;</span>T<span class="token operator">></span> <span class="token keyword">void</span> <span class="token function">doRegisterBean</span><span class="token punctuation">(</span>Class<span class="token operator">&lt;</span>T<span class="token operator">></span> annotatedClass<span class="token punctuation">,</span> <span class="token annotation punctuation">@Nullable</span> Supplier<span class="token operator">&lt;</span>T<span class="token operator">></span> instanceSupplier<span class="token punctuation">,</span> <span class="token annotation punctuation">@Nullable</span> String name<span class="token punctuation">,</span>            <span class="token annotation punctuation">@Nullable</span> Class<span class="token operator">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">Annotation</span><span class="token operator">></span><span class="token punctuation">[</span><span class="token punctuation">]</span> qualifiers<span class="token punctuation">,</span> BeanDefinitionCustomizer<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> definitionCustomizers<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 存储@Configuration注解注释的类</span>    AnnotatedGenericBeanDefinition abd <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AnnotatedGenericBeanDefinition</span><span class="token punctuation">(</span>annotatedClass<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 判断是否需要跳过注解，spring中有一个@Condition注解，当不满足条件，这个bean就不会被解析</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>conditionEvaluator<span class="token punctuation">.</span><span class="token function">shouldSkip</span><span class="token punctuation">(</span>abd<span class="token punctuation">.</span><span class="token function">getMetadata</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    abd<span class="token punctuation">.</span><span class="token function">setInstanceSupplier</span><span class="token punctuation">(</span>instanceSupplier<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 解析bean的作用域，如果没有设置的话，默认为单例</span>    ScopeMetadata scopeMetadata <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>scopeMetadataResolver<span class="token punctuation">.</span><span class="token function">resolveScopeMetadata</span><span class="token punctuation">(</span>abd<span class="token punctuation">)</span><span class="token punctuation">;</span>    abd<span class="token punctuation">.</span><span class="token function">setScope</span><span class="token punctuation">(</span>scopeMetadata<span class="token punctuation">.</span><span class="token function">getScopeName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 获得beanName</span>    String beanName <span class="token operator">=</span> <span class="token punctuation">(</span>name <span class="token operator">!=</span> null <span class="token operator">?</span> name <span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>beanNameGenerator<span class="token punctuation">.</span><span class="token function">generateBeanName</span><span class="token punctuation">(</span>abd<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>registry<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 解析通用注解，填充到AnnotatedGenericBeanDefinition，解析的注解为Lazy，Primary，DependsOn，Role，Description</span>    AnnotationConfigUtils<span class="token punctuation">.</span><span class="token function">processCommonDefinitionAnnotations</span><span class="token punctuation">(</span>abd<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>qualifiers <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>Class<span class="token operator">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">Annotation</span><span class="token operator">></span> qualifier <span class="token operator">:</span> qualifiers<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>Primary<span class="token punctuation">.</span><span class="token keyword">class</span> <span class="token operator">==</span> qualifier<span class="token punctuation">)</span> <span class="token punctuation">{</span>                abd<span class="token punctuation">.</span><span class="token function">setPrimary</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>Lazy<span class="token punctuation">.</span><span class="token keyword">class</span> <span class="token operator">==</span> qualifier<span class="token punctuation">)</span> <span class="token punctuation">{</span>                abd<span class="token punctuation">.</span><span class="token function">setLazyInit</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">else</span> <span class="token punctuation">{</span>                abd<span class="token punctuation">.</span><span class="token function">addQualifier</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">AutowireCandidateQualifier</span><span class="token punctuation">(</span>qualifier<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>BeanDefinitionCustomizer customizer <span class="token operator">:</span> definitionCustomizers<span class="token punctuation">)</span> <span class="token punctuation">{</span>        customizer<span class="token punctuation">.</span><span class="token function">customize</span><span class="token punctuation">(</span>abd<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    BeanDefinitionHolder definitionHolder <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BeanDefinitionHolder</span><span class="token punctuation">(</span>abd<span class="token punctuation">,</span> beanName<span class="token punctuation">)</span><span class="token punctuation">;</span>    definitionHolder <span class="token operator">=</span> AnnotationConfigUtils<span class="token punctuation">.</span><span class="token function">applyScopedProxyMode</span><span class="token punctuation">(</span>scopeMetadata<span class="token punctuation">,</span> definitionHolder<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>registry<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 注册，最终会调用DefaultListableBeanFactory中的registerBeanDefinition方法去注册，</span>    <span class="token comment" spellcheck="true">// DefaultListableBeanFactory维护着一系列信息，比如beanDefinitionNames，beanDefinitionMap</span>    <span class="token comment" spellcheck="true">// beanDefinitionNames是一个List&lt;String>,用来保存beanName</span>    <span class="token comment" spellcheck="true">// beanDefinitionMap是一个Map,用来保存beanName和beanDefinition</span>    BeanDefinitionReaderUtils<span class="token punctuation">.</span><span class="token function">registerBeanDefinition</span><span class="token punctuation">(</span>definitionHolder<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>registry<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h3 id="refresh方法"><a href="#refresh方法" class="headerlink" title="refresh方法"></a>refresh方法</h3><p>Spring中最最最重要的方法，不管用什么容器最终都会到这个方法。</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">refresh</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> BeansException<span class="token punctuation">,</span> IllegalStateException <span class="token punctuation">{</span>   <span class="token keyword">synchronized</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>startupShutdownMonitor<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// 准备刷新上下文环境</span>      <span class="token function">prepareRefresh</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">// 获取告诉子类初始化Bean工厂  不同工厂不同实现</span>      ConfigurableListableBeanFactory beanFactory <span class="token operator">=</span> <span class="token function">obtainFreshBeanFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">// bean工厂进行填充属性</span>      <span class="token function">prepareBeanFactory</span><span class="token punctuation">(</span>beanFactory<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">try</span> <span class="token punctuation">{</span>         <span class="token comment" spellcheck="true">// 留个子类去实现该接口</span>         <span class="token function">postProcessBeanFactory</span><span class="token punctuation">(</span>beanFactory<span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment" spellcheck="true">// 调用我们的bean工厂的后置处理器. 1. 会在此将class扫描成beanDefinition  2.bean工厂的后置处理器调用</span>         <span class="token function">invokeBeanFactoryPostProcessors</span><span class="token punctuation">(</span>beanFactory<span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment" spellcheck="true">// 注册我们bean的后置处理器</span>         <span class="token function">registerBeanPostProcessors</span><span class="token punctuation">(</span>beanFactory<span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment" spellcheck="true">// 初始化国际化资源处理器.</span>         <span class="token function">initMessageSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment" spellcheck="true">// 创建事件多播器</span>         <span class="token function">initApplicationEventMulticaster</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment" spellcheck="true">// 这个方法同样也是留个子类实现的springboot也是从这个方法进行启动tomcat的.</span>         <span class="token function">onRefresh</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment" spellcheck="true">// 把我们的事件监听器注册到多播器上</span>         <span class="token function">registerListeners</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment" spellcheck="true">// 实例化我们剩余的单实例bean.</span>         <span class="token function">finishBeanFactoryInitialization</span><span class="token punctuation">(</span>beanFactory<span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment" spellcheck="true">// 最后容器刷新 发布刷新事件(Spring cloud也是从这里启动的)</span>         <span class="token function">finishRefresh</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>   <span class="token punctuation">}</span></code></pre><p>只是对于解析配置类生成BeanDefinition主要就是看2个方法，一个是<code>invokeBeanFactoryPostProcessors</code>，在这个方法中会调用我们上面在reader方法中注册的<code>ConfigurationClassPostProcessor</code>后置处理器，在这个后置处理器中会解析配置类加载成BeanDefinition。另一个方法就是<code>finishBeanFactoryInitialization</code>，这个方法中会实例化剩余的单例Bean,Bean的循环依赖就是这里解决的。</p><h3 id="invokeBeanFactoryPostProcessors方法"><a href="#invokeBeanFactoryPostProcessors方法" class="headerlink" title="invokeBeanFactoryPostProcessors方法"></a>invokeBeanFactoryPostProcessors方法</h3><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// beanFactory:存在bean工厂中的后置处理器，存储在BeanDefinitionMap中，是上面初始化的时候存储的那6个后置处理器加上配置类共7个BeanDefinition</span><span class="token comment" spellcheck="true">// beanFactoryPostProcessors:我们调用context的addBeanFactoryPostProcessor方法加入的后置处理器，这里是0</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">invokeBeanFactoryPostProcessors</span><span class="token punctuation">(</span>         ConfigurableListableBeanFactory beanFactory<span class="token punctuation">,</span> List<span class="token operator">&lt;</span>BeanFactoryPostProcessor<span class="token operator">></span> beanFactoryPostProcessors<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">//调用BeanDefinitionRegistryPostProcessor的后置处理器 Begin</span>      <span class="token comment" spellcheck="true">// 定义已处理的后置处理器</span>      Set<span class="token operator">&lt;</span>String<span class="token operator">></span> processedBeans <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashSet</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">//判断我们的beanFactory实现了BeanDefinitionRegistry(实现了该结构就有注册和获取Bean定义的能力）</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>beanFactory <span class="token keyword">instanceof</span> <span class="token class-name">BeanDefinitionRegistry</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token comment" spellcheck="true">//强行把我们的bean工厂转为BeanDefinitionRegistry，因为待会需要注册Bean定义</span>         BeanDefinitionRegistry registry <span class="token operator">=</span> <span class="token punctuation">(</span>BeanDefinitionRegistry<span class="token punctuation">)</span> beanFactory<span class="token punctuation">;</span>         <span class="token comment" spellcheck="true">//保存BeanFactoryPostProcessor类型的后置   BeanFactoryPostProcessor 提供修改</span>         List<span class="token operator">&lt;</span>BeanFactoryPostProcessor<span class="token operator">></span> regularPostProcessors <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment" spellcheck="true">//保存BeanDefinitionRegistryPostProcessor类型的后置处理器 BeanDefinitionRegistryPostProcessor 提供注册</span>         List<span class="token operator">&lt;</span>BeanDefinitionRegistryPostProcessor<span class="token operator">></span> registryProcessors <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment" spellcheck="true">//循环我们传递进来的beanFactoryPostProcessors</span>         <span class="token keyword">for</span> <span class="token punctuation">(</span>BeanFactoryPostProcessor postProcessor <span class="token operator">:</span> beanFactoryPostProcessors<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//判断我们的后置处理器是不是BeanDefinitionRegistryPostProcessor</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>postProcessor <span class="token keyword">instanceof</span> <span class="token class-name">BeanDefinitionRegistryPostProcessor</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>               <span class="token comment" spellcheck="true">//进行强制转化</span>               BeanDefinitionRegistryPostProcessor registryProcessor <span class="token operator">=</span>                     <span class="token punctuation">(</span>BeanDefinitionRegistryPostProcessor<span class="token punctuation">)</span> postProcessor<span class="token punctuation">;</span>               <span class="token comment" spellcheck="true">//调用他作为BeanDefinitionRegistryPostProcessor的处理器的后置方法</span>               registryProcessor<span class="token punctuation">.</span><span class="token function">postProcessBeanDefinitionRegistry</span><span class="token punctuation">(</span>registry<span class="token punctuation">)</span><span class="token punctuation">;</span>               <span class="token comment" spellcheck="true">//添加到我们用于保存的BeanDefinitionRegistryPostProcessor的集合中</span>               registryProcessors<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>registryProcessor<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">else</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">//若没有实现BeanDefinitionRegistryPostProcessor 接口，那么他就是BeanFactoryPostProcessor</span>               <span class="token comment" spellcheck="true">//把当前的后置处理器加入到regularPostProcessors中</span>               regularPostProcessors<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>postProcessor<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>         <span class="token punctuation">}</span>         <span class="token comment" spellcheck="true">//定义一个集合用户保存当前准备创建的BeanDefinitionRegistryPostProcessor</span>         List<span class="token operator">&lt;</span>BeanDefinitionRegistryPostProcessor<span class="token operator">></span> currentRegistryProcessors <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment" spellcheck="true">//去容器中拿BeanDefinitionRegistryPostProcessor的bean的处理器名称，这里只拿到了ConfigurationClassPostProcessor</span>         String<span class="token punctuation">[</span><span class="token punctuation">]</span> postProcessorNames <span class="token operator">=</span>               beanFactory<span class="token punctuation">.</span><span class="token function">getBeanNamesForType</span><span class="token punctuation">(</span>BeanDefinitionRegistryPostProcessor<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment" spellcheck="true">//循环筛选出来的匹配BeanDefinitionRegistryPostProcessor的类型名称</span>         <span class="token keyword">for</span> <span class="token punctuation">(</span>String ppName <span class="token operator">:</span> postProcessorNames<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//判断是否实现了PriorityOrdered接口的</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>beanFactory<span class="token punctuation">.</span><span class="token function">isTypeMatch</span><span class="token punctuation">(</span>ppName<span class="token punctuation">,</span> PriorityOrdered<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>               <span class="token comment" spellcheck="true">//显示的调用getBean()的方式获取出该对象然后加入到currentRegistryProcessors集合中去</span>               currentRegistryProcessors<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>beanFactory<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span>ppName<span class="token punctuation">,</span> BeanDefinitionRegistryPostProcessor<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>               <span class="token comment" spellcheck="true">//同时也加入到processedBeans集合中去</span>               processedBeans<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>ppName<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>         <span class="token punctuation">}</span>         <span class="token comment" spellcheck="true">//对currentRegistryProcessors集合中BeanDefinitionRegistryPostProcessor进行排序</span>         <span class="token function">sortPostProcessors</span><span class="token punctuation">(</span>currentRegistryProcessors<span class="token punctuation">,</span> beanFactory<span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment" spellcheck="true">//把当前的加入到总的里面去</span>         registryProcessors<span class="token punctuation">.</span><span class="token function">addAll</span><span class="token punctuation">(</span>currentRegistryProcessors<span class="token punctuation">)</span><span class="token punctuation">;</span>                  <span class="token comment" spellcheck="true">//在这里典型的BeanDefinitionRegistryPostProcessor就是ConfigurationClassPostProcessor</span>         <span class="token comment" spellcheck="true">//用于进行bean定义的加载 比如我们的包扫描，@import等</span>         <span class="token function">invokeBeanDefinitionRegistryPostProcessors</span><span class="token punctuation">(</span>currentRegistryProcessors<span class="token punctuation">,</span> registry<span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment" spellcheck="true">//调用完之后，马上clear掉</span>         currentRegistryProcessors<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                   <span class="token comment" spellcheck="true">//去容器中获取BeanDefinitionRegistryPostProcessor的bean的处理器名称（内置的和上面注册的）</span>         postProcessorNames <span class="token operator">=</span> beanFactory<span class="token punctuation">.</span><span class="token function">getBeanNamesForType</span><span class="token punctuation">(</span>BeanDefinitionRegistryPostProcessor<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment" spellcheck="true">//循环上一步获取的BeanDefinitionRegistryPostProcessor的类型名称</span>         <span class="token keyword">for</span> <span class="token punctuation">(</span>String ppName <span class="token operator">:</span> postProcessorNames<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//表示没有被处理过,且实现了Ordered接口的</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>processedBeans<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span>ppName<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> beanFactory<span class="token punctuation">.</span><span class="token function">isTypeMatch</span><span class="token punctuation">(</span>ppName<span class="token punctuation">,</span> Ordered<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>               <span class="token comment" spellcheck="true">//显示的调用getBean()的方式获取出该对象然后加入到currentRegistryProcessors集合中去</span>               currentRegistryProcessors<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>beanFactory<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span>ppName<span class="token punctuation">,</span> BeanDefinitionRegistryPostProcessor<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>               <span class="token comment" spellcheck="true">//同时也加入到processedBeans集合中去</span>               processedBeans<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>ppName<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>         <span class="token punctuation">}</span>         <span class="token comment" spellcheck="true">//对currentRegistryProcessors集合中BeanDefinitionRegistryPostProcessor进行排序</span>         <span class="token function">sortPostProcessors</span><span class="token punctuation">(</span>currentRegistryProcessors<span class="token punctuation">,</span> beanFactory<span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment" spellcheck="true">//把他加入到用于保存到registryProcessors中</span>         registryProcessors<span class="token punctuation">.</span><span class="token function">addAll</span><span class="token punctuation">(</span>currentRegistryProcessors<span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment" spellcheck="true">//调用他的后置处理方法</span>         <span class="token function">invokeBeanDefinitionRegistryPostProcessors</span><span class="token punctuation">(</span>currentRegistryProcessors<span class="token punctuation">,</span> registry<span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment" spellcheck="true">//调用完之后，马上clea掉</span>         currentRegistryProcessors<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment" spellcheck="true">//调用没有实现任何优先级接口的BeanDefinitionRegistryPostProcessor</span>         <span class="token comment" spellcheck="true">//定义一个重复处理的开关变量 默认值为true</span>         <span class="token keyword">boolean</span> reiterate <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>         <span class="token comment" spellcheck="true">//第一次就可以进来</span>         <span class="token keyword">while</span> <span class="token punctuation">(</span>reiterate<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//进入循环马上把开关变量给改为false</span>            reiterate <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//去容器中获取BeanDefinitionRegistryPostProcessor的bean的处理器名称</span>            postProcessorNames <span class="token operator">=</span> beanFactory<span class="token punctuation">.</span><span class="token function">getBeanNamesForType</span><span class="token punctuation">(</span>BeanDefinitionRegistryPostProcessor<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//循环上一步获取的BeanDefinitionRegistryPostProcessor的类型名称</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span>String ppName <span class="token operator">:</span> postProcessorNames<span class="token punctuation">)</span> <span class="token punctuation">{</span>               <span class="token comment" spellcheck="true">//没有被处理过的</span>               <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>processedBeans<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span>ppName<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                  <span class="token comment" spellcheck="true">//显示的调用getBean()的方式获取出该对象然后加入到currentRegistryProcessors集合中去</span>                  currentRegistryProcessors<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>beanFactory<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span>ppName<span class="token punctuation">,</span> BeanDefinitionRegistryPostProcessor<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                  <span class="token comment" spellcheck="true">//同时也加入到processedBeans集合中去</span>                  processedBeans<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>ppName<span class="token punctuation">)</span><span class="token punctuation">;</span>                  <span class="token comment" spellcheck="true">//再次设置为true</span>                  reiterate <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>               <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">//对currentRegistryProcessors集合中BeanDefinitionRegistryPostProcessor进行排序</span>            <span class="token function">sortPostProcessors</span><span class="token punctuation">(</span>currentRegistryProcessors<span class="token punctuation">,</span> beanFactory<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//把他加入到用于保存到registryProcessors中</span>            registryProcessors<span class="token punctuation">.</span><span class="token function">addAll</span><span class="token punctuation">(</span>currentRegistryProcessors<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//调用他的后置处理方法</span>            <span class="token function">invokeBeanDefinitionRegistryPostProcessors</span><span class="token punctuation">(</span>currentRegistryProcessors<span class="token punctuation">,</span> registry<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//进行clear</span>            currentRegistryProcessors<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token punctuation">}</span>         <span class="token comment" spellcheck="true">//调用 BeanDefinitionRegistryPostProcessor.postProcessBeanFactory方法</span>         <span class="token function">invokeBeanFactoryPostProcessors</span><span class="token punctuation">(</span>registryProcessors<span class="token punctuation">,</span> beanFactory<span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment" spellcheck="true">//调用BeanFactoryPostProcessor 自设的（没有）</span>         <span class="token function">invokeBeanFactoryPostProcessors</span><span class="token punctuation">(</span>regularPostProcessors<span class="token punctuation">,</span> beanFactory<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token keyword">else</span> <span class="token punctuation">{</span>          <span class="token comment" spellcheck="true">//若当前的beanFactory没有实现了BeanDefinitionRegistry 说明没有注册Bean定义的能力</span>          <span class="token comment" spellcheck="true">// 那么就直接调用BeanDefinitionRegistryPostProcessor.postProcessBeanFactory方法</span>         <span class="token function">invokeBeanFactoryPostProcessors</span><span class="token punctuation">(</span>beanFactoryPostProcessors<span class="token punctuation">,</span> beanFactory<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token comment" spellcheck="true">//获取容器中所有的 BeanFactoryPostProcessor</span>      String<span class="token punctuation">[</span><span class="token punctuation">]</span> postProcessorNames <span class="token operator">=</span>            beanFactory<span class="token punctuation">.</span><span class="token function">getBeanNamesForType</span><span class="token punctuation">(</span>BeanFactoryPostProcessor<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">//保存BeanFactoryPostProcessor类型实现了priorityOrdered</span>      List<span class="token operator">&lt;</span>BeanFactoryPostProcessor<span class="token operator">></span> priorityOrderedPostProcessors <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">//保存BeanFactoryPostProcessor类型实现了Ordered接口的</span>      List<span class="token operator">&lt;</span>String<span class="token operator">></span> orderedPostProcessorNames <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">//保存BeanFactoryPostProcessor没有实现任何优先级接口的</span>      List<span class="token operator">&lt;</span>String<span class="token operator">></span> nonOrderedPostProcessorNames <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">for</span> <span class="token punctuation">(</span>String ppName <span class="token operator">:</span> postProcessorNames<span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token comment" spellcheck="true">//processedBeans包含的话，表示在上面处理BeanDefinitionRegistryPostProcessor的时候处理过了</span>         <span class="token keyword">if</span> <span class="token punctuation">(</span>processedBeans<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span>ppName<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// skip - already processed in first phase above</span>         <span class="token punctuation">}</span>         <span class="token comment" spellcheck="true">//判断是否实现了PriorityOrdered 优先级最高</span>         <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>beanFactory<span class="token punctuation">.</span><span class="token function">isTypeMatch</span><span class="token punctuation">(</span>ppName<span class="token punctuation">,</span> PriorityOrdered<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            priorityOrderedPostProcessors<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>beanFactory<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span>ppName<span class="token punctuation">,</span> BeanFactoryPostProcessor<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token punctuation">}</span>         <span class="token comment" spellcheck="true">//判断是否实现了Ordered  优先级 其次</span>         <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>beanFactory<span class="token punctuation">.</span><span class="token function">isTypeMatch</span><span class="token punctuation">(</span>ppName<span class="token punctuation">,</span> Ordered<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            orderedPostProcessorNames<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>ppName<span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token punctuation">}</span>         <span class="token comment" spellcheck="true">//没有实现任何的优先级接口的  最后调用</span>         <span class="token keyword">else</span> <span class="token punctuation">{</span>            nonOrderedPostProcessorNames<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>ppName<span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token punctuation">}</span>      <span class="token punctuation">}</span>      <span class="token comment" spellcheck="true">//  排序</span>      <span class="token function">sortPostProcessors</span><span class="token punctuation">(</span>priorityOrderedPostProcessors<span class="token punctuation">,</span> beanFactory<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">// 先调用BeanFactoryPostProcessor实现了 PriorityOrdered接口的</span>      <span class="token function">invokeBeanFactoryPostProcessors</span><span class="token punctuation">(</span>priorityOrderedPostProcessors<span class="token punctuation">,</span> beanFactory<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">//再调用BeanFactoryPostProcessor实现了 Ordered.</span>      List<span class="token operator">&lt;</span>BeanFactoryPostProcessor<span class="token operator">></span> orderedPostProcessors <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">for</span> <span class="token punctuation">(</span>String postProcessorName <span class="token operator">:</span> orderedPostProcessorNames<span class="token punctuation">)</span> <span class="token punctuation">{</span>         orderedPostProcessors<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>beanFactory<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span>postProcessorName<span class="token punctuation">,</span> BeanFactoryPostProcessor<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token function">sortPostProcessors</span><span class="token punctuation">(</span>orderedPostProcessors<span class="token punctuation">,</span> beanFactory<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">invokeBeanFactoryPostProcessors</span><span class="token punctuation">(</span>orderedPostProcessors<span class="token punctuation">,</span> beanFactory<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">//调用没有实现任何方法接口的</span>      List<span class="token operator">&lt;</span>BeanFactoryPostProcessor<span class="token operator">></span> nonOrderedPostProcessors <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">for</span> <span class="token punctuation">(</span>String postProcessorName <span class="token operator">:</span> nonOrderedPostProcessorNames<span class="token punctuation">)</span> <span class="token punctuation">{</span>         nonOrderedPostProcessors<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>beanFactory<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span>postProcessorName<span class="token punctuation">,</span> BeanFactoryPostProcessor<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token function">invokeBeanFactoryPostProcessors</span><span class="token punctuation">(</span>nonOrderedPostProcessors<span class="token punctuation">,</span> beanFactory<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">// Clear cached merged bean definitions since the post-processors might have</span>      <span class="token comment" spellcheck="true">// modified the original metadata, e.g. replacing placeholders in values...</span>      beanFactory<span class="token punctuation">.</span><span class="token function">clearMetadataCache</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span></code></pre><p>这里调用比较复杂，大概梳理一下，这里主要是对2种接后置处理器进行调用</p><ol><li>BeanDefinitionRegistryPostProcessor：带注册得Bean工厂后置处理器，调用方法是<code>postProcessBeanDefinitionRegistry</code></li><li>BeanFactoryPostProcessor：不带注册的Bean工厂后置处理器调用方法是<code>postProcessBeanFactory</code></li></ol><p>这里在看优先级</p><p>首先BeanDefinitionRegistryPostProcessor先进行调用然后BeanFactoryPostProcessor调用</p><p>在BeanDefinitionRegistryPostProcessor内部会先调用实现了PriorityOrdered接口的，然后调用实现了Ordered接口的，最后调用都没有实现的，然后调用BeanFactoryPostProcessor处理器的<code>postProcessBeanFactory</code>也是按照PriorityOrdered-&gt;Ordered-&gt;null的规则调用。</p><p>现在我们看到invokeBeanDefinitionRegistryPostProcessors方法ConfigurationClassPostProcessor.postProcessBeanDefinitionRegistry方法，这里就是根据配置类配置的包路径扫描class解析成Bean定义到BeanDefinitionMap中去</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">processConfigBeanDefinitions</span><span class="token punctuation">(</span>BeanDefinitionRegistry registry<span class="token punctuation">)</span> <span class="token punctuation">{</span>        List<span class="token operator">&lt;</span>BeanDefinitionHolder<span class="token operator">></span> configCandidates <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//获取IOC 容器中目前所有bean定义的名称</span>        String<span class="token punctuation">[</span><span class="token punctuation">]</span> candidateNames <span class="token operator">=</span> registry<span class="token punctuation">.</span><span class="token function">getBeanDefinitionNames</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//循环我们的上一步获取的所有的bean定义信息</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>String beanName <span class="token operator">:</span> candidateNames<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//通过bean的名称来获取我们的bean定义对象</span>            BeanDefinition beanDef <span class="token operator">=</span> registry<span class="token punctuation">.</span><span class="token function">getBeanDefinition</span><span class="token punctuation">(</span>beanName<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//判断是否有没有解析过</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>ConfigurationClassUtils<span class="token punctuation">.</span><span class="token function">isFullConfigurationClass</span><span class="token punctuation">(</span>beanDef<span class="token punctuation">)</span> <span class="token operator">||</span>                    ConfigurationClassUtils<span class="token punctuation">.</span><span class="token function">isLiteConfigurationClass</span><span class="token punctuation">(</span>beanDef<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>logger<span class="token punctuation">.</span><span class="token function">isDebugEnabled</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    logger<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">"Bean definition has already been processed as a configuration class: "</span> <span class="token operator">+</span> beanDef<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">//进行正在的解析判断是不是完全的配置类 还是一个非正式的配置类</span>            <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>ConfigurationClassUtils<span class="token punctuation">.</span><span class="token function">checkConfigurationClassCandidate</span><span class="token punctuation">(</span>beanDef<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>metadataReaderFactory<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">//满足添加 就加入到候选的配置类集合中</span>                configCandidates<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">BeanDefinitionHolder</span><span class="token punctuation">(</span>beanDef<span class="token punctuation">,</span> beanName<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 若没有找到配置类 直接返回</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>configCandidates<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//对我们的配置类进行Order排序</span>        configCandidates<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token punctuation">(</span>bd1<span class="token punctuation">,</span> bd2<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>            <span class="token keyword">int</span> i1 <span class="token operator">=</span> ConfigurationClassUtils<span class="token punctuation">.</span><span class="token function">getOrder</span><span class="token punctuation">(</span>bd1<span class="token punctuation">.</span><span class="token function">getBeanDefinition</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> i2 <span class="token operator">=</span> ConfigurationClassUtils<span class="token punctuation">.</span><span class="token function">getOrder</span><span class="token punctuation">(</span>bd2<span class="token punctuation">.</span><span class="token function">getBeanDefinition</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> Integer<span class="token punctuation">.</span><span class="token function">compare</span><span class="token punctuation">(</span>i1<span class="token punctuation">,</span> i2<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 创建我们通过@CompentScan导入进来的bean name的生成器</span>        <span class="token comment" spellcheck="true">// 创建我们通过@Import导入进来的bean的名称</span>        SingletonBeanRegistry sbr <span class="token operator">=</span> null<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>registry <span class="token keyword">instanceof</span> <span class="token class-name">SingletonBeanRegistry</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            sbr <span class="token operator">=</span> <span class="token punctuation">(</span>SingletonBeanRegistry<span class="token punctuation">)</span> registry<span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span>localBeanNameGeneratorSet<span class="token punctuation">)</span> <span class="token punctuation">{</span>                BeanNameGenerator generator <span class="token operator">=</span> <span class="token punctuation">(</span>BeanNameGenerator<span class="token punctuation">)</span> sbr<span class="token punctuation">.</span><span class="token function">getSingleton</span><span class="token punctuation">(</span>CONFIGURATION_BEAN_NAME_GENERATOR<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>generator <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token comment" spellcheck="true">//设置@CompentScan导入进来的bean的名称生成器(默认类首字母小写）也可以自己定义，一般不会</span>                    <span class="token keyword">this</span><span class="token punctuation">.</span>componentScanBeanNameGenerator <span class="token operator">=</span> generator<span class="token punctuation">;</span>                    <span class="token comment" spellcheck="true">//设置@Import导入进来的bean的名称生成器(默认类首字母小写）也可以自己定义，一般不会</span>                    <span class="token keyword">this</span><span class="token punctuation">.</span>importBeanNameGenerator <span class="token operator">=</span> generator<span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>environment <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>environment <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StandardEnvironment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//创建一个配置类解析器对象</span>        ConfigurationClassParser parser <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ConfigurationClassParser</span><span class="token punctuation">(</span>                <span class="token keyword">this</span><span class="token punctuation">.</span>metadataReaderFactory<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>problemReporter<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>environment<span class="token punctuation">,</span>                <span class="token keyword">this</span><span class="token punctuation">.</span>resourceLoader<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>componentScanBeanNameGenerator<span class="token punctuation">,</span> registry<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//用于保存我们的配置类BeanDefinitionHolder放入上面筛选出来的配置类</span>        Set<span class="token operator">&lt;</span>BeanDefinitionHolder<span class="token operator">></span> candidates <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedHashSet</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span>configCandidates<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//用于保存我们的已经解析的配置类，长度默认为解析出来默认的配置类的集合长度</span>        Set<span class="token operator">&lt;</span>ConfigurationClass<span class="token operator">></span> alreadyParsed <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashSet</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span>configCandidates<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//do while 会进行第一次解析</span>        <span class="token keyword">do</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//真正的解析我们的配置类</span>            parser<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>candidates<span class="token punctuation">)</span><span class="token punctuation">;</span>            parser<span class="token punctuation">.</span><span class="token function">validate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//解析出来的配置类</span>            Set<span class="token operator">&lt;</span>ConfigurationClass<span class="token operator">></span> configClasses <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedHashSet</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span>parser<span class="token punctuation">.</span><span class="token function">getConfigurationClasses</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            configClasses<span class="token punctuation">.</span><span class="token function">removeAll</span><span class="token punctuation">(</span>alreadyParsed<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// Read the model and create bean definitions based on its content</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>reader <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">this</span><span class="token punctuation">.</span>reader <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ConfigurationClassBeanDefinitionReader</span><span class="token punctuation">(</span>                        registry<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>sourceExtractor<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>resourceLoader<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>environment<span class="token punctuation">,</span>                        <span class="token keyword">this</span><span class="token punctuation">.</span>importBeanNameGenerator<span class="token punctuation">,</span> parser<span class="token punctuation">.</span><span class="token function">getImportRegistry</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">// 此处才把@Bean的方法和@Import 注册到BeanDefinitionMap中</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>reader<span class="token punctuation">.</span><span class="token function">loadBeanDefinitions</span><span class="token punctuation">(</span>configClasses<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//加入到已经解析的集合中</span>            alreadyParsed<span class="token punctuation">.</span><span class="token function">addAll</span><span class="token punctuation">(</span>configClasses<span class="token punctuation">)</span><span class="token punctuation">;</span>            candidates<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//判断我们ioc容器中的是不是>候选原始的bean定义的个数</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>registry<span class="token punctuation">.</span><span class="token function">getBeanDefinitionCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">></span> candidateNames<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">//获取所有的bean定义</span>                String<span class="token punctuation">[</span><span class="token punctuation">]</span> newCandidateNames <span class="token operator">=</span> registry<span class="token punctuation">.</span><span class="token function">getBeanDefinitionNames</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">//原始的老的候选的bean定义</span>                Set<span class="token operator">&lt;</span>String<span class="token operator">></span> oldCandidateNames <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashSet</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span>Arrays<span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span>candidateNames<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                Set<span class="token operator">&lt;</span>String<span class="token operator">></span> alreadyParsedClasses <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashSet</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">//赋值已经解析的</span>                <span class="token keyword">for</span> <span class="token punctuation">(</span>ConfigurationClass configurationClass <span class="token operator">:</span> alreadyParsed<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    alreadyParsedClasses<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>configurationClass<span class="token punctuation">.</span><span class="token function">getMetadata</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getClassName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token keyword">for</span> <span class="token punctuation">(</span>String candidateName <span class="token operator">:</span> newCandidateNames<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token comment" spellcheck="true">//表示当前循环的还没有被解析过</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>oldCandidateNames<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span>candidateName<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                        BeanDefinition bd <span class="token operator">=</span> registry<span class="token punctuation">.</span><span class="token function">getBeanDefinition</span><span class="token punctuation">(</span>candidateName<span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token comment" spellcheck="true">//判断有没有被解析过</span>                        <span class="token keyword">if</span> <span class="token punctuation">(</span>ConfigurationClassUtils<span class="token punctuation">.</span><span class="token function">checkConfigurationClassCandidate</span><span class="token punctuation">(</span>bd<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>metadataReaderFactory<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span>                                <span class="token operator">!</span>alreadyParsedClasses<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span>bd<span class="token punctuation">.</span><span class="token function">getBeanClassName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                            candidates<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">BeanDefinitionHolder</span><span class="token punctuation">(</span>bd<span class="token punctuation">,</span> candidateName<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token punctuation">}</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span>                candidateNames <span class="token operator">=</span> newCandidateNames<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//存在没有解析过的 需要循环解析</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>candidates<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// Register the ImportRegistry as a bean in order to support ImportAware @Configuration classes</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>sbr <span class="token operator">!=</span> null <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>sbr<span class="token punctuation">.</span><span class="token function">containsSingleton</span><span class="token punctuation">(</span>IMPORT_REGISTRY_BEAN_NAME<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            sbr<span class="token punctuation">.</span><span class="token function">registerSingleton</span><span class="token punctuation">(</span>IMPORT_REGISTRY_BEAN_NAME<span class="token punctuation">,</span> parser<span class="token punctuation">.</span><span class="token function">getImportRegistry</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>metadataReaderFactory <span class="token keyword">instanceof</span> <span class="token class-name">CachingMetadataReaderFactory</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// Clear cache in externally provided MetadataReaderFactory; this is a no-op</span>            <span class="token comment" spellcheck="true">// for a shared cache since it'll be cleared by the ApplicationContext.</span>            <span class="token punctuation">(</span><span class="token punctuation">(</span>CachingMetadataReaderFactory<span class="token punctuation">)</span> <span class="token keyword">this</span><span class="token punctuation">.</span>metadataReaderFactory<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">clearCache</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span></code></pre><p>ConfigurationClassUtils.checkConfigurationClassCandidate方法</p><p>这个方法将配置类分成了2种一种是@Configuration,这种类型标注了属性configurationClass为full其他的标注为lite</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">boolean</span> <span class="token function">checkConfigurationClassCandidate</span><span class="token punctuation">(</span>BeanDefinition beanDef<span class="token punctuation">,</span> MetadataReaderFactory metadataReaderFactory<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// .......</span>        <span class="token comment" spellcheck="true">// 判断是不是真正的配置类 就是判断当前的bean的class上有没有标注了@Configuration注解</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isFullConfigurationCandidate</span><span class="token punctuation">(</span>metadata<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 设置了标记</span>            beanDef<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span>CONFIGURATION_CLASS_ATTRIBUTE<span class="token punctuation">,</span> CONFIGURATION_CLASS_FULL<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 这里判断该配置类是一个非正式的配置类(Component ComponentScan Import ImportResource)</span>        <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isLiteConfigurationCandidate</span><span class="token punctuation">(</span>metadata<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            beanDef<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span>CONFIGURATION_CLASS_ATTRIBUTE<span class="token punctuation">,</span> CONFIGURATION_CLASS_LITE<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 解析配置类上是否标注了@Order注解</span>        Integer order <span class="token operator">=</span> <span class="token function">getOrder</span><span class="token punctuation">(</span>metadata<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>order <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            beanDef<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span>ORDER_ATTRIBUTE<span class="token punctuation">,</span> order<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><p>核心方法parser.parse(candidates)解析配置类的地方</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">parse</span><span class="token punctuation">(</span>Set<span class="token operator">&lt;</span>BeanDefinitionHolder<span class="token operator">></span> configCandidates<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 用于来保存延时的ImportSelectors，SpringBoot自动装配的的类AutoConfigurationImportSelector</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>deferredImportSelectors <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 循环配置类</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>BeanDefinitionHolder holder <span class="token operator">:</span> configCandidates<span class="token punctuation">)</span> <span class="token punctuation">{</span>            BeanDefinition bd <span class="token operator">=</span> holder<span class="token punctuation">.</span><span class="token function">getBeanDefinition</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">//真正的解析我们的bean定义:通过注解元数据解析</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>bd <span class="token keyword">instanceof</span> <span class="token class-name">AnnotatedBeanDefinition</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token function">parse</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span>AnnotatedBeanDefinition<span class="token punctuation">)</span> bd<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getMetadata</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> holder<span class="token punctuation">.</span><span class="token function">getBeanName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>bd <span class="token keyword">instanceof</span> <span class="token class-name">AbstractBeanDefinition</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>AbstractBeanDefinition<span class="token punctuation">)</span> bd<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">hasBeanClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token function">parse</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span>AbstractBeanDefinition<span class="token punctuation">)</span> bd<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getBeanClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> holder<span class="token punctuation">.</span><span class="token function">getBeanName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token keyword">else</span> <span class="token punctuation">{</span>                    <span class="token function">parse</span><span class="token punctuation">(</span>bd<span class="token punctuation">.</span><span class="token function">getBeanClassName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> holder<span class="token punctuation">.</span><span class="token function">getBeanName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">BeanDefinitionStoreException</span> ex<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">throw</span> ex<span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Throwable</span> ex<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">BeanDefinitionStoreException</span><span class="token punctuation">(</span>                        <span class="token string">"Failed to parse configuration class ["</span> <span class="token operator">+</span> bd<span class="token punctuation">.</span><span class="token function">getBeanClassName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"]"</span><span class="token punctuation">,</span> ex<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//处理我们延时的DeferredImportSelectors springboot就是通过这步进行记载spring.factories文件中的自定装配的对象</span>        <span class="token function">processDeferredImportSelectors</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><p>parse-&gt;processConfigurationClass-&gt;doProcessConfigurationClass-&gt;this.componentScanParser.parse</p><p>这里就是解析ComponentScans，把该扫描的包路径集合封装好调用doScan进行扫描</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> Set<span class="token operator">&lt;</span>BeanDefinitionHolder<span class="token operator">></span> <span class="token function">parse</span><span class="token punctuation">(</span>AnnotationAttributes componentScan<span class="token punctuation">,</span> <span class="token keyword">final</span> String declaringClass<span class="token punctuation">)</span> <span class="token punctuation">{</span>   <span class="token comment" spellcheck="true">// 看到这里就想到了初始化构造方法中的scan了，从这也看出来spring内部的扫描并没有使用初始化new出来的扫描器</span>   ClassPathBeanDefinitionScanner scanner <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ClassPathBeanDefinitionScanner</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>registry<span class="token punctuation">,</span>         componentScan<span class="token punctuation">.</span><span class="token function">getBoolean</span><span class="token punctuation">(</span><span class="token string">"useDefaultFilters"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>environment<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>resourceLoader<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//为我们的扫描器设置beanName的生成器对象</span>   Class<span class="token operator">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">BeanNameGenerator</span><span class="token operator">></span> generatorClass <span class="token operator">=</span> componentScan<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token string">"nameGenerator"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token keyword">boolean</span> useInheritedGenerator <span class="token operator">=</span> <span class="token punctuation">(</span>BeanNameGenerator<span class="token punctuation">.</span><span class="token keyword">class</span> <span class="token operator">==</span> generatorClass<span class="token punctuation">)</span><span class="token punctuation">;</span>   scanner<span class="token punctuation">.</span><span class="token function">setBeanNameGenerator</span><span class="token punctuation">(</span>useInheritedGenerator <span class="token operator">?</span> <span class="token keyword">this</span><span class="token punctuation">.</span>beanNameGenerator <span class="token operator">:</span>         BeanUtils<span class="token punctuation">.</span><span class="token function">instantiateClass</span><span class="token punctuation">(</span>generatorClass<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//s解析@Scope的ProxyMode属性,该属性可以将Bean创建问jdk代理或cglib代理</span>   ScopedProxyMode scopedProxyMode <span class="token operator">=</span> componentScan<span class="token punctuation">.</span><span class="token function">getEnum</span><span class="token punctuation">(</span><span class="token string">"scopedProxy"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token keyword">if</span> <span class="token punctuation">(</span>scopedProxyMode <span class="token operator">!=</span> ScopedProxyMode<span class="token punctuation">.</span>DEFAULT<span class="token punctuation">)</span> <span class="token punctuation">{</span>      scanner<span class="token punctuation">.</span><span class="token function">setScopedProxyMode</span><span class="token punctuation">(</span>scopedProxyMode<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span>   <span class="token keyword">else</span> <span class="token punctuation">{</span>      Class<span class="token operator">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">ScopeMetadataResolver</span><span class="token operator">></span> resolverClass <span class="token operator">=</span> componentScan<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token string">"scopeResolver"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      scanner<span class="token punctuation">.</span><span class="token function">setScopeMetadataResolver</span><span class="token punctuation">(</span>BeanUtils<span class="token punctuation">.</span><span class="token function">instantiateClass</span><span class="token punctuation">(</span>resolverClass<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span>   scanner<span class="token punctuation">.</span><span class="token function">setResourcePattern</span><span class="token punctuation">(</span>componentScan<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span><span class="token string">"resourcePattern"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//设置CompentScan对象的includeFilters包含的属性</span>   <span class="token keyword">for</span> <span class="token punctuation">(</span>AnnotationAttributes filter <span class="token operator">:</span> componentScan<span class="token punctuation">.</span><span class="token function">getAnnotationArray</span><span class="token punctuation">(</span><span class="token string">"includeFilters"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">for</span> <span class="token punctuation">(</span>TypeFilter typeFilter <span class="token operator">:</span> <span class="token function">typeFiltersFor</span><span class="token punctuation">(</span>filter<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>         scanner<span class="token punctuation">.</span><span class="token function">addIncludeFilter</span><span class="token punctuation">(</span>typeFilter<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>   <span class="token punctuation">}</span>   <span class="token comment" spellcheck="true">//设置CompentScan对象的excludeFilters包含的属性</span>   <span class="token keyword">for</span> <span class="token punctuation">(</span>AnnotationAttributes filter <span class="token operator">:</span> componentScan<span class="token punctuation">.</span><span class="token function">getAnnotationArray</span><span class="token punctuation">(</span><span class="token string">"excludeFilters"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">for</span> <span class="token punctuation">(</span>TypeFilter typeFilter <span class="token operator">:</span> <span class="token function">typeFiltersFor</span><span class="token punctuation">(</span>filter<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>         scanner<span class="token punctuation">.</span><span class="token function">addExcludeFilter</span><span class="token punctuation">(</span>typeFilter<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>   <span class="token punctuation">}</span>   <span class="token comment" spellcheck="true">//是否懒加载，此懒加载为componentScan延迟加载所有类</span>   <span class="token keyword">boolean</span> lazyInit <span class="token operator">=</span> componentScan<span class="token punctuation">.</span><span class="token function">getBoolean</span><span class="token punctuation">(</span><span class="token string">"lazyInit"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token keyword">if</span> <span class="token punctuation">(</span>lazyInit<span class="token punctuation">)</span> <span class="token punctuation">{</span>      scanner<span class="token punctuation">.</span><span class="token function">getBeanDefinitionDefaults</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setLazyInit</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span>   <span class="token comment" spellcheck="true">//包路径</span>   Set<span class="token operator">&lt;</span>String<span class="token operator">></span> basePackages <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedHashSet</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   String<span class="token punctuation">[</span><span class="token punctuation">]</span> basePackagesArray <span class="token operator">=</span> componentScan<span class="token punctuation">.</span><span class="token function">getStringArray</span><span class="token punctuation">(</span><span class="token string">"basePackages"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token keyword">for</span> <span class="token punctuation">(</span>String pkg <span class="token operator">:</span> basePackagesArray<span class="token punctuation">)</span> <span class="token punctuation">{</span>      String<span class="token punctuation">[</span><span class="token punctuation">]</span> tokenized <span class="token operator">=</span> StringUtils<span class="token punctuation">.</span><span class="token function">tokenizeToStringArray</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>environment<span class="token punctuation">.</span><span class="token function">resolvePlaceholders</span><span class="token punctuation">(</span>pkg<span class="token punctuation">)</span><span class="token punctuation">,</span>            ConfigurableApplicationContext<span class="token punctuation">.</span>CONFIG_LOCATION_DELIMITERS<span class="token punctuation">)</span><span class="token punctuation">;</span>      Collections<span class="token punctuation">.</span><span class="token function">addAll</span><span class="token punctuation">(</span>basePackages<span class="token punctuation">,</span> tokenized<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span>   <span class="token keyword">for</span> <span class="token punctuation">(</span>Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> clazz <span class="token operator">:</span> componentScan<span class="token punctuation">.</span><span class="token function">getClassArray</span><span class="token punctuation">(</span><span class="token string">"basePackageClasses"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      basePackages<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>ClassUtils<span class="token punctuation">.</span><span class="token function">getPackageName</span><span class="token punctuation">(</span>clazz<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span>   <span class="token keyword">if</span> <span class="token punctuation">(</span>basePackages<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      basePackages<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>ClassUtils<span class="token punctuation">.</span><span class="token function">getPackageName</span><span class="token punctuation">(</span>declaringClass<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span>   scanner<span class="token punctuation">.</span><span class="token function">addExcludeFilter</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">AbstractTypeHierarchyTraversingFilter</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token annotation punctuation">@Override</span>      <span class="token keyword">protected</span> <span class="token keyword">boolean</span> <span class="token function">matchClassName</span><span class="token punctuation">(</span>String className<span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token keyword">return</span> declaringClass<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>className<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>   <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//真正的进行扫描解析</span>   <span class="token keyword">return</span> scanner<span class="token punctuation">.</span><span class="token function">doScan</span><span class="token punctuation">(</span>StringUtils<span class="token punctuation">.</span><span class="token function">toStringArray</span><span class="token punctuation">(</span>basePackages<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token keyword">protected</span> Set<span class="token operator">&lt;</span>BeanDefinitionHolder<span class="token operator">></span> <span class="token function">doScan</span><span class="token punctuation">(</span>String<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> basePackages<span class="token punctuation">)</span> <span class="token punctuation">{</span>   Assert<span class="token punctuation">.</span><span class="token function">notEmpty</span><span class="token punctuation">(</span>basePackages<span class="token punctuation">,</span> <span class="token string">"At least one base package must be specified"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//创建bean定义的holder对象用于保存扫描后生成的bean定义对象</span>   Set<span class="token operator">&lt;</span>BeanDefinitionHolder<span class="token operator">></span> beanDefinitions <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedHashSet</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//循环我们的包路径集合</span>   <span class="token keyword">for</span> <span class="token punctuation">(</span>String basePackage <span class="token operator">:</span> basePackages<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">//找到候选的Components</span>      Set<span class="token operator">&lt;</span>BeanDefinition<span class="token operator">></span> candidates <span class="token operator">=</span> <span class="token function">findCandidateComponents</span><span class="token punctuation">(</span>basePackage<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">for</span> <span class="token punctuation">(</span>BeanDefinition candidate <span class="token operator">:</span> candidates<span class="token punctuation">)</span> <span class="token punctuation">{</span>         ScopeMetadata scopeMetadata <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>scopeMetadataResolver<span class="token punctuation">.</span><span class="token function">resolveScopeMetadata</span><span class="token punctuation">(</span>candidate<span class="token punctuation">)</span><span class="token punctuation">;</span>         candidate<span class="token punctuation">.</span><span class="token function">setScope</span><span class="token punctuation">(</span>scopeMetadata<span class="token punctuation">.</span><span class="token function">getScopeName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment" spellcheck="true">//设置我们的beanName</span>         String beanName <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>beanNameGenerator<span class="token punctuation">.</span><span class="token function">generateBeanName</span><span class="token punctuation">(</span>candidate<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>registry<span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment" spellcheck="true">//这是默认配置 autowire-candidate</span>         <span class="token keyword">if</span> <span class="token punctuation">(</span>candidate <span class="token keyword">instanceof</span> <span class="token class-name">AbstractBeanDefinition</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">postProcessBeanDefinition</span><span class="token punctuation">(</span><span class="token punctuation">(</span>AbstractBeanDefinition<span class="token punctuation">)</span> candidate<span class="token punctuation">,</span> beanName<span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token punctuation">}</span>         <span class="token comment" spellcheck="true">//获取@Lazy @DependsOn等注解的数据设置到BeanDefinition中</span>         <span class="token keyword">if</span> <span class="token punctuation">(</span>candidate <span class="token keyword">instanceof</span> <span class="token class-name">AnnotatedBeanDefinition</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            AnnotationConfigUtils<span class="token punctuation">.</span><span class="token function">processCommonDefinitionAnnotations</span><span class="token punctuation">(</span><span class="token punctuation">(</span>AnnotatedBeanDefinition<span class="token punctuation">)</span> candidate<span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token punctuation">}</span>         <span class="token comment" spellcheck="true">//把我们解析出来的组件bean定义注册到我们的IOC容器中（容器中没有才注册）</span>         <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">checkCandidate</span><span class="token punctuation">(</span>beanName<span class="token punctuation">,</span> candidate<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            BeanDefinitionHolder definitionHolder <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BeanDefinitionHolder</span><span class="token punctuation">(</span>candidate<span class="token punctuation">,</span> beanName<span class="token punctuation">)</span><span class="token punctuation">;</span>            definitionHolder <span class="token operator">=</span>                  AnnotationConfigUtils<span class="token punctuation">.</span><span class="token function">applyScopedProxyMode</span><span class="token punctuation">(</span>scopeMetadata<span class="token punctuation">,</span> definitionHolder<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>registry<span class="token punctuation">)</span><span class="token punctuation">;</span>            beanDefinitions<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>definitionHolder<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">registerBeanDefinition</span><span class="token punctuation">(</span>definitionHolder<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>registry<span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token punctuation">}</span>      <span class="token punctuation">}</span>   <span class="token punctuation">}</span>   <span class="token keyword">return</span> beanDefinitions<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>findCandidateComponents-&gt;scanCandidateComponents方法</p><pre class=" language-java"><code class="language-java"><span class="token keyword">private</span> Set<span class="token operator">&lt;</span>BeanDefinition<span class="token operator">></span> <span class="token function">scanCandidateComponents</span><span class="token punctuation">(</span>String basePackage<span class="token punctuation">)</span> <span class="token punctuation">{</span>   Set<span class="token operator">&lt;</span>BeanDefinition<span class="token operator">></span> candidates <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedHashSet</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token keyword">try</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">//把我们的包路径转为资源路径 xx/xx/xx</span>      String packageSearchPath <span class="token operator">=</span> ResourcePatternResolver<span class="token punctuation">.</span>CLASSPATH_ALL_URL_PREFIX <span class="token operator">+</span>            <span class="token function">resolveBasePackage</span><span class="token punctuation">(</span>basePackage<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'/'</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>resourcePattern<span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">//扫描指定包路径下面的所有.class文件</span>      Resource<span class="token punctuation">[</span><span class="token punctuation">]</span> resources <span class="token operator">=</span> <span class="token function">getResourcePatternResolver</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getResources</span><span class="token punctuation">(</span>packageSearchPath<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">boolean</span> traceEnabled <span class="token operator">=</span> logger<span class="token punctuation">.</span><span class="token function">isTraceEnabled</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">boolean</span> debugEnabled <span class="token operator">=</span> logger<span class="token punctuation">.</span><span class="token function">isDebugEnabled</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">//需要我们的resources集合</span>      <span class="token keyword">for</span> <span class="token punctuation">(</span>Resource resource <span class="token operator">:</span> resources<span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token keyword">if</span> <span class="token punctuation">(</span>traceEnabled<span class="token punctuation">)</span> <span class="token punctuation">{</span>            logger<span class="token punctuation">.</span><span class="token function">trace</span><span class="token punctuation">(</span><span class="token string">"Scanning "</span> <span class="token operator">+</span> resource<span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token punctuation">}</span>         <span class="token comment" spellcheck="true">//判断当的是不是可读的</span>         <span class="token keyword">if</span> <span class="token punctuation">(</span>resource<span class="token punctuation">.</span><span class="token function">isReadable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>               MetadataReader metadataReader <span class="token operator">=</span> <span class="token function">getMetadataReaderFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getMetadataReader</span><span class="token punctuation">(</span>resource<span class="token punctuation">)</span><span class="token punctuation">;</span>               <span class="token comment" spellcheck="true">//是不是候选的组件这里表示可以扫描Component,ManagedBean,Named</span>               <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isCandidateComponent</span><span class="token punctuation">(</span>metadataReader<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                  <span class="token comment" spellcheck="true">//包装成为一个ScannedGenericBeanDefinition</span>                  ScannedGenericBeanDefinition sbd <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ScannedGenericBeanDefinition</span><span class="token punctuation">(</span>metadataReader<span class="token punctuation">)</span><span class="token punctuation">;</span>                  <span class="token comment" spellcheck="true">//并且设置class资源</span>                  sbd<span class="token punctuation">.</span><span class="token function">setResource</span><span class="token punctuation">(</span>resource<span class="token punctuation">)</span><span class="token punctuation">;</span>                  sbd<span class="token punctuation">.</span><span class="token function">setSource</span><span class="token punctuation">(</span>resource<span class="token punctuation">)</span><span class="token punctuation">;</span>                  <span class="token comment" spellcheck="true">// 这里表示可以扫描的类</span>                  <span class="token comment" spellcheck="true">// 顶级类、嵌套类、静态内部类</span>                 <span class="token comment" spellcheck="true">// 非接口、非抽象类</span>                  <span class="token comment" spellcheck="true">// 抽象类并且必须方法中有@LookUp</span>                  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isCandidateComponent</span><span class="token punctuation">(</span>sbd<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                     <span class="token keyword">if</span> <span class="token punctuation">(</span>debugEnabled<span class="token punctuation">)</span> <span class="token punctuation">{</span>                        logger<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">"Identified candidate component class: "</span> <span class="token operator">+</span> resource<span class="token punctuation">)</span><span class="token punctuation">;</span>                     <span class="token punctuation">}</span>                     <span class="token comment" spellcheck="true">//加入到集合中</span>                     candidates<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>sbd<span class="token punctuation">)</span><span class="token punctuation">;</span>                  <span class="token punctuation">}</span>                  <span class="token keyword">else</span> <span class="token punctuation">{</span>                     <span class="token keyword">if</span> <span class="token punctuation">(</span>debugEnabled<span class="token punctuation">)</span> <span class="token punctuation">{</span>                        logger<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">"Ignored because not a concrete top-level class: "</span> <span class="token operator">+</span> resource<span class="token punctuation">)</span><span class="token punctuation">;</span>                     <span class="token punctuation">}</span>                  <span class="token punctuation">}</span>               <span class="token punctuation">}</span>               <span class="token keyword">else</span> <span class="token punctuation">{</span>                  <span class="token keyword">if</span> <span class="token punctuation">(</span>traceEnabled<span class="token punctuation">)</span> <span class="token punctuation">{</span>                     logger<span class="token punctuation">.</span><span class="token function">trace</span><span class="token punctuation">(</span><span class="token string">"Ignored because not matching any filter: "</span> <span class="token operator">+</span> resource<span class="token punctuation">)</span><span class="token punctuation">;</span>                  <span class="token punctuation">}</span>               <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Throwable</span> ex<span class="token punctuation">)</span> <span class="token punctuation">{</span>               <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">BeanDefinitionStoreException</span><span class="token punctuation">(</span>                     <span class="token string">"Failed to read candidate component class: "</span> <span class="token operator">+</span> resource<span class="token punctuation">,</span> ex<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>         <span class="token punctuation">}</span>         <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>traceEnabled<span class="token punctuation">)</span> <span class="token punctuation">{</span>               logger<span class="token punctuation">.</span><span class="token function">trace</span><span class="token punctuation">(</span><span class="token string">"Ignored because not readable: "</span> <span class="token operator">+</span> resource<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>         <span class="token punctuation">}</span>      <span class="token punctuation">}</span>   <span class="token punctuation">}</span>   <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> ex<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">BeanDefinitionStoreException</span><span class="token punctuation">(</span><span class="token string">"I/O failure during classpath scanning"</span><span class="token punctuation">,</span> ex<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span>   <span class="token comment" spellcheck="true">//返回</span>   <span class="token keyword">return</span> candidates<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h3 id="finishBeanFactoryInitialization方法"><a href="#finishBeanFactoryInitialization方法" class="headerlink" title="finishBeanFactoryInitialization方法"></a>finishBeanFactoryInitialization方法</h3><p>这一部分在后续Spring如何解决循环依赖中</p><h2 id="流程图"><a href="#流程图" class="headerlink" title="流程图"></a>流程图</h2><p><img src="https://blog-dm.oss-cn-shanghai.aliyuncs.com/articleimage/SpringIOC%E6%B5%81%E7%A8%8B.png" alt="SpringIOC流程"></p><h2 id="Q-amp-A"><a href="#Q-amp-A" class="headerlink" title="Q&amp;A"></a>Q&amp;A</h2><p>SpringIOC的加载过程？</p><p>首先Spring会初始化reader，register和scan三个类，reader主要负责读取配置类和加载一些spring内部需要用的后置处理器共6个，在这些后置处理器中包含了解析配置类的后置处理器，register主要负责注册bean定义,当然也包括bean后置处理器的注册。scan主要负责扫描包路径下的类，当然初始化中的scan并不是spring内部使用的扫描器。然后注册我们的配置类。现在我们配置类，解析配置类的bean工厂后置处理器都有了，spring就可以利用后置处理器解析配置类。当然这里解析之前会getBean去拿到完整的bean，解析完配置类获取到包扫描路径，扫描配置类中的包扫描路径，将扫描到的类解析成bean定义注册进Spring中。最后我们对BeanDefinitionMap中的类进行遍历getBean生成完整的bean。</p><h2 id="扩展点"><a href="#扩展点" class="headerlink" title="扩展点"></a>扩展点</h2><p>这一块内容共提供了2个扩展点，这2个扩展点是针对Bean定义进行修改和注册</p><ol><li>BeanDefinitionRegistryPostProcessor：带注册得Bean工厂后置处理器，可以注册Bean定义</li><li>BeanFactoryPostProcessor：Bean工厂后置处理器，可以修改Bean定义</li></ol><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 源码 </tag>
            
            <tag> Spring </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ShardingProxy安装及使用</title>
      <link href="/2021/02/15/shardingproxy-an-zhuang-ji-shi-yong/"/>
      <url>/2021/02/15/shardingproxy-an-zhuang-ji-shi-yong/</url>
      
        <content type="html"><![CDATA[<h2 id="ShardingProxy搭建"><a href="#ShardingProxy搭建" class="headerlink" title="ShardingProxy搭建"></a>ShardingProxy搭建</h2><h3 id="ShardingProxy下载"><a href="#ShardingProxy下载" class="headerlink" title="ShardingProxy下载"></a>ShardingProxy下载</h3><p>这里使用的是ShardingProxy4.1.0</p><p>ShardingProxy下载有多种方式，可以选择官网也可以选择镜像</p><ul><li>官网地址：<a href="https://shardingsphere.apache.org/document/legacy/4.x/document/cn/downloads/">https://shardingsphere.apache.org/document/legacy/4.x/document/cn/downloads/</a></li></ul><pre class=" language-shell"><code class="language-shell">## 下载wget https://mirror-hk.koddos.net/apache/shardingsphere/4.1.0/apache-shardingsphere-4.1.0-sharding-proxy-bin.tar.gz## 解压tar -zxvf apache-shardingsphere-4.1.0-sharding-proxy-bin.tar.gz -C /## 软链接ln -s /apache-shardingsphere-4.1.0-sharding-proxy-bin/ /shardingproxy</code></pre><p>将mysql jdbc驱动包放入/shardingproxy/lib下。ShardingProxy默认只附带了PostgreSQL的JDBC驱动包，而不包含MySQL的JDBC驱动包。</p><p>然后，我们需要到conf目录下，修改server.yaml，将配置文件中的authentication和props两段配置的注释打开。</p><p>修改conf目录下的config-sharding.yaml，这个配置文件就是shardingProxy关于分库分表部分的配置。整个配置和之前我们使用ShardingJDBC时的配置大致相同</p><p>启动即可，这时就可以像连接其他MySQL服务一样连接ShardingProxy</p><h2 id="ShardingProxy的服务治理"><a href="#ShardingProxy的服务治理" class="headerlink" title="ShardingProxy的服务治理"></a>ShardingProxy的服务治理</h2><p>server.yaml配置文件中的orchestration属性表示将ShardingProxy注册到Zookeeper当中，然后启动其他的shardingProxy就可以直接去zookepper里面去拿配置了，而不用再去手动写配置。</p><h2 id="Shardingproxy的影子库"><a href="#Shardingproxy的影子库" class="headerlink" title="Shardingproxy的影子库"></a>Shardingproxy的影子库</h2><p>影子库就是对当前库进行一个备份，有数据写入主库中，影子库也会被写入，通常会用做线上压测，保证线上数据不被影响。影子库通常会配置成跟生产环境在同一个库，这样就可以在生产环境上直接进行压力测试。</p><p>conf/config-shadow.yaml中shadowRule有配置影子库的示例</p><h2 id="ShardingProxy的SPI扩展"><a href="#ShardingProxy的SPI扩展" class="headerlink" title="ShardingProxy的SPI扩展"></a>ShardingProxy的SPI扩展</h2><p>在ShardingJdbc可以对各种SPI机制进行扩展，那么ShardingProxy是否也可以呢。其实也是可以的</p><p>我们只需将之前写的SPI扩展打成jar包，放到shardingprocy下的lib目录下，就会自动加载到Proxy中，实现SPI扩展点的扩展。</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 安装手册 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 安装 </tag>
            
            <tag> MySQL </tag>
            
            <tag> ShardingSphere </tag>
            
            <tag> 分库分表 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ShardingSphere数据分片内核原理及源码流程</title>
      <link href="/2021/02/13/shardingsphere-nei-he-yuan-li/"/>
      <url>/2021/02/13/shardingsphere-nei-he-yuan-li/</url>
      
        <content type="html"><![CDATA[<p>ShardingSphere数据分片这一部分内核主要是解析引擎、路由引擎、改写引擎、执行引擎、归并引擎五部分。这里主要是对这五部分进行剖析。</p><p>在数据分片这块Sharding-JDBC和Sharding-Proxy内核原理这一块是一致的。</p><p>官方文档有详细：<a href="https://shardingsphere.apache.org/document/legacy/4.x/document/cn/features/">https://shardingsphere.apache.org/document/legacy/4.x/document/cn/features/</a></p><p><img src="https://blog-dm.oss-cn-shanghai.aliyuncs.com/articleimage/20210207103208.png"></p><h2 id="解析引擎"><a href="#解析引擎" class="headerlink" title="解析引擎"></a>解析引擎</h2><p>解析过程分为词法解析和语法解析。 词法解析器用于将SQL拆解为不可再分的原子符号，称为Token。并根据不同数据库方言所提供的字典，将其归类为关键字，表达式，字面量和操作符。 再使用语法解析器将SQL转换为抽象语法树(简称AST， Abstract Syntax Tree)。</p><p>例如对下面一条SQL语句：</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">SELECT</span> id<span class="token punctuation">,</span> name <span class="token keyword">FROM</span> t_user <span class="token keyword">WHERE</span> <span class="token keyword">status</span> <span class="token operator">=</span> <span class="token string">'ACTIVE'</span> <span class="token operator">AND</span> age <span class="token operator">></span> <span class="token number">18</span></code></pre><p>会被解析成下面这样一颗树：</p><p><img src="https://blog-dm.oss-cn-shanghai.aliyuncs.com/articleimage/20210207103634.png"></p><p>为了便于理解，抽象语法树中的关键字的 Token 用绿色表示，变量的 Token 用红色表示，灰色表示需要进⼀步拆分。通过对抽象语法树的遍历，可以标记出所有可能需要改写的位置。SQL的一次解析过程是不可逆的，所有token按SQL原本的顺序依次进行解析，性能很高。并且在解析过程中，需要考虑各种数据库SQL方言的异同，提供不同的解析模版。</p><p>其中，SQL解析是整个分库分表产品的核心，其性能和兼容性是最重要的衡量指标。ShardingSphere在1.4.x之前采用的是性能较快的Druid作为SQL解析器。1.5.x版本后，采用自研的SQL解析器，针对分库分表场景，采取对SQL半理解的方式，提高SQL解析的性能和兼容性。然后从3.0.x版本后，开始使用ANLTR作为SQL解析引擎。这是个开源的SQL解析引擎，ShardingSphere在使用ANLTR时，还增加了一些AST的缓存功能。针对ANLTR4的特性，官网建议尽量采用PreparedStatement的预编译方式来提高SQL执行的性能。</p><p>sql解析整体结构：</p><p><img src="https://blog-dm.oss-cn-shanghai.aliyuncs.com/articleimage/20210207103754.png"></p><h2 id="路由引擎"><a href="#路由引擎" class="headerlink" title="路由引擎"></a>路由引擎</h2><p>根据解析上下文匹配数据库和表的分片策略，生成路由路径。</p><p>ShardingSphere的分片策略:</p><ul><li>单片路由(分片键的操作符是等号)</li><li>多片路由(分片键的操作符是IN)</li><li>范围路由(分片键的操作符是Between)</li><li>不携带分片键的SQL则是广播路由。</li></ul><p>分片策略通常可以由数据库内置也可以由用户方配置。内置的分片策略大致可分为尾数取模、哈希、范围、标签、时间等。 由用户方配置的分片策略则更加灵活，可以根据使用方需求定制复合分片策略。</p><p>实际使用时，应尽量使用分片路由，明确路由策略。因为广播路由影响过大，不利于集群管理及扩展。</p><p><img src="https://blog-dm.oss-cn-shanghai.aliyuncs.com/articleimage/20210207103951.png"></p><ul><li>全库表路由：对于不带分片键的DQL、DML以及DDL语句，会遍历所有的库表，逐一执行。例如 SELECT * FROM t_order WHERE good_prority IN (1, 10)</li><li>全库路由：对数据库的操作都会遍历所有真实库。 例如 set autocommit=0</li><li>全实例路由：对于DCL语句，每个数据库实例只执行一次，例如 CREATE USER <a href="mailto:customer@127.0.0.1">customer@127.0.0.1</a> identified BY ‘123’</li><li>仅需要从任意库中获取数据即可。 例如 DESCRIBE t_order</li><li>阻断路由：屏蔽SQL对数据库的操作。例如  USE order_db。就不会在真实库中执行，因为针对虚拟表操作，不需要切换数据库</li></ul><h2 id="改写引擎"><a href="#改写引擎" class="headerlink" title="改写引擎"></a>改写引擎</h2><p>用户只需要面向逻辑库和逻辑表来写SQL，最终由ShardigSphere的改写引擎将SQL改写为在真实数据库中可以正确执行的语句。SQL改写分为正确性改写和优化改写。</p><p><img src="https://blog-dm.oss-cn-shanghai.aliyuncs.com/articleimage/20210207104449.png"></p><h2 id="执行引擎"><a href="#执行引擎" class="headerlink" title="执行引擎"></a>执行引擎</h2><p>ShardingSphere并不是简单的将改写过的SQL丢到数据库去执行，ShardingSphere需要平衡资源和控制执行效率。</p><p>试想一下调用方本身只是执行一条SQL但经过ShardingSqohere改写过后就会有10条8条的SQL要去数据库执行，这些SQL会占有大量的连接，想来也是不合适的。ShardingSphere就在执行引擎进行了控制。</p><p>ShardingSphere提供了一种解决思路。它提出了连接模式的概念，在连接模式中分为内存限制模式和连接限制模式。</p><h3 id="内存限制模式"><a href="#内存限制模式" class="headerlink" title="内存限制模式"></a>内存限制模式</h3><p>内存限制模式对所操作的数据库连接不做限制，假使你要对200个数据库进行操作，那就创建200个连接。通过多线程并发处理，使执行效率最大化。<strong>优先选择流式归并，防止出现内存溢出和频繁GC</strong>。</p><h3 id="连接限制模式"><a href="#连接限制模式" class="headerlink" title="连接限制模式"></a>连接限制模式</h3><p>ShardingSphere严格控制对一次操作所耗费的数据库连接数量。 如果实际执行的SQL需要对某数据库实例中的200张表做操作，那么只会创建唯一的数据库连接，并对其200张表串行处理。 如果一次操作中的分片散落在不同的数据库，仍然采用多线程处理对不同库的操作，但每个库的每次操作仍然只创建一个唯一的数据库连接。这样即可以防止对一次请求对数据库连接占用过多所带来的问题。该模式始终选择内存归并。</p><p>内存限制模式适用于OLAP操作，可以通过放宽对数据库连接的限制提升系统吞吐量，耗时较久； 连接限制模式适用于OLTP操作，耗时较短。</p><p><img src="https://blog-dm.oss-cn-shanghai.aliyuncs.com/articleimage/20210207110247.png"></p><p>在maxConnectionSizePerQuery允许的范围内，当一个连接需要执行的请求数量大于1时，意味着当前的数据库连接无法持有相应的数据结果集，则必须采用内存归并； 反之，当一个连接需要执行的请求数量等于1时，意味着当前的数据库连接可以持有相应的数据结果集，则可以采用流式归并。</p><p>每一次的连接模式的选择，是针对每一个物理数据库的。也就是说，在同一次查询中，如果路由至一个以上的数据库，每个数据库的连接模式不一定一样，它们可能是混合存在的形态。</p><h2 id="归并引擎"><a href="#归并引擎" class="headerlink" title="归并引擎"></a>归并引擎</h2><p>将从各个数据节点获取的多数据结果集，组合成为一个结果集并正确的返回至请求客户端，称为结果归并。</p><p>其中，流式归并是指以一条一条数据的方式进行归并，而内存归并是将所有结果集都查询到内存中，进行统一归并。</p><p><img src="https://blog-dm.oss-cn-shanghai.aliyuncs.com/articleimage/20210207110659.png"></p><h2 id="ShardingSphere的SPI扩展点"><a href="#ShardingSphere的SPI扩展点" class="headerlink" title="ShardingSphere的SPI扩展点"></a>ShardingSphere的SPI扩展点</h2><h3 id="SPI（Service-Provide-Interface）"><a href="#SPI（Service-Provide-Interface）" class="headerlink" title="SPI（Service Provide Interface）"></a>SPI（Service Provide Interface）</h3><p>SPI就是一种为接口寻找服务发现的机制。将装配的控制权放在程序外面，而不再代码里面指定。这样如果我们要扩展一个类的实现不需要改写代码，只需要在外部实现接口就可以实现可拔插的原则。</p><p>约定：在jar包的META-INF/services/目录里同时创建一个以服务接口命名的文件。该文件里就是实现该服务接口的具体实现类。</p><p>jdk提供服务实现查找的一个工具类：java.util.ServiceLoader</p><h3 id="ShardingSphere的SPI扩展点-1"><a href="#ShardingSphere的SPI扩展点-1" class="headerlink" title="ShardingSphere的SPI扩展点"></a>ShardingSphere的SPI扩展点</h3><p>ShardingSphere的开发思想是对源码中主体流程封闭，而对SPI开放</p><p>官网：<a href="https://shardingsphere.apache.org/document/current/cn/dev-manual/">https://shardingsphere.apache.org/document/current/cn/dev-manual/</a></p><p>官网开发者手册里面有介绍各种ShardingSphere SPI扩展机制</p><h2 id="源码流程图"><a href="#源码流程图" class="headerlink" title="源码流程图"></a>源码流程图</h2><p><img src="https://blog-dm.oss-cn-shanghai.aliyuncs.com/articleimage/ShardingSphere%E6%95%B0%E6%8D%AE%E5%88%86%E7%89%87%E6%BA%90%E7%A0%81%E6%B5%81%E7%A8%8B.png"></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL </tag>
            
            <tag> ShardingSphere </tag>
            
            <tag> 分库分表 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL单机及主从搭建</title>
      <link href="/2021/02/10/mysql-dan-ji-ji-zhu-cong-da-jian/"/>
      <url>/2021/02/10/mysql-dan-ji-ji-zhu-cong-da-jian/</url>
      
        <content type="html"><![CDATA[<h2 id="MySQL单机搭建"><a href="#MySQL单机搭建" class="headerlink" title="MySQL单机搭建"></a>MySQL单机搭建</h2><p>MySQL下载</p><p>这里使用的版本是mysql-8.0.20-linux-glibc2.12-x86_64</p><p>MySQL下载有多种方式，可以选择官网也可以选择镜像</p><ul><li>官网地址：<a href="https://downloads.mysql.com/archives/community/">https://downloads.mysql.com/archives/community/</a></li></ul><h3 id="安装之前卸载mariadb"><a href="#安装之前卸载mariadb" class="headerlink" title="安装之前卸载mariadb"></a>安装之前卸载mariadb</h3><pre class=" language-shell"><code class="language-shell">## 查看mariadb信息rpm -qa | grep mariadb## 卸载sudo rpm -e mariadb-libs-5.5.64-1.el7.x86_64 --nodeps## 再次查看rpm -qa | grep mariadb</code></pre><h3 id="下载安装包"><a href="#下载安装包" class="headerlink" title="下载安装包"></a>下载安装包</h3><pre class=" language-shell"><code class="language-shell">## 下载wget https://cdn.mysql.com/archives/mysql-8.0/mysql-8.0.20-linux-glibc2.12-x86_64.tar.xz## 解压tar -xvf mysql-8.0.20-linux-glibc2.12-x86_64.tar.xz  -C /## 软链接ln -s /mysql-8.0.20-linux-glibc2.12-x86_64/ /mysql</code></pre><h3 id="新建一个存放数据的文件夹data"><a href="#新建一个存放数据的文件夹data" class="headerlink" title="新建一个存放数据的文件夹data"></a>新建一个存放数据的文件夹data</h3><pre class=" language-shell"><code class="language-shell">cd /mysql## 创建data目录mkdir data</code></pre><h3 id="创建mysql用户组和-mysql-用户"><a href="#创建mysql用户组和-mysql-用户" class="headerlink" title="创建mysql用户组和 mysql 用户"></a>创建mysql用户组和 mysql 用户</h3><pre class=" language-sh"><code class="language-sh">groupadd mysqluseradd -r -g mysql mysqlchown -R mysql .</code></pre><h3 id="初始化数据库"><a href="#初始化数据库" class="headerlink" title="初始化数据库"></a>初始化数据库</h3><pre class=" language-shell"><code class="language-shell">mkdir mysql_install_dbchmod 777 ./mysql_install_dbbin/mysqld --initialize --user=mysql --basedir=/mysql --datadir=/mysql/data</code></pre><p>执行完后记住初始密码</p><p><img src="https://blog-dm.oss-cn-shanghai.aliyuncs.com/articleimage/20210208133730.png"></p><h3 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h3><pre class=" language-shell"><code class="language-shell">vim  /etc/my.cnf</code></pre><p>my.cnf</p><pre class=" language-shell"><code class="language-shell">[mysqld]   # 设置连接端口   port = 3306   # 设置mysql的安装目录   basedir = /mysql   # 设置mysql数据库的数据的存放目录   datadir = /mysql/data   socket = /mysql/mysql.sock   # 允许最大连接数   max_connections=200   # 允许连接失败的次数。   max_connect_errors=10   # 服务端使用的字符集默认为UTF8   character-set-server=utf8   # 创建新表时将使用的默认存储引擎   default-storage-engine=INNODB   sql_mode=NO_ENGINE_SUBSTITUTION,STRICT_TRANS_TABLES[client]   socket = /mysql/mysql.sock   default-character-set=utf8</code></pre><h3 id="建立系统服务"><a href="#建立系统服务" class="headerlink" title="建立系统服务"></a>建立系统服务</h3><pre class=" language-sh"><code class="language-sh">cp /mysql/support-files/mysql.server /etc/init.d/mysqldchmod +x /etc/init.d/mysqldchkconfig --add mysqld## 检查系统服务是否有mysqld服务chkconfig  --list mysqld</code></pre><h3 id="配置环境变量"><a href="#配置环境变量" class="headerlink" title="配置环境变量"></a>配置环境变量</h3><pre class=" language-shell"><code class="language-shell">vim /etc/profile</code></pre><p><img src="https://blog-dm.oss-cn-shanghai.aliyuncs.com/articleimage/20210208134732.png"></p><pre class=" language-shell"><code class="language-shell">## 刷新环境变量生效source /etc/profile</code></pre><h3 id="启动服务"><a href="#启动服务" class="headerlink" title="启动服务"></a>启动服务</h3><pre class=" language-shell"><code class="language-shell">service mysql start## 用之前的初始密码登录mysql -uroot -p</code></pre><p>连接mysql后一些命令</p><pre class=" language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">/* 修改密码 */</span><span class="token keyword">ALTER</span> <span class="token keyword">USER</span> <span class="token string">'root'</span>@'localhost<span class="token string">' IDENTIFIED BY '</span><span class="token number">123456</span>'<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/* 远程登录 */</span><span class="token keyword">use</span> mysql<span class="token punctuation">;</span><span class="token keyword">update</span> <span class="token keyword">user</span> <span class="token keyword">set</span> host<span class="token operator">=</span><span class="token string">'%'</span> <span class="token keyword">where</span> <span class="token keyword">user</span><span class="token operator">=</span><span class="token string">'root'</span> <span class="token keyword">limit</span> <span class="token number">1</span><span class="token punctuation">;</span>flush <span class="token keyword">privileges</span><span class="token punctuation">;</span></code></pre><h2 id="MySQL主从搭建"><a href="#MySQL主从搭建" class="headerlink" title="MySQL主从搭建"></a>MySQL主从搭建</h2><p>主从搭建主要是改写配置</p><p>首先先于上面的方式搭建2台Mysql服务</p><p>192.168.186.131–主机器</p><p>192.168.186.132–从机器</p><h3 id="修改主服务配置"><a href="#修改主服务配置" class="headerlink" title="修改主服务配置"></a>修改主服务配置</h3><p>/etc/my.cnf的[mysqld]下面增加以下配置</p><pre class=" language-sh"><code class="language-sh">#服务节点的唯一标识。需要给集群中的每个服务分配一个单独的ID。server-id=42#开启binlog#打开Binlog日志记录，并指定文件名log_bin=master-bin#Binlog日志文件log_bin-index=master-bin.index</code></pre><p>重新启动，连接客户端，给root用户分配一个replication slave的权限</p><pre class=" language-shell"><code class="language-shell">mysql -u root -pGRANT REPLICATION SLAVE ON *.* TO 'root'@'%';flush privileges;#查看主节点同步状态：show master status;</code></pre><p><img src="https://blog-dm.oss-cn-shanghai.aliyuncs.com/articleimage/20210208142049.png"></p><p>结果中的File和Position记录的是当前日志的binlog文件以及文件中的索引。<br>而后面的Binlog_Do_DB和Binlog_Ignore_DB这两个字段是表示需要记录binlog文件的库以及不需要记录binlog文件的库。my.cnf配置指定</p><h3 id="修改从服务配置"><a href="#修改从服务配置" class="headerlink" title="修改从服务配置"></a>修改从服务配置</h3><p>/etc/my.cnf的[mysqld]下面增加以下配置</p><pre class=" language-shell"><code class="language-shell">#主库和从库需要不一致server-id=43#打开MySQL中继日志relay-log-index=slave-relay-bin.indexrelay-log=slave-relay-bin#打开从服务二进制日志log-bin=mysql-bin#使得更新的数据写进二进制日志中log-slave-updates=1</code></pre><p>重新启动，连接客户端，执行分配主节点命令</p><p>MASTER_LOG_FILE和MASTER_LOG_POS必须与主服务中查到的保持一致</p><pre class=" language-sql"><code class="language-sql">CHANGE MASTER <span class="token keyword">TO</span>MASTER_HOST<span class="token operator">=</span><span class="token string">'192.168.186.131'</span><span class="token punctuation">,</span>MASTER_PORT<span class="token operator">=</span><span class="token number">3306</span><span class="token punctuation">,</span>MASTER_USER<span class="token operator">=</span><span class="token string">'root'</span><span class="token punctuation">,</span>MASTER_PASSWORD<span class="token operator">=</span><span class="token string">'123456'</span><span class="token punctuation">,</span>MASTER_LOG_FILE<span class="token operator">=</span><span class="token string">'master-bin.000001'</span><span class="token punctuation">,</span>MASTER_LOG_POS<span class="token operator">=</span><span class="token number">535</span><span class="token punctuation">,</span>GET_MASTER_PUBLIC_KEY<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span></code></pre><p>还是在客户端执行</p><pre class=" language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">#开启slave</span><span class="token keyword">start</span> slave<span class="token punctuation">;</span><span class="token comment" spellcheck="true">#查看主从同步状态</span><span class="token keyword">show</span> slave <span class="token keyword">status</span> \G<span class="token punctuation">;</span></code></pre><p><img src="https://blog-dm.oss-cn-shanghai.aliyuncs.com/articleimage/20210208143301.png"></p><h3 id="测试主从搭建是否成功"><a href="#测试主从搭建是否成功" class="headerlink" title="测试主从搭建是否成功"></a>测试主从搭建是否成功</h3><p>主节点创建一个数据库并插入一条数据</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">create</span> <span class="token keyword">database</span> testMasterSlave<span class="token punctuation">;</span><span class="token keyword">use</span> testMasterSlave<span class="token punctuation">;</span><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> <span class="token punctuation">`</span>t_user<span class="token punctuation">`</span> <span class="token punctuation">(</span>  <span class="token punctuation">`</span>id<span class="token punctuation">`</span> <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">AUTO_INCREMENT</span><span class="token punctuation">,</span>  <span class="token punctuation">`</span>name<span class="token punctuation">`</span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">)</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>  <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> <span class="token punctuation">(</span><span class="token punctuation">`</span>id<span class="token punctuation">`</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">ENGINE</span><span class="token operator">=</span><span class="token keyword">InnoDB</span> <span class="token keyword">DEFAULT</span> <span class="token keyword">CHARSET</span><span class="token operator">=</span>utf8<span class="token punctuation">;</span><span class="token keyword">insert</span> <span class="token keyword">into</span> t_user<span class="token punctuation">(</span>name<span class="token punctuation">)</span> <span class="token keyword">values</span><span class="token punctuation">(</span><span class="token string">'aa'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p><img src="https://blog-dm.oss-cn-shanghai.aliyuncs.com/articleimage/20210208143958.png"></p><p>成功创建！！！！</p><h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><p>这时候主从数据时全部同步，如果我们只想要一部分数据库同步该怎么配呢</p><p>修改主服务/etc/my.cnf</p><pre class=" language-shell"><code class="language-shell">#需要同步的二进制数据库名binlog-do-db=masterdemo#只保留7天的二进制日志，以防磁盘被日志占满(可选)expire-logs-days = 7#不备份的数据库binlog-ignore-db=information_schemabinlog-ignore-db=performation_schemabinlog-ignore-db=sys</code></pre><p>修改从服务/etc/my.cnf</p><pre class=" language-shell"><code class="language-shell">#如果salve库名称与master库名相同，使用本配置replicate-do-db = masterdemo#如果master库名[mastdemo]与salve库名[mastdemo01]不同，使用以下配置[需要做映射]replicate-rewrite-db = masterdemo -> masterdemo01#如果不是要全部同步[默认全部同步]，则指定需要同步的表replicate-wild-do-table=masterdemo01.t_dictreplicate-wild-do-table=masterdemo01.t_num</code></pre><p>配置完成了之后，在show master status指令中，就可以看到Binlog_Do_DB和Binlog_Ignore_DB两个参数的作用了</p><h3 id="注意点"><a href="#注意点" class="headerlink" title="注意点"></a>注意点</h3><p>数据只能从主服务同步到从服务，不能从从服务同步到主服务。为了保证数据一致，通常会需要保证数据只在主服务上写，而从服务只进行数据读取。mysql主从本身是无法提供读写分离的服务的，需要由业务自己来实现</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 安装手册 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 安装 </tag>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ShardingSphere基本概念及快速入门</title>
      <link href="/2021/02/08/shardingsphere-ji-ben-gai-nian-ji-kuai-su-ru-men/"/>
      <url>/2021/02/08/shardingsphere-ji-ben-gai-nian-ji-kuai-su-ru-men/</url>
      
        <content type="html"><![CDATA[<p>Apache ShardingSphere 是一套开源的分布式数据库解决方案组成的生态圈，它由 JDBC、Proxy 和 Sidecar（规划中）这 3 款既能够独立部署，又支持混合部署配合使用的产品组成。 它们均提供标准化的数据水平扩展、分布式事务和分布式治理等功能，可适用于如 Java 同构、异构语言、云原生等各种多样化的应用场景。</p><p>ShardingSphere 已于2020年4月16日成为 Apache 软件基金会的顶级项目。</p><p>ShardingSphere 主要有3个产品，ShardingJDBC、ShardingProxy和ShardingSidecar</p><ul><li>ShardingJDBC：客户端分库分表的产品，轻量级 Java 框架，以 jar 包形式提供服务</li><li>ShardingProxy：服务端分库分表的产品，封装了数据库⼆进制协议的服务端版本，⽤于完成对异构语⾔的⽀持。⽬前提供 MySQL 和 PostgreSQL 版本，它可以使⽤任何兼容 MySQL/PostgreSQL 协议的访问客⼾端</li><li>ShardingSidecar：规划中</li></ul><h2 id="ShardingJDBC和ShardingProxy对比"><a href="#ShardingJDBC和ShardingProxy对比" class="headerlink" title="ShardingJDBC和ShardingProxy对比"></a>ShardingJDBC和ShardingProxy对比</h2><p>ShardingJdbc就是一个jar包，在jar包里面提供了分库分表的逻辑（个别逻辑需自己实现），优点是灵活性大，支持数据库较多（只要是通过Jdbc连接的）。缺点是业务侵入大，需要自己实现分库分表逻辑。</p><p>ShardingProxy是一个独立的服务，业务无侵入，客户端只需自己连接ShardingProxy就可以进行分库分表，客户端感知不到其实已经分库分表。但这优点也代表着它不够灵活，只有固定的功能，不可以定制开发，支持的数据库也比较少。</p><table><thead><tr><th></th><th>Sharding-JDBC</th><th>Sharding-Proxy</th></tr></thead><tbody><tr><td>数据库</td><td>任意</td><td>MySQL/PostgreSQL</td></tr><tr><td>连接消耗数</td><td>高</td><td>低</td></tr><tr><td>异构语言</td><td>仅java</td><td>任意</td></tr><tr><td>性能</td><td>损耗低</td><td>损耗略高</td></tr><tr><td>无中心化</td><td>是</td><td>否</td></tr><tr><td>静态入口</td><td>无</td><td>有</td></tr></tbody></table><h2 id="ShardingJdbc基本概念"><a href="#ShardingJdbc基本概念" class="headerlink" title="ShardingJdbc基本概念"></a>ShardingJdbc基本概念</h2><p>ShardingJdbc主要职责是读写分离和数据分片，客户端可以自己定制规则通过Jdbc访问多数据源，不用关心数据的具体分布情况。</p><p>相关概念</p><table><thead><tr><th>概览</th><th>解释</th></tr></thead><tbody><tr><td>逻辑表</td><td>水平拆库的相同数据结构的表的总和</td></tr><tr><td>真实表</td><td>数据库存在的真实表</td></tr><tr><td>数据节点</td><td>有数据源和数据表组成</td></tr><tr><td>绑定表</td><td>分片规则一致的主表和子表</td></tr><tr><td>广播表</td><td>公共表，所有的分片都存在的表</td></tr><tr><td>分片键</td><td>用于分片的数据库字段，是将数据库(表)进行水平拆分的关键字段。SQL中若没有分片字段，将会执行全路由，性能会很差</td></tr><tr><td>分片算法</td><td>通过分片算法将数据进行分片，支持通过=、BETWEEN和IN分片。分片算法需要自行实现，可实现的灵活度非常高</td></tr><tr><td>分片策略</td><td>分片键+分片算法</td></tr></tbody></table><h2 id="ShardingJdbc快速实战"><a href="#ShardingJdbc快速实战" class="headerlink" title="ShardingJdbc快速实战"></a>ShardingJdbc快速实战</h2><p>引入依赖,其他springboot,mybatis依赖自行引入</p><pre class=" language-java"><code class="language-java"><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> sharding 分库分表<span class="token operator">--</span><span class="token operator">></span><span class="token operator">&lt;</span>dependency<span class="token operator">></span>    <span class="token operator">&lt;</span>groupId<span class="token operator">></span>org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>shardingsphere<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">></span>    <span class="token operator">&lt;</span>artifactId<span class="token operator">></span>sharding<span class="token operator">-</span>jdbc<span class="token operator">-</span>spring<span class="token operator">-</span>boot<span class="token operator">-</span>starter<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">></span>    <span class="token operator">&lt;</span>version<span class="token operator">></span><span class="token number">4.1</span><span class="token punctuation">.</span><span class="token number">1</span><span class="token operator">&lt;</span><span class="token operator">/</span>version<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>dependency<span class="token operator">></span></code></pre><p>SQL代码自行实现，springboot我们这里只要编写配置文件就可以了</p><pre class=" language-properties"><code class="language-properties"><span class="token comment" spellcheck="true">## 分库分表配置</span><span class="token comment" spellcheck="true"># 配置ds0 和ds1两个数据源</span><span class="token attr-name">spring.shardingsphere.datasource.names</span><span class="token punctuation">=</span><span class="token attr-value">ds0,ds1</span><span class="token comment" spellcheck="true"># ds0 数据源配置</span><span class="token attr-name">spring.shardingsphere.datasource.ds0.type</span><span class="token punctuation">=</span><span class="token attr-value">com.alibaba.druid.pool.DruidDataSource</span><span class="token attr-name">spring.shardingsphere.datasource.ds0.driver-class-name</span><span class="token punctuation">=</span><span class="token attr-value">com.mysql.cj.jdbc.Driver</span><span class="token attr-name">spring.shardingsphere.datasource.ds0.url</span><span class="token punctuation">=</span><span class="token attr-value">jdbc:mysql://xx.xx.xx.xx:3306/shop_ds_0?serverTimezone=UTC&amp;useSSL=false&amp;useUnicode=true&amp;characterEncoding=UTF-8</span><span class="token attr-name">spring.shardingsphere.datasource.ds0.username</span><span class="token punctuation">=</span><span class="token attr-value">xx</span><span class="token attr-name">spring.shardingsphere.datasource.ds0.password</span><span class="token punctuation">=</span><span class="token attr-value">xx</span><span class="token comment" spellcheck="true"># ds1 数据源配置</span><span class="token attr-name">spring.shardingsphere.datasource.ds1.type</span><span class="token punctuation">=</span><span class="token attr-value">com.alibaba.druid.pool.DruidDataSource</span><span class="token attr-name">spring.shardingsphere.datasource.ds1.driver-class-name</span><span class="token punctuation">=</span><span class="token attr-value">com.mysql.cj.jdbc.Driver</span><span class="token attr-name">spring.shardingsphere.datasource.ds1.url</span><span class="token punctuation">=</span><span class="token attr-value">jdbc:mysql://xx.xx.xx.xx:3306/shop_ds_1?serverTimezone=UTC&amp;useSSL=false&amp;useUnicode=true&amp;characterEncoding=UTF-8</span><span class="token attr-name">spring.shardingsphere.datasource.ds1.username</span><span class="token punctuation">=</span><span class="token attr-value">xx</span><span class="token attr-name">spring.shardingsphere.datasource.ds1.password</span><span class="token punctuation">=</span><span class="token attr-value">xx</span><span class="token comment" spellcheck="true"># 分库策略 根据id取模确定数据进哪个数据库</span><span class="token attr-name">spring.shardingsphere.sharding.default-database-strategy.inline.sharding-column</span><span class="token punctuation">=</span><span class="token attr-value">user_id</span><span class="token attr-name">spring.shardingsphere.sharding.default-database-strategy.inline.algorithm-expression</span><span class="token punctuation">=</span><span class="token attr-value">ds$->{user_id % 2}</span><span class="token comment" spellcheck="true"># 绑定表</span><span class="token attr-name">spring.shardingsphere.sharding.binding-tables[0]</span><span class="token punctuation">=</span><span class="token attr-value">t_order,t_order_item</span><span class="token comment" spellcheck="true"># 广播表</span><span class="token attr-name">spring.shardingsphere.sharding.broadcast-tables</span><span class="token punctuation">=</span><span class="token attr-value">t_dict</span><span class="token attr-name">spring.shardingsphere.sharding.tables.t_dict.key-generator.column</span><span class="token punctuation">=</span><span class="token attr-value">dict_id</span><span class="token attr-name">spring.shardingsphere.sharding.tables.t_dict.key-generator.type</span><span class="token punctuation">=</span><span class="token attr-value">SNOWFLAKE</span><span class="token comment" spellcheck="true"># 具体分表策略</span><span class="token comment" spellcheck="true"># 节点 ds0.t_order_0,ds0.t_order_1,ds1.t_order_0,ds1.t_order_1</span><span class="token attr-name">spring.shardingsphere.sharding.tables.t_order.actual-data-nodes</span><span class="token punctuation">=</span><span class="token attr-value">ds$->{0..1}.t_order_$->{0..1}</span><span class="token comment" spellcheck="true"># 分表字段id</span><span class="token attr-name">spring.shardingsphere.sharding.tables.t_order.table-strategy.inline.sharding-column</span><span class="token punctuation">=</span><span class="token attr-value">order_id</span><span class="token comment" spellcheck="true"># 分表策略 根据id取模,确定数据最终落在那个表中</span><span class="token attr-name">spring.shardingsphere.sharding.tables.t_order.table-strategy.inline.algorithm-expression</span> <span class="token punctuation">=</span> <span class="token attr-value">t_order_$->{order_id % 2}</span><span class="token comment" spellcheck="true"># t_order使用SNOWFLAKE算法生成主键</span><span class="token attr-name">spring.shardingsphere.sharding.tables.t_order.key-generator.column</span><span class="token punctuation">=</span><span class="token attr-value">order_id</span><span class="token attr-name">spring.shardingsphere.sharding.tables.t_order.key-generator.type</span><span class="token punctuation">=</span><span class="token attr-value">SNOWFLAKE</span><span class="token attr-name">spring.shardingsphere.sharding.tables.t_order.key-generator.props.worker.id</span><span class="token punctuation">=</span><span class="token attr-value">1</span><span class="token comment" spellcheck="true"># 节点 ds0.t_order_item_0,ds0.t_order_item_1,ds1.t_order_item_0,ds1.t_order_item_1</span><span class="token attr-name">spring.shardingsphere.sharding.tables.t_order_item.actual-data-nodes</span><span class="token punctuation">=</span><span class="token attr-value">ds$->{0..1}.t_order_item_$->{0..1}</span><span class="token comment" spellcheck="true"># 分表字段id</span><span class="token attr-name">spring.shardingsphere.sharding.tables.t_order_item.table-strategy.inline.sharding-column</span><span class="token punctuation">=</span><span class="token attr-value">order_id</span><span class="token comment" spellcheck="true"># 分表策略 根据id取模,确定数据最终落在那个表中</span><span class="token attr-name">spring.shardingsphere.sharding.tables.t_order_item.table-strategy.inline.algorithm-expression</span><span class="token punctuation">=</span><span class="token attr-value">t_order_item_$->{order_id % 2}</span><span class="token comment" spellcheck="true"># t_order_item使用SNOWFLAKE算法生成主键</span><span class="token attr-name">spring.shardingsphere.sharding.tables.t_order_item.key-generator.column</span><span class="token punctuation">=</span><span class="token attr-value">order_item_id</span><span class="token attr-name">spring.shardingsphere.sharding.tables.t_order_item.key-generator.type</span><span class="token punctuation">=</span><span class="token attr-value">SNOWFLAKE</span><span class="token attr-name">spring.shardingsphere.sharding.tables.t_order_item.key-generator.props.worker.id</span><span class="token punctuation">=</span><span class="token attr-value">123</span><span class="token comment" spellcheck="true">## 查看SQL</span><span class="token attr-name">spring.shardingsphere.props.sql.show</span> <span class="token punctuation">=</span> <span class="token attr-value">true</span></code></pre><p>这个配置文件的意思就是有4个order表分别是shop_ds_0.t_order_0、shop_ds_0.t_order_1、shop_ds_1.t_order_0、shop_ds_1.t_order_1</p><p>分片策略是user_id对2取模结果便是分的库；order_id对2取模结果是分的order表；主键生产策略是雪花算法</p><p>t_order_item表和上诉同理。</p><p>项目启动直接跑SQL便可分库分表了。</p><p><strong>注意查询可能会有笛卡尔积现象，需要手动编写策略实现指定查询的数据节点</strong></p><h2 id="ShardingJdbc分片算法"><a href="#ShardingJdbc分片算法" class="headerlink" title="ShardingJdbc分片算法"></a>ShardingJdbc分片算法</h2><p>在上面的测试代码用的是inline分片算法即提供一个分片键和一个分片表达式来制定分片算法，针对一些复杂的分片策略，inline就不够使用了。ShardingSphere提供了其他几种分片策略</p><h3 id="NoneShardingStrategy"><a href="#NoneShardingStrategy" class="headerlink" title="NoneShardingStrategy"></a>NoneShardingStrategy</h3><p>不分片</p><h3 id="InlineShardingStrategy"><a href="#InlineShardingStrategy" class="headerlink" title="InlineShardingStrategy"></a>InlineShardingStrategy</h3><p>分片表达式分片，范围查询不支持</p><p>配置参数：</p><ol><li>inline.shardingColumn分片键</li><li>inline.algorithmExpression：分片表达式</li></ol><pre class=" language-properties"><code class="language-properties"><span class="token comment" spellcheck="true">## =======分片表达式分片======</span><span class="token comment" spellcheck="true">## 分表字段id</span><span class="token attr-name">spring.shardingsphere.sharding.tables.t_order.table-strategy.inline.sharding-column</span><span class="token punctuation">=</span><span class="token attr-value">order_id</span><span class="token comment" spellcheck="true">## 分表策略 根据id取模,确定数据最终落在那个表中</span><span class="token attr-name">spring.shardingsphere.sharding.tables.t_order.table-strategy.inline.algorithm-expression</span> <span class="token punctuation">=</span> <span class="token attr-value">t_order_$->{order_id % 2}</span></code></pre><h3 id="StandardShardingStrategy"><a href="#StandardShardingStrategy" class="headerlink" title="StandardShardingStrategy"></a>StandardShardingStrategy</h3><p>支持单分片键的标准分片策略。</p><p>配置参数：</p><ol><li>standard.sharding-column：分片键</li><li>standard.precise-algorithm-class-name：精确分片算法类名，实现类继承PreciseShardingAlgorithm接口</li><li>standard.range-algorithm-class-name：范围分片算法类名，实现类继承RangeShardingAlgorithm接口</li></ol><pre class=" language-properties"><code class="language-properties"><span class="token comment" spellcheck="true">## =======单分片键分片=======</span><span class="token comment" spellcheck="true">## 分表字段id</span><span class="token attr-name">spring.shardingsphere.sharding.tables.t_order.table-strategy.standard.sharding-column</span><span class="token punctuation">=</span><span class="token attr-value">order_id</span><span class="token comment" spellcheck="true">## 精确分片算法类</span><span class="token attr-name">spring.shardingsphere.sharding.tables.t_order.table-strategy.standard.precise-algorithm-class-name</span><span class="token punctuation">=</span><span class="token attr-value">com.dm.shardingsphere.algorithem.TableStrategyStandardPreciseAlgorithm</span><span class="token comment" spellcheck="true">## 范围分片算法类</span><span class="token attr-name">spring.shardingsphere.sharding.tables.t_order.table-strategy.standard.range-algorithm-class-name</span><span class="token punctuation">=</span><span class="token attr-value">com.dm.shardingsphere.algorithem.TableStrategyStandardRangeAlgorithm</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TableStrategyStandardPreciseAlgorithm</span> <span class="token keyword">implements</span> <span class="token class-name">PreciseShardingAlgorithm</span><span class="token operator">&lt;</span>Long<span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> String <span class="token function">doSharding</span><span class="token punctuation">(</span>Collection<span class="token operator">&lt;</span>String<span class="token operator">></span> availableTargetNames<span class="token punctuation">,</span> PreciseShardingValue<span class="token operator">&lt;</span>Long<span class="token operator">></span> shardingValue<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 数据节点</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"TableStrategyStandardPreciseAlgorithm:====================================================="</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"availableTargetNames："</span> <span class="token operator">+</span> String<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">";"</span><span class="token punctuation">,</span> availableTargetNames<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 逻辑表名 t_order</span>        String logicTableName <span class="token operator">=</span> shardingValue<span class="token punctuation">.</span><span class="token function">getLogicTableName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 分片键名 order_id</span>        String columnName <span class="token operator">=</span> shardingValue<span class="token punctuation">.</span><span class="token function">getColumnName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 传进来的 order_id值，根据这个值可以定制分片策略</span>        Long value <span class="token operator">=</span> shardingValue<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"logicTableName："</span> <span class="token operator">+</span> logicTableName <span class="token operator">+</span> <span class="token string">";columnName："</span> <span class="token operator">+</span> columnName <span class="token operator">+</span> <span class="token string">";value："</span> <span class="token operator">+</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 确认分片</span>        <span class="token keyword">long</span> sharding <span class="token operator">=</span> value <span class="token operator">%</span> <span class="token number">2</span><span class="token punctuation">;</span>        String key <span class="token operator">=</span> logicTableName<span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span><span class="token string">"_"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span>String<span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>sharding<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>availableTargetNames<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">return</span> key<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">UnsupportedOperationException</span><span class="token punctuation">(</span><span class="token string">"未找到分片"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TableStrategyStandardRangeAlgorithm</span> <span class="token keyword">implements</span> <span class="token class-name">RangeShardingAlgorithm</span><span class="token operator">&lt;</span>Long<span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> Collection<span class="token operator">&lt;</span>String<span class="token operator">></span> <span class="token function">doSharding</span><span class="token punctuation">(</span>Collection<span class="token operator">&lt;</span>String<span class="token operator">></span> availableTargetNames<span class="token punctuation">,</span> RangeShardingValue<span class="token operator">&lt;</span>Long<span class="token operator">></span> shardingValue<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 数据节点</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"TableStrategyStandardRangeAlgorithm:====================================================="</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"availableTargetNames："</span> <span class="token operator">+</span> String<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">";"</span><span class="token punctuation">,</span> availableTargetNames<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 逻辑表名 t_order</span>        String logicTableName <span class="token operator">=</span> shardingValue<span class="token punctuation">.</span><span class="token function">getLogicTableName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 分片键名 order_id</span>        String columnName <span class="token operator">=</span> shardingValue<span class="token punctuation">.</span><span class="token function">getColumnName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 传进来的 查询范围，根据范围可以定制分片策略，指定查询表</span>        Long start <span class="token operator">=</span> shardingValue<span class="token punctuation">.</span><span class="token function">getValueRange</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">lowerEndpoint</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Long end <span class="token operator">=</span> shardingValue<span class="token punctuation">.</span><span class="token function">getValueRange</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">upperEndpoint</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"logicTableName："</span> <span class="token operator">+</span> logicTableName <span class="token operator">+</span> <span class="token string">";columnName："</span> <span class="token operator">+</span> columnName <span class="token operator">+</span> <span class="token string">";start："</span> <span class="token operator">+</span> start <span class="token operator">+</span> <span class="token string">";end："</span> <span class="token operator">+</span> end<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 确认范围</span>        <span class="token comment" spellcheck="true">// 这里直接返回所有,可以根据start,end定制范围，比如表一0,500表二501-1000这里返回对应表就可以了</span>        <span class="token keyword">return</span> availableTargetNames<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 这里表示范围查询只能查t_order_1表</span><span class="token comment" spellcheck="true">//        return Collections.singletonList("t_order_1");</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="ComplexShardingStrategy"><a href="#ComplexShardingStrategy" class="headerlink" title="ComplexShardingStrategy"></a>ComplexShardingStrategy</h3><p>支持多分片键的复杂分片策略</p><p>配置参数：</p><ol><li>complex.sharding-columns：分片键(多个)</li><li>complex.algorithm-class-name：分片算法实现类，实现类继承ComplexKeysShardingAlgorithm接口</li></ol><pre class=" language-properties"><code class="language-properties"><span class="token comment" spellcheck="true">## =======多分片键的复杂分片策略=======</span><span class="token comment" spellcheck="true"># 分表字段id</span><span class="token attr-name">spring.shardingsphere.sharding.tables.t_order.table-strategy.complex.sharding-columns</span><span class="token punctuation">=</span><span class="token attr-value">order_id</span><span class="token comment" spellcheck="true"># 分片算法实现类</span><span class="token attr-name">spring.shardingsphere.sharding.tables.t_order.table-strategy.complex.algorithm-class-name</span><span class="token punctuation">=</span><span class="token attr-value">com.dm.shardingsphere.algorithem.TableStrategyComplexAlgorithm</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TableStrategyComplexAlgorithm</span> <span class="token keyword">implements</span> <span class="token class-name">ComplexKeysShardingAlgorithm</span><span class="token operator">&lt;</span>Long<span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> Collection<span class="token operator">&lt;</span>String<span class="token operator">></span> <span class="token function">doSharding</span><span class="token punctuation">(</span>Collection<span class="token operator">&lt;</span>String<span class="token operator">></span> availableTargetNames<span class="token punctuation">,</span> ComplexKeysShardingValue<span class="token operator">&lt;</span>Long<span class="token operator">></span> shardingValue<span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"TableStrategyComplexAlgorithm:====================================================="</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 数据节点</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"availableTargetNames："</span> <span class="token operator">+</span> String<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">";"</span><span class="token punctuation">,</span> availableTargetNames<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 分片键Map,key-键名如order_id,value-键名对应的值如1231131231414</span>        Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Collection<span class="token operator">&lt;</span>Long<span class="token operator">>></span> columnNameAndShardingValuesMap <span class="token operator">=</span> shardingValue<span class="token punctuation">.</span><span class="token function">getColumnNameAndShardingValuesMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 这里返回的是个列表所以in操作也是可以的</span>        Collection<span class="token operator">&lt;</span>Long<span class="token operator">></span> orderIds <span class="token operator">=</span> columnNameAndShardingValuesMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"order_id"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Collection<span class="token operator">&lt;</span>Long<span class="token operator">></span> userIds <span class="token operator">=</span> columnNameAndShardingValuesMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"user_id"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//        System.out.println("orderIds：" + orderIds.stream().map(String::valueOf).collect(Collectors.joining(";")) +</span><span class="token comment" spellcheck="true">//                ";userIds：" + userIds.stream().map(String::valueOf).collect(Collectors.joining(";")));</span>        <span class="token comment" spellcheck="true">// 范围查询,key-键名如order_id,value-Range类型,key对应范围</span>        Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Range<span class="token operator">&lt;</span>Long<span class="token operator">>></span> columnNameAndRangeValuesMap <span class="token operator">=</span> shardingValue<span class="token punctuation">.</span><span class="token function">getColumnNameAndRangeValuesMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Range<span class="token operator">&lt;</span>Long<span class="token operator">></span> orderIdRange <span class="token operator">=</span> columnNameAndRangeValuesMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"order_id"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Range<span class="token operator">&lt;</span>Long<span class="token operator">></span> userIdRange <span class="token operator">=</span> columnNameAndRangeValuesMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"user_id"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 分片</span>        List<span class="token operator">&lt;</span>String<span class="token operator">></span> shardList <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>CollectionUtils<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span>orderIds<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">return</span> availableTargetNames<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">for</span><span class="token punctuation">(</span>Long orderId<span class="token operator">:</span> orderIds<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">long</span> sharding <span class="token operator">=</span> orderId <span class="token operator">%</span> <span class="token number">2</span><span class="token punctuation">;</span>            shardList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>shardingValue<span class="token punctuation">.</span><span class="token function">getLogicTableName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span><span class="token string">"_"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span>String<span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>sharding<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> shardList<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="HintShardingStrategy：不需要分片键的强制分片策略"><a href="#HintShardingStrategy：不需要分片键的强制分片策略" class="headerlink" title="HintShardingStrategy：不需要分片键的强制分片策略"></a>HintShardingStrategy：不需要分片键的强制分片策略</h3><p>配置参数：</p><ol><li>hint.algorithm-class-name：分片算法实现类，实现类继承HintShardingAlgorithm接口</li></ol><pre class=" language-properties"><code class="language-properties"><span class="token comment" spellcheck="true">## =======不需要分片键的强制分片策略=======</span><span class="token comment" spellcheck="true">## 分片算法实现类</span><span class="token attr-name">spring.shardingsphere.sharding.tables.t_order.table-strategy.hint.algorithm-class-name</span><span class="token punctuation">=</span><span class="token attr-value">com.dm.shardingsphere.algorithem.TableStrategyComplexAlgorithm</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TableStrategyHintAlgorithm</span> <span class="token keyword">implements</span> <span class="token class-name">HintShardingAlgorithm</span><span class="token operator">&lt;</span>Long<span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> Collection<span class="token operator">&lt;</span>String<span class="token operator">></span> <span class="token function">doSharding</span><span class="token punctuation">(</span>Collection<span class="token operator">&lt;</span>String<span class="token operator">></span> availableTargetNames<span class="token punctuation">,</span> HintShardingValue<span class="token operator">&lt;</span>Long<span class="token operator">></span> shardingValue<span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"TableStrategyHintAlgorithm:====================================================="</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 数据节点</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"availableTargetNames："</span> <span class="token operator">+</span> String<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">";"</span><span class="token punctuation">,</span> availableTargetNames<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        String logicTableName <span class="token operator">=</span> shardingValue<span class="token punctuation">.</span><span class="token function">getLogicTableName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        String columnName <span class="token operator">=</span> shardingValue<span class="token punctuation">.</span><span class="token function">getColumnName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Collection<span class="token operator">&lt;</span>Long<span class="token operator">></span> values <span class="token operator">=</span> shardingValue<span class="token punctuation">.</span><span class="token function">getValues</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>CollectionUtils<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span>values<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">return</span> availableTargetNames<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> values<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>value <span class="token operator">-</span><span class="token operator">></span> logicTableName<span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span><span class="token string">"_"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span>String<span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span>Collectors<span class="token punctuation">.</span><span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> List<span class="token operator">&lt;</span>TOrder<span class="token operator">></span> <span class="token function">queryOrderByHint</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    HintManager hintManager <span class="token operator">=</span> HintManager<span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>        hintManager<span class="token punctuation">.</span><span class="token function">addTableShardingValue</span><span class="token punctuation">(</span><span class="token string">"t_order"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">long</span><span class="token punctuation">)</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> orderMapper<span class="token punctuation">.</span><span class="token function">select</span><span class="token punctuation">(</span>TOrder<span class="token punctuation">.</span><span class="token function">builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">userId</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">long</span><span class="token punctuation">)</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>        hintManager<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="绑定表"><a href="#绑定表" class="headerlink" title="绑定表"></a>绑定表</h2><pre class=" language-sql"><code class="language-sql"><span class="token keyword">SELECT</span> <span class="token number">b</span><span class="token punctuation">.</span>address_id<span class="token punctuation">,</span><span class="token number">a</span><span class="token punctuation">.</span><span class="token operator">*</span> <span class="token keyword">FROM</span> t_order_item <span class="token number">a</span> <span class="token keyword">LEFT</span> <span class="token keyword">JOIN</span> t_order <span class="token number">b</span> <span class="token keyword">ON</span> <span class="token number">a</span><span class="token punctuation">.</span>order_id <span class="token operator">=</span> <span class="token number">b</span><span class="token punctuation">.</span>order_id</code></pre><p>类似这种SQL通过分片策略执行结束后</p><p><img src="!%5B%5D(https://blog-dm.oss-cn-shanghai.aliyuncs.com/articleimage/image-20210205172009398.png" alt="image-20210205172009398"></p><p>出现了笛卡尔积现象，会消耗大量的性能。</p><p>解决这种办法就是让t_order和t_order_item走同样的分片策略，并且绑定在一起</p><pre class=" language-properties"><code class="language-properties"><span class="token attr-name">spring.shardingsphere.sharding.binding-tables[0]</span><span class="token punctuation">=</span><span class="token attr-value">t_order,t_order_item</span></code></pre><p><img src="https://blog-dm.oss-cn-shanghai.aliyuncs.com/articleimage/20210205172445.png"></p><p>t_order_0查t_order_item_0;t_order_1查t_order_item_1</p><h2 id="广播表"><a href="#广播表" class="headerlink" title="广播表"></a>广播表</h2><pre class=" language-properties"><code class="language-properties"><span class="token comment" spellcheck="true"># 广播表</span><span class="token attr-name">spring.shardingsphere.sharding.broadcast-tables</span><span class="token punctuation">=</span><span class="token attr-value">t_dict</span><span class="token attr-name">spring.shardingsphere.sharding.tables.t_dict.key-generator.column</span><span class="token punctuation">=</span><span class="token attr-value">dict_id</span><span class="token attr-name">spring.shardingsphere.sharding.tables.t_dict.key-generator.type</span><span class="token punctuation">=</span><span class="token attr-value">SNOWFLAKE</span></code></pre><h2 id="ShardingSphere的SQL使用限制"><a href="#ShardingSphere的SQL使用限制" class="headerlink" title="ShardingSphere的SQL使用限制"></a>ShardingSphere的SQL使用限制</h2><p><a href="https://shardingsphere.apache.org/document/current/cn/features/sharding/use-norms/sql/">官方SQL限制说明</a></p><p><strong>支持的SQL</strong></p><table><thead><tr><th align="left">SQL</th><th align="left">必要条件</th></tr></thead><tbody><tr><td align="left">SELECT * FROM tbl_name</td><td align="left"></td></tr><tr><td align="left">SELECT * FROM tbl_name WHERE (col1 = ? or col2 = ?) and col3 = ?</td><td align="left"></td></tr><tr><td align="left">SELECT * FROM tbl_name WHERE col1 = ? ORDER BY col2 DESC LIMIT ?</td><td align="left"></td></tr><tr><td align="left">SELECT COUNT(*), SUM(col1), MIN(col1), MAX(col1), AVG(col1) FROM tbl_name WHERE col1 = ?</td><td align="left"></td></tr><tr><td align="left">SELECT COUNT(col1) FROM tbl_name WHERE col2 = ? GROUP BY col1 ORDER BY col3 DESC LIMIT ?, ?</td><td align="left"></td></tr><tr><td align="left">INSERT INTO tbl_name (col1, col2,…) VALUES (?, ?, ….)</td><td align="left"></td></tr><tr><td align="left">INSERT INTO tbl_name VALUES (?, ?,….)</td><td align="left"></td></tr><tr><td align="left">INSERT INTO tbl_name (col1, col2, …) VALUES (?, ?, ….), (?, ?, ….)</td><td align="left"></td></tr><tr><td align="left">INSERT INTO tbl_name (col1, col2, …) SELECT col1, col2, … FROM tbl_name WHERE col3 = ?</td><td align="left">INSERT表和SELECT表必须为相同表或绑定表</td></tr><tr><td align="left">REPLACE INTO tbl_name (col1, col2, …) SELECT col1, col2, … FROM tbl_name WHERE col3 = ?</td><td align="left">REPLACE表和SELECT表必须为相同表或绑定表</td></tr><tr><td align="left">UPDATE tbl_name SET col1 = ? WHERE col2 = ?</td><td align="left"></td></tr><tr><td align="left">DELETE FROM tbl_name WHERE col1 = ?</td><td align="left"></td></tr><tr><td align="left">CREATE TABLE tbl_name (col1 int, …)</td><td align="left"></td></tr><tr><td align="left">ALTER TABLE tbl_name ADD col1 varchar(10)</td><td align="left"></td></tr><tr><td align="left">DROP TABLE tbl_name</td><td align="left"></td></tr><tr><td align="left">TRUNCATE TABLE tbl_name</td><td align="left"></td></tr><tr><td align="left">CREATE INDEX idx_name ON tbl_name</td><td align="left"></td></tr><tr><td align="left">DROP INDEX idx_name ON tbl_name</td><td align="left"></td></tr><tr><td align="left">DROP INDEX idx_name</td><td align="left"></td></tr><tr><td align="left">SELECT DISTINCT * FROM tbl_name WHERE col1 = ?</td><td align="left"></td></tr><tr><td align="left">SELECT COUNT(DISTINCT col1) FROM tbl_name</td><td align="left"></td></tr><tr><td align="left">SELECT subquery_alias.col1 FROM (select tbl_name.col1 from tbl_name where tbl_name.col2=?) subquery_alias</td><td align="left"></td></tr></tbody></table><p><strong>不支持的SQL</strong></p><table><thead><tr><th align="left">SQL</th><th align="left">不支持原因</th></tr></thead><tbody><tr><td align="left">INSERT INTO tbl_name (col1, col2, …) VALUES(1+2, ?, …)</td><td align="left">VALUES语句不支持运算表达式</td></tr><tr><td align="left">INSERT INTO tbl_name (col1, col2, …) SELECT * FROM tbl_name WHERE col3 = ?</td><td align="left">SELECT子句暂不支持使用*号简写及内置的分布式主键生成器</td></tr><tr><td align="left">REPLACE INTO tbl_name (col1, col2, …) SELECT * FROM tbl_name WHERE col3 = ?</td><td align="left">SELECT子句暂不支持使用*号简写及内置的分布式主键生成器</td></tr><tr><td align="left">SELECT * FROM tbl_name1 UNION SELECT * FROM tbl_name2</td><td align="left">UNION</td></tr><tr><td align="left">SELECT * FROM tbl_name1 UNION ALL SELECT * FROM tbl_name2</td><td align="left">UNION ALL</td></tr><tr><td align="left">SELECT SUM(DISTINCT col1), SUM(col1) FROM tbl_name</td><td align="left">详见DISTINCT支持情况详细说明</td></tr><tr><td align="left">SELECT * FROM tbl_name WHERE to_date(create_time, ‘yyyy-mm-dd’) = ?</td><td align="left">会导致全路由</td></tr><tr><td align="left">(SELECT * FROM tbl_name)</td><td align="left">暂不支持加括号的查询</td></tr><tr><td align="left">SELECT MAX(tbl_name.col1) FROM tbl_name</td><td align="left">查询列是函数表达式时,查询列前不能使用表名;若查询表存在别名,则可使用表的别名</td></tr></tbody></table><p><strong>DISTINCT支持情况详细说明</strong></p><p><strong>支持的SQL</strong></p><table><thead><tr><th align="left">SQL</th></tr></thead><tbody><tr><td align="left">SELECT DISTINCT * FROM tbl_name WHERE col1 = ?</td></tr><tr><td align="left">SELECT DISTINCT col1 FROM tbl_name</td></tr><tr><td align="left">SELECT DISTINCT col1, col2, col3 FROM tbl_name</td></tr><tr><td align="left">SELECT DISTINCT col1 FROM tbl_name ORDER BY col1</td></tr><tr><td align="left">SELECT DISTINCT col1 FROM tbl_name ORDER BY col2</td></tr><tr><td align="left">SELECT DISTINCT(col1) FROM tbl_name</td></tr><tr><td align="left">SELECT AVG(DISTINCT col1) FROM tbl_name</td></tr><tr><td align="left">SELECT SUM(DISTINCT col1) FROM tbl_name</td></tr><tr><td align="left">SELECT COUNT(DISTINCT col1) FROM tbl_name</td></tr><tr><td align="left">SELECT COUNT(DISTINCT col1) FROM tbl_name GROUP BY col1</td></tr><tr><td align="left">SELECT COUNT(DISTINCT col1 + col2) FROM tbl_name</td></tr><tr><td align="left">SELECT COUNT(DISTINCT col1), SUM(DISTINCT col1) FROM tbl_name</td></tr><tr><td align="left">SELECT COUNT(DISTINCT col1), col1 FROM tbl_name GROUP BY col1</td></tr><tr><td align="left">SELECT col1, COUNT(DISTINCT col1) FROM tbl_name GROUP BY col1</td></tr></tbody></table><p><strong>不支持的SQL</strong></p><table><thead><tr><th align="left">SQL</th><th align="left">不支持原因</th></tr></thead><tbody><tr><td align="left">SELECT SUM(DISTINCT tbl_name.col1), SUM(tbl_name.col1) FROM tbl_name</td><td align="left">查询列是函数表达式时,查询列前不能使用表名;若查询表存在别名,则可使用表的别名</td></tr></tbody></table><h2 id="分库分表建议"><a href="#分库分表建议" class="headerlink" title="分库分表建议"></a>分库分表建议</h2><p>从上面SQL限制也可以看出，分库分表带来的必然是SQL使用上很难，并且系统复杂度增加了。<strong>所以尽量不要分库分表。</strong></p><p>其实分库分表主要解决问题是数据库单机容量问题和查询性能问题。其实对于性能我们可以用很多方式解决，比如读写分离，利用缓存。对于单机容量我们可以使用分布式存储的数据库Hbase,Hive,ES等。</p><p>如果确定分库分表需要在项目初期就要开始，不然后期数据维护很难。</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL </tag>
            
            <tag> ShardingSphere </tag>
            
            <tag> 分库分表 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Redis生产实践与性能优化</title>
      <link href="/2021/02/05/redis-sheng-chan-shi-jian-yu-xing-neng-you-hua/"/>
      <url>/2021/02/05/redis-sheng-chan-shi-jian-yu-xing-neng-you-hua/</url>
      
        <content type="html"><![CDATA[<h2 id="缓存穿透"><a href="#缓存穿透" class="headerlink" title="缓存穿透"></a>缓存穿透</h2><p>缓存穿透是指访问一个不存在的key（这个key不在缓存层），穿透了缓存层直接打到了DB，如果访问量大的话是有把DB打崩的可能性。</p><p>解决方案：</p><ol><li><p>缓存空对象，即使访问的是一个不存在的对象，我们也可以吧访问的key值缓存，value直接设个字符串便可，再次访问的时候判断一下就行了</p><pre class=" language-java"><code class="language-java"> <span class="token keyword">public</span> String <span class="token function">cachePenetrate</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PathVariable</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">)</span> String id<span class="token punctuation">)</span><span class="token punctuation">{</span>     <span class="token comment" spellcheck="true">// 查下缓存有没有数据,有直接返回</span>     String cache <span class="token operator">=</span> stringRedisTemplate<span class="token punctuation">.</span><span class="token function">opsForValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">// 没有缓存</span>     <span class="token keyword">if</span><span class="token punctuation">(</span>StringUtils<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span>cache<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>         <span class="token comment" spellcheck="true">// 从DB拿</span>         String value <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>         value <span class="token operator">=</span> db<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment" spellcheck="true">// 拿完数据缓存,DB没有数据缓存空串</span>         stringRedisTemplate<span class="token punctuation">.</span><span class="token function">opsForValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>id<span class="token punctuation">,</span>StringUtils<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token string">""</span> <span class="token operator">:</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment" spellcheck="true">// 设置一个过期时间</span>         stringRedisTemplate<span class="token punctuation">.</span><span class="token function">expire</span><span class="token punctuation">(</span>id<span class="token punctuation">,</span> <span class="token number">60</span><span class="token punctuation">,</span> TimeUnit<span class="token punctuation">.</span>SECONDS<span class="token punctuation">)</span><span class="token punctuation">;</span>                 <span class="token keyword">return</span> value<span class="token punctuation">;</span>     <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>         <span class="token keyword">return</span> cache<span class="token punctuation">;</span>     <span class="token punctuation">}</span> <span class="token punctuation">}</span></code></pre></li><li><p>布隆过滤器</p><p>对于恶意攻击，向服务器请求大量不存在的数据造成的缓存穿透，可以用布隆过滤器先做一次过滤，对于不存在的数据布隆过滤器一般都能够过滤掉，不让请求再往后端发送。当布隆过滤器说<strong>某个值存在时，这个值可能不存在；当它说不存在时，那就肯定不存在。</strong></p><p>添加：</p><p>向布隆过滤器中添加 key 时，会使用多个 hash 函数对 key 进行 hash 算得一个整数索引值然后对位数组长度进行取模运算得到一个位置，每个 hash 函数都会算得一个不同的位置。再把位数组的这几个位置都置为 1 就完成了 add 操作。</p><p>查询：</p><p>向布隆过滤器询问 key 是否存在时，跟 add 一样，也会把 hash 的几个位置都算出来，看看位数组中这几个位置是否都为 1，只要有一个位为 0，那么说明布隆过滤器中这个key 不存在。如果都是 1，这并不能说明这个 key 就一定存在，只是极有可能存在，因为这些位被置为 1 可能是因为其它的 key 存在所致。如果这个位数组比较稀疏，这个概率就会很大，如果这个位数组比较拥挤，这个概率就会降低。</p><p>场景：</p><p>这种方法适用于数据命中不高、 数据相对固定、 实时性低（通常是数据集较大） 的应用场景， 代码维护较为复杂， 但是<strong>缓存空间占用很少</strong>。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">import</span> lombok<span class="token punctuation">.</span>extern<span class="token punctuation">.</span>slf4j<span class="token punctuation">.</span>Slf4j<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>redisson<span class="token punctuation">.</span>Redisson<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>redisson<span class="token punctuation">.</span>api<span class="token punctuation">.</span>RBloomFilter<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>InitializingBean<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Autowired<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Bean<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Configuration<span class="token punctuation">;</span><span class="token annotation punctuation">@Slf4j</span><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BloomFilter</span> <span class="token keyword">implements</span> <span class="token class-name">InitializingBean</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> Redisson redisson<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">afterPropertiesSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        RBloomFilter<span class="token operator">&lt;</span>String<span class="token operator">></span> bloomFilter <span class="token operator">=</span> redisson<span class="token punctuation">.</span><span class="token function">getBloomFilter</span><span class="token punctuation">(</span><span class="token string">"idList"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 初始化布隆过滤器：预计元素为100000000L,误差率为3%</span>        bloomFilter<span class="token punctuation">.</span><span class="token function">tryInit</span><span class="token punctuation">(</span>100000000L<span class="token punctuation">,</span><span class="token number">0.03</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">1000000000</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            bloomFilter<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>String<span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"> <span class="token keyword">public</span> String <span class="token function">cachePenetrate</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PathVariable</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">)</span> String id<span class="token punctuation">)</span> <span class="token punctuation">{</span>     RBloomFilter<span class="token operator">&lt;</span>String<span class="token operator">></span> bloomFilter <span class="token operator">=</span> redisson<span class="token punctuation">.</span><span class="token function">getBloomFilter</span><span class="token punctuation">(</span><span class="token string">"idList"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token keyword">boolean</span> exists <span class="token operator">=</span> bloomFilter<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>exists<span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token keyword">return</span> <span class="token string">""</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span>     <span class="token comment" spellcheck="true">// 查下缓存有没有数据,有直接返回</span>     String cache <span class="token operator">=</span> stringRedisTemplate<span class="token punctuation">.</span><span class="token function">opsForValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">// 没有缓存</span>     <span class="token keyword">if</span> <span class="token punctuation">(</span>StringUtils<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span>cache<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// 从DB拿</span>         String value <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>         <span class="token comment" spellcheck="true">//            value = db.get(id);</span>         <span class="token comment" spellcheck="true">// 拿完数据缓存,DB没有数据缓存空串</span>         stringRedisTemplate<span class="token punctuation">.</span><span class="token function">opsForValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>id<span class="token punctuation">,</span> StringUtils<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token string">""</span> <span class="token operator">:</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment" spellcheck="true">// 设置一个过期时间(60到120)</span>         stringRedisTemplate<span class="token punctuation">.</span><span class="token function">expire</span><span class="token punctuation">(</span>id<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token number">60</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">60</span><span class="token punctuation">,</span> TimeUnit<span class="token punctuation">.</span>SECONDS<span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token keyword">return</span> value<span class="token punctuation">;</span>     <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>         <span class="token keyword">return</span> cache<span class="token punctuation">;</span>     <span class="token punctuation">}</span> <span class="token punctuation">}</span></code></pre></li></ol><h2 id="缓存击穿"><a href="#缓存击穿" class="headerlink" title="缓存击穿"></a>缓存击穿</h2><p>大批量缓存同一时间失效，请求全部打到DB层，可能会造成数据库瞬间压力过大甚至挂掉，对于这种情况我们在批量增加缓存时最好将这一批数据的缓存过期时间设置为一个时间段内的不同时间。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> String <span class="token function">cachePenetrate</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PathVariable</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">)</span> String id<span class="token punctuation">)</span><span class="token punctuation">{</span>     <span class="token comment" spellcheck="true">// 查下缓存有没有数据,有直接返回</span>     String cache <span class="token operator">=</span> stringRedisTemplate<span class="token punctuation">.</span><span class="token function">opsForValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">// 没有缓存</span>     <span class="token keyword">if</span><span class="token punctuation">(</span>StringUtils<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span>cache<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>         <span class="token comment" spellcheck="true">// 从DB拿</span>         String value <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>         value <span class="token operator">=</span> db<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment" spellcheck="true">// 拿完数据缓存,DB没有数据缓存空串</span>         stringRedisTemplate<span class="token punctuation">.</span><span class="token function">opsForValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>id<span class="token punctuation">,</span>StringUtils<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token string">""</span> <span class="token operator">:</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment" spellcheck="true">// 设置一个过期时间(60到120)</span>         stringRedisTemplate<span class="token punctuation">.</span><span class="token function">expire</span><span class="token punctuation">(</span>id<span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">Random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token number">60</span><span class="token punctuation">)</span>  <span class="token operator">+</span> <span class="token number">60</span><span class="token punctuation">,</span> TimeUnit<span class="token punctuation">.</span>SECONDS<span class="token punctuation">)</span><span class="token punctuation">;</span>                 <span class="token keyword">return</span> value<span class="token punctuation">;</span>     <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>         <span class="token keyword">return</span> cache<span class="token punctuation">;</span>     <span class="token punctuation">}</span> <span class="token punctuation">}</span></code></pre><h2 id="缓存雪崩"><a href="#缓存雪崩" class="headerlink" title="缓存雪崩"></a>缓存雪崩</h2><p>缓存雪崩是指缓存层扛不住压力崩溃了，流量直接打到了后端数据层。存储层也会级联宕机。</p><ol><li>保证缓存层服务高可用，用哨兵架构或集群架构。</li><li>做限流熔断。Sentinel或Hystrix。</li></ol><h2 id="热点数据"><a href="#热点数据" class="headerlink" title="热点数据"></a>热点数据</h2><p>有时候会有一些热点数据，原本不在缓存的，突然间大批量数据打过来，还没来得及建立缓存，流量就打到了DB,瞬间DB宕机。</p><p>我们可以利用互斥锁来解决，此方法只允许一个线程重建缓存， 其他线程等待重建缓存的线程执行完， 重新从缓存获取数据即可。</p><h2 id="缓存与数据库双写不一致"><a href="#缓存与数据库双写不一致" class="headerlink" title="缓存与数据库双写不一致"></a>缓存与数据库双写不一致</h2><p>不管你是读库更新缓存，读库删除缓存在高并发下都会存在数据不一致问题</p><ol><li>延时双删：读库删除缓存后过一段时间在删一次，防止别的线程更新掉了缓存。<strong>不建议，为了解决一个偶发事件拖慢了整个系统</strong></li><li>canal：利用canal监听MySQL的binLog通过MQ解决。</li><li>加读写锁：保证顺序，串行化执行。</li></ol><p>如果能容忍短暂的数据不一致，可以加过期时间解决。</p><h2 id="客户端连接池"><a href="#客户端连接池" class="headerlink" title="客户端连接池"></a>客户端连接池</h2><h3 id="客户端建议"><a href="#客户端建议" class="headerlink" title="客户端建议"></a>客户端建议</h3><ol><li><p>Redis使用上应避免多个应用使用同一个Redis，大规模互联网产品建议一个服务对应一个Redis，提高性能和存储。</p></li><li><p><strong>Redis多库不建议使用,集群默认不支持多库</strong></p></li><li><p>Redis客户端建议使用带有连接池的客户端。</p></li></ol><p>池化思想：所有的池化思想主要基于2方面，其一方便统一管理，其二不随便创建和销毁连接，连接的创建和销毁都会消耗资源，我使用完连接，丢回池中，后面再拿出来。</p><h3 id="常用参数"><a href="#常用参数" class="headerlink" title="常用参数"></a>常用参数</h3><table><thead><tr><th>参数</th><th>默认值</th><th>描述</th></tr></thead><tbody><tr><td>maxTotal</td><td>8</td><td>连接池最大连接数</td></tr><tr><td>maxIdle</td><td>8</td><td>空闲最大连接数</td></tr><tr><td>minIdle</td><td>0</td><td>空闲最小连接数</td></tr><tr><td>blockWhenExhausted</td><td>true</td><td>连接池用尽时是否需要等待，为true配合maxWaitMillis（不建议使用默认值）</td></tr><tr><td>maxWaitMillis</td><td>-1(不超时)</td><td>连接池用尽后调用者最大等待时间</td></tr><tr><td>testOnBorrow</td><td>false</td><td>连接池使用连接时做一次有效性校验（ping一下通不通）无效连接会被移除，连接多不建议开启</td></tr><tr><td>testOnReturn</td><td>false</td><td>客户端归还连接时做一次有效性校验（ping一下通不通）无效连接会被移除，连接多不建议开启</td></tr><tr><td>jmxEnabled</td><td>true</td><td>是否开启jmx监控，可用于监控</td></tr></tbody></table><h3 id="连接池预热"><a href="#连接池预热" class="headerlink" title="连接池预热"></a>连接池预热</h3><p>有时我们服务启动时需要处理大量的Redis请求，为了提高性能可以先连接池预热，将连接池中的连接提升到maxIdle数量</p><pre class=" language-java"><code class="language-java">List<span class="token operator">&lt;</span>Jedis<span class="token operator">></span> minIdleJedisList <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span>Jedis<span class="token operator">></span><span class="token punctuation">(</span>jedisPoolConfig<span class="token punctuation">.</span><span class="token function">getMinIdle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> jedisPoolConfig<span class="token punctuation">.</span><span class="token function">getMinIdle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    Jedis jedis <span class="token operator">=</span> null<span class="token punctuation">;</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>        jedis <span class="token operator">=</span> pool<span class="token punctuation">.</span><span class="token function">getResource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        minIdleJedisList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>jedis<span class="token punctuation">)</span><span class="token punctuation">;</span>        jedis<span class="token punctuation">.</span><span class="token function">ping</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>        logger<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 注意，这里不能马上close将连接还回连接池，否则最后连接池里只会建立1个连接</span>        <span class="token comment" spellcheck="true">// jedis.close();</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 统一将预热的连接还回连接池</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> jedisPoolConfig<span class="token punctuation">.</span><span class="token function">getMinIdle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    Jedis jedis <span class="token operator">=</span> null<span class="token punctuation">;</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>        jedis <span class="token operator">=</span> minIdleJedisList<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 将连接归还回连接池</span>        jedis<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>        logger<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="Redis清除策略"><a href="#Redis清除策略" class="headerlink" title="Redis清除策略"></a>Redis清除策略</h2><h3 id="被动删除"><a href="#被动删除" class="headerlink" title="被动删除"></a>被动删除</h3><p>Redis是惰性删除的，key过期了Redis是不会主动删除的（需看策略），是在key被查询一次的时候判断一下有没有过期，过期直接删除。</p><h3 id="主动删除"><a href="#主动删除" class="headerlink" title="主动删除"></a>主动删除</h3><p>由于惰性删除策略无法保证冷数据被及时删掉，所以redis需要清理掉，主要以下2种策略</p><ol><li>定期清理：Redis会定期主动淘汰一批<strong>已过期</strong>的key</li><li>当前已用内存超过maxmemory限定时（配合maxmemory-policy配置）</li></ol><p>8种数据淘汰策略</p><ul><li>volatile-ttl：筛选时，会针对设置了过期时间的键值对，根据过期时间的先后进行删除，越早过期的越先被删除</li><li>volatile-random：筛选时，会针对设置了过期时间的键值对，随机删除</li><li>volatile-lru：筛选时，会针对设置了过期时间的键值对，会使用 LRU 算法筛选设置了过期时间的键值对删除</li><li>volatile-lfu：筛选时，会针对设置了过期时间的键值对，会使用 LFU 算法筛选设置了过期时间的键值对删除</li><li>allkeys-random：从所有键值对中随机选择删除（不管设没设过期时间）</li><li>allkeys-lru：使用 LRU 算法在所有数据中进行筛选删除（不管设没设过期时间）</li><li>allkeys-lfu：使用 LFU 算法在所有数据中进行筛选删除（不管设没设过期时间）</li><li>noeviction：默认，不会剔除任何数据，拒绝所有写入操作并返回客户端错误信息”(error) OOM command not allowed when used memory”，此时Redis只响应读操作</li></ul><p>淘汰算法</p><ul><li><strong>LRU 算法</strong>（Least Recently Used，最近最少使用）：淘汰很久没被访问过的数据，以<strong>最近一次访问时间</strong>作为参考</li><li><strong>LFU 算法</strong>（Least Frequently Used，最不经常使用）：淘汰最近一段时间被访问次数最少的数据，以<strong>次数</strong>作为参考。</li></ul><p><strong>推荐使用volatile-lru。如果不设置最大内存，当 Redis 内存超出物理内存限制时，内存的数据会开始和磁盘产生频繁的交换 (swap)，会让 Redis 的性能急剧下降。</strong></p><h2 id="Redis使用建议"><a href="#Redis使用建议" class="headerlink" title="Redis使用建议"></a>Redis使用建议</h2><ol><li><p>避免使用大key，阻塞Redis</p></li><li><p>禁用耗时操作，阻塞Redis</p><p>hgetall、lrange、smembers、zrange、sinter等并非不能使用，但是需要明确N的值。有遍历的需求可以使用hscan、sscan、zscan代替。</p><p>禁止线上使用keys、flushall、flushdb等，通过redis的rename机制禁掉命令，或者使用scan的方式渐进式处理</p></li><li><p>使用批量操作降低网络开销，比如管道操作等等，但不建议一次传输太大的数据</p></li><li><p>Redis事务功能尽量不使用，可以使用lua脚本解决原子性问题</p></li></ol><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 生产实践 </tag>
            
            <tag> Redis </tag>
            
            <tag> 分布式缓存 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Redis核心原理与Redis6新特性</title>
      <link href="/2021/02/01/redis-he-xin-yuan-li/"/>
      <url>/2021/02/01/redis-he-xin-yuan-li/</url>
      
        <content type="html"><![CDATA[<h2 id="Redis持久化"><a href="#Redis持久化" class="headerlink" title="Redis持久化"></a>Redis持久化</h2><p>Redis持久化共有3种模式RDB、AOF和Redis4.0之后出来的混合持久化。</p><h3 id="RDB"><a href="#RDB" class="headerlink" title="RDB"></a>RDB</h3><p>RDB持久化是Redis的默认选择。RDB模式中Redis将持久化文件存储在dump.rdb（配置）<strong>二进制文件</strong>中。可以对Redis进行设置，在N秒内数据集至少有M次改动，自动保存一次数据集（配置save）;关闭RDB模式只需将所有save策略注释掉即可。</p><p>还可以手动执行命令生成RDB快照，进入Redis客户端执行命令save或bgsave可以生成dump.rdb文件；每次命令执行都会将所有redis内存快照到一个新的rdb文件里，并覆盖原有rdb快照文件</p><h4 id="bgsave-Copy-On-Write"><a href="#bgsave-Copy-On-Write" class="headerlink" title="bgsave(Copy-On-Write)"></a>bgsave(Copy-On-Write)</h4><p>默认生成方式bgsave；bgsave运用了写时复制技术(Copy-On-Write)，简单来说redis在生成快照文件的时候Redis还能做写入操作。具体实现是，主线程会fork一个bgsave的子进程，bgsave子进程会读取主线程中的内存数据并把他们写入快照文件中，这时候如果Redis发生了写数据，这时候修改的数据会被写成一个副本，然后bgsave会把副本数据写入快照文件，如果发生的是读数据，就不用管。</p><h4 id="save"><a href="#save" class="headerlink" title="save"></a>save</h4><p>save就是直接对Redis进行阻塞，不允许任何写数据请求，然后生成快照</p><table><thead><tr><th></th><th>save</th><th>bgsave</th></tr></thead><tbody><tr><td>是否阻塞redis其它命令</td><td>阻塞</td><td>非阻塞</td></tr><tr><td>IO</td><td>同步</td><td>异步</td></tr><tr><td>优点</td><td>不会消耗额外内存</td><td>不阻塞客户端命令</td></tr><tr><td>缺点</td><td>阻塞客户端命令</td><td>需要fork子进程，消耗内存</td></tr></tbody></table><h4 id="相关配置"><a href="#相关配置" class="headerlink" title="相关配置"></a>相关配置</h4><pre class=" language-shell"><code class="language-shell">## RDB 文件dbfilename "dump.rdb"## 持久化目录dir "/data/redis"## &nbsp;60&nbsp;秒内有至少有&nbsp;10000&nbsp;个键被改动 执行一次bgsavesave 60 10000</code></pre><h4 id="文件结构"><a href="#文件结构" class="headerlink" title="文件结构"></a>文件结构</h4><p><img src="https://blog-dm.oss-cn-shanghai.aliyuncs.com/articleimage/20210127151428.png"></p><h3 id="AOF"><a href="#AOF" class="headerlink" title="AOF"></a>AOF</h3><p>RDB模式从机制也可以看出丢数据的可能性极大。如果Redis停机就会导致没有写到快照文件的数据丢失。后面Redis增加了一种AOF持久化方案。它存储的是每一条指令而不是二进制文件；存储文件是appendonly.aof;</p><h4 id="aof文件存储结构"><a href="#aof文件存储结构" class="headerlink" title="aof文件存储结构"></a>aof文件存储结构</h4><p><img src="https://blog-dm.oss-cn-shanghai.aliyuncs.com/articleimage/20210127151458.png"></p><p>这是一种resp协议格式数据，星号后面的数字代表命令有多少个参数，$号后面的数字代表这个参数有几个字符</p><h4 id="AOF重写"><a href="#AOF重写" class="headerlink" title="AOF重写"></a>AOF重写</h4><p>AOF文件里可能有太多没用指令，所以AOF会定期根据内存的最新数据生成aof文件比如set a 1;set a 2;set a 3;会重写成set a 3</p><p>AOF还可以手动重写，进入redis客户端执行命令<strong>bgrewriteaof</strong>重写AOF</p><p><strong>AOF重写redis会fork出一个子进程去做(与bgsave命令类似)，不会对redis正常命令处理有太多影响</strong></p><h4 id="相关配置-1"><a href="#相关配置-1" class="headerlink" title="相关配置"></a>相关配置</h4><pre class=" language-shell"><code class="language-shell">## aof文件名称appendfilename "appendonly.aof"## 持久化目录dir "/data/redis"## 开启aof持久化appendonly yes## 每次有新命令追加到 AOF 文件时就执行一次&nbsp;fsync&nbsp;，非常慢，也非常安全appendfsync always## 每秒fsync一次，足够快，并且在故障时只会丢失 1 秒钟的数据appendfsync everysec## 从不fsync，将数据交给操作系统来处理。更快，也更不安全的选择appendfsync no## AOF重写相关配置## aof文件至少要达到64M才会自动重写，文件太小恢复速度本来就很快，重写的意义不大auto-aof-rewrite-min-size 64mb## aof文件自上一次重写后文件大小增长了100%则再次触发重写auto-aof-rewrite-percentage 100 </code></pre><p>RDB,AOF对比</p><table><thead><tr><th></th><th><strong>RDB</strong></th><th><strong>AOF</strong></th></tr></thead><tbody><tr><td>启动优先级</td><td>低</td><td>高</td></tr><tr><td>恢复速度</td><td>快</td><td>慢</td></tr><tr><td>数据安全性</td><td>容易丢数据</td><td>策略决定</td></tr><tr><td>体积</td><td>小</td><td>大</td></tr></tbody></table><p>生产环境可以都启用，redis启动时如果既有rdb文件又有aof文件则优先选择aof文件恢复数据，因为aof一般来说数据更全一点。</p><h3 id="混合持久化"><a href="#混合持久化" class="headerlink" title="混合持久化"></a>混合持久化</h3><p>混合持久化是Redsis4.0之后引入的。生产环境我们一般会利用AOF来恢复数据，即使RDB恢复数据更快但它不安全，会丢失数据。但AOF有一个致命的缺点就是恢复速度慢。混合持久化就是解决这个问题。</p><p>混合持久化是AOF的升级版，让AOF有了RDB的优点；</p><p>在执行AOF重写时，不在是将Resp协议简单的转化了，而是将这一刻之前的内存数据转化为RDB二进制文件，并且将RDB快照内容和<strong>增量的</strong>AOF修改内存数据的命令存在一起都写入新的AOF文件，新的文件一开始不叫appendonly.aof；等到重写完新的AOF文件才会进行改名，覆盖原有的AOF文件，完成新旧两个AOF文件的替换.</p><p>于是aof文件不仅仅是存储的Resp协议，而是Resp和二进制文件。</p><p><img src="https://blog-dm.oss-cn-shanghai.aliyuncs.com/articleimage/20210127163459.png"></p><h4 id="相关配置-2"><a href="#相关配置-2" class="headerlink" title="相关配置"></a>相关配置</h4><p>开启混合持久化必须先启动AOF</p><pre class=" language-shell"><code class="language-shell">## 开启混合持久化aof-use-rdb-preamble yes   </code></pre><h3 id="Redis数据备份策略"><a href="#Redis数据备份策略" class="headerlink" title="Redis数据备份策略"></a>Redis数据备份策略</h3><ol><li>写crontab定时调度脚本，每小时都copy一份rdb或aof的备份到一个目录中去，仅仅保留最近48小时的备份</li><li>每天都保留一份当日的数据备份到一个目录中去，可以保留最近1个月的备份</li><li>每次copy备份的时候，都把太旧的备份给删了</li><li>每天晚上将当前机器上的备份复制一份到其他机器上，以防机器损坏</li></ol><h3 id="Redis数据恢复"><a href="#Redis数据恢复" class="headerlink" title="Redis数据恢复"></a>Redis数据恢复</h3><p>将之前备份的rdb或aof文件copy到当前redis配置下的.dir目录，数据自动恢复</p><h2 id="Redis高性能"><a href="#Redis高性能" class="headerlink" title="Redis高性能"></a>Redis高性能</h2><p>大家都知道Redis是单线程的，但单线程为什么Redis性能这么高？</p><p>首先Redis单线程只是从网络IO和读写操作是单线程的。但Redis的持久化，AOF重写，集群数据同步这些都是另外的线程操作的。</p><p>Redis性能高主要有以下几个原因</p><ol><li>所有数据都是在内存操作的，内存运算速度不必多说。</li><li>单线程避免了线程上下文切换，其实多线程并不一定比单线程块，线程太多了上下文切换太频繁性能可能还比不上单线程</li></ol><h3 id="Redis的IO多路复用"><a href="#Redis的IO多路复用" class="headerlink" title="Redis的IO多路复用"></a>Redis的IO多路复用</h3><p>Redis怎么处理大量客户端的连接？</p><p>当大量的客户端连接连接Redis,Redis利用epoll实现多路复用，将连接信息放入队列，然后取队列中的连接，分发给不同的处理器。大概原理类似于NIO</p><p><strong>注意：Redis是单线程就需要避免耗时操作，和存储大key，避免阻塞线程，像类似于一般keys这种命令要禁止使用</strong></p><p><strong>线上生产QPS一般比较高，执行耗时操作会阻塞住redis,大量连接请求Redis会Hang住，导致线上CPU剧增，导致服务器宕机，服务器宕机Redis不能请求导致请求打到DB,最后数据库宕机</strong></p><p>如果真要用keys 可以改成scan</p><p>禁用命令(重定义命令)</p><p>redis.conf</p><pre class=" language-shell"><code class="language-shell">rename-command KEYS ""</code></pre><h2 id="Redis主从复制"><a href="#Redis主从复制" class="headerlink" title="Redis主从复制"></a>Redis主从复制</h2><p>Redis主从架构一般只是用于备份数据，做的更多的就是通过程序实现读写分离（Redis自身不支持，需实现）；Redis的主从架构不支持高可用，也就是主节点宕机从节点不会顶上去，一般生产不会单纯的使用主从架构，要么哨兵或集群架构</p><h3 id="全量复制"><a href="#全量复制" class="headerlink" title="全量复制"></a>全量复制</h3><ol><li>当一个slave节点启动时会向master节点发送一个psync命令</li><li>master收到命令就开始持久化数据生产dumb.rdb文件（这里不管他是否开启或关闭rdb持久化）</li><li>持久化过程中，redis会继续接受请求，这些修改的数据缓存在内存</li><li>持久化完毕后会将rdb数据发给slave,slave收到数据会持久化数据，然后加载到内存，然后master将之前缓存的数据发给slave</li><li>后面master与slave建立长连接同步数据，保持数据一致</li></ol><h3 id="部分复制"><a href="#部分复制" class="headerlink" title="部分复制"></a>部分复制</h3><p>master与slave会在网络断开重连后进行部分复制</p><ol><li>master会在其内存中创建一个复制数据用的缓存队列，缓存最近一段时间的数据</li><li>master和它所有的slave都维护了复制的数据下标offset和master进程id</li><li>网络连接断开后，slave会请求master继续进行未完成的复制，从所记录的数据下标开始。如果master进程id变化了，或者从节点数据下标offset太旧，已经不在master的缓存队列里了，那么将会进行一次全量数据的复制</li></ol><h3 id="主从复制风暴"><a href="#主从复制风暴" class="headerlink" title="主从复制风暴"></a>主从复制风暴</h3><p>主节点有多个slave节点，都同时发送psync命令给master导致主节点压力过大这就是主从复制风暴。</p><h2 id="Redis哨兵高可用架构"><a href="#Redis哨兵高可用架构" class="headerlink" title="Redis哨兵高可用架构"></a>Redis哨兵高可用架构</h2><p>哨兵架构其实就是对Redis主从的一次升级，redis主从架构有个缺陷就是不是高可用，哨兵架构可以解决这种问题</p><p>sentinel哨兵是特殊的redis服务，不提供读写服务，主要用来监控redis实例节点。</p><p>哨兵架构下client端第一次从哨兵找出redis的主节点，后续就直接访问redis的主节点，不会每次都通过sentinel代理访问redis的主节点，当redis的主节点发生变化，哨兵会第一时间感知到，并且将新的redis主节点通知给client端(这里面redis的client端一般都实现了订阅功能，订阅sentinel发布的节点变动消息)</p><h3 id="哨兵leader选举流程"><a href="#哨兵leader选举流程" class="headerlink" title="哨兵leader选举流程"></a>哨兵leader选举流程</h3><p>// TODO</p><h3 id="职责"><a href="#职责" class="headerlink" title="职责"></a>职责</h3><ol><li>哨兵集群会重新选举出新的redis主节点</li><li>客户端只需连接哨兵便可访问主从，主从的变化对客户端是不可见的</li></ol><h3 id="缺陷"><a href="#缺陷" class="headerlink" title="缺陷"></a>缺陷</h3><p>哨兵架构虽然一定程度解决了Redis的可用性，但还是有一定的<strong>访问瞬断</strong>问题，而且哨兵模式只有一个主节点对外提供服务，没法支持很高的并发，且单个主节点内存也不宜设置得过大，否则会导致持久化文件过大，影响数据恢复或主从同步的效率</p><h3 id="架构"><a href="#架构" class="headerlink" title="架构"></a>架构</h3><p><img src="https://blog-dm.oss-cn-shanghai.aliyuncs.com/articleimage/20210127183049.png"></p><h2 id="Redis高可用集群架构"><a href="#Redis高可用集群架构" class="headerlink" title="Redis高可用集群架构"></a>Redis高可用集群架构</h2><p>Redis3.0以后引入了集群功能，Redis高可用集群是由多个主从小集群组合而成是去中心的，可水平扩展，主要功能可以进行数据分片，主从小集群选举等功能。</p><h3 id="数据分片"><a href="#数据分片" class="headerlink" title="数据分片"></a>数据分片</h3><p>Redis集群将数据划分为16384个slots槽位。每个节点负责一部分槽位，槽位存储于每个节点中。客户端连接Redis集群时会将槽位分配情况缓存在客户端，方便客户端定位到目标节点。</p><p>槽位分配情况有时会和客户端缓存不一致，这时候就需要槽位校验调整。当客户端发到错误的数据节点的时候，服务端会向客户端发送一个跳转指令并带着正确的节点地址，客户端转向正确的目标节点发送数据命令并更新本地槽位缓存。</p><p>槽位定位算法：<strong>HASH_SLOT = CRC16(key) mod 16384</strong></p><h3 id="Redis集群节点间的通信机制"><a href="#Redis集群节点间的通信机制" class="headerlink" title="Redis集群节点间的通信机制"></a>Redis集群节点间的通信机制</h3><p>Redis集群节点间通过gossip协议进行通信。</p><p>gossip协议进行通信是断断续续的，所以所有元数据的更新不是及时的，缺点是所有节点跟新会有一定的延迟，优点是降低了节点压力。</p><ul><li>meet：某个节点发送meet给新加入的节点，让新节点加入集群中，然后新节点就会开始与其他节点进行通信</li><li>ping：每个节点都会频繁给其他节点发送ping，其中包含自己的状态还有自己维护的集群元数据，互相通过ping交换元数据(类似自己感知到的集群节点增加和移除，hash slot信息等)</li><li>pong: 对ping和meet消息的返回，包含自己的状态和其他信息，也可以用于信息广播和更新</li><li>fail: 某个节点判断另一个节点fail之后，就发送fail给其他节点，通知其他节点，指定的节点宕机了</li></ul><h3 id="Redis集群选举原理"><a href="#Redis集群选举原理" class="headerlink" title="Redis集群选举原理"></a>Redis集群选举原理</h3><p>redis配置文件有一个这样的配置<strong>cluster-node-timeout</strong>，这个配置表示当某个节点timeout时间失联表示这个节点宕了，需要进行主从切换，<strong>注这个timeout不宜配置太小，否则会频繁进行主从切换</strong></p><p>选举过程：</p><ol><li>slave发现自己的master节点挂了，会发起选举，由于master的slave不仅只有一个slave此时就会开始选举</li><li>slave将自己的当前选举周期加1，并广播消息</li><li>其他小集群的master节点收到消息，会返回第一个发起请求的节点ack,注意这里在一个选举周期内只会发送一次ack</li><li>slave统计自己收到的ack是否超过整个redis大集群master个数的一半，超过一半选举为master</li><li>slave广播消息给其他所有节点我已经是master，你们不要选举了</li></ol><p>这里有个问题如果每个slave节点收到的ack个数是一样的，怎么办？</p><p>这时候slave会将自己的选举周期加1再来一次选举。Redis为了避免这个情况在slave发送请求给其他master的时候有个延时机制并不是立刻发送的，</p><p>延时时间*<em>DELAY = 500ms + random(0 ~ 500ms) + SLAVE_RANK * 1000ms*</em></p><p>其中SLAVE_RANK表示此slave已经从master复制数据的总量的rank，rank越小数据越新延迟时间越短，选举为master几率更高。</p><h3 id="Redis集群对批量操作命令的支持"><a href="#Redis集群对批量操作命令的支持" class="headerlink" title="Redis集群对批量操作命令的支持"></a>Redis集群对批量操作命令的支持</h3><p>原来的单机节点所有的key都落在一个节点上批量命令没有问题，但现在是集群我们对于批量命令一些key不知道落在哪个节点上，就会出现问题，所以对于类似mset，mget这样的多个key的原生批量操作命令，redis集群只支持所有key落在同一slot的情况</p><p>如果有多个key一定要用mset命令在redis集群上操作，则可以在key的前面加上{XX}，这样参数数据分片hash计算的只会是大括号里的值，这样能确保不同的key能落到同一slot里去</p><p>示例如下：</p><pre class=" language-shell"><code class="language-shell">mset {user}:1:name dm {user}:1:age 18                 </code></pre><p>假设name和age计算的hash slot值不一样，但是这条命令在集群下执行，redis只会用大括号里的 user1 做hash slot计算，所以算出来的slot值肯定相同，最后都能落在同一slot。</p><h3 id="Q-amp-A"><a href="#Q-amp-A" class="headerlink" title="Q&amp;A"></a>Q&amp;A</h3><h4 id="Redis如何解决脑裂问题"><a href="#Redis如何解决脑裂问题" class="headerlink" title="Redis如何解决脑裂问题"></a>Redis如何解决脑裂问题</h4><p>在任何的主从架构不可避免的都会遇到脑裂问题。</p><p>Redis没有解决脑裂问题的，所以一定程度上是有脑裂导致的丢失数据的情况。</p><p>原因分析</p><p>现redis大集群小其中一个小集群（1主2从）主节点由于分区原因（网络抖动）导致slave认为master挂了（其实没挂），slave开始选举，成功选举了一个新master.现在这个小集群有2个master,数据也会写到这2个master中，当网络分区恢复原来的master变为slave，原来master写入的数据就丢失了。</p><p>解决方案</p><p>redis有个配置<strong>min-replicas-to-write 1</strong></p><p>配置表示写数据成功最少同步的slave数量，这个数量可以模仿大于半数机制配置，比如集群总共三个节点可以配置1，加上leader就是2，超过了半数</p><p>这样原来的问题就不会发生了，因为网络分区的原来的master节点不会再写入数据了。<strong>不过不建议这么用，因为redis本身最好用的就是高性能，现在这样性能必然不会太高，而且数据丢失对于缓存而言不算什么大不了再从DB去拿呗</strong></p><h4 id="集群是否完整才能对外提供服务"><a href="#集群是否完整才能对外提供服务" class="headerlink" title="集群是否完整才能对外提供服务"></a>集群是否完整才能对外提供服务</h4><p>这个问题主要看Redis配置</p><p>redis有个配置cluster-require-full-coverage为no时，表示当负责一个插槽的主库下线且没有相应的从库进行故障恢复时，集群仍然可用，如果为yes则集群不可用。</p><h4 id="Redis集群为什么至少需要三个master节点，并且推荐节点数为奇数？"><a href="#Redis集群为什么至少需要三个master节点，并且推荐节点数为奇数？" class="headerlink" title="Redis集群为什么至少需要三个master节点，并且推荐节点数为奇数？"></a>Redis集群为什么至少需要三个master节点，并且推荐节点数为奇数？</h4><p>因为新master的选举需要大于半数的集群master节点同意才能选举成功，如果只有两个master节点，当其中一个挂了，是达不到选举新master的条件的。</p><p>奇数个master节点可以在满足选举该条件的基础上节省一个节点，比如三个master节点和四个master节点的集群相比，大家如果都挂了一个master节点都能选举新master节点，如果都挂了两个master节点都没法选举新master节点了，所以奇数的master节点更多的是<strong>从节省机器资源角度出发</strong>说的</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Redis </tag>
            
            <tag> 分布式缓存 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Redis单机、主从、哨兵、高可用集群搭建和集群扩缩容</title>
      <link href="/2021/01/29/redis-dan-ji-zhu-cong-shao-bing-gao-ke-yong-ji-qun-da-jian/"/>
      <url>/2021/01/29/redis-dan-ji-zhu-cong-shao-bing-gao-ke-yong-ji-qun-da-jian/</url>
      
        <content type="html"><![CDATA[<h2 id="Redis单机搭建"><a href="#Redis单机搭建" class="headerlink" title="Redis单机搭建"></a>Redis单机搭建</h2><h3 id="Redis下载"><a href="#Redis下载" class="headerlink" title="Redis下载"></a>Redis下载</h3><p>这里使用的是redis5.0.3</p><p>Redis下载有多种方式，可以选择官网也可以选择镜像</p><ul><li>官网地址：<a href="http://download.redis.io/">http://download.redis.io/</a></li></ul><pre class=" language-shell"><code class="language-shell">## 下载wget http://download.redis.io/releases/redis-5.0.3.tar.gz## 解压tar -zxvf elasticsearch-7.10.2-linux-x86_64.tar.gz -C /## 软链接ln -s /elasticsearch-7.10.2/ es/</code></pre><h3 id="gcc编译"><a href="#gcc编译" class="headerlink" title="gcc编译"></a>gcc编译</h3><pre class=" language-shell"><code class="language-shell">## 安装gccyum install gcc## 进入到解压好的redis目录下，进行编译与安装cd /redismake</code></pre><h3 id="修改配置"><a href="#修改配置" class="headerlink" title="修改配置"></a>修改配置</h3><pre class=" language-shell"><code class="language-shell">## 创建持久化目录mkdir /data/redis## 修改配置文件vim redis.conf</code></pre><p>配置文件</p><pre class=" language-shell"><code class="language-shell">#后台启动daemonize yes #关闭保护模式，开启的话，只有本机才可以访问redisprotected-mode no # 需要注释掉bind（bind绑定的是自己机器网卡的ip，如果有多块网卡可以配多个ip，代表允许客户端通过机器的哪些网卡ip去访问，内网一般可以不配置bind，注释掉即可）#bind 127.0.0.1#修改持久化文件目录dir /data/redis/</code></pre><h3 id="启动服务"><a href="#启动服务" class="headerlink" title="启动服务"></a>启动服务</h3><pre class=" language-shell"><code class="language-shell">## 启动src/redis-server redis.conf## 验证服务ps -ef | grep redis## 进入客户端src/redis-cli</code></pre><h3 id="退出"><a href="#退出" class="headerlink" title="退出"></a>退出</h3><pre class=" language-shell"><code class="language-shell">## 退出客户端quit## 退出redis服务src/redis-cli shutdown</code></pre><h2 id="Redis-主从架构搭建"><a href="#Redis-主从架构搭建" class="headerlink" title="Redis 主从架构搭建"></a>Redis 主从架构搭建</h2><p>这里准备2台机器</p><p>主节点：192.168.186.131:6379</p><p>从节点：192.168.186.132:6379</p><p>主从节点搭建都和单机搭建基本一致，只需修改从节点配置即可</p><p>从节点所需修改配置</p><pre class=" language-shell"><code class="language-shell">## 配置主从复制# 从主节点的redis实例复制数据，主节点ip:端口replicaof 192.168.186.131:6379  replica-read-only yes  # 配置从节点只读</code></pre><p>主节点启动，从节点启动</p><p>验证</p><p>主节点写入一个key value;从节点能够同步数据就可以了</p><p>如果数据不能同步可能是防火墙问题关闭即可</p><h2 id="Redis-哨兵架构搭建"><a href="#Redis-哨兵架构搭建" class="headerlink" title="Redis 哨兵架构搭建"></a>Redis 哨兵架构搭建</h2><p>在主从架构中主节点挂了，从节点是不会顶上来的，从节点只是做了读写分离和数据备份</p><p>哨兵架构可以监测主节点变化情况和选举主节点的功能</p><p>客户端只需要连接哨兵便能访问redis,redis的主节点变化不会影响到客户端</p><h3 id="搭建"><a href="#搭建" class="headerlink" title="搭建"></a>搭建</h3><p>这里搭建2个哨兵,1个主从redis</p><p>redis主节点：192.168.186.131:6379</p><p>redis从节点：192.168.186.132::6379</p><p>redis主从，上诉搭建方式</p><p>snetinel节点：</p><p>192.168.186.131:26379；192.168.186.132:26379</p><h3 id="修改配置-1"><a href="#修改配置-1" class="headerlink" title="修改配置"></a>修改配置</h3><pre class=" language-shell"><code class="language-shell">vim sentinel.conf</code></pre><p>配置文件</p><pre class=" language-shell"><code class="language-shell">daemonize yes## mymaster客户端连接时才有用，可随意修改，ip:port 是主节点ip:port,最后一个数字2表示2台sentinel认为主节点不可访问才是不可返回sentinel monitor mymaster 192.168.0.60 6379 2</code></pre><h3 id="启动sentinel"><a href="#启动sentinel" class="headerlink" title="启动sentinel"></a>启动sentinel</h3><pre class=" language-shell"><code class="language-shell">src/redis-sentinel sentinel.conf</code></pre><h3 id="验证"><a href="#验证" class="headerlink" title="验证"></a>验证</h3><pre class=" language-shell"><code class="language-shell">src/redis-cli -p 26379info</code></pre><p>sentinel集群都启动完毕后，会将哨兵集群的元数据信息写入所有sentinel的配置文件里去</p><pre class=" language-shell"><code class="language-shell">#代表redis主节点的从节点信息sentinel known-replica mymaster 192.168.186.132 6379 #代表感知到的其它哨兵节点sentinel known-sentinel mymaster 192.168.186.131 26379 84bbfc7608019b020884e1cf045460916942e0f9</code></pre><p>当redis主节点如果挂了，哨兵集群会重新选举出新的redis主节点，同时会修改所有sentinel节点配置文件的集群元数据信息</p><pre class=" language-shell"><code class="language-shell">#代表redis主节点的从节点信息sentinel known-replica mymaster 192.168.186.131 6379 #代表感知到的其它哨兵节点sentinel known-sentinel mymaster 192.168.186.131 26379 84bbfc7608019b020884e1cf045460916942e0f9</code></pre><p>同时还会修改sentinel文件里之前配置的mymaster对应的主节点</p><pre class=" language-shell"><code class="language-shell">sentinel monitor mymaster 192.168.186.132 6379 2</code></pre><h2 id="Redis-集群架构搭建"><a href="#Redis-集群架构搭建" class="headerlink" title="Redis 集群架构搭建"></a>Redis 集群架构搭建</h2><p>redis的集群是由redis分配主从和槽位（当然也可以命令手动指定主从），这里我们只需要正常启动6个配置好的redis实例就可以了</p><h3 id="前期准备"><a href="#前期准备" class="headerlink" title="前期准备"></a>前期准备</h3><p>三台机器，ip分别为192.168.186.131；192.168.186.132；192.168.186.133</p><p>每台机器搭建2个redis 服务，端口6001,6002,6003,6004,6005,6006</p><pre class=" language-shell"><code class="language-shell"># 每台机器首先创建一个redis-cluster文件夹方便管理mkdir /redis/redis-clustercd /redis/redis-cluster# 然后在别创建2个文件夾放不同端口文件mkdir 6001 6004# 把之前的redis.conf配置文件copy到6001cp /redis/redis.conf /redis/redis-cluster/6001</code></pre><h3 id="修改配置文件"><a href="#修改配置文件" class="headerlink" title="修改配置文件"></a>修改配置文件</h3><pre class=" language-shell"><code class="language-shell">## 后台启动daemonize yes## 端口（分别对每个机器的端口号进行设置）port 6001## 把pid进程号写入pidfile配置的文件pidfile /var/run/redis_6001.pid  ## 指定数据文件存放位置，必须要指定不同的目录位置，不然会丢失数据dir /redis/redis-cluster/6001/## 启动集群模式cluster-enabled yes## 集群节点信息文件，这里600x最好和port对应上cluster-config-file nodes-6001.conf（集群节点信息文件，这里800x最好和port对应上）cluster-node-timeout 15000## 需要注释掉bind（bind绑定的是自己机器网卡的ip，如果有多块网卡可以配多个ip，代表允许客户端通过机器的哪些网卡ip去访问，内网一般可以不配置bind，注释掉即可）# bind 127.0.0.1## 关闭保护模式protected-mode  no</code></pre><p>把修改后的配置文件,copy到6004,修改有端口号的配置项</p><p>批量替换命令</p><pre class=" language-shell"><code class="language-shell">:%s/源字符串/目的字符串/g </code></pre><p> 另外两台机器也需要做上面几步操作，第二台机器用6002和6005，第三台机器用6003和6006               </p><h3 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h3><p>启动6个redis实例，然后检查是否启动成功，这时候集群还未创建</p><pre class=" language-shell"><code class="language-shell">## 启动服务/redis/src/redis-server /redis/redis-cluster/600X/redis.conf## 检查6个redis实例是否都启动ps -ef | grep redis</code></pre><h3 id="创建集群"><a href="#创建集群" class="headerlink" title="创建集群"></a>创建集群</h3><p>执行这条命令需要确认三台机器之间的redis实例要能相互访问，可以先简单把所有机器防火墙关掉，如果不关闭防火墙则需要打开redis服务端口和集群节点gossip通信端口16379(默认是在redis端口号上加1W)   </p><p>防火墙</p><pre class=" language-shell"><code class="language-shell">## 临时关闭防火墙systemctl stop firewalld ## 禁止开机启动systemctl disable firewalld </code></pre><p>集群创建</p><pre class=" language-shell"><code class="language-shell">## --cluster-replicas 1表示每个主节点需要1个从节点/redis/src/redis-cli --cluster create --cluster-replicas 1 192.168.186.131:6001 192.168.186.132:6002 192.168.186.133:6003 192.168.186.131:6004 192.168.186.132:6005 192.168.186.133:6006</code></pre><p><img src="!%5B%5D(https://blog-dm.oss-cn-shanghai.aliyuncs.com/articleimage/20210126141320.png"></p><h3 id="集群检查"><a href="#集群检查" class="headerlink" title="集群检查"></a>集群检查</h3><p>连接任意一个redis客户端</p><pre class=" language-shell"><code class="language-shell">##  -a访问服务端密码,-c表示集群模式,-h指定ip地址,-p端口号/redis/src/redis-cli -c -h 192.168.186.132 -p 6002## 查看集群信息cluster info## 查看节点列表cluster nodes</code></pre><p><img src="!%5B%5D(https://blog-dm.oss-cn-shanghai.aliyuncs.com/articleimage/image-20210126142004221.png" alt="image-20210126142004221"></p><p>从cluster nodes可以看出集群关系</p><p>1（主）-6（从）    槽位：0-5460</p><p>2（主）-4（从）    槽位：5461-10922</p><p>3（主）-5（从）    槽位：10923-16383</p><p>关闭集群需要逐个关闭，<strong>集群一旦构建好后，停机后只需每个节点重新启动便可，不需要在执行集群创建命令</strong></p><pre class=" language-shell"><code class="language-shell">/redis/src/redis-cli -c -h 192.168.186.132 -p 6002 shutdown</code></pre><h2 id="Redis集群水平扩缩容"><a href="#Redis集群水平扩缩容" class="headerlink" title="Redis集群水平扩缩容"></a>Redis集群水平扩缩容</h2><p>下面看下集群命令</p><pre class=" language-shell"><code class="language-shell">src/redis-cli --cluster help</code></pre><p><img src="https://blog-dm.oss-cn-shanghai.aliyuncs.com/articleimage/20210129135650.png"></p><ul><li>create：创建一个集群环境host1:port1 … hostN:portN</li><li>call：可以执行redis命令</li><li>add-node：将一个节点添加到集群里，第一个参数为新节点的ip:port，第二个参数为集群中任意一个已经存在的节点的ip:port </li><li>del-node：移除一个节点</li><li>reshard：重新分片</li><li>check：检查集群状态 </li></ul><h3 id="扩容"><a href="#扩容" class="headerlink" title="扩容"></a>扩容</h3><p>在刚刚搭好的集群上面进行水平扩容，增加一个小集群6007（主）和6008（从）；</p><p>首先需要启动2个redis实例</p><p><img src="https://blog-dm.oss-cn-shanghai.aliyuncs.com/articleimage/20210129135348.png"></p><p>2个新节点启动并没有加入到集群，cluster nodes 发现只有6个节点</p><p><img src="https://blog-dm.oss-cn-shanghai.aliyuncs.com/articleimage/20210129135920.png"></p><p><strong>现在开始加入主节点</strong></p><pre class=" language-shell"><code class="language-shell">src/redis-cli --cluster add-node 192.168.186.132:6007 192.168.186.132:6001</code></pre><p>现在看下集群状态，多了一个master(刚加入的节点都直接是master)</p><p><img src="https://blog-dm.oss-cn-shanghai.aliyuncs.com/articleimage/20210129140758.png"></p><p>这时候加入的master不可以使用因为它没有槽位，需要rehash分配槽位</p><p><strong>分配槽位</strong></p><pre class=" language-shell"><code class="language-shell">src/redis-cli --cluster reshard 192.168.186.132:6002</code></pre><p><img src="https://blog-dm.oss-cn-shanghai.aliyuncs.com/articleimage/20210129141329.png"></p><p><img src="https://blog-dm.oss-cn-shanghai.aliyuncs.com/articleimage/image-20210129141404905.png" alt="image-20210129141404905"></p><p>这时候再看一下集群信息</p><p><img src="https://blog-dm.oss-cn-shanghai.aliyuncs.com/articleimage/20210129141459.png"></p><p><strong>加入从节点</strong></p><pre class=" language-shell"><code class="language-shell">src/redis-cli --cluster add-node 192.168.186.132:6008 192.168.186.132:6002</code></pre><p>刚加入在集群里面是master,现在我们要进入6008的客户端</p><pre class=" language-shell"><code class="language-shell">src/redis-cli -c -h 192.168.186.132 -p 6008</code></pre><pre class=" language-shell"><code class="language-shell">## 分配主节点 后面这字符串就是6007的唯一标识cluster replicate 7e4da930cbbcccbb8656dbb5e1f5bead97f9f6ac</code></pre><p><img src="https://blog-dm.oss-cn-shanghai.aliyuncs.com/articleimage/20210129143230.png"></p><p>扩容成功</p><h3 id="缩容"><a href="#缩容" class="headerlink" title="缩容"></a>缩容</h3><p>现在我们删除6007，6008这一个小集群</p><p><strong>删除6008从节点</strong></p><pre class=" language-shell"><code class="language-shell">## 后面这节点id是6008的idsrc/redis-cli --cluster del-node 192.168.186.132:6008 87d4ff53c193c24ff7b6c6cdd33478531dd7fe1e</code></pre><p><strong>删除6007主节点</strong></p><p>删除主节点之前需要先把hash槽释放掉</p><pre class=" language-shell"><code class="language-shell"> src/redis-cli --cluster reshard 192.168.186.132:6007</code></pre><p><img src="https://blog-dm.oss-cn-shanghai.aliyuncs.com/articleimage/20210129144535.png"></p><p><img src="https://blog-dm.oss-cn-shanghai.aliyuncs.com/articleimage/20210129144643.png"></p><p>删除节点</p><pre class=" language-shell"><code class="language-shell">src/redis-cli --cluster del-node 192.168.186.132:6007 7e4da930cbbcccbb8656dbb5e1f5bead97f9f6ac</code></pre><p><img src="https://blog-dm.oss-cn-shanghai.aliyuncs.com/articleimage/20210129144908.png"></p><p>缩容成功</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 安装手册 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 安装 </tag>
            
            <tag> Linux </tag>
            
            <tag> Redis </tag>
            
            <tag> 分布式缓存 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Kafka生产实践与性能优化</title>
      <link href="/2021/01/25/kafka-sheng-chan-shi-jian-yu-xing-neng-you-hua/"/>
      <url>/2021/01/25/kafka-sheng-chan-shi-jian-yu-xing-neng-you-hua/</url>
      
        <content type="html"><![CDATA[<h2 id="Kafka如何保证消息不丢失"><a href="#Kafka如何保证消息不丢失" class="headerlink" title="Kafka如何保证消息不丢失"></a>Kafka如何保证消息不丢失</h2><p>首先要想保证全链路的消息不丢失，要从生产端和消费端来考虑</p><h3 id="生产端"><a href="#生产端" class="headerlink" title="生产端"></a>生产端</h3><p>控制参数ack的设置</p><ul><li>acks=0： 表示producer不需要等待任何broker确认收到消息的回复，就可以继续发送下一条消息。性能最高，但是最容易丢消息</li><li>acks=1： 至少要等待leader已经成功将数据写入本地log，但是不需要等待所有follower是否成功写入。就可以继续发送下一条消息。这种情况下，如果follower没有成功备份数据，而此时leader宕掉，消息会丢失</li><li>acks=-1或all： 这意味着leader需要等待所有备份(min.insync.replicas配置的备份个数)都成功写入日志，这种策略会保证只要有一个备份存活就不会丢失数据。<strong>min.insync.replicas必须保证大于1，等于1就和ack=1的情况一样</strong>。这时候消息基本不会丢失，是最强的数据保证。</li></ul><h3 id="消费端"><a href="#消费端" class="headerlink" title="消费端"></a>消费端</h3><p>消费端这边首先不能是自动提交，万一消费到数据还没处理完，就自动提交offset了，但是此时你consumer宕机，未处理完的数据丢失了。所以这里必须是手动提交才能最大程度的保证消息不丢失。</p><h2 id="消息重复消费"><a href="#消息重复消费" class="headerlink" title="消息重复消费"></a>消息重复消费</h2><h3 id="生产端-1"><a href="#生产端-1" class="headerlink" title="生产端"></a>生产端</h3><p>发送消息如果配置了重试机制，比如网络抖动时间过长导致发送端发送超时，实际broker可能已经接收到消息，但发送方会重新发送消息。消费者会多次消费消息。</p><h3 id="消费端-1"><a href="#消费端-1" class="headerlink" title="消费端"></a>消费端</h3><p>消费端这边配置的是自动提交，刚拉取了一批数据处理了一部分，但还没来得及提交，服务挂了，下次重启又会拉取相同的一批数据重复处理，出现了重复消费</p><p>解决重复消费可以再消费端通过<strong>消息幂等</strong>去做</p><h2 id="消息乱序问题"><a href="#消息乱序问题" class="headerlink" title="消息乱序问题"></a>消息乱序问题</h2><h3 id="生产端-2"><a href="#生产端-2" class="headerlink" title="生产端"></a>生产端</h3><p>生产端配置了异步发送，重试机制，可能会出现消息乱序。某一条消息由于网络抖动的原因没有发送成功，但它后面的消息发送成功了，由于重试机制发送失败的消息会再次发送，出现了消息乱序。</p><p>解决：可以用同步发送的模式去发消息，acks不能设置为0，这样也能保证消息发送的有序。</p><h3 id="消费端-2"><a href="#消费端-2" class="headerlink" title="消费端"></a>消费端</h3><p>将消息发送到同一个分区，然后用一个消费者去消费，保证了消费者消费顺序，不过性能较低。</p><p>性能低解决方案：可以在消费端增加几条内存队列(可以搞多个)，一个内存队列开启一个线程顺序处理消息。</p><h2 id="消息积压问题"><a href="#消息积压问题" class="headerlink" title="消息积压问题"></a>消息积压问题</h2><p>消息积压出现情况</p><ol><li>由于生产端生产消息与消费端消费速率不一致（消费者由于性能问题消费过慢）</li><li>消费组挂了一个消费者</li><li>消费端出现了bug导致消息一致重新消费</li></ol><p>如果积压了大量的消息在broker没有消费，要想紧急处理这一批消息，可以修改消费端程序，让其将收到的消息快速转发到其他topic(可以设置很多分区)，然后再启动多个消费者同时消费新主题的不同分区</p><p>由于消费端bug导致的消息积压，可以模拟死信队列实现方案，讲不成功的消息转移到死信队列，后续分析死信队列里面的消息解决消费端问题</p><h2 id="延时队列"><a href="#延时队列" class="headerlink" title="延时队列"></a>延时队列</h2><p>延时队列存储的对象是延时消息。延时消息是指消息被发送以后，并不想让消费者立刻获取，而是等待特定的时间后，消费者才能获取这个消息进行消费</p><p>实现方案：可以模拟RocketMQ的延时队列实现方案来实现。发送延时消息时先把消息按照不同的延迟时间段发送到指定的队列（topic_1s，topic_5s，topic_10s，…）；然后通过定时器进行轮训消费这些topic，查看消息是否到期，如果到期就把这个消息发送到具体的topic</p><h2 id="Kafka的事务"><a href="#Kafka的事务" class="headerlink" title="Kafka的事务"></a>Kafka的事务</h2><p>这里的事务和RocketMQ的事务消息是不一致的，Kafka的事务主要是保障一次发送多条消息的事务一致性(要么同时成功要么同时失败)；就是Kafka发送消息到不同的Topic里面去，保证同时发送成功或同时失败。</p><pre class=" language-java"><code class="language-java">Properties props <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Properties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> props<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"bootstrap.servers"</span><span class="token punctuation">,</span> <span class="token string">"localhost:9092"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> props<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"transactional.id"</span><span class="token punctuation">,</span> <span class="token string">"my-transactional-id"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> Producer<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> String<span class="token operator">></span> producer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">KafkaProducer</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span>props<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">StringSerializer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">StringSerializer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//初始化事务</span> producer<span class="token punctuation">.</span><span class="token function">initTransactions</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">try</span> <span class="token punctuation">{</span>     <span class="token comment" spellcheck="true">//开启事务</span>     producer<span class="token punctuation">.</span><span class="token function">beginTransaction</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">100</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>         <span class="token comment" spellcheck="true">//发到不同的主题的不同分区</span>         producer<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ProducerRecord</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token string">"hdfs-topic"</span><span class="token punctuation">,</span> Integer<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">,</span> Integer<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         producer<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ProducerRecord</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token string">"es-topic"</span><span class="token punctuation">,</span> Integer<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">,</span> Integer<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         producer<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ProducerRecord</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token string">"redis-topic"</span><span class="token punctuation">,</span> Integer<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">,</span> Integer<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span>     <span class="token comment" spellcheck="true">//提交事务</span>     producer<span class="token punctuation">.</span><span class="token function">commitTransaction</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">ProducerFencedException</span> <span class="token operator">|</span> OutOfOrderSequenceException <span class="token operator">|</span> AuthorizationException e<span class="token punctuation">)</span> <span class="token punctuation">{</span>     <span class="token comment" spellcheck="true">// We can't recover from these exceptions, so our only option is to close the producer and exit.</span>     producer<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">KafkaException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>     <span class="token comment" spellcheck="true">// For all other exceptions, just abort the transaction and try again.</span>     <span class="token comment" spellcheck="true">//回滚事务</span>     producer<span class="token punctuation">.</span><span class="token function">abortTransaction</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span> producer<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Kafka </tag>
            
            <tag> 生产实践 </tag>
            
            <tag> 消息队列 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Kafka基本使用及设计原理</title>
      <link href="/2021/01/23/kafka-ji-ben-shi-yong-ji-she-ji-yuan-li/"/>
      <url>/2021/01/23/kafka-ji-ben-shi-yong-ji-she-ji-yuan-li/</url>
      
        <content type="html"><![CDATA[<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>Kafka是一个分布式基于Zookeeper的分布式消息系统，支持多分区，多副本。是由Scala语言开发，现在是Apache基金会顶级开源项目。它有着高吞吐、低延迟的特性。这种特性主要应用于大数据场景，日志收集场景。不适合一些复杂的业务场景，复杂的业务场景不适合Kafka建议RocketMQ。</p><h2 id="Kafka基本概念"><a href="#Kafka基本概念" class="headerlink" title="Kafka基本概念"></a>Kafka基本概念</h2><h3 id="Broker"><a href="#Broker" class="headerlink" title="Broker"></a>Broker</h3><p>Kafka服务节点，可启动多个组成Broker集群，Broker基本信息都是存储在zookeeper，可以认为Broker集群是一个无状态的集群。</p><p>Broker主要职责：</p><ul><li>接收Producer和Consumer的请求，并把消息写进磁盘。Broker以Topic为基本单位划分成不同partition，消息存储在不同partition。</li><li>Broker可以保证同一个topic下的同一个partition消息是有序的。</li><li><strong>Broker中保存的数据是有有效期的，默认168小时，可以修改配置log.retention.hours调整</strong></li></ul><h3 id="Topic"><a href="#Topic" class="headerlink" title="Topic"></a>Topic</h3><p>Kafka根据Topic将消息进行分组，相当于逻辑分组，发送消息的时候需要指定Topic</p><h3 id="ConsumerGroup"><a href="#ConsumerGroup" class="headerlink" title="ConsumerGroup"></a>ConsumerGroup</h3><p>消费者组，每个Consumer都有一个指定的ConsumerGroup，一条消息只可以被一个ConsumerGroup中的一个Consumer消费。一条消息可以被不同的ConsumerGroup消费。根据这可以实现单播消息和多播消息。</p><h3 id="Partition"><a href="#Partition" class="headerlink" title="Partition"></a>Partition</h3><p>一个topic有多个partition,每个partition内部消息都是有序的。每个partition都有着自己的一个集群，并且有一个Leader对外提供读写请求，其余都是Follow不能提供读写请求只是同步Leader数据并且在Leader宕掉的情况下进行选举提升为Leader。</p><p>每个Topic下的数据是海量的。对于这批海量的数据为了减小服务器压力，可以建多个partition，而对于partition可以派分到不同的broker上面，而不同的broker在不同的服务器上。这样也就是把消息的压力分到了不同的服务器上面，减少服务器压力。</p><p>简而言之，topic可以进行partition分区主要可以<strong>提升并行度</strong>和<strong>分布式存储</strong>（将大体量的数据分区存储在不同服务器）。</p><h3 id="单播消息"><a href="#单播消息" class="headerlink" title="单播消息"></a>单播消息</h3><p>一条消息只能被一个消费者消费，让所有消费者在同一个消费组里面就可以了。</p><h3 id="多播消息"><a href="#多播消息" class="headerlink" title="多播消息"></a>多播消息</h3><p>一条消息能被多个消费者消费，多个消费者放在不同的消费组里面进行消费，这时多个消费者就都可以收到消息。</p><h2 id="消息日志"><a href="#消息日志" class="headerlink" title="消息日志"></a>消息日志</h2><p>消息发送在topic下面的某一个partition下。实际消息存储在commit log文件里面，<strong>每个partition，都对应一个commit log文件</strong>，每一条消息都有一个唯一编号<strong>offset</strong>。存储结构是每一个Topic下面是多个partition文件，每一个文件里面存储着一个message消息序列，是一个offset数组。</p><p>每个Consumer是基于自己在commit log的消息进度来工作的，消息消费的offset是由Consumer自己来维护的(其实是ConsumerGroup来维护的，这里也可以看出每一个消费组里面的消息者只能消费一次消息)。指定offset可以消费特定的消息，也可以消费重复的消息（消息没有删除的情况下）。</p><p>从这也可以看出<strong>Consumer对Kafka集群的影响基本没有</strong>。</p><p>下面具体看一下Topic下面的日志情况</p><p><img src="https://blog-dm.oss-cn-shanghai.aliyuncs.com/articleimage/20210124143725.png"></p><p>进入my-repl-topic 0 分区下</p><p><img src="https://blog-dm.oss-cn-shanghai.aliyuncs.com/articleimage/image-20210124144757309.png"></p><p>Kafka 一个topic下一个分区的消息存储在一个文件夹下，文件夹命名为topic名字+分区号。消息在分区内是分段存储的，每段消息是存储在不一样的log文件下，每段日志消息规定不超过1G,方便kafka把log文件加载到内存去运算。</p><p>从这我们可以看出一个topic分区下又4个文件,主要是 *.index, *.log, *.timeindex</p><ul><li>*.log：消息存储文件 主要存offset和消息体</li><li>*.index：部分消息的索引文件，kafka每次往分区写入了4k（可配置）的消息就会记录一条当前消息的offset进index文件，一般定位消息的offset就是在index下面快速定位然后在通过index里面存储的地址去log文件里面快速找到对应的消息消费</li><li>*.timeindex：消息的发送时间索引文件，和 index文件写入机制一样不过会比index文件多存储一个消息发送时间戳，如果需要按照时间来定位消息的offset会在timeindex里面去查找</li></ul><p>这几个文件的文件名命令规则就是这个日志段文件里包含的起始offset</p><p><strong>log.segment.bytes，限定了每个日志段文件的大小，最大就是 1GB</strong></p><h3 id="offset记录机制"><a href="#offset记录机制" class="headerlink" title="offset记录机制"></a>offset记录机制</h3><p>上面第一张图有50个consumer_offsets-*文件，从上面描述的topic名字+分区号命令就可以知道有个consumer_offsets主题</p><p>共50个分区（可配置），consumer会将自己消息的偏移量（offset）发送到这个topic下面，消息key是consumerGroupId+topic+分区号</p><p>value是当前offset的值，这样做的目的是抗高并发，扛不住也可以通过增加分区，增加机器来解决</p><p>默认50分区<strong>配置offsets.topic.num.partitions可修改分区数</strong></p><h2 id="Controller选举机制"><a href="#Controller选举机制" class="headerlink" title="Controller选举机制"></a>Controller选举机制</h2><p>这里的Controller叫做核心总控制器，是在broker层面的。它会选举一个broker为核心总控制器，负责管理整个集群中分区，副本的状态。</p><h3 id="如何选举？"><a href="#如何选举？" class="headerlink" title="如何选举？"></a>如何选举？</h3><p>这里的选举主要是依赖于zookeeper来进行的</p><ol><li>当一个broker启动时，会在zookeeper那创建一个/controller临时节点，zookeeper会保证只有一个创建成功，这个broker就是这个集群的Controller.</li><li>当这个Controller宕机了，zookeeper临时节点消失，其他broker会一直watch这个/controller节点，发现节点消失会重新竞争创建/controller节点，创建成功的就成为了新的Controller</li></ol><p><img src="https://blog-dm.oss-cn-shanghai.aliyuncs.com/articleimage/image-20210124153129683.png"></p><h3 id="职责"><a href="#职责" class="headerlink" title="职责"></a>职责</h3><table><thead><tr><th><strong>监听</strong></th><th><strong>监听zk路径</strong></th><th>职责</th></tr></thead><tbody><tr><td>BrokerChangeListener</td><td>/brokers/ids</td><td>broker增减的监听</td></tr><tr><td>TopicChangeListener</td><td>/brokers/topics</td><td>topic新建的监听</td></tr><tr><td>DeleteTopicListener</td><td>/admin/delete_topics</td><td>topic删除的监听</td></tr><tr><td>PartitionChangeListener</td><td>/brokers/topics/TOPIC_NAME</td><td>topic partition扩容的监听</td></tr><tr><td>IsrChangeNotificationListener</td><td>/isr_change_notification</td><td>partition isr 变动的监听</td></tr><tr><td>PreferredReplicaElectionListener</td><td>/admin/preferred_replica_election</td><td>partition leader的选举</td></tr></tbody></table><h2 id="Partition副本选举机制"><a href="#Partition副本选举机制" class="headerlink" title="Partition副本选举机制"></a>Partition副本选举机制</h2><p>controller感知到broker节点挂了，unclean.leader.election.enable配置分2种情况选leader</p><p><img src="https://blog-dm.oss-cn-shanghai.aliyuncs.com/articleimage/image-20210124154904026.png"></p><p>Replicas：某个partition在哪几个broker上存在备份</p><p>ISR(In Sync Replicas)：ISR是replicas的一个子集，它只列出当前还存活着的，并且已同步备份了该partition的节点。（replica.lag.time.max.ms 配置决定的，超过这个时间都没有跟leader同步过的一次的副本会被移出ISR列表）</p><ul><li>unclean.leader.election.enable=false：controller会从ISR列表中选出leader，ISR空的时候会等待，这个时候这个分区不可用</li><li>unclean.leader.election.enable=true：controller会从ISR列表中选出leader，ISR空的时候会从ISR以外的副本中选leader，但新leader数据可能落后太多</li></ul><h2 id="消费者Rebalance机制"><a href="#消费者Rebalance机制" class="headerlink" title="消费者Rebalance机制"></a>消费者Rebalance机制</h2><p>消费者reblance机制就是当一个消费者组里面的消费者发生了变化或者分区数发生了变化，为了让分区可以被消费，kafka会重新分配分区。</p><p><strong>reblance机制只适用于不指定分区消费的情况</strong></p><p><strong>reblance过程，消费者不会消费消息</strong></p><p>2个关键概念</p><p>组协调器GroupCoordinator：Broker，组协调器主要负责监控消费组里面的所有消费者的心跳，判断是否宕机，开始reblance</p><p>消费组协调器LeaderCoordinator：消费者，制定分区方案</p><h3 id="reblance流程"><a href="#reblance流程" class="headerlink" title="reblance流程"></a>reblance流程</h3><ol><li>选举组协调器：每个消费组都会选举一个broker作为自己的组协调器GroupCoordinator，消费组里面的每个消费者启动时都会向kafka集群中的某个broker发送FindCoordinatorRequest来找到自己的组协调器，组协调器选择是根据消费者偏移量发送到的分区的leader的broker节点，就是消费组提交的offset到consumer_offsets的某个分区，而这个分区的leader是哪个broker,那么这个broker就是这个消费组的组协调器。</li><li>加入消费组：找到组协调器后，当一个消费者加入消费组，消费者会向组协调器发送JoinGroupRequest，组协调器会从消费组中选择第一个加入消费组的消费者作为消费组协调器LeaderCoordinator，然后消费组协调器制定分区方案并发送给组协调器。</li><li>同步阶段：组协调器收到消费组协调器的分区方案，将分区方案下发给其他消费者，每个消费者根据分区方案进行消息消费。</li></ol><h3 id="分区策略"><a href="#分区策略" class="headerlink" title="分区策略"></a>分区策略</h3><p>主要有3种分区策略，range、round-robin、sticky</p><p>假设现有0-9  10个分区，消费组里有3个消费者</p><ul><li>range：按照分区序号排序，0,1,2,3给第一个；4,5,6给第二个；7,8,9给第3个</li><li>round-robin：轮询分配，0,3,6,9给第一个；1,4,7给第二个；2,5,8给第3个</li><li>sticky：初始时分配策略与round-robin类似，但是在rebalance的时候，需要保证如下两个原则<ol><li>分区的分配要尽可能均匀</li><li>分区的分配尽可能与上次分配的保持相同</li></ol></li></ul><h2 id="HW与LEO详解"><a href="#HW与LEO详解" class="headerlink" title="HW与LEO详解"></a>HW与LEO详解</h2><p>HW(HignWatermark)高水位：consumer最多只能消费到HW,每个分区副本都有自己的HW，都分别自己维护HW。</p><p>LEO（log-end-offset）：日志最后的偏移量，每个分区副本的LEO并不一定相同，Kafka会取多个副本中最小的LEO为HW.</p><p>这里简单介绍一下高水位同步过程</p><p>前提：假设某主题3副本，HW|LEO为3</p><ol><li>两条消息写到Leader，这时Leader的LEO增加2，Leader LEO为5；3个副本HW为3，这时候消费者消费不到新写入的2条消息，他们只能消费到HW的消息</li><li>Follower开始fetch消息，当2个Follower都fetch了一条消息此时Leader LEO为5;；3个副本HW为4；2个Follower LEO为4，此时消费者可以消息4这条消息不能消费5这条消息</li></ol><p><img src="https://blog-dm.oss-cn-shanghai.aliyuncs.com/articleimage/image-20210124160604864.png"></p><h2 id="分区数与吞吐量成正相关吗"><a href="#分区数与吞吐量成正相关吗" class="headerlink" title="分区数与吞吐量成正相关吗"></a>分区数与吞吐量成正相关吗</h2><p>答案是否，kafka有自己的压测工具，可以测试分区数不同，各种情况下的吞吐量</p><p>创建3个分区数不同的topic</p><pre class=" language-shell"><code class="language-shell">bin/kafka-topics.sh --zookeeper localhost:2181 --create --replication-factor 1 --partitions 10 --topic test-10bin/kafka-topics.sh --zookeeper localhost:2181 --create --replication-factor 1 --partitions 100 --topic test-100bin/kafka-topics.sh --zookeeper localhost:2181 --create --replication-factor 1 --partitions 1000 --topic test-1000</code></pre><pre class=" language-shell"><code class="language-shell"># 往test里发送一百万消息，每条设置1KB# throughput 用来进行限流控制，当设定的值小于 0 时不限流，当设定的值大于 0 时，当发送的吞吐量大于该值时就会被阻塞一段时间bin/kafka-producer-perf-test.sh --topic test --num-records 1000000 --record-size 1024 --throughput -1 --producer-props bootstrap.servers=192.168.186.131:9092 acks=1</code></pre><p><img src="https://blog-dm.oss-cn-shanghai.aliyuncs.com/articleimage/20210125190349.png"></p><p>从压测结果来看，分区数10 吞吐量30.07 MB/sec；分区数100 吞吐量60.47 MB/sec；分区数1000 吞吐量30.03 MB/sec；</p><p>到达某个值吞吐量反而开始下降，说明一味的增加分区数并不能使我们的吞吐量得到提升，需要经过实际测试确定Kafka一些参数的设置（包括分区数和buff缓冲区等等）</p><p>注意：如果分区数设置过大，比如设置10000，可能会设置不成功，后台会报错”java.io.IOException : Too many open files”。</p><p>这是一种常见的 Linux 系统错误，通常意味着文件描述符不足，它一般发生在创建线程、创建 Socket、打开文件这些场景下 。 在 Linux系统的默认设置下，这个文件描述符的个数不是很多 ，通过 ulimit -n 命令可以查看：一般默认是1024，可以将该值增大，比如：ulimit -n 65535</p><h2 id="kafka高性能的原因"><a href="#kafka高性能的原因" class="headerlink" title="kafka高性能的原因"></a>kafka高性能的原因</h2><ul><li>磁盘顺序读写：kafka消息不能修改以及不会从文件中间删除保证了磁盘顺序读，kafka的消息写入文件都是追加在文件末尾，不会写入文件中的某个位置(随机写)保证了磁盘顺序写。</li><li>数据传输的零拷贝</li><li>读写数据的批量batch处理以及压缩传输</li></ul><h2 id="Zookeeper与Kafka"><a href="#Zookeeper与Kafka" class="headerlink" title="Zookeeper与Kafka"></a>Zookeeper与Kafka</h2><p><img src="https://blog-dm.oss-cn-shanghai.aliyuncs.com/articleimage/image-20210124160645795.png"></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Kafka </tag>
            
            <tag> 消息队列 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>KafKa单机、集群、控制台搭建</title>
      <link href="/2021/01/19/kafka-dan-ji-yi-ji-ji-qun-da-jian/"/>
      <url>/2021/01/19/kafka-dan-ji-yi-ji-ji-qun-da-jian/</url>
      
        <content type="html"><![CDATA[<h2 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h2><p>java版本：1.8</p><p>操作系统：CentOS7</p><p>zookeeper：3.5.8</p><p>安装包：<a href="https://kafka.apache.org/downloads">https://kafka.apache.org/downloads</a></p><p>我这里选择的是kafka_2.11-2.4.1版本的KafKa，2.11是scala的版本，2.4.1是kafka的版本</p><h2 id="KafKa单机搭建"><a href="#KafKa单机搭建" class="headerlink" title="KafKa单机搭建"></a>KafKa单机搭建</h2><p>Kafka是用Scala语言开发，需要JVM环境，所以需要安装Java。</p><p>KafKa依赖zookeeper，所以需要安装zookeeper</p><p>对于zookeeper和Java环境的安装这里就不写了</p><h3 id="Kafka下载"><a href="#Kafka下载" class="headerlink" title="Kafka下载"></a>Kafka下载</h3><p>Kafka下载有多种方式，可以选择官网也可以选择镜像</p><ul><li><p>官网地址：<a href="https://kafka.apache.org/downloads">https://kafka.apache.org/downloads</a></p></li><li><p>镜像地址：<a href="https://mirror.bit.edu.cn/apache/kafka/2.4.1/kafka_2.11-2.4.1.tgz">https://mirror.bit.edu.cn/apache/kafka/2.4.1/kafka_2.11-2.4.1.tgz</a></p></li></ul><pre class=" language-shell"><code class="language-shell">## 镜像下载wget https://mirror.bit.edu.cn/apache/kafka/2.4.1/kafka_2.11-2.4.1.tgz## 解压tar -zxvf kafka_2.11-2.4.1.tgz -C  /## 软链接ln -s /kafka_2.11-2.4.1/ /kafkacd&nbsp;/kafka</code></pre><h3 id="配置修改"><a href="#配置修改" class="headerlink" title="配置修改"></a>配置修改</h3><pre class=" language-shell"><code class="language-shell">vim config/server.properties</code></pre><p>这里需要说几个关键配置</p><table><thead><tr><th>属性</th><th>默认值</th><th>解释</th></tr></thead><tbody><tr><td>broker.id</td><td>0</td><td>每个broker都可以用一个唯一的非负整数id进行标识；这个id可以作为broker的“名字”，你可以选择任意你喜欢的数字作为id，只要id是唯一的即可</td></tr><tr><td>log.dirs</td><td>/tmp/kafka-logs</td><td>kafka存放数据的路径。这个路径并不是唯一的，可以是多个，路径之间只需要使用逗号分隔即可；每当创建新partition时，都会选择在包含最少partitions的路径下进行</td></tr><tr><td>listeners</td><td>PLAINTEXT://:9092</td><td>server接受客户端连接的端口，ip配置kafka本机ip即可</td></tr><tr><td>zookeeper.connect</td><td>localhost:2181</td><td>zooKeeper连接字符串的格式为：hostname:port，此处hostname和port分别是ZooKeeper集群中某个节点的host和port；zookeeper如果是集群，连接方式为hostname1:port1, hostname2:port2, hostname3:port3</td></tr><tr><td>log.retention.hours</td><td>168</td><td>每个日志文件删除之前保存的时间。默认数据保存时间对所有topic都一样</td></tr><tr><td>num.partitions</td><td>1</td><td>创建topic的默认分区数</td></tr><tr><td>default.replication.factor</td><td>1</td><td>自动创建topic的默认副本数量，建议设置为大于等于2</td></tr><tr><td>min.insync.replicas</td><td>1</td><td>当producer设置acks为-1时，min.insync.replicas指定replicas的最小数目（必须确认每一个repica的写数据都是成功的），如果这个数目没有达到，producer发送消息会产生</td></tr><tr><td>delete.topic.enable</td><td>false</td><td>是否允许删除主题</td></tr></tbody></table><p>简版：</p><pre class=" language-shell"><code class="language-shell">#broker.id属性在kafka集群中必须要是唯一broker.id=0#kafka部署的机器ip和提供服务的端口号listeners=PLAINTEXT://192.168.186.131:9092#kafka的消息存储文件log.dir=/usr/local/data/kafka‐logs#kafka连接zookeeper的地址zookeeper.connect=localhost:2181</code></pre><h3 id="启动服务"><a href="#启动服务" class="headerlink" title="启动服务"></a>启动服务</h3><pre class=" language-shell"><code class="language-shell">## -daemon 表示后台启动bin/kafka-server-start.sh -daemon config/server.properties</code></pre><p>后台启动日志会打印在logs目录的server.log</p><h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><p>主题创建一个名字为“test”的Topic，partition=1，备份因子=1</p><pre class=" language-shell"><code class="language-shell">bin/kafka-topics.sh --create --zookeeper localhost:2181 --replication-factor 1 --partitions 1 --topic test</code></pre><p>发送消息</p><pre class=" language-shell"><code class="language-shell">bin/kafka-console-producer.sh --broker-list 192.168.186.131:9092 --topic test## 命令中输入要发送的消息的内容</code></pre><p>消费Topic为test的消息</p><pre class=" language-shell"><code class="language-shell">bin/kafka-console-consumer.sh --bootstrap-server 192.168.186.131:9092 --topic test</code></pre><h2 id="KafKa集群搭建"><a href="#KafKa集群搭建" class="headerlink" title="KafKa集群搭建"></a>KafKa集群搭建</h2><p>与单机搭建基本一致，主要改一下配置文件</p><p>我们有3个配置文件server.properties，server-1.properties，server-2.properties</p><p>server-1.properties:</p><pre class=" language-shell"><code class="language-shell">#broker.id属性在kafka集群中必须要是唯一broker.id=1#kafka部署的机器ip和提供服务的端口号listeners=PLAINTEXT://192.168.186.131:9093log.dir=/data/kafka/kafka‐logs‐1#kafka连接zookeeper的地址，要把多个kafka实例组成集群，对应连接的zookeeper必须相同zookeeper.connect=localhost:2181</code></pre><p>server-2.properties:</p><pre class=" language-shell"><code class="language-shell">#broker.id属性在kafka集群中必须要是唯一broker.id=2#kafka部署的机器ip和提供服务的端口号listeners=PLAINTEXT://192.168.186.131:9094log.dir=/data/kafka/kafka‐logs‐2#kafka连接zookeeper的地址，要把多个kafka实例组成集群，对应连接的zookeeper必须相同zookeeper.connect=localhost:2181</code></pre><p>启动</p><pre class=" language-shell"><code class="language-shell">bin/kafka‐server‐start.sh&nbsp;‐daemon&nbsp;config/server‐1.propertiesbin/kafka‐server‐start.sh&nbsp;‐daemon&nbsp;config/server‐2.properties</code></pre><h2 id="Kafka客户端常用命令"><a href="#Kafka客户端常用命令" class="headerlink" title="Kafka客户端常用命令"></a>Kafka客户端常用命令</h2><p>创建一个新的topic，副本数设置为3，分区数设置为2</p><pre class=" language-shell"><code class="language-shell">bin/kafka-topics.sh --create --zookeeper localhost:2181 --replication-factor 3 --partitions 2 --topic my-repl-topic</code></pre><p>查看topic分区情况</p><pre class=" language-shell"><code class="language-shell">bin/kafka-topics.sh --describe --zookeeper localhost:2181 --topic my-repl-topic</code></pre><p>发消息</p><pre class=" language-shell"><code class="language-shell">bin/kafka-console-producer.sh --broker-list 192.168.186.131:9092,192.168.186.131:9093,192.168.186.131:9094 --topic my-repl-topic</code></pre><p>消费消息</p><pre class=" language-shell"><code class="language-shell">bin/kafka-console-consumer.sh --bootstrap-server 192.168.186.131:9092,192.168.186.131:9093,192.168.186.131:9094 --from-beginning --topic my-repl-topic</code></pre><h2 id="Kafka控制台搭建"><a href="#Kafka控制台搭建" class="headerlink" title="Kafka控制台搭建"></a>Kafka控制台搭建</h2><p>Kafka官方是没有开发自己的控制台。yahoo构建了一个Kafka控制台管理后台（CMAK）。这个管理工具可以查看Kafka集群的当前运行状态包括broker的状态</p><p>项目地址：<a href="https://github.com/yahoo/kafka-manager">https://github.com/yahoo/kafka-manager</a></p><p>如果觉得编译过程太复杂，可以这里直接下载然后直接走安装后面的步骤</p><p>下载链接：</p><p><a href="https://blog-dm.oss-cn-shanghai.aliyuncs.com/zip/cmak-3.0.0.5.zip">https://blog-dm.oss-cn-shanghai.aliyuncs.com/zip/cmak-3.0.0.5.zip</a>    （需要jdk11,否则报错）</p><p>jdk11没有安装的可以使用老版本的kafka-manager,以下链接为kafka-manager1.3.3.7的版本，测试kafka_2.11-2.4.1可正常使用</p><p><a href="https://blog-dm.oss-cn-shanghai.aliyuncs.com/zip/kafka-manager-1.3.3.7.zip">https://blog-dm.oss-cn-shanghai.aliyuncs.com/zip/kafka-manager-1.3.3.7.zip</a>  （jdk8版本可用）</p><h3 id="下载管理工具CMAK"><a href="#下载管理工具CMAK" class="headerlink" title="下载管理工具CMAK"></a>下载管理工具CMAK</h3><pre class=" language-shell"><code class="language-shell">## 下载wget https://github.com/yahoo/kafka-manager/archive/3.0.0.5.zip## 解压unzip CMAK-3.0.0.5.zip -d /</code></pre><h3 id="sbt编译"><a href="#sbt编译" class="headerlink" title="sbt编译"></a>sbt编译</h3><p>yum安装sbt：</p><p>这个后台管理工具和Kafka一样是scala语言编写需要编译</p><pre class=" language-shell"><code class="language-shell">curl https://bintray.com/sbt/rpm/rpm > bintray-sbt-rpm.repomv bintray-sbt-rpm.repo /etc/yum.repos.d/yum install sbt</code></pre><p>修改仓库地址：（sbt 默认下载库文件很慢）填上阿里云的镜像 </p><pre class=" language-shell"><code class="language-shell"> vim ~/.sbt/repositories</code></pre><p>文件内容：</p><pre class=" language-shell"><code class="language-shell">[repositories]  local  aliyun-nexus: https://maven.aliyun.com/nexus/content/groups/public/  jcenter: https://jcenter.bintray.com/  typesafe-ivy-releases: https://repo.typesafe.com/typesafe/ivy-releases/, [organization]/[module]/[revision]/[type]s/[artifact](-[classifier]).[ext], bootOnly  maven-central</code></pre><p>验证sbt安装成功</p><pre class=" language-shell"><code class="language-shell">sbt -version</code></pre><h3 id="编译CMAK（前身叫Kafka-manager）"><a href="#编译CMAK（前身叫Kafka-manager）" class="headerlink" title="编译CMAK（前身叫Kafka-manager）"></a>编译CMAK（前身叫Kafka-manager）</h3><pre class=" language-shell"><code class="language-shell">## 来到刚刚解压目录下执行./sbt clean dist## 编译如果还是不行报Download failed. Obtain the jar manually and place it at /root/.sbt/launchers/0.13.9/sbt-launch.jar## 可以修改解压目录下sbt编译文件下的http://repo.typesafe.com为https://repo.typesafe.com</code></pre><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><pre class=" language-shell"><code class="language-shell">## 重新解压编译后的代码unzip cmak-3.0.0.5.zip -d /ln -s /cmak-3.0.0.5/ /cmakcd /cmak## 修改配置文件vim conf/application.conf</code></pre><p>修改kafka-manager.zkhosts列表为自己的zk节点</p><pre class=" language-shell"><code class="language-shell">cmak.zkhosts="192.168.186.131:2181"  （3.0.0.5 - jdk11）cmak.zkhosts="192.168.186.131:2181" （1.3.3.7 - jdk8）</code></pre><h3 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h3><p>后台启动，日志存储nohup.out，默认端口9000，-Dhttp.port=9999可修改端口</p><pre class=" language-shell"><code class="language-shell">nohup bin/cmak -Dconfig.file=conf/application.conf &   （3.0.0.5 - jdk11）nohup bin/kafka-manager -Dconfig.file=conf/application.conf &   （1.3.3.7 - jdk8）</code></pre><p>打开：ip:9000</p><p><img src="https://blog-dm.oss-cn-shanghai.aliyuncs.com/articleimage/20210124030220.png"></p><p>添加一个集群</p><p><img src="https://blog-dm.oss-cn-shanghai.aliyuncs.com/articleimage/20210124030310.png"></p><p>主界面：</p><p><img src="https://blog-dm.oss-cn-shanghai.aliyuncs.com/articleimage/20210124030552.png"></p><p>Broker:</p><p><img src="https://blog-dm.oss-cn-shanghai.aliyuncs.com/articleimage/image-20210124141246214.png"></p><p>Topic列表:</p><p><img src="https://blog-dm.oss-cn-shanghai.aliyuncs.com/articleimage/image-20210124141303687.png"></p><p>Topic详情：</p><p><img src="https://blog-dm.oss-cn-shanghai.aliyuncs.com/articleimage/image-20210124141347466.png"></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 安装手册 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 安装 </tag>
            
            <tag> Linux </tag>
            
            <tag> 消息队列 </tag>
            
            <tag> KafKa </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>RocketMQ生产问题实践</title>
      <link href="/2021/01/12/rocketmq-sheng-chan-wen-ti/"/>
      <url>/2021/01/12/rocketmq-sheng-chan-wen-ti/</url>
      
        <content type="html"><![CDATA[<h2 id="RocketMQ如何保证消息不丢失"><a href="#RocketMQ如何保证消息不丢失" class="headerlink" title="RocketMQ如何保证消息不丢失"></a>RocketMQ如何保证消息不丢失</h2><p>RocketMQ的一个发送消息流程</p><p>生产者 =&gt; Broker =&gt; 消费者     Broker master =&gt; slave =&gt; 磁盘</p><ol><li>生产者发送消息给到Broker</li><li>Broker进行主从同步</li><li>Broker不管Master还是Slave进行刷盘操作</li><li>Broker将消息投递给消费者</li></ol><p>在上面4个步骤任何一个步骤都将会出现消息丢失的情况，当然别的MQ也会有同样的情况出现。其实还有第5种情况NameServer挂了。</p><p>下面针对这5种情况进行分析</p><h3 id="生产者发送消息"><a href="#生产者发送消息" class="headerlink" title="生产者发送消息"></a>生产者发送消息</h3><p>所有网络请求都是不可靠的，走网络请求都有一定的消息丢失的可能性。</p><p>同步发送是一个好办法，发送等Broker有应答了表示Broker接收成功进行下一步操作。</p><p>但这样有问题,我消息发送出去了，但本地代码执行异常了怎么办。或许有人说可以本地代码执行完成再去进行消息发送操作，但这样消息发送失败了怎么办。这些都有各种各样的问题。RocketMQ对于这些场景提供了事务消息的思路。</p><p>事务消息其实相当于给我们很多次反悔的操作。</p><h4 id="事务消息实现机制"><a href="#事务消息实现机制" class="headerlink" title="事务消息实现机制"></a>事务消息实现机制</h4><p><img src="https://blog-dm.oss-cn-shanghai.aliyuncs.com/articleimage/20210107112452.png"></p><p>步骤：</p><ol><li>发送方将half事务消息发送到broker</li><li>broker把消息持久化成功，向发送方返回ACK确认收到消息。</li><li>发送方开始执行本地事务</li><li>发送方根据本地事务执行结果向broker发送二次确认</li><li>broker收到发送方commit状态则将half事务消息标记为可投递，订阅方可以收到消息。。发送方rollback状态，则删除half事务消息。。如果步骤4的二次确认没有发送到broker则会过一段时间broker会对发送方进行消息回查，发送方收到消息回查，检查对应消息的本地事务执行结果。发送方根据回查结果继续步骤5。</li></ol><h4 id="Q-amp-A"><a href="#Q-amp-A" class="headerlink" title="Q&amp;A:"></a>Q&amp;A:</h4><p><strong>半事务消息发送失败怎么办？</strong></p><p>要想回答这个问题，首先得了解半事务消息有什么作用。半事务消息主要作用是一个探测功能，证明RocketMQ是可用的。如果没有启动事务消息我们通常的操作是执行本地然后发消息，这样就可能出现一个尴尬的情况，本地都执行成功了，写消息失败了。而引入了半事务消息机制，半事务消息写入失败，没事，我们这时一般认为MQ服务不可用，给要执行的本地代码一个标记，等MQ服务正常重新执行流程。</p><p><strong>本地事务执行失败怎么办？</strong></p><p>比如本地事务需要执行Mysql,刚好这时候Mysql宕了。我们一般可以把数据缓存起来，给Broker一个UNKNOW状态，等待Broker的回查，回查的时候吧缓存起来的数据继续执行本地事务。</p><h3 id="Broker主从同步"><a href="#Broker主从同步" class="headerlink" title="Broker主从同步"></a>Broker主从同步</h3><p>之前2m-2s-async集群的搭建方式其实是不推荐的，生产上一般是使用Dledger搭建集群。因为2m-2s有个生来就有的问题就是不会主从切换，主节点挂了从节点不会顶上去。直到RocketMQ4.5以后的版本才支持Dledger集群。</p><p>Dledger集群会托管CommitLog文件，所以不是像之前配置brokerRole解决主从同步数据丢失的情况。</p><h4 id="Dledger文件同步"><a href="#Dledger文件同步" class="headerlink" title="Dledger文件同步"></a>Dledger文件同步</h4><p>Dledger会通过两阶段提交解决文件同步问题，具体流程如下</p><p>数据同步会通过两个阶段，一个是uncommitted阶段，一个是commited阶段</p><ol><li>Leader Broker上的Dledger收到一条数据后，会标记为uncommitted状态，然后他通过自己的DledgerServer组件把这个uncommitted数据发给Follower Broker的DledgerServer组件</li><li>Follower Broker的DledgerServer收到uncommitted消息之后，必须返回一个ack给Leader Broker的Dledger。然后如果Leader Broker收到超过半数的Follower Broker返回的ack之后，就会把消息标记为committed状态</li><li>Leader Broker上的DledgerServer就会发送committed消息给Follower Broker上的DledgerServer，让他们把消息也标记为committed状态。这样，就基于Raft协议完成了两阶段的数据同步</li></ol><h3 id="Broker同步刷盘"><a href="#Broker同步刷盘" class="headerlink" title="Broker同步刷盘"></a>Broker同步刷盘</h3><p>RocketMQ的刷盘方式flushDiskType配置成同步刷盘就可以保证消息在刷盘过程中不会丢失了</p><h3 id="Broker投递消息"><a href="#Broker投递消息" class="headerlink" title="Broker投递消息"></a>Broker投递消息</h3><p>Broker投递消息本身就是看你的ack来解决的，只要不使用异步消费，一般消息是不会丢失的。但返回ack给broker的时候可能失败，下次就会再次消费消息，出现了重复消费的问题，下面会对重复消费进行解读。</p><h3 id="NameServer挂了"><a href="#NameServer挂了" class="headerlink" title="NameServer挂了"></a>NameServer挂了</h3><p>大家都知道RocketMQ是通过NameServer进行路由转发的，如果集群中所有NameServer都挂了怎么办。</p><p>在这种情况下，RocketMQ相当于整个服务都不可用了，那他本身肯定无法给我们保证消息不丢失了。我们只能自己设计一个降级方案来处理这个问题了。例如在订单系统中，如果多次尝试发送RocketMQ不成功，那就只能另外找给地方(Redis、文件或者内存等)把订单消息缓存下来，然后起一个线程定时的扫描这些失败的订单消息，尝试往RocketMQ发送。这样等RocketMQ的服务恢复过来后，就能第一时间把这些消息重新发送出去。</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>完整分析过后，整个RocketMQ消息零丢失的方案就是</p><ul><li>生产者使用事务消息机制</li><li>Broker配置同步刷盘+Dledger主从架构</li><li>消费者不要使用异步消费</li><li>整个MQ挂了之后准备降级方案</li></ul><h2 id="重复消费"><a href="#重复消费" class="headerlink" title="重复消费"></a>重复消费</h2><p>消费者消费消息的时候业务代码执行完毕正准备给Broker一个ack的时候突然就崩了，这时候ack没有给Broker,offset没有变，之前消费的消息一定会被再次消费，这样就带来了重复消费的问题。解决这种问题的根本就是通过一个全局唯一的编号，记录在Mysql中，消费了增加一条记录，消费前查询一下数据路有没有消费过这条消息。</p><h2 id="消息顺序"><a href="#消息顺序" class="headerlink" title="消息顺序"></a>消息顺序</h2><p>在有些业务场景下可能要保证消息的顺序性。比如消息之间有依赖关系，只有前一个消费过了，后一个才能消费。</p><h3 id="如何保证消息顺序"><a href="#如何保证消息顺序" class="headerlink" title="如何保证消息顺序"></a>如何保证消息顺序</h3><p>消息顺序有2种，全局有序，局部有序</p><ul><li>全局有序：整个MQ系统的所有消息严格按照队列先入先出顺序进行消费。</li><li>局部有序：部分消息有序</li></ul><p>在大部分的MQ业务场景，我们只需要能够保证局部有序</p><p>解决办法：</p><p>发送者发送消息时，会通过MessageQueue轮询的方式保证消息尽量均匀的分布到所有的MessageQueue上，而消费者也就同样需要从多个MessageQueue上消费消息。而MessageQueue是RocketMQ存储消息的最小单元，他们之间的消息都是互相隔离的，在这种情况下，是无法保证消息全局有序</p><p>局部有序：只需要将有序的一组消息都存入同一个MessageQueue里，这样MessageQueue的FIFO设计天生就可以保证这一组消息的有序。RocketMQ中，可以在发送者发送消息时指定一个MessageSelector对象，让这个对象来决定消息发入哪一个MessageQueue。这样就可以保证一组有序的消息能够发到同一个MessageQueue里。</p><p>全局有序：Topic配置成只有一个MessageQueue队列。这样天生就能保证消息全局有序了</p><h2 id="消息积压问题"><a href="#消息积压问题" class="headerlink" title="消息积压问题"></a>消息积压问题</h2><p>在正常情况下，使用MQ都会要尽量保证他的消息生产速度和消费速度整体上是平衡的，但是如果部分消费者系统出现故障，就会造成大量的消息积累。这类问题通常在实际工作中会出现得比较隐蔽。由于网络波动或数据库故障等情况，会导致消息大量的积累。这在一些大型的互联网项目中，消息积压的速度是相当恐怖的。所以消息积压是个需要时时关注的问题。</p><h3 id="如何处理消息积压问题"><a href="#如何处理消息积压问题" class="headerlink" title="如何处理消息积压问题"></a>如何处理消息积压问题</h3><p>如果Topic下的MessageQueue配置得是足够多的，那每个Consumer实际上会分配多个MessageQueue来进行消费。这个时候，就可以简单的通过增加Consumer的服务节点数量来加快消息的消费，等积压消息消费完了，再恢复成正常情况。最极限的情况是把Consumer的节点个数设置成跟MessageQueue的个数相同。但是如果此时再继续增加Consumer的服务节点就没有用了。<br>而如果Topic下的MessageQueue配置得不够多的话，那就不能用上面这种增加Consumer节点个数的方法了。这时怎么办呢？ 这时如果要快速处理积压的消息，可以创建一个新的Topic，配置足够多的MessageQueue。然后把所有消费者节点的目标Topic转向新的Topic，并紧急上线一组新的消费者，只负责消费旧Topic中的消息，并转储到新的Topic中，这个速度是可以很快的。然后在新的Topic上，就可以通过增加消费者个数来提高消费速度了。之后再根据情况恢复成正常情况。</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 生产实践 </tag>
            
            <tag> 消息队列 </tag>
            
            <tag> RocketMQ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>RocketMQ整体理解和消息样例</title>
      <link href="/2021/01/04/rocketmq-zheng-ti-li-jie-he-xiao-xi-yang-li/"/>
      <url>/2021/01/04/rocketmq-zheng-ti-li-jie-he-xiao-xi-yang-li/</url>
      
        <content type="html"><![CDATA[<h2 id="RocketMQ架构设计"><a href="#RocketMQ架构设计" class="headerlink" title="RocketMQ架构设计"></a>RocketMQ架构设计</h2><p><img src="https://blog-dm.oss-cn-shanghai.aliyuncs.com/articleimage/20210104103017.png"></p><p>在RocketMQ上主要分为4部分，Producer、Consumer、NameServer、Broker</p><ul><li>Producer：消息生产者，Producer通过NameServer拉取所有Broker集群，通过负载均衡择相对应的Broker进行消息投递。</li><li>Consumer：消息消费者，Consumer通过NameServer拉取所有Broker集群，通过pull和push2种模式对消息进行消费。</li><li>NameServer：NameServer是一个简化版的注册中心，无状态节点，主要主持Broker的动态注册与发现，功能主要包括对Broker的管理。接受Broker集群的注册信息并且保存下来作为路由信息的基本数据。然后提供心跳检测机制，检查Broker是否还存活。<strong>每个NameServer之间不进行通信，他们都存储了整个Broker集群的数据</strong></li><li>Broker：消息中转角色，负责存储消息，转发消息；为生产者，消费者提供服务。</li></ul><h2 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h2><h3 id="生产者组"><a href="#生产者组" class="headerlink" title="生产者组"></a>生产者组</h3><p>同一类Producer组成一个集合，这类Producer发送同一类消息且发送逻辑一致。如果发送的是事务消息且原始生产者在发送之后崩溃，则Broker服务器会联系同一生产者组的其他生产者实例以提交或回溯消费。</p><h3 id="消息生产者"><a href="#消息生产者" class="headerlink" title="消息生产者"></a>消息生产者</h3><p>消息生产者会把业务应用系统里产生的消息发送，到broker服务器。RocketMQ提供多种发送方式，<strong>同步发送、异步发送、顺序发送、单向发送</strong>。同步和异步方式均需要Broker返回确认信息，单向发送不需要。</p><h3 id="消费者组"><a href="#消费者组" class="headerlink" title="消费者组"></a>消费者组</h3><p>同一类Consumer组成一个集合，这类Consumer通常消费同一类消息且消费逻辑一致。</p><p>注：消费者组的消费者实例必须订阅完全相同的Topic。RocketMQ 支持两种消息模式：<strong>集群消费和广播消费</strong>。</p><ul><li>集群消费：相同消费者组的每个Consumer实例平均分摊消息。</li><li>广播消费：相同消费者组的每个Consumer实例都接收全量的消息。</li></ul><h3 id="消息消费者"><a href="#消息消费者" class="headerlink" title="消息消费者"></a>消息消费者</h3><p>负责消费消息，一般是后台系统负责异步消费。消息消费者会从Broker服务器拉取消息、并将其提供给应用程序。消息消费者提供了两种消费形式：<strong>拉取式消费、推动式消费</strong>。</p><ul><li>拉取式消费：通常主动调用Consumer的拉消息方法从Broker服务器拉消息、主动权由应用控制。一旦获取了批量消息，应用就会启动消费过程。</li><li>推动式消费：Broker收到数据后会主动推送给消费端，该消费模式一般实时性较高。推动式消费其底层就是对拉取式消费进行了一次封装，是长连接。</li></ul><h3 id="主题（Topic）"><a href="#主题（Topic）" class="headerlink" title="主题（Topic）"></a>主题（Topic）</h3><p>一类消息的集合，每个主题包含若干条消息，每条消息只能属于一个主题，是RocketMQ进行消息订阅的基本单位。</p><p>同一个Topic下的数据，会分片保存到不同的Broker上，而每一个分片单位，就叫做MessageQueue。MessageQueue是生产者发送消息与消费者消费消息的最小单位。</p><h3 id="服务器（Broker）"><a href="#服务器（Broker）" class="headerlink" title="服务器（Broker）"></a>服务器（Broker）</h3><p>消息中转角色，负责存储消息、转发消息。代理服务器在RocketMQ系统中负责接收从生产者发送来的消息并存储、同时为消费者的拉取请求作准备。代理服务器也存储消息相关的元数据，包括消费者组、消费进度偏移和主题和队列消息等。</p><h3 id="NameServer"><a href="#NameServer" class="headerlink" title="NameServer"></a>NameServer</h3><p>NameServer充当路由消息的提供者。Broker Server会在启动时向所有的NameServer注册自己的服务信息，并且后续通过心跳请求的方式保证这个服务信息的实时性。生产者或消费者能够通过NameServer查找各主题相应的Broker列表。</p><p><strong>多个NameServer实例组成无状态集群，相互独立，没有信息交换。这种特性也就意味着NameServer中任意的节点挂了，只要有一台服务节点正常，整个路由服务就不会有影响。</strong></p><h3 id="消息"><a href="#消息" class="headerlink" title="消息"></a>消息</h3><p>消息系统所传输信息的物理载体，生产和消费数据的最小单位，每条消息必须属于一个主题Topic。RocketMQ中每个消息拥有唯一的Message ID，且可以携带具有业务标识的Key。系统提供了通过Message ID和Key查询消息的功能。</p><p>并且Message上有一个为消息设置的标志，Tag标签。用于同一主题下区分不同类型的消息。来自同一业务单元的消息，可以根据不同业务目的在同一主题下设置不同标签。标签能够有效地保持代码的清晰度和连贯性，并优化RocketMQ提供的查询系统。消费者可以根据Tag实现对不同子主题的不同消费逻辑，实现更好的扩展性。</p><h2 id="Broker集群模式"><a href="#Broker集群模式" class="headerlink" title="Broker集群模式"></a>Broker集群模式</h2><p>集群在RocketMQ中分为2种，<strong>普通集群和Dledger高可用集群</strong>。Dledger高可用集群是在4.5版本后引入的高可用集群。</p><h3 id="普通集群"><a href="#普通集群" class="headerlink" title="普通集群"></a>普通集群</h3><p>普通集群会给每个节点分配一个固定的角色，master负责响应客户端的请求，并存储消息。slave则只负责对master的消息进行同步保存，并响应部分客户端的读请求。消息同步方式分为同步同步和异步同步。</p><p><strong>这种集群模式下各个节点的角色无法进行切换，也就是说，master节点挂了，这一组Broker就不可用了。</strong></p><h3 id="Dledger高可用集群"><a href="#Dledger高可用集群" class="headerlink" title="Dledger高可用集群"></a>Dledger高可用集群</h3><p>普通集群有个致命的缺点就是不能高可用。就是master一挂，集群就不可用了。Dledger集群为了解决高可用问题引入的一种技术。</p><p>在这个集群模式下如果master挂了会选举一个新的master提供服务。Dledger都是通过<strong>Raft协议</strong>解决的选举和副本同步问题。</p><h4 id="Dledger的职责"><a href="#Dledger的职责" class="headerlink" title="Dledger的职责"></a>Dledger的职责</h4><ol><li>接管Broker的CommitLog消息存储</li><li>从集群中选举出master节点</li><li>完成master节点往slave节点的消息同步</li></ol><h4 id="Dledger选举"><a href="#Dledger选举" class="headerlink" title="Dledger选举"></a>Dledger选举</h4><p>Dledger是使用Raft算法来进行节点选举</p><p>每个节点有三个状态，leader，follower和candidate。正常运行的情况下，集群中会有一个leader，其他都是follower，而客户端的请求全部由leader处理，即使有客户端请求到了一个follower，也会将请求转发到leader。</p><p>集群启动阶段：</p><p>集群刚启动时，每个节点都是follower状态，之后集群内部会发送一个timeout信号，所有follower就转成candidate去拉取选票，获得大多数选票的节点选为leader，其他候选人转为follower。如果一个timeout信号发出时，没有选出leader，将会重新开始一次新的选举。而Leader节点会往其他节点发送心跳信号，确认他的leader状态</p><p>集群运行阶段：</p><p>集群启动后每个节点都会启动一个定时器，一段时间没有收到leader心跳，就转化为candidate状态。然后向其他成员发起投票请求，如果收到半数以上成员的投票，则Candidate会晋升为leader。然后leader也有可能会退化成follower。</p><h3 id="Dledger多副本消息同步"><a href="#Dledger多副本消息同步" class="headerlink" title="Dledger多副本消息同步"></a>Dledger多副本消息同步</h3><p>数据同步会通过两个阶段，一个是uncommitted阶段，一个是commited阶段。</p><ol><li><p>Leader Broker上的Dledger收到一条数据后，会标记为uncommitted状态，然后他通过自己的DledgerServer组件把这个uncommitted数据发给Follower Broker的DledgerServer组件。</p></li><li><p>Follower Broker的DledgerServer收到uncommitted消息之后，必须返回一个ack给Leader Broker的Dledger。然后如果Leader Broker收到超过半数的Follower Broker返回的ack之后，就会把消息标记为committed状态。</p></li><li><p>Leader Broker上的DledgerServer就会发送committed消息给Follower Broker上的DledgerServer，让他们把消息也标记为committed状态。</p></li></ol><p>这样，就基于Raft协议完成了两阶段的数据同步。</p><h2 id="消息存储"><a href="#消息存储" class="headerlink" title="消息存储"></a>消息存储</h2><p>分布式消息中间件为了保证性能，读写操作基本都是通过内存来操作的，内存操作在服务器宕机的情况下就存在消息丢失的情况。这时候我们肯定是对消息会进行持久化的。而持久化MQ一般都是采用的文件存储。</p><h3 id="磁盘文件读写（顺序写，零拷贝）"><a href="#磁盘文件读写（顺序写，零拷贝）" class="headerlink" title="磁盘文件读写（顺序写，零拷贝）"></a>磁盘文件读写（顺序写，零拷贝）</h3><p>文件存储必然带来的问题就是性能问题，文件存储性能一般而言都不高。但是RocketMQ大家都知道性能是很好的，是可以支持到百万级QPS的。它的优良性能是顺序写和零拷贝带来的。</p><ol><li><p>顺序写：目前的高性能磁盘，顺序写速度可以达到600MB/s， 超过了一般网卡的传输速度。但是磁盘随机写的速度只有大概100KB/s，和顺序写的性能相差6000倍！因为有如此巨大的速度差别，好的消息队列系统会比普通的消息队列系统速度快多个数量级。RocketMQ的消息用顺序写,保证了消息存储的速度。RocketMQ会提前分配1个G的磁盘空间给commitLog.之后生产者发送的消息直接分配到这个commitLog上去。这就是顺序写。</p></li><li><p>零拷贝：Linux操作系统分为用户态和内核态。IO操作不可避免的都会涉及到这2种状态的切换。</p><p>假设一台服务器发送了一条数据给客户端，通常会进行4次数据复制。</p><ol><li>从磁盘文件复制数据到内核态内存</li><li>从内核态内存复制数据到用户态客户端的内存上，如果是Java就是JVM虚拟内存</li><li>从用户态客户端内存复制数据到内核态内存</li><li>最后从网络驱动的内核态内存复制到网卡中进行传输。</li></ol><p><img src="https://blog-dm.oss-cn-shanghai.aliyuncs.com/articleimage/20210111164005.png"></p><p>而RocketMQ中用来mmap技术，不在将文件复制到用户内存中去。直接将内核内存进行映射。而这种零拷贝技术有一个限制，一次只能映射1.5~2G 的文件至用户态的虚拟内存，这也是为何RocketMQ默认设置单个CommitLog日志数据文件为1G的原因了</p><p><img src="https://blog-dm.oss-cn-shanghai.aliyuncs.com/articleimage/20210111164032.png"></p></li></ol><h3 id="消息结构"><a href="#消息结构" class="headerlink" title="消息结构"></a>消息结构</h3><p>RocketMQ消息的存储分为三个部分：commitlog、consumerqueue、index</p><ul><li>commitlog：生产者发送的消息存入到commitlog，commitlog有多个文件，每个文件固定大小1G。以第一条消息的偏移量为文件名。</li><li>consumerqueue：consumerqueue文件夹下是按Topic来分的，一个Topic一个文件夹。topic文件夹下是按队列来分的，一个队列一个文件夹。队列文件记录当前队列被哪些消费者组消费到了哪一条commitlog,记录的commitlog中的索引。</li><li>index：为了消息查询提供了一种通过key或时间区间来查询消息的方法</li></ul><p><img src="https://blog-dm.oss-cn-shanghai.aliyuncs.com/articleimage/20210111165049.png"></p><h2 id="消息主从复制"><a href="#消息主从复制" class="headerlink" title="消息主从复制"></a>消息主从复制</h2><p>Broker以集群启动必然包含一个功能便是主从复制方式。RocketMQ消息复制得方式有2个,同步复制和异步复制。</p><h3 id="同步复制"><a href="#同步复制" class="headerlink" title="同步复制"></a>同步复制</h3><p>同步复制就是等Master和Slave全部写入消息成功，反馈给客户端消息写入成功。</p><p>优势：数据更加完整，Slave有全部的数据备份，即使Master挂了也没事。</p><p>劣势：会增加数据写入延迟，降低系统吞吐量。</p><h3 id="异步复制"><a href="#异步复制" class="headerlink" title="异步复制"></a>异步复制</h3><p>异步复制只要Master复制成功直接返回客户端消息写入成功，然后异步复制消息给Slave</p><p>优势：数据写入延迟低，系统吞吐量高。</p><p>劣势：消息丢失可能性高。Master节点故障，可能会有数据没有同步到Slave,导致消息丢失。</p><h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><p>消息复制方式是通过Broker配置文件里的brokerRole参数进行设置的，这个参数可以被设置成ASYNC_MASTER、 SYNC_MASTER、SLAVE三个值中的一个</p><h2 id="消息刷盘机制"><a href="#消息刷盘机制" class="headerlink" title="消息刷盘机制"></a>消息刷盘机制</h2><p>上面有副本同步方式，但只涉及到消息到服务端，此时消息并没有写入磁盘，写磁盘与另一个刷盘机制有关。</p><h3 id="同步刷盘"><a href="#同步刷盘" class="headerlink" title="同步刷盘"></a>同步刷盘</h3><p>在返回写成功状态时，消息已经被写入磁盘。</p><p>具体流程是，消息写入内存的PAGECACHE后，立刻通知刷盘线程刷盘， 然后等待刷盘完成，刷盘线程执行完成后唤醒等待的线程，返回消息写成功的状态。</p><p>优势：数据更加完整，Slave有全部的数据备份，即使Master挂了也没事。</p><p>劣势：会增加数据写入延迟，降低系统吞吐量。</p><h3 id="异步刷盘"><a href="#异步刷盘" class="headerlink" title="异步刷盘"></a>异步刷盘</h3><p>在返回写成功状态时，消息可能只是被写入了内存的PAGECACHE，写操作的返回快，吞吐量大；当内存里的消息量积累到一定程度时，统一触发写磁盘动作，快速写入。</p><p>优势：数据写入延迟低，系统吞吐量高。</p><p>劣势：消息丢失可能性高。Master节点故障，可能会有数据没有同步到Slave,导致消息丢失。</p><h3 id="配置-1"><a href="#配置-1" class="headerlink" title="配置"></a>配置</h3><p>消息复制方式是通过Broker配置文件里的flushDiskType参数进行设置的，这个参数可以被设置成ASYNC_FLUSH：异步刷盘</p><p>SYNC_FLUSH：同步刷盘。</p><h2 id="生产者发送方式"><a href="#生产者发送方式" class="headerlink" title="生产者发送方式"></a>生产者发送方式</h2><h3 id="同步发送（等待消息返回继续操作）"><a href="#同步发送（等待消息返回继续操作）" class="headerlink" title="同步发送（等待消息返回继续操作）"></a>同步发送（等待消息返回继续操作）</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> MQClientException<span class="token punctuation">,</span> UnsupportedEncodingException<span class="token punctuation">,</span> RemotingException<span class="token punctuation">,</span> InterruptedException<span class="token punctuation">,</span> MQBrokerException <span class="token punctuation">{</span>    DefaultMQProducer producer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DefaultMQProducer</span><span class="token punctuation">(</span><span class="token string">"sync_msg_simple_group"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    producer<span class="token punctuation">.</span><span class="token function">setNamesrvAddr</span><span class="token punctuation">(</span><span class="token string">"xx.xx.xx.xx:9876"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    producer<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    String message <span class="token operator">=</span> <span class="token string">"Hello dm"</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        Message msg <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Message</span><span class="token punctuation">(</span><span class="token string">"TopicSync"</span><span class="token punctuation">,</span><span class="token string">"TagS"</span><span class="token punctuation">,</span><span class="token punctuation">(</span>message<span class="token operator">+</span>i<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span>RemotingHelper<span class="token punctuation">.</span>DEFAULT_CHARSET<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        SendResult sendResult <span class="token operator">=</span> producer<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%s%n"</span><span class="token punctuation">,</span> sendResult<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    producer<span class="token punctuation">.</span><span class="token function">shutdown</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h3 id="异步发送（消息发完直接进行后续操作，但会提供一个消息发送完成的回调方法）"><a href="#异步发送（消息发完直接进行后续操作，但会提供一个消息发送完成的回调方法）" class="headerlink" title="异步发送（消息发完直接进行后续操作，但会提供一个消息发送完成的回调方法）"></a>异步发送（消息发完直接进行后续操作，但会提供一个消息发送完成的回调方法）</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>    DefaultMQProducer producer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DefaultMQProducer</span><span class="token punctuation">(</span><span class="token string">"async_msg_simple_group"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    producer<span class="token punctuation">.</span><span class="token function">setNamesrvAddr</span><span class="token punctuation">(</span><span class="token string">"xx.xx.xx.xx:9876"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    producer<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//设置发送失败重试机制</span>    producer<span class="token punctuation">.</span><span class="token function">setRetryTimesWhenSendAsyncFailed</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    String message <span class="token operator">=</span> <span class="token string">"Hello dm async "</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> messageCount <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>    <span class="token keyword">final</span> CountDownLatch countDownLatch <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CountDownLatch</span><span class="token punctuation">(</span>messageCount<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> messageCount<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">final</span> <span class="token keyword">int</span> index <span class="token operator">=</span> i<span class="token punctuation">;</span>        Message msg <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Message</span><span class="token punctuation">(</span><span class="token string">"TopicTest"</span><span class="token punctuation">,</span><span class="token string">"TagSendOne"</span><span class="token punctuation">,</span><span class="token string">"OrderID188"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>message <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span>RemotingHelper<span class="token punctuation">.</span>DEFAULT_CHARSET<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//消息发送成功后，执行回调函数</span>        producer<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>msg<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">SendCallback</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onSuccess</span><span class="token punctuation">(</span>SendResult sendResult<span class="token punctuation">)</span> <span class="token punctuation">{</span>                countDownLatch<span class="token punctuation">.</span><span class="token function">countDown</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%-10d OK %s %n"</span><span class="token punctuation">,</span> index<span class="token punctuation">,</span> sendResult<span class="token punctuation">.</span><span class="token function">getMsgId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onException</span><span class="token punctuation">(</span>Throwable e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                countDownLatch<span class="token punctuation">.</span><span class="token function">countDown</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%-10d Exception %s %n"</span><span class="token punctuation">,</span> index<span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    countDownLatch<span class="token punctuation">.</span><span class="token function">await</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> TimeUnit<span class="token punctuation">.</span>SECONDS<span class="token punctuation">)</span><span class="token punctuation">;</span>    producer<span class="token punctuation">.</span><span class="token function">shutdown</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h3 id="单向发送（消息发完就不管了）"><a href="#单向发送（消息发完就不管了）" class="headerlink" title="单向发送（消息发完就不管了）"></a>单向发送（消息发完就不管了）</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception<span class="token punctuation">{</span>    DefaultMQProducer producer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DefaultMQProducer</span><span class="token punctuation">(</span><span class="token string">"oneway_msg_simple_group"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    producer<span class="token punctuation">.</span><span class="token function">setNamesrvAddr</span><span class="token punctuation">(</span><span class="token string">"xx.xx.xx.xx:9876"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    producer<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    String message <span class="token operator">=</span> <span class="token string">"Hello dm oneway "</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        Message msg <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Message</span><span class="token punctuation">(</span><span class="token string">"TopicTest"</span><span class="token punctuation">,</span><span class="token string">"TagSendOne"</span><span class="token punctuation">,</span><span class="token string">"OrderID188"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>message <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span>RemotingHelper<span class="token punctuation">.</span>DEFAULT_CHARSET<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        producer<span class="token punctuation">.</span><span class="token function">sendOneway</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    producer<span class="token punctuation">.</span><span class="token function">shutdown</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h2 id="消费者消费方式"><a href="#消费者消费方式" class="headerlink" title="消费者消费方式"></a>消费者消费方式</h2><h3 id="推模式-消费者等待Broker把消息推送过来"><a href="#推模式-消费者等待Broker把消息推送过来" class="headerlink" title="推模式(消费者等待Broker把消息推送过来)"></a>推模式(消费者等待Broker把消息推送过来)</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> InterruptedException<span class="token punctuation">,</span> MQClientException <span class="token punctuation">{</span>    DefaultMQPushConsumer consumer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DefaultMQPushConsumer</span><span class="token punctuation">(</span><span class="token string">"msg_simple_group"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    consumer<span class="token punctuation">.</span><span class="token function">setNamesrvAddr</span><span class="token punctuation">(</span><span class="token string">"xx.xx.xx.xx:9876"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    consumer<span class="token punctuation">.</span><span class="token function">subscribe</span><span class="token punctuation">(</span><span class="token string">"TopicStudent"</span><span class="token punctuation">,</span> <span class="token string">"*"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    consumer<span class="token punctuation">.</span><span class="token function">registerMessageListener</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">MessageListenerConcurrently</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> ConsumeConcurrentlyStatus <span class="token function">consumeMessage</span><span class="token punctuation">(</span>List<span class="token operator">&lt;</span>MessageExt<span class="token operator">></span> msgs<span class="token punctuation">,</span> ConsumeConcurrentlyContext context<span class="token punctuation">)</span>           <span class="token punctuation">{</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span>MessageExt msg <span class="token operator">:</span> msgs<span class="token punctuation">)</span><span class="token punctuation">{</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>msg<span class="token punctuation">.</span><span class="token function">getBody</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">return</span> ConsumeConcurrentlyStatus<span class="token punctuation">.</span>CONSUME_SUCCESS<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    consumer<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h3 id="拉模式-消费者主动去Broker上拉取消息"><a href="#拉模式-消费者主动去Broker上拉取消息" class="headerlink" title="拉模式(消费者主动去Broker上拉取消息)"></a>拉模式(消费者主动去Broker上拉取消息)</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> MQClientException <span class="token punctuation">{</span>    DefaultMQPullConsumer consumer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DefaultMQPullConsumer</span><span class="token punctuation">(</span><span class="token string">"async_msg_simple_group"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    consumer<span class="token punctuation">.</span><span class="token function">setNamesrvAddr</span><span class="token punctuation">(</span><span class="token string">"xx.Xx.Xx.Xx:9876"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    consumer<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    Set<span class="token operator">&lt;</span>MessageQueue<span class="token operator">></span> mqs <span class="token operator">=</span> consumer<span class="token punctuation">.</span><span class="token function">fetchSubscribeMessageQueues</span><span class="token punctuation">(</span><span class="token string">"TopicSync"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>MessageQueue mq <span class="token operator">:</span> mqs<span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>err<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Consume from the queue: "</span> <span class="token operator">+</span> mq<span class="token punctuation">)</span><span class="token punctuation">;</span>        SINGLE_MQ<span class="token operator">:</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                PullResult pullResult <span class="token operator">=</span> consumer<span class="token punctuation">.</span><span class="token function">pullBlockIfNotFound</span><span class="token punctuation">(</span>mq<span class="token punctuation">,</span> null<span class="token punctuation">,</span> <span class="token function">getMessageQueueOffset</span><span class="token punctuation">(</span>mq<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">32</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>pullResult<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token function">putMessageQueueOffset</span><span class="token punctuation">(</span>mq<span class="token punctuation">,</span> pullResult<span class="token punctuation">.</span><span class="token function">getNextBeginOffset</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">switch</span> <span class="token punctuation">(</span>pullResult<span class="token punctuation">.</span><span class="token function">getPullStatus</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">case</span> FOUND<span class="token operator">:</span>                        List<span class="token operator">&lt;</span>MessageExt<span class="token operator">></span> messageExtList <span class="token operator">=</span> pullResult<span class="token punctuation">.</span><span class="token function">getMsgFoundList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token keyword">for</span> <span class="token punctuation">(</span>MessageExt m <span class="token operator">:</span> messageExtList<span class="token punctuation">)</span> <span class="token punctuation">{</span>                            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>m<span class="token punctuation">.</span><span class="token function">getBody</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token punctuation">}</span>                        <span class="token keyword">break</span><span class="token punctuation">;</span>                    <span class="token keyword">case</span> NO_MATCHED_MSG<span class="token operator">:</span>                        <span class="token keyword">break</span><span class="token punctuation">;</span>                    <span class="token keyword">case</span> NO_NEW_MSG<span class="token operator">:</span>                        <span class="token keyword">break</span> SINGLE_MQ<span class="token punctuation">;</span>                    <span class="token keyword">case</span> OFFSET_ILLEGAL<span class="token operator">:</span>                        <span class="token keyword">break</span><span class="token punctuation">;</span>                    <span class="token keyword">default</span><span class="token operator">:</span>                        <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    consumer<span class="token punctuation">.</span><span class="token function">shutdown</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h2 id="顺序消息"><a href="#顺序消息" class="headerlink" title="顺序消息"></a>顺序消息</h2><p>生产者往topic上面发送消息，消息会分配到不同的queue上，而且消费者消费消息也是一个队列取一个进行消费，这时候消费者消费消息就不是顺序的了，要想顺序消费就让它你想顺序的放在同一个队列上。消费者再注册MessageListenerOrderly，按队列消费，一个队列消费完在换下一个队列，这样消费就是顺序的。但是这样是局部有序，要想全局有序就让所有消息放在一个队列消费，但这样性能瓶颈会较大，一般局部有序就可以满足需求了。</p><h3 id="生产者"><a href="#生产者" class="headerlink" title="生产者"></a>生产者</h3><p>这里的逻辑就是通过订单编号对mqs(队列个数)进行取模，分配到队列上去。这样就是相同订单编号进入相同队列</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        DefaultMQProducer producer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DefaultMQProducer</span><span class="token punctuation">(</span><span class="token string">"ordered_group_name"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        producer<span class="token punctuation">.</span><span class="token function">setNamesrvAddr</span><span class="token punctuation">(</span><span class="token string">"xx.xx.xx.xx:9876"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        producer<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        String<span class="token punctuation">[</span><span class="token punctuation">]</span> tags <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token string">"TagA"</span><span class="token punctuation">,</span> <span class="token string">"TagC"</span><span class="token punctuation">,</span> <span class="token string">"TagD"</span><span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 订单列表</span>        List<span class="token operator">&lt;</span>OrderStep<span class="token operator">></span> orderList <span class="token operator">=</span> <span class="token function">buildOrders</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Date date <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        SimpleDateFormat sdf <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SimpleDateFormat</span><span class="token punctuation">(</span><span class="token string">"yyyy-MM-dd HH:mm:ss"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        String dateStr <span class="token operator">=</span> sdf<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span>date<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 加个时间前缀</span>            String body <span class="token operator">=</span> dateStr <span class="token operator">+</span> <span class="token string">" Hello RocketMQ "</span><span class="token operator">+</span> i <span class="token operator">+</span> <span class="token string">" "</span> <span class="token operator">+</span> orderList<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>            Message msg <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Message</span><span class="token punctuation">(</span><span class="token string">"TopicTest"</span><span class="token punctuation">,</span> tags<span class="token punctuation">[</span>i <span class="token operator">%</span> tags<span class="token punctuation">.</span>length<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">"KEY"</span> <span class="token operator">+</span> i<span class="token punctuation">,</span>                    body<span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span>RemotingHelper<span class="token punctuation">.</span>DEFAULT_CHARSET<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            SendResult sendResult <span class="token operator">=</span> producer<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>msg<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">MessageQueueSelector</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token annotation punctuation">@Override</span>                <span class="token keyword">public</span> MessageQueue <span class="token function">select</span><span class="token punctuation">(</span>List<span class="token operator">&lt;</span>MessageQueue<span class="token operator">></span> mqs<span class="token punctuation">,</span> Message msg<span class="token punctuation">,</span> Object arg<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    Long id <span class="token operator">=</span> <span class="token punctuation">(</span>Long<span class="token punctuation">)</span> arg<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//根据订单id选择发送queue</span>                    <span class="token keyword">long</span> index <span class="token operator">=</span> id <span class="token operator">%</span> mqs<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">return</span> mqs<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> index<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span> orderList<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getOrderId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//订单id</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>String<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">"SendResult status:%s, queueId:%d, body:%s"</span><span class="token punctuation">,</span>                    sendResult<span class="token punctuation">.</span><span class="token function">getSendStatus</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                    sendResult<span class="token punctuation">.</span><span class="token function">getMessageQueue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getQueueId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                    body<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        producer<span class="token punctuation">.</span><span class="token function">shutdown</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 生成模拟订单数据     */</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> List<span class="token operator">&lt;</span>OrderStep<span class="token operator">></span> <span class="token function">buildOrders</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        List<span class="token operator">&lt;</span>OrderStep<span class="token operator">></span> orderList <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span>OrderStep<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        OrderStep orderDemo <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">OrderStep</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        orderDemo<span class="token punctuation">.</span><span class="token function">setOrderId</span><span class="token punctuation">(</span>15103111039L<span class="token punctuation">)</span><span class="token punctuation">;</span>        orderDemo<span class="token punctuation">.</span><span class="token function">setDesc</span><span class="token punctuation">(</span><span class="token string">"创建"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        orderList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>orderDemo<span class="token punctuation">)</span><span class="token punctuation">;</span>        orderDemo <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">OrderStep</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        orderDemo<span class="token punctuation">.</span><span class="token function">setOrderId</span><span class="token punctuation">(</span>15103111065L<span class="token punctuation">)</span><span class="token punctuation">;</span>        orderDemo<span class="token punctuation">.</span><span class="token function">setDesc</span><span class="token punctuation">(</span><span class="token string">"创建"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        orderList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>orderDemo<span class="token punctuation">)</span><span class="token punctuation">;</span>        orderDemo <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">OrderStep</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        orderDemo<span class="token punctuation">.</span><span class="token function">setOrderId</span><span class="token punctuation">(</span>15103111039L<span class="token punctuation">)</span><span class="token punctuation">;</span>        orderDemo<span class="token punctuation">.</span><span class="token function">setDesc</span><span class="token punctuation">(</span><span class="token string">"付款"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        orderList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>orderDemo<span class="token punctuation">)</span><span class="token punctuation">;</span>        orderDemo <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">OrderStep</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        orderDemo<span class="token punctuation">.</span><span class="token function">setOrderId</span><span class="token punctuation">(</span>15103117235L<span class="token punctuation">)</span><span class="token punctuation">;</span>        orderDemo<span class="token punctuation">.</span><span class="token function">setDesc</span><span class="token punctuation">(</span><span class="token string">"创建"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        orderList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>orderDemo<span class="token punctuation">)</span><span class="token punctuation">;</span>        orderDemo <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">OrderStep</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        orderDemo<span class="token punctuation">.</span><span class="token function">setOrderId</span><span class="token punctuation">(</span>15103111065L<span class="token punctuation">)</span><span class="token punctuation">;</span>        orderDemo<span class="token punctuation">.</span><span class="token function">setDesc</span><span class="token punctuation">(</span><span class="token string">"付款"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        orderList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>orderDemo<span class="token punctuation">)</span><span class="token punctuation">;</span>        orderDemo <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">OrderStep</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        orderDemo<span class="token punctuation">.</span><span class="token function">setOrderId</span><span class="token punctuation">(</span>15103117235L<span class="token punctuation">)</span><span class="token punctuation">;</span>        orderDemo<span class="token punctuation">.</span><span class="token function">setDesc</span><span class="token punctuation">(</span><span class="token string">"付款"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        orderList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>orderDemo<span class="token punctuation">)</span><span class="token punctuation">;</span>        orderDemo <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">OrderStep</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        orderDemo<span class="token punctuation">.</span><span class="token function">setOrderId</span><span class="token punctuation">(</span>15103111065L<span class="token punctuation">)</span><span class="token punctuation">;</span>        orderDemo<span class="token punctuation">.</span><span class="token function">setDesc</span><span class="token punctuation">(</span><span class="token string">"完成"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        orderList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>orderDemo<span class="token punctuation">)</span><span class="token punctuation">;</span>        orderDemo <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">OrderStep</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        orderDemo<span class="token punctuation">.</span><span class="token function">setOrderId</span><span class="token punctuation">(</span>15103111039L<span class="token punctuation">)</span><span class="token punctuation">;</span>        orderDemo<span class="token punctuation">.</span><span class="token function">setDesc</span><span class="token punctuation">(</span><span class="token string">"推送"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        orderList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>orderDemo<span class="token punctuation">)</span><span class="token punctuation">;</span>        orderDemo <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">OrderStep</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        orderDemo<span class="token punctuation">.</span><span class="token function">setOrderId</span><span class="token punctuation">(</span>15103117235L<span class="token punctuation">)</span><span class="token punctuation">;</span>        orderDemo<span class="token punctuation">.</span><span class="token function">setDesc</span><span class="token punctuation">(</span><span class="token string">"完成"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        orderList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>orderDemo<span class="token punctuation">)</span><span class="token punctuation">;</span>        orderDemo <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">OrderStep</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        orderDemo<span class="token punctuation">.</span><span class="token function">setOrderId</span><span class="token punctuation">(</span>15103111039L<span class="token punctuation">)</span><span class="token punctuation">;</span>        orderDemo<span class="token punctuation">.</span><span class="token function">setDesc</span><span class="token punctuation">(</span><span class="token string">"购物车"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        orderList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>orderDemo<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> orderList<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@ToString</span>    <span class="token annotation punctuation">@Data</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">OrderStep</span> <span class="token punctuation">{</span>        <span class="token keyword">private</span> <span class="token keyword">long</span> orderId<span class="token punctuation">;</span>        <span class="token keyword">private</span> String desc<span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><h3 id="消费者"><a href="#消费者" class="headerlink" title="消费者"></a>消费者</h3><p>消费者这里主要改动了监听的方法，消费者注册了监听-MessageListenerOrderly，可以顺序消费每一条队列</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        DefaultMQPushConsumer consumer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DefaultMQPushConsumer</span><span class="token punctuation">(</span><span class="token string">"ordered_group_name"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        consumer<span class="token punctuation">.</span><span class="token function">setNamesrvAddr</span><span class="token punctuation">(</span><span class="token string">"xx.xx.xx.xx:9876"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">/**         * 设置消费位置         */</span>        consumer<span class="token punctuation">.</span><span class="token function">setConsumeFromWhere</span><span class="token punctuation">(</span>ConsumeFromWhere<span class="token punctuation">.</span>CONSUME_FROM_FIRST_OFFSET<span class="token punctuation">)</span><span class="token punctuation">;</span>        consumer<span class="token punctuation">.</span><span class="token function">subscribe</span><span class="token punctuation">(</span><span class="token string">"TopicTest"</span><span class="token punctuation">,</span> <span class="token string">"*"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        consumer<span class="token punctuation">.</span><span class="token function">registerMessageListener</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">MessageListenerOrderly</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            AtomicLong consumeTimes <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AtomicLong</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> ConsumeOrderlyStatus <span class="token function">consumeMessage</span><span class="token punctuation">(</span>List<span class="token operator">&lt;</span>MessageExt<span class="token operator">></span> msgs<span class="token punctuation">,</span>                                                       ConsumeOrderlyContext context<span class="token punctuation">)</span> <span class="token punctuation">{</span>                context<span class="token punctuation">.</span><span class="token function">setAutoCommit</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                Random random <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">for</span> <span class="token punctuation">(</span>MessageExt msg <span class="token operator">:</span> msgs<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token comment" spellcheck="true">// 可以看到每个queue有唯一的consume来消费, 订单对每个queue(分区)有序</span>                    <span class="token keyword">try</span> <span class="token punctuation">{</span>                        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"consumeThread="</span> <span class="token operator">+</span> Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">", queueId="</span> <span class="token operator">+</span> msg<span class="token punctuation">.</span><span class="token function">getQueueId</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">", content:"</span> <span class="token operator">+</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>msg<span class="token punctuation">.</span><span class="token function">getBody</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> RemotingHelper<span class="token punctuation">.</span>DEFAULT_CHARSET<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">UnsupportedEncodingException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                        e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span>                <span class="token keyword">try</span> <span class="token punctuation">{</span>                    <span class="token comment" spellcheck="true">//模拟业务逻辑处理中...</span>                    TimeUnit<span class="token punctuation">.</span>SECONDS<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span>random<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token keyword">return</span> ConsumeOrderlyStatus<span class="token punctuation">.</span>SUCCESS<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        consumer<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Consumer Started.%n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><h2 id="延迟消息"><a href="#延迟消息" class="headerlink" title="延迟消息"></a>延迟消息</h2><p>在其他的消息中间件中，对延迟消息都没有支持，只能通过其他的方法实现延迟队列，比如RabbitMQ一般通过TTL+死信或者延迟插件实现延迟队列。而RocketMQ原生支持延时队列,就是调用producer.send,消息不会直接发送出去而是会等待一段时间。不过开源版只支持18个级别；messageDelayLevel=1s 5s 10s 30s 1m 2m 3m 4m 5m<br>6m 7m 8m 9m 10m 20m 30m 1h 2h。商业版本是支持任意时刻的设置。</p><h3 id="生产者-1"><a href="#生产者-1" class="headerlink" title="生产者"></a>生产者</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>    DefaultMQProducer producer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DefaultMQProducer</span><span class="token punctuation">(</span><span class="token string">"ExampleConsumer"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    producer<span class="token punctuation">.</span><span class="token function">setNamesrvAddr</span><span class="token punctuation">(</span><span class="token string">"xx.xx.xx.xx:9876"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    producer<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> totalMessagesToSend <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> totalMessagesToSend<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        Message message <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Message</span><span class="token punctuation">(</span><span class="token string">"TestTopic"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token string">"Hello scheduled message "</span> <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//延时消费-设置延迟级别为6  2min</span>        message<span class="token punctuation">.</span><span class="token function">setDelayTimeLevel</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        producer<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"message send is completed .%n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    producer<span class="token punctuation">.</span><span class="token function">shutdown</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h2 id="广播消息"><a href="#广播消息" class="headerlink" title="广播消息"></a>广播消息</h2><p>集群消费模式下，每一条消息只会被一个消费组的一个消费者消费，而广播模式，是把消息发送给所有订阅了该Topic的消费者，不管消费者是不是同一个消费组。</p><h3 id="消费者-1"><a href="#消费者-1" class="headerlink" title="消费者"></a>消费者</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> InterruptedException<span class="token punctuation">,</span> MQClientException <span class="token punctuation">{</span>    DefaultMQPushConsumer consumer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DefaultMQPushConsumer</span><span class="token punctuation">(</span><span class="token string">"please_rename_unique_group_name_1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    consumer<span class="token punctuation">.</span><span class="token function">setNamesrvAddr</span><span class="token punctuation">(</span><span class="token string">"xx.xx.xx.xx:9876"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    consumer<span class="token punctuation">.</span><span class="token function">setConsumeFromWhere</span><span class="token punctuation">(</span>ConsumeFromWhere<span class="token punctuation">.</span>CONSUME_FROM_LAST_OFFSET<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 设置为广播消息</span>    consumer<span class="token punctuation">.</span><span class="token function">setMessageModel</span><span class="token punctuation">(</span>MessageModel<span class="token punctuation">.</span>BROADCASTING<span class="token punctuation">)</span><span class="token punctuation">;</span>    consumer<span class="token punctuation">.</span><span class="token function">subscribe</span><span class="token punctuation">(</span><span class="token string">"TopicTest"</span><span class="token punctuation">,</span> <span class="token string">"*"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    consumer<span class="token punctuation">.</span><span class="token function">registerMessageListener</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">MessageListenerConcurrently</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> ConsumeConcurrentlyStatus <span class="token function">consumeMessage</span><span class="token punctuation">(</span>List<span class="token operator">&lt;</span>MessageExt<span class="token operator">></span> msgs<span class="token punctuation">,</span>                                                        ConsumeConcurrentlyContext context<span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%s Receive New Messages: %s %n"</span><span class="token punctuation">,</span> Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> msgs<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> ConsumeConcurrentlyStatus<span class="token punctuation">.</span>CONSUME_SUCCESS<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    consumer<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Broadcast Consumer Started.%n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h2 id="批量消息"><a href="#批量消息" class="headerlink" title="批量消息"></a>批量消息</h2><p>批量消息是将多个消息组合成一条批量消息发送出去，是为了减少网络IO,提升系统吞吐量。</p><p>注意：官方对于批量消息大小的限制是1M，实际使用时，这个1MB的限制可以稍微扩大点，实际最大的限制是4194304字节，大概4MB。但是使用批量消息时，这个消息长度确实是必须考虑的一个问题。而且批量消息的使用是有一定限制的，这些消息应该有相同的Topic，相同的waitStoreMsgOK。而且不能是延迟消息、事务消息等。</p><h3 id="生产者-2"><a href="#生产者-2" class="headerlink" title="生产者"></a>生产者</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>    DefaultMQProducer producer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DefaultMQProducer</span><span class="token punctuation">(</span><span class="token string">"batch_group"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    producer<span class="token punctuation">.</span><span class="token function">setNamesrvAddr</span><span class="token punctuation">(</span><span class="token string">"xx.xx.xx.xx:9876"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    producer<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    String topic <span class="token operator">=</span> <span class="token string">"BatchTest"</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 模拟消息</span>    List<span class="token operator">&lt;</span>Message<span class="token operator">></span> messages <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    messages<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Message</span><span class="token punctuation">(</span>topic<span class="token punctuation">,</span> <span class="token string">"TagA"</span><span class="token punctuation">,</span> <span class="token string">"OrderID001"</span><span class="token punctuation">,</span> <span class="token string">"Hello world 0"</span><span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    messages<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Message</span><span class="token punctuation">(</span>topic<span class="token punctuation">,</span> <span class="token string">"TagA"</span><span class="token punctuation">,</span> <span class="token string">"OrderID002"</span><span class="token punctuation">,</span> <span class="token string">"Hello world 1"</span><span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    messages<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Message</span><span class="token punctuation">(</span>topic<span class="token punctuation">,</span> <span class="token string">"TagA"</span><span class="token punctuation">,</span> <span class="token string">"OrderID003"</span><span class="token punctuation">,</span> <span class="token string">"Hello world 2"</span><span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    ListSplitter splitter <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ListSplitter</span><span class="token punctuation">(</span>messages<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 对批量消息进行拆分</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>splitter<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            List<span class="token operator">&lt;</span>Message<span class="token operator">></span>  listItem <span class="token operator">=</span> splitter<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            producer<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>listItem<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    producer<span class="token punctuation">.</span><span class="token function">shutdown</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span></code></pre><p>消息拆分</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ListSplitter</span> <span class="token keyword">implements</span> <span class="token class-name">Iterator</span><span class="token operator">&lt;</span>List<span class="token operator">&lt;</span>Message<span class="token operator">>></span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 一个批量消息大小</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">int</span> SIZE_LIMIT <span class="token operator">=</span> <span class="token number">1000</span> <span class="token operator">*</span> <span class="token number">1000</span> <span class="token operator">*</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//1MB</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> List<span class="token operator">&lt;</span>Message<span class="token operator">></span> messages<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> currIndex<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">ListSplitter</span><span class="token punctuation">(</span>List<span class="token operator">&lt;</span>Message<span class="token operator">></span> messages<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>messages <span class="token operator">=</span> messages<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> currIndex <span class="token operator">&lt;</span> messages<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> List<span class="token operator">&lt;</span>Message<span class="token operator">></span> <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> nextIndex <span class="token operator">=</span> currIndex<span class="token punctuation">;</span>        <span class="token keyword">int</span> totalSize <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//遍历消息准备拆分</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span> nextIndex <span class="token operator">&lt;</span> messages<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> nextIndex<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            Message message <span class="token operator">=</span> messages<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>nextIndex<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> tmpSize <span class="token operator">=</span> message<span class="token punctuation">.</span><span class="token function">getTopic</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> message<span class="token punctuation">.</span><span class="token function">getBody</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>length<span class="token punctuation">;</span>            Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> String<span class="token operator">></span> properties <span class="token operator">=</span> message<span class="token punctuation">.</span><span class="token function">getProperties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span>Map<span class="token punctuation">.</span>Entry<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> String<span class="token operator">></span> entry <span class="token operator">:</span> properties<span class="token punctuation">.</span><span class="token function">entrySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                tmpSize <span class="token operator">+=</span> entry<span class="token punctuation">.</span><span class="token function">getKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> entry<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            tmpSize <span class="token operator">=</span> tmpSize <span class="token operator">+</span> <span class="token number">20</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//for log overhead</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>tmpSize <span class="token operator">></span> SIZE_LIMIT<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>nextIndex <span class="token operator">-</span> currIndex <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    nextIndex<span class="token operator">++</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>tmpSize <span class="token operator">+</span> totalSize <span class="token operator">></span> SIZE_LIMIT<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                totalSize <span class="token operator">+=</span> tmpSize<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        List<span class="token operator">&lt;</span>Message<span class="token operator">></span> subList <span class="token operator">=</span> messages<span class="token punctuation">.</span><span class="token function">subList</span><span class="token punctuation">(</span>currIndex<span class="token punctuation">,</span> nextIndex<span class="token punctuation">)</span><span class="token punctuation">;</span>        currIndex <span class="token operator">=</span> nextIndex<span class="token punctuation">;</span>        <span class="token keyword">return</span> subList<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="过滤消息"><a href="#过滤消息" class="headerlink" title="过滤消息"></a>过滤消息</h2><p>RocketMQ设计了很多种消息过滤方式，简单的一般可以用Tag进行过滤。复杂一点的可以使用参数过滤加SQL92.</p><p>消息过滤一般是在broker端进行过滤，性能上也是比较高的。</p><p>注意：推模式的消费者才可以使用SQL过滤，拉模式不可以</p><h3 id="SQL92语法"><a href="#SQL92语法" class="headerlink" title="SQL92语法"></a>SQL92语法</h3><ul><li>数值比较：比如：&gt;、&gt;=、&lt;、&lt;=、BETWEEN、=</li><li>字符比较：比如：=、&lt;&gt;、IN</li><li>空串判断：IS NULL 、 IS NOT NULL</li><li>逻辑符号：AND，OR，NOT；</li><li>常量支持类型为：<br>数值，比如：123，3.1415；<br>字符，比如：’abc’，必须用单引号包裹起来；<br>NULL，特殊的常量<br>布尔值，TRUE 或 FALSE</li></ul><h3 id="生产者-3"><a href="#生产者-3" class="headerlink" title="生产者"></a>生产者</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>    DefaultMQProducer producer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DefaultMQProducer</span><span class="token punctuation">(</span><span class="token string">"please_rename_unique_group_name"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    producer<span class="token punctuation">.</span><span class="token function">setNamesrvAddr</span><span class="token punctuation">(</span><span class="token string">"xx.xx.xx.xx:9876"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    producer<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    String<span class="token punctuation">[</span><span class="token punctuation">]</span> tags <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">{</span><span class="token string">"TagA"</span><span class="token punctuation">,</span> <span class="token string">"TagB"</span><span class="token punctuation">,</span> <span class="token string">"TagC"</span><span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">15</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        Message msg <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Message</span><span class="token punctuation">(</span><span class="token string">"SqlFilterTest"</span><span class="token punctuation">,</span>                                  tags<span class="token punctuation">[</span>i <span class="token operator">%</span> tags<span class="token punctuation">.</span>length<span class="token punctuation">]</span><span class="token punctuation">,</span>                                  <span class="token punctuation">(</span><span class="token string">"Hello RocketMQ "</span> <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span>RemotingHelper<span class="token punctuation">.</span>DEFAULT_CHARSET<span class="token punctuation">)</span>                                 <span class="token punctuation">)</span><span class="token punctuation">;</span>        msg<span class="token punctuation">.</span><span class="token function">putUserProperty</span><span class="token punctuation">(</span><span class="token string">"a"</span><span class="token punctuation">,</span> String<span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        SendResult sendResult <span class="token operator">=</span> producer<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%s%n"</span><span class="token punctuation">,</span> sendResult<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    producer<span class="token punctuation">.</span><span class="token function">shutdown</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h3 id="消费者-2"><a href="#消费者-2" class="headerlink" title="消费者"></a>消费者</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>    DefaultMQPushConsumer consumer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DefaultMQPushConsumer</span><span class="token punctuation">(</span><span class="token string">"please_rename_unique_group_name"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    consumer<span class="token punctuation">.</span><span class="token function">setNamesrvAddr</span><span class="token punctuation">(</span><span class="token string">"xx.xx.xx.xx:9876"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// SQL 过滤</span>    consumer<span class="token punctuation">.</span><span class="token function">subscribe</span><span class="token punctuation">(</span><span class="token string">"SqlFilterTest"</span><span class="token punctuation">,</span>                       MessageSelector<span class="token punctuation">.</span><span class="token function">bySql</span><span class="token punctuation">(</span><span class="token string">"(TAGS is not null and TAGS in ('TagA', 'TagB'))"</span> <span class="token operator">+</span>                                             <span class="token string">"and (a is not null and a between 0 and 3)"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    consumer<span class="token punctuation">.</span><span class="token function">registerMessageListener</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">MessageListenerConcurrently</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> ConsumeConcurrentlyStatus <span class="token function">consumeMessage</span><span class="token punctuation">(</span>List<span class="token operator">&lt;</span>MessageExt<span class="token operator">></span> msgs<span class="token punctuation">,</span>                                                        ConsumeConcurrentlyContext context<span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%s Receive New Messages: %s %n"</span><span class="token punctuation">,</span> Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> msgs<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> ConsumeConcurrentlyStatus<span class="token punctuation">.</span>CONSUME_SUCCESS<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    consumer<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Consumer Started.%n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>    </code></pre><h2 id="事务消息"><a href="#事务消息" class="headerlink" title="事务消息"></a>事务消息</h2><p>事务消息和延时消息一样都是RocketMQ特有的。事务消息官方解释是分布式系统中保持最终一致性的2阶段提交的消息实现。简单来说就是保证本地事务执行与发送消息到broker2个操作的原子性。</p><p>注：事务消息只保证消息发送者的本地事务与发消息这两个操作的原子性，因此，事务消息的只涉及到消息发送者。</p><h3 id="事务消息使用限制"><a href="#事务消息使用限制" class="headerlink" title="事务消息使用限制"></a><strong>事务消息使用限制</strong></h3><ol><li>事务消息不支持延迟消息和批量消息</li><li>为了避免单个消息被检查太多次而导致半队列消息累积，我们默认将单个消息的检查次数限制为15 次，但是用户可以通过 Broker 配置文件的 transactionCheckMax 参数来修改此限制。如果已经检查某条消息超过 N 次的话（ N = transactionCheckMax ） 则 Broker 将丢弃此消息，并在默认情况下同时打印错误日志。用户可以通过重写 AbstractTransactionCheckListener 类来修改这个行为</li><li>事务消息将在 Broker 配置文件中的参数 transactionMsgTimeout 这样的特定时间长度之后被检查。当发送事务消息时，用户还可以通过设置用户属性 CHECK_IMMUNITY_TIME_IN_SECONDS 来改变这个限制，该参数优先于 transactionMsgTimeout 参数</li><li>事务性消息可能不止一次被检查或消费</li><li>提交给用户的目标主题消息可能会失败，目前这依日志的记录而定。它的高可用性通过RocketMQ 本身的高可用性机制来保证，如果希望确保事务消息不丢失、并且事务完整性得到保证，建议使用同步的双重写入机制</li><li>事务消息的生产者 ID 不能与其他类型消息的生产者 ID 共享。与其他类型的消息不同，事务消息允许反向查询、MQ服务器能通过它们的生产者 ID 查询到消费者</li></ol><h3 id="实现机制"><a href="#实现机制" class="headerlink" title="实现机制"></a>实现机制</h3><p><img src="https://blog-dm.oss-cn-shanghai.aliyuncs.com/articleimage/20210107112452.png"></p><p>步骤：</p><ol><li>发送方将half事务消息发送到broker</li><li>broker把消息持久化成功，向发送方返回ACK确认收到消息。</li><li>发送方开始执行本地事务</li><li>发送方根据本地事务执行结果向broker发送二次确认</li><li>broker收到发送方commit状态则将half事务消息标记为可投递，订阅方可以收到消息。。发送方rollback状态，则删除half事务消息。。如果步骤4的二次确认没有发送到broker则会过一段时间broker会对发送方进行消息回查，发送方收到消息回查，检查对应消息的本地事务执行结果。发送方根据回查结果继续步骤5。</li></ol><h3 id="生产者代码"><a href="#生产者代码" class="headerlink" title="生产者代码"></a>生产者代码</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> MQClientException<span class="token punctuation">,</span> InterruptedException <span class="token punctuation">{</span>        TransactionListener transactionListener <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TransactionListenerImpl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        TransactionMQProducer producer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TransactionMQProducer</span><span class="token punctuation">(</span><span class="token string">"please_rename_unique_group_name"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        producer<span class="token punctuation">.</span><span class="token function">setNamesrvAddr</span><span class="token punctuation">(</span><span class="token string">"xx.xx.xx.Xx:9876"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ExecutorService executorService <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ThreadPoolExecutor</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">,</span> TimeUnit<span class="token punctuation">.</span>SECONDS<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">ArrayBlockingQueue</span><span class="token operator">&lt;</span>Runnable<span class="token operator">></span><span class="token punctuation">(</span><span class="token number">2000</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">ThreadFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> Thread <span class="token function">newThread</span><span class="token punctuation">(</span>Runnable r<span class="token punctuation">)</span> <span class="token punctuation">{</span>                Thread thread <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span><span class="token punctuation">;</span>                thread<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"client-transaction-msg-check-thread"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">return</span> thread<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        producer<span class="token punctuation">.</span><span class="token function">setExecutorService</span><span class="token punctuation">(</span>executorService<span class="token punctuation">)</span><span class="token punctuation">;</span>        producer<span class="token punctuation">.</span><span class="token function">setTransactionListener</span><span class="token punctuation">(</span>transactionListener<span class="token punctuation">)</span><span class="token punctuation">;</span>        producer<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        String<span class="token punctuation">[</span><span class="token punctuation">]</span> tags <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">{</span><span class="token string">"TagA"</span><span class="token punctuation">,</span> <span class="token string">"TagB"</span><span class="token punctuation">,</span> <span class="token string">"TagC"</span><span class="token punctuation">,</span> <span class="token string">"TagD"</span><span class="token punctuation">,</span> <span class="token string">"TagE"</span><span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                Message msg <span class="token operator">=</span>                    <span class="token keyword">new</span> <span class="token class-name">Message</span><span class="token punctuation">(</span><span class="token string">"TopicTest"</span><span class="token punctuation">,</span> tags<span class="token punctuation">[</span>i <span class="token operator">%</span> tags<span class="token punctuation">.</span>length<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">"KEY"</span> <span class="token operator">+</span> i<span class="token punctuation">,</span>                        <span class="token punctuation">(</span><span class="token string">"Hello RocketMQ "</span> <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span>RemotingHelper<span class="token punctuation">.</span>DEFAULT_CHARSET<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                SendResult sendResult <span class="token operator">=</span> producer<span class="token punctuation">.</span><span class="token function">sendMessageInTransaction</span><span class="token punctuation">(</span>msg<span class="token punctuation">,</span> null<span class="token punctuation">)</span><span class="token punctuation">;</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%s%n"</span><span class="token punctuation">,</span> sendResult<span class="token punctuation">)</span><span class="token punctuation">;</span>                Thread<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">MQClientException</span> <span class="token operator">|</span> UnsupportedEncodingException e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">100000</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            Thread<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        producer<span class="token punctuation">.</span><span class="token function">shutdown</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TransactionListenerImpl</span> <span class="token keyword">implements</span> <span class="token class-name">TransactionListener</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">/**     * 在提交完事务消息后执行。     * 返回COMMIT_MESSAGE状态的消息会立即被消费者消费到。     * 返回ROLLBACK_MESSAGE状态的消息会被丢弃。     * 返回UNKNOWN状态的消息会由Broker过一段时间再来回查事务的状态。     */</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> LocalTransactionState <span class="token function">executeLocalTransaction</span><span class="token punctuation">(</span>Message msg<span class="token punctuation">,</span> Object arg<span class="token punctuation">)</span> <span class="token punctuation">{</span>        String tags <span class="token operator">=</span> msg<span class="token punctuation">.</span><span class="token function">getTags</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//TagA的消息会立即被消费者消费到</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>StringUtils<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span>tags<span class="token punctuation">,</span> <span class="token string">"TagA"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> LocalTransactionState<span class="token punctuation">.</span>COMMIT_MESSAGE<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//TagB的消息会被丢弃</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>StringUtils<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span>tags<span class="token punctuation">,</span> <span class="token string">"TagB"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> LocalTransactionState<span class="token punctuation">.</span>ROLLBACK_MESSAGE<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//其他消息会等待Broker进行事务状态回查。</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> LocalTransactionState<span class="token punctuation">.</span>UNKNOW<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 在对UNKNOWN状态的消息进行状态回查时执行。返回的结果是一样的。     */</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> LocalTransactionState <span class="token function">checkLocalTransaction</span><span class="token punctuation">(</span>MessageExt msg<span class="token punctuation">)</span> <span class="token punctuation">{</span>        String tags <span class="token operator">=</span> msg<span class="token punctuation">.</span><span class="token function">getTags</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//TagC的消息过一段时间会被消费者消费到</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>StringUtils<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span>tags<span class="token punctuation">,</span> <span class="token string">"TagC"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> LocalTransactionState<span class="token punctuation">.</span>COMMIT_MESSAGE<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//TagD的消息也会在状态回查时被丢弃掉</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>StringUtils<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span>tags<span class="token punctuation">,</span> <span class="token string">"TagD"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> LocalTransactionState<span class="token punctuation">.</span>ROLLBACK_MESSAGE<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//剩下TagE的消息会在多次状态回查后最终丢弃</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> LocalTransactionState<span class="token punctuation">.</span>UNKNOW<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 消息队列 </tag>
            
            <tag> RocketMQ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>RocketMQ集群搭建</title>
      <link href="/2020/12/28/rocketmq-an-zhuang/"/>
      <url>/2020/12/28/rocketmq-an-zhuang/</url>
      
        <content type="html"><![CDATA[<h2 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h2><p>java版本：1.8</p><p>操作系统：CentOS7</p><p>安装包：<a href="https://rocketmq.apache.org/dowloading/releases/">https://rocketmq.apache.org/dowloading/releases/</a></p><p>我这里选择的是4.7.1版本的rocketMQ</p><h2 id="RocketMQ-集群搭建"><a href="#RocketMQ-集群搭建" class="headerlink" title="RocketMQ 集群搭建"></a>RocketMQ 集群搭建</h2><p>注：此集群主从之间不会自动选举，也就是说主节点挂了，从节点不会顶上去</p><p>目标：2主2从异步集群</p><p>需要2台机器，具体配置下表</p><table><thead><tr><th>机器</th><th>nameserver节点</th><th>broker主</th><th>broker从</th></tr></thead><tbody><tr><td>机器1</td><td>nameserver</td><td>broker-a</td><td>broker-b-s</td></tr><tr><td>机器2</td><td>nameserver</td><td>broker-b</td><td>broker-a-s</td></tr></tbody></table><p>安装包解压（这里的安装包是zip格式的，所以使用unzip）</p><pre class=" language-shell"><code class="language-shell">unzip rocketmq-all-4.7.1-bin-release.zip -d /</code></pre><p>增加软链接（纯粹为了方便，不影响安装）</p><pre class=" language-shell"><code class="language-shell">ln -s rocketmq-all-4.7.1-bin-release/ rocketmq</code></pre><h3 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h3><p>这里先解释下配置文件各参数意义</p><pre class=" language-shell"><code class="language-shell">#所属集群名字，名字一样的节点就在同一个集群内brokerClusterName=rocketmq-cluster#broker名字，名字一样的节点就是一组主从节点。brokerName=broker-a#brokerid,0就表示是Master，>0的都是表示 SlavebrokerId=0#nameServer地址，分号分割namesrvAddr=192.168.186.131:9876;192.168.186.132:9876#在发送消息时，自动创建服务器不存在的topic，默认创建的队列数defaultTopicQueueNums=4#是否允许 Broker 自动创建Topic，建议线下开启，线上关闭autoCreateTopicEnable=true#是否允许 Broker 自动创建订阅组，建议线下开启，线上关闭autoCreateSubscriptionGroup=true#Broker 对外服务的监听端口listenPort=10911#删除文件时间点，默认凌晨 4点deleteWhen=04#文件保留时间，默认 48 小时fileReservedTime=120#commitLog每个文件的大小默认1GmapedFileSizeCommitLog=1073741824#ConsumeQueue每个文件默认存30W条，根据业务情况调整mapedFileSizeConsumeQueue=300000#destroyMapedFileIntervalForcibly=120000#redeleteHangedFileInterval=120000#检测物理文件磁盘空间diskMaxUsedSpaceRatio=88#存储路径storePathRootDir=/data/rocketmq/store-a-master#commitLog 存储路径storePathCommitLog=/data/rocketmq/store-a-master/commitlog#消费队列存储路径存储路径storePathConsumeQueue=/data/rocketmq/store-a-master/consumequeue#消息索引存储路径storePathIndex=/data/rocketmq/store-a-master/index#checkpoint 文件存储路径storeCheckpoint=/data/rocketmq/store-a-master/checkpoint#abort 文件存储路径abortFile=/data/rocketmq/store-a-master/abort#限制的消息大小maxMessageSize=65536#flushCommitLogLeastPages=4#flushConsumeQueueLeastPages=2#flushCommitLogThoroughInterval=10000#flushConsumeQueueThoroughInterval=60000#Broker 的角色#- ASYNC_MASTER 异步复制Master#- SYNC_MASTER 同步双写Master#- SLAVEbrokerRole=ASYNC_MASTER#刷盘方式#- ASYNC_FLUSH 异步刷盘#- SYNC_FLUSH 同步刷盘flushDiskType=ASYNC_FLUSH#checkTransactionMessageEnable=false#发消息线程池数量#sendMessageThreadPoolNums=128#拉消息线程池数量#pullMessageThreadPoolNums=128</code></pre><p>这里我们直接更改它原来的配置文件，由于我们要搭建的是<strong>2主2从异步刷盘集群</strong>。所以我们进入2m-2s-async目录，并对当前目录的配置参数进行修改。其实直接启动应该也是没有问题的</p><pre class=" language-shell"><code class="language-shell">[root@localhost 2m-2s-async]# pwd/rocketmq/conf/2m-2s-async</code></pre><p>下面是配置参数：这里主要修改了以下几个参数brokerName（主从相同），brokerId（主0从1），listenPort同一主机不同，文件路径区分不同</p><p>broker-a.properties</p><pre class=" language-shell"><code class="language-shell">brokerClusterName=rocketmq-clusterbrokerName=broker-abrokerId=0namesrvAddr=192.168.186.131:9876;192.168.186.132:9876defaultTopicQueueNums=4autoCreateTopicEnable=trueautoCreateSubscriptionGroup=truelistenPort=10911deleteWhen=04fileReservedTime=120mapedFileSizeCommitLog=1073741824mapedFileSizeConsumeQueue=300000diskMaxUsedSpaceRatio=88storePathRootDir=/data/rocketmq/store-a-masterstorePathCommitLog=/data/rocketmq/store-a-master/commitlogstorePathConsumeQueue=/data/rocketmq/store-a-master/consumequeuestorePathIndex=/data/rocketmq/store-a-master/indexstoreCheckpoint=/data/rocketmq/store-a-master/checkpointabortFile=/data/rocketmq/store-a-master/abortmaxMessageSize=65536brokerRole=ASYNC_MASTERflushDiskType=ASYNC_FLUSH</code></pre><p>broker-b-s.properties</p><pre class=" language-shell"><code class="language-shell">brokerClusterName=rocketmq-clusterbrokerName=broker-bbrokerId=1namesrvAddr=192.168.186.131:9876;192.168.186.132:9876defaultTopicQueueNums=4autoCreateTopicEnable=trueautoCreateSubscriptionGroup=truelistenPort=10912deleteWhen=04fileReservedTime=120mapedFileSizeCommitLog=1073741824mapedFileSizeConsumeQueue=300000 diskMaxUsedSpaceRatio=88storePathRootDir=/data/rocketmq/store-b-slavestorePathCommitLog=/data/rocketmq/store-b-slave/commitlogstorePathConsumeQueue=/data/rocketmq/store-b-slave/consumequeuestorePathIndex=/data/rocketmq/store-b-slave/indexstoreCheckpoint=/data/rocketmq/store-b-slave/checkpointabortFile=/data/rocketmq/store-b-slave/abortmaxMessageSize=65536brokerRole=ASYNC_MASTERflushDiskType=ASYNC_FLUSH</code></pre><p>broker-a-s.properties</p><pre class=" language-shell"><code class="language-shell">brokerClusterName=rocketmq-clusterbrokerName=broker-abrokerId=1namesrvAddr=192.168.186.131:9876;192.168.186.132:9876defaultTopicQueueNums=4autoCreateTopicEnable=trueautoCreateSubscriptionGroup=truelistenPort=10911deleteWhen=04fileReservedTime=120mapedFileSizeCommitLog=1073741824mapedFileSizeConsumeQueue=300000diskMaxUsedSpaceRatio=88storePathRootDir=/data/rocketmq/store-a-slavestorePathCommitLog=/data/rocketmq/store-a-slave/commitlogstorePathConsumeQueue=/data/rocketmq/store-a-slave/consumequeuestorePathIndex=/data/rocketmq/store-a-slave/indexstoreCheckpoint=/data/rocketmq/store-a-slave/checkpointabortFile=/data/rocketmq/store-a-slave/abortmaxMessageSize=65536brokerRole=ASYNC_MASTERflushDiskType=ASYNC_FLUSH</code></pre><p>broker-b.properties</p><pre class=" language-shell"><code class="language-shell">brokerClusterName=rocketmq-clusterbrokerName=broker-bbrokerId=0namesrvAddr=192.168.186.131:9876;192.168.186.132:9876defaultTopicQueueNums=4autoCreateTopicEnable=trueautoCreateSubscriptionGroup=truelistenPort=10912deleteWhen=04fileReservedTime=120mapedFileSizeCommitLog=1073741824mapedFileSizeConsumeQueue=300000 diskMaxUsedSpaceRatio=88storePathRootDir=/data/rocketmq/store-b-masterstorePathCommitLog=/data/rocketmq/store-b-master/commitlogstorePathConsumeQueue=/data/rocketmq/store-b-master/consumequeuestorePathIndex=/data/rocketmq/store-b-master/indexstoreCheckpoint=/data/rocketmq/store-b-master/checkpointabortFile=/data/rocketmq/store-b-master/abortmaxMessageSize=65536brokerRole=ASYNC_MASTERflushDiskType=ASYNC_FLUSH</code></pre><h3 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h3><p>注意：启动前需要修改runbroker.sh和runserver.sh中的JVM参数，默认rocketmq给的nameserver4g，broker8g,不修改可能机器内存不够启动报错。机器内存足够的话尽量不改，默认配置是经过实验室测试较优配置。</p><p>后台启动nameserver(2台机器全部启动)</p><pre class=" language-shell"><code class="language-shell">nohup bin/mqnamesrv &</code></pre><p>启动成功标识</p><pre class=" language-shell"><code class="language-shell">### 启动成功标识cat nohup.outJava HotSpot(TM) 64-Bit Server VM warning: Using the DefNew young collector with the CMS collector is deprecated and will likely be removed in a future releaseJava HotSpot(TM) 64-Bit Server VM warning: UseCMSCompactAtFullCollection is deprecated and will likely be removed in a future release.The Name Server boot success. serializeType=JSON</code></pre><p>启动每台机器的broker</p><pre class=" language-shell"><code class="language-shell">nohup bin/mqbroker -c conf/2m-2s-async/xxx.properties &</code></pre><h3 id="默认测试工具验证"><a href="#默认测试工具验证" class="headerlink" title="默认测试工具验证"></a>默认测试工具验证</h3><p>首先需要配置nameserver</p><pre class=" language-shell"><code class="language-shell">vim tools.sh# 在export JAVA_HOME上面添加如下这段代码export NAMESRV_ADDR='192.168.186.131:9876;192.168.186.132:9876'</code></pre><p>生产者发送消息</p><pre class=" language-shell"><code class="language-shell">bin/tools.sh org.apache.rocketmq.example.quickstart.Producer </code></pre><p>消费消息</p><pre class=" language-shell"><code class="language-shell">bin/tools.sh org.apache.rocketmq.example.quickstart.Consumer</code></pre><h2 id="管理控制台搭建"><a href="#管理控制台搭建" class="headerlink" title="管理控制台搭建"></a>管理控制台搭建</h2><p>RocketMQ和RabbitMQ不同,没有官方的管理控制台,但是Rocket的社区扩展项目中提供了一个控制台。</p><p>地址：<a href="https://github.com/apache/rocketmq-externals">https://github.com/apache/rocketmq-externals</a></p><h3 id="前期maven准备"><a href="#前期maven准备" class="headerlink" title="前期maven准备"></a>前期maven准备</h3><p>地址：<a href="https://maven.apache.org/download.cgi">https://maven.apache.org/download.cgi</a></p><pre><code>tar -zxvf apache-maven-3.6.3-bin.tar.gz -C /mv /apache-maven-3.6.3/ /usr/local/maven</code></pre><pre class=" language-shell"><code class="language-shell">vim /etc/profile### 增加代码export MAVEN_HOME=/usr/local/maven在PATH后追加： :$MAVEN_HOME/bin ### 刷新配置source /etc/profile### 验证mvn -v</code></pre><h3 id="控制台安装"><a href="#控制台安装" class="headerlink" title="控制台安装"></a>控制台安装</h3><p>解压</p><pre class=" language-shell"><code class="language-shell">unzip rocketmq-externals-master.zip -d /</code></pre><p>软链接</p><pre class=" language-shell"><code class="language-shell">ln -s /rocketmq-externals-master/ rocketmq-console</code></pre><p>搭建</p><pre class=" language-shell"><code class="language-shell">### 指定nameserver地址；；修改当前application.properties配置参数rocketmq.config.namesrvAddr=192.168.186.131:9876;192.168.186.132:9876cd /rocketmq-console/rocketmq-consolemvn clean package -Dmaven.test.skip=true### rocketmq-console-ng-1.0.1.jar----target目录下java -jar rocketmq-console-ng-1.0.1.jar</code></pre><p>在当前ip:8080上即可访问</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 安装手册 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 安装 </tag>
            
            <tag> Linux </tag>
            
            <tag> 消息队列 </tag>
            
            <tag> RocketMQ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ZooKeeper安装及常用命令</title>
      <link href="/2020/12/04/zookeeper-an-zhuang/"/>
      <url>/2020/12/04/zookeeper-an-zhuang/</url>
      
        <content type="html"><![CDATA[<p>发现zookeeper3.5.3之后出了许多新特性，就趁此时机安装一下较新版本zookeeper，顺便记录一下安装步骤，方便以后查验。</p><p>首先准备zookeeper,在这里我使用的是centos7，java环境是1.8.安装的zookeeper是3.5.8.首先找到对应版本下载。</p><h2 id="ZooKeeper单机安装"><a href="#ZooKeeper单机安装" class="headerlink" title="ZooKeeper单机安装"></a>ZooKeeper单机安装</h2><p>下载解压zookeeper</p><p>我这里直接从github上面下载对应的源码包，rz命令上传</p><p>地址：<a href="https://zookeeper.apache.org/releases.html">https://zookeeper.apache.org/releases.html</a></p><p>rz/sz安装命令</p><pre class=" language-shell"><code class="language-shell">yum install lrzsz</code></pre><p>安装包解压</p><pre class=" language-shell"><code class="language-shell">tar -zxvf apache-zookeeper-3.5.8-bin.tar.gz -C /</code></pre><p>增加软链接（纯粹为了方便，不影响安装）</p><pre class=" language-shell"><code class="language-shell">ln -s /apache-zookeeper-3.5.8-bin/ /zk</code></pre><p>进入zk目录，重命名配置文件</p><pre class=" language-shell"><code class="language-shell">cp conf/zoo_sample.cfg conf/zoo.cfg</code></pre><p>启动zookeeper</p><pre class=" language-shell"><code class="language-shell">./bin/zkServer.sh start ./conf/zoo.cfg</code></pre><p>连接zk服务端</p><pre class=" language-shell"><code class="language-shell">./bin/zkCli.sh -server 127.0.0.1:2181</code></pre><p>至此zookeeper安装完毕</p><h2 id="ZooKeeper集群安装"><a href="#ZooKeeper集群安装" class="headerlink" title="ZooKeeper集群安装"></a>ZooKeeper集群安装</h2><p>为了方便这里我直接安装的是伪集群，集群架构1主2从1观察者，总共4个节点</p><p>步骤和上面单机一样，不过我们这里需要4个配置文件，并修改配置</p><p>复制4个配置文件</p><pre class=" language-shell"><code class="language-shell">cp conf/zoo.cfg conf/zoo1.cfgcp conf/zoo.cfg conf/zoo2.cfgcp conf/zoo.cfg conf/zoo3.cfgcp conf/zoo.cfg conf/zoo4.cfg</code></pre><p>修改配置</p><pre class=" language-shell"><code class="language-shell">tickTime=2000initLimit=10syncLimit=5# dataDir修改配置为/zk/data1,/zk/data2,/zk/data3,/zk/data4dataDir=/zk/data1# clientPort修改配置为2181,2182,2183,2184clientPort=2181server.1=127.0.0.1:2001:3001server.2=127.0.0.1:2002:3002server.3=127.0.0.1:2003:3003server.4=127.0.0.1:2004:3004:observer</code></pre><p>创建4个目录，就是上面的dataDir目录</p><pre class=" language-shell"><code class="language-shell">mkdir data1mkdir data2mkdir data3mkdir data4</code></pre><p>创建文件myid,标识服务server id</p><pre class=" language-shell"><code class="language-shell">echo 1 > data1/myidecho 2 > data2/myidecho 3 > data3/myidecho 4 > data4/myid</code></pre><p>启动4个实例</p><pre class=" language-shell"><code class="language-shell">./bin/zkServer.sh start conf/zoo1.cfg./bin/zkServer.sh start conf/zoo2.cfg./bin/zkServer.sh start conf/zoo3.cfg./bin/zkServer.sh start conf/zoo4.cfg</code></pre><p>可查询状态</p><pre class=" language-shell"><code class="language-shell">./bin/zkServer.sh status conf/zoo1.cfg ./bin/zkServer.sh status conf/zoo2.cfg./bin/zkServer.sh status conf/zoo3.cfg./bin/zkServer.sh status conf/zoo4.cfg# 状态返回依次ZooKeeper JMX enabled by defaultUsing config: conf/zoo1.cfgClient port found: 2181. Client address: localhost.Mode: follower#========================ZooKeeper JMX enabled by defaultUsing config: conf/zoo2.cfgClient port found: 2182. Client address: localhost.Mode: leader#========================ZooKeeper JMX enabled by defaultUsing config: conf/zoo3.cfgClient port found: 2183. Client address: localhost.Mode: follower#========================ZooKeeper JMX enabled by defaultUsing config: conf/zoo4.cfgClient port found: 2184. Client address: localhost.Mode: observer#========================</code></pre><p>从状态返回很明显1,3节点为follower,2节点为leader,4节点为observer</p><p>连接服务端</p><pre class=" language-shell"><code class="language-shell">./bin/zkCli.sh -server 127.0.0.1:2181,127.0.0.1:2182,127.0.0.1:2183,127.0.0.1:2184</code></pre><h2 id="启动参数配置"><a href="#启动参数配置" class="headerlink" title="启动参数配置"></a>启动参数配置</h2><p>启动参数都是在zkServer.sh里面的ZOOMAIN参数里面配置</p><pre class=" language-shell"><code class="language-shell">ZOOMAIN="-Dcom.sun.management.jmxremote -Dcom.sun.management.jmxremote.local.only=$JMXLOCALONLY org.apache.zookeeper.server.quorum.QuorumPeerMain"</code></pre><h3 id="TTL节点"><a href="#TTL节点" class="headerlink" title="TTL节点"></a>TTL节点</h3><p>ttl节点默认是禁止的。如果要想使用ttl节点必须在启动参数配置</p><p>没有开启的情况</p><pre class=" language-shell"><code class="language-shell">[zk: 127.0.0.1:2181,127.0.0.1:2182,127.0.0.1:2183,127.0.0.1:2184(CONNECTED) 0] create -t 500 /tsetttlKeeperErrorCode = Unimplemented for /tsetttl</code></pre><p>开启需要在启动配置加  <strong>-Dzookeeper.extendedTypesEnabled=true</strong></p><h2 id="ACL超级管理员配置"><a href="#ACL超级管理员配置" class="headerlink" title="ACL超级管理员配置"></a>ACL超级管理员配置</h2><p>配置参数 <strong>-Dzookeeper.skipACL=yes</strong>可以跳过权限验证，一般安全就配置为false</p><p>获取加密密文</p><pre class=" language-shell"><code class="language-shell">echo -n zk:123456 | openssl dgst -binary -sha1 | openssl base64# 返回值N0YquoLgOZWu74hzsd3OJTZZUw0=</code></pre><p>启动脚本添加**-Dzookeeper.DigestAuthenticationProvider.superDigest=zk:N0YquoLgOZWu74hzsd3OJTZZUw0=**</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 安装手册 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 安装 </tag>
            
            <tag> Linux </tag>
            
            <tag> ZooKeeper </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Unsafe魔法类解析及应用</title>
      <link href="/2020/11/05/atomic-unsafe-mo-fa-lei/"/>
      <url>/2020/11/05/atomic-unsafe-mo-fa-lei/</url>
      
        <content type="html"><![CDATA[<p>Unsafe类提供了一些极度不安全的方法，这些方法会直接访问系统内存和对系统内存进行操作。，由于它是直接对内存进行的操作，所以从他的命名也可以看出它是不安全的。Unsafe类的使用必须<strong>慎重</strong>；juc包中大量运用了Unsafe类，对Unsafe的了解也会方便与了解juc的一些类，即使一般情况下我们不使用这个类，但我们也有必要对其进行理解。</p><p>Unsafe的API的分类大致是内存操作，CAS，内存屏障，线程调度；</p><h2 id="Unsafe类的使用"><a href="#Unsafe类的使用" class="headerlink" title="Unsafe类的使用"></a>Unsafe类的使用</h2><p>Unsafe方法是单例的，要想使用Unsafe首先需要调用Unsafe类的getUnsafe方法。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> Unsafe theUnsafe<span class="token punctuation">;</span><span class="token annotation punctuation">@CallerSensitive</span><span class="token keyword">public</span> <span class="token keyword">static</span> Unsafe <span class="token function">getUnsafe</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    Class <span class="token class-name">var0</span> <span class="token operator">=</span> Reflection<span class="token punctuation">.</span><span class="token function">getCallerClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>VM<span class="token punctuation">.</span><span class="token function">isSystemDomainLoader</span><span class="token punctuation">(</span>var0<span class="token punctuation">.</span><span class="token function">getClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">SecurityException</span><span class="token punctuation">(</span><span class="token string">"Unsafe"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> theUnsafe<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>从上面代码**!VM.isSystemDomainLoader(var0.getClassLoader())**</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">boolean</span> <span class="token function">isSystemDomainLoader</span><span class="token punctuation">(</span>ClassLoader var0<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> var0 <span class="token operator">==</span> null<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>可以看出如果你调用Unsafe类必须保证Unsafe类是系统类加载器（系统类加载器ClassLoader==null,因为系统类加载器是由C加载的）去加载的。直接调用getUnsafe会报错。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>    Unsafe unsafe <span class="token operator">=</span> Unsafe<span class="token punctuation">.</span><span class="token function">getUnsafe</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 调用结果</span>Exception in thread <span class="token string">"main"</span> java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>SecurityException<span class="token operator">:</span> Unsafe    at sun<span class="token punctuation">.</span>misc<span class="token punctuation">.</span>Unsafe<span class="token punctuation">.</span><span class="token function">getUnsafe</span><span class="token punctuation">(</span>Unsafe<span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">90</span><span class="token punctuation">)</span>    at com<span class="token punctuation">.</span>dm<span class="token punctuation">.</span>jmm<span class="token punctuation">.</span>util<span class="token punctuation">.</span>test<span class="token punctuation">.</span><span class="token function">main</span><span class="token punctuation">(</span>test<span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">33</span><span class="token punctuation">)</span></code></pre><p>通过资料发现Unsafe的使用有2种方法</p><ol><li><p>通过Java命令行命令<code>-Xbootclasspath/a: ${path}</code>把调用Unsafe相关方法的类test所在jar包路径追加到默认的bootstrap路径中，使得test被引导类加载器加载，从而通过<code>Unsafe.getUnsafe</code>方法安全的获取Unsafe实例。</p></li><li><p>通过反射拿取，<strong>下面的应用皆用这种方式</strong></p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> Unsafe <span class="token function">reflectGetUnsafe</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>        Field field <span class="token operator">=</span> Unsafe<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getDeclaredField</span><span class="token punctuation">(</span><span class="token string">"theUnsafe"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        field<span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span>Unsafe<span class="token punctuation">)</span> field<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>null<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>        e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> null<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre></li></ol><h2 id="内存屏障"><a href="#内存屏障" class="headerlink" title="内存屏障"></a>内存屏障</h2><p>先简单介绍一下内存屏障吧。内存屏障（也称内存栅栏，内存栅障，屏障指令等，是一类同步屏障指令，是CPU或编译器在对内存随机访问的操作中的一个同步点，使得此点之前的所有读写操作都执行后才可以开始执行此点之后的操作），避免代码重排序。</p><p>还记得之前JMM模型是如何禁止重排序的吗，里面有详细介绍了内存屏障包括volatile触发内存屏障。<a href="https://dmsupine.com/2020/10/26/java-guan-jian-zi-synchronized-volatile/">Java关键字系列（一）-synchronized与volatile</a></p><p>在这里我们可以使用Unsafe手动设置内存屏障。</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//内存屏障，禁止load操作重排序。屏障前的load操作不能被重排序到屏障后，屏障后的load操作不能被重排序到屏障前</span><span class="token keyword">public</span> <span class="token keyword">native</span> <span class="token keyword">void</span> <span class="token function">loadFence</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//内存屏障，禁止store操作重排序。屏障前的store操作不能被重排序到屏障后，屏障后的store操作不能被重排序到屏障前</span><span class="token keyword">public</span> <span class="token keyword">native</span> <span class="token keyword">void</span> <span class="token function">storeFence</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//内存屏障，禁止load、store操作重排序</span><span class="token keyword">public</span> <span class="token keyword">native</span> <span class="token keyword">void</span> <span class="token function">fullFence</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>以之前举例证明重排序存在的代码为例，之前是通过添加volatile可以解决，现在通过手动添加内存屏障解决</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Slf4j</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">test</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span>  <span class="token keyword">static</span> <span class="token keyword">int</span> x <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> y <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">private</span>  <span class="token keyword">static</span> <span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> b <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> InterruptedException <span class="token punctuation">{</span>        <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            i<span class="token operator">++</span><span class="token punctuation">;</span>            x <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> y <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>            a <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> b <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>            Thread t1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Runnable</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token function">shortWait</span><span class="token punctuation">(</span><span class="token number">10000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>                                        <span class="token comment" spellcheck="true">// 添加屏障代码，需引入上面通过反射拿取Unsafe类</span>                    UnsafeInstance<span class="token punctuation">.</span><span class="token function">reflectGetUnsafe</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">fullFence</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                                        x <span class="token operator">=</span> b<span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            Thread t2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Runnable</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    b <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>                                         <span class="token comment" spellcheck="true">// 添加屏障代码，需引入上面通过反射拿取Unsafe类</span>                    UnsafeInstance<span class="token punctuation">.</span><span class="token function">reflectGetUnsafe</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">fullFence</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                                        y <span class="token operator">=</span> a<span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            t1<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            t2<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            t1<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            t2<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            String result <span class="token operator">=</span> <span class="token string">"第"</span> <span class="token operator">+</span> i <span class="token operator">+</span> <span class="token string">"次 ("</span> <span class="token operator">+</span> x <span class="token operator">+</span> <span class="token string">","</span> <span class="token operator">+</span> y <span class="token operator">+</span> <span class="token string">"）"</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>x <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> y <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 等待一段时间，时间单位纳秒     * @param interval     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">shortWait</span><span class="token punctuation">(</span><span class="token keyword">long</span> interval<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">long</span> start <span class="token operator">=</span> System<span class="token punctuation">.</span><span class="token function">nanoTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">long</span> end<span class="token punctuation">;</span>        <span class="token keyword">do</span><span class="token punctuation">{</span>            end <span class="token operator">=</span> System<span class="token punctuation">.</span><span class="token function">nanoTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">while</span><span class="token punctuation">(</span>start <span class="token operator">+</span> interval <span class="token operator">>=</span> end<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>现在这段代码运行就不会结束了，证明内存屏障设置成功了。</p><h2 id="内存操作"><a href="#内存操作" class="headerlink" title="内存操作"></a>内存操作</h2><p>Unsafe相关的内存操作都是与堆外内存相关，包括堆外内存的分配，释放，拷贝等等。</p><h3 id="堆外内存"><a href="#堆外内存" class="headerlink" title="堆外内存"></a>堆外内存</h3><p>大家都知道Java 对象基本都是存放在堆或者栈上面的，它们的分配，释放都是依靠JVM来解决的。但在我们的Java中有一种内存叫做堆外内存，这部分内存不被JVM所托管。元空间的内存就是堆外内存，所以如果我们不设置**-XX：MaxMetaspaceSize**参数，由于它是堆外内存就有可能导致元空间内存不断往上加，最后可能撑爆系统内存（堆外内存不受JVM内存管理，它依托的是系统内存）。</p><p>而对堆外内存的操作我们通常是使用Unsafe类操作，这种操作危险。如果代码内存溢出，可能会把服务器内存打宕掉。<strong>这里一定得注意内存的释放。</strong></p><p><strong>Q:既然JVM可以管理内存，为什么我们会有使用堆外内存的需求呢？</strong></p><ol><li>减少GC次数，避免垃圾回收停顿对应用程序的影响。JVM是有GC机制的。如果我们操作的一个内存是比较大的，可能会频繁GC。但我们使用堆外内存（不受JVM控制），会有效的减少GC的STW。</li><li>提升程序I/O操作的性能。在I/O通信过程中，有堆内内存-&gt;堆外内存的数据拷贝操作，如果有这种需求我们可以直接把数据存储到堆外内存，减少堆内内存到堆外内存的时间，提升IO性能。这也是零拷贝的思想，在Netty和RocketMQ都有应用。关于零拷贝的详细可见<a href="https://dmsupine.com/2020/09/07/netty-xian-cheng-mo-xing-chu-tan-he-netty-de-chang-jian-wen-ti/">Netty线程模型初探和Netty的常见问题</a></li></ol><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//分配内存, 相当于C++的malloc函数</span><span class="token keyword">public</span> <span class="token keyword">native</span> <span class="token keyword">long</span> <span class="token function">allocateMemory</span><span class="token punctuation">(</span><span class="token keyword">long</span> bytes<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//扩充内存</span><span class="token keyword">public</span> <span class="token keyword">native</span> <span class="token keyword">long</span> <span class="token function">reallocateMemory</span><span class="token punctuation">(</span><span class="token keyword">long</span> address<span class="token punctuation">,</span> <span class="token keyword">long</span> bytes<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//释放内存</span><span class="token keyword">public</span> <span class="token keyword">native</span> <span class="token keyword">void</span> <span class="token function">freeMemory</span><span class="token punctuation">(</span><span class="token keyword">long</span> address<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//在给定的内存块中设置值</span><span class="token keyword">public</span> <span class="token keyword">native</span> <span class="token keyword">void</span> <span class="token function">setMemory</span><span class="token punctuation">(</span>Object o<span class="token punctuation">,</span> <span class="token keyword">long</span> offset<span class="token punctuation">,</span> <span class="token keyword">long</span> bytes<span class="token punctuation">,</span> <span class="token keyword">byte</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//内存拷贝</span><span class="token keyword">public</span> <span class="token keyword">native</span> <span class="token keyword">void</span> <span class="token function">copyMemory</span><span class="token punctuation">(</span>Object srcBase<span class="token punctuation">,</span> <span class="token keyword">long</span> srcOffset<span class="token punctuation">,</span> Object destBase<span class="token punctuation">,</span> <span class="token keyword">long</span> destOffset<span class="token punctuation">,</span> <span class="token keyword">long</span> bytes<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//获取给定地址值，忽略修饰限定符的访问限制。与此类似操作还有: getInt，getDouble，getLong，getChar等</span><span class="token keyword">public</span> <span class="token keyword">native</span> Object <span class="token function">getObject</span><span class="token punctuation">(</span>Object o<span class="token punctuation">,</span> <span class="token keyword">long</span> offset<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//为给定地址设置值，忽略修饰限定符的访问限制，与此类似操作还有: putInt,putDouble，putLong，putChar等</span><span class="token keyword">public</span> <span class="token keyword">native</span> <span class="token keyword">void</span> <span class="token function">putObject</span><span class="token punctuation">(</span>Object o<span class="token punctuation">,</span> <span class="token keyword">long</span> offset<span class="token punctuation">,</span> Object x<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//获取给定地址的byte类型的值（当且仅当该内存地址为allocateMemory分配时，此方法结果为确定的）</span><span class="token keyword">public</span> <span class="token keyword">native</span> <span class="token keyword">byte</span> <span class="token function">getByte</span><span class="token punctuation">(</span><span class="token keyword">long</span> address<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//为给定地址设置byte类型的值（当且仅当该内存地址为allocateMemory分配时，此方法结果才是确定的）</span><span class="token keyword">public</span> <span class="token keyword">native</span> <span class="token keyword">void</span> <span class="token function">putByte</span><span class="token punctuation">(</span><span class="token keyword">long</span> address<span class="token punctuation">,</span> <span class="token keyword">byte</span> x<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h2 id="CAS"><a href="#CAS" class="headerlink" title="CAS"></a>CAS</h2><p>CAS全称CompareAndSwap，从名字就可以看出它是什么作用了，就是比较和交换。</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 下面几个方法作用一样</span><span class="token comment" spellcheck="true">// 介绍一下参数值0--修改field的对象，offset--对象中某field的偏移量，expected--期望值，update--更新值</span><span class="token comment" spellcheck="true">// 他的操作就是将内存位置的值和expected进行比较，是不是一样，一样就把update和当前内存位置的值进行交换</span><span class="token comment" spellcheck="true">// 整个过程是原子的。</span><span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">native</span> <span class="token keyword">boolean</span> <span class="token function">compareAndSwapObject</span><span class="token punctuation">(</span>Object o<span class="token punctuation">,</span> <span class="token keyword">long</span> offset<span class="token punctuation">,</span>  Object expected<span class="token punctuation">,</span> Object update<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">native</span> <span class="token keyword">boolean</span> <span class="token function">compareAndSwapInt</span><span class="token punctuation">(</span>Object o<span class="token punctuation">,</span> <span class="token keyword">long</span> offset<span class="token punctuation">,</span> <span class="token keyword">int</span> expected<span class="token punctuation">,</span><span class="token keyword">int</span> update<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">native</span> <span class="token keyword">boolean</span> <span class="token function">compareAndSwapLong</span><span class="token punctuation">(</span>Object o<span class="token punctuation">,</span> <span class="token keyword">long</span> offset<span class="token punctuation">,</span> <span class="token keyword">long</span> expected<span class="token punctuation">,</span> <span class="token keyword">long</span> update<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>CAS在整个juc中应用是最为广泛的，比如AQS,Atomic等等，可能就是因为他是原子的所以才会在并发包中得到这么广泛的应用吧。其实他整个操作都是基于offset进行操作的，offset可以使用unsafe的objectFieldOffset获取。通过offset就可以找到内存地址，我们在从内存地址中获取这个值，拿到值就跟期望值expected进行比较，如果一样就把更新值update赋值到这个地址上去。</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 并发 </tag>
            
            <tag> Atomic </tag>
            
            <tag> Unsafe </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java关键字系列（一）-synchronized与volatile</title>
      <link href="/2020/10/26/java-guan-jian-zi-synchronized-volatile/"/>
      <url>/2020/10/26/java-guan-jian-zi-synchronized-volatile/</url>
      
        <content type="html"><![CDATA[<p>Java中有许多关键字，比如synchronized，volatile，transient，final，static，native等等，在这里我想针对对这些关键字进行一个统一的了解，并做一个系列。</p><p>在这些关键字中与并发息息相关的就是synchronized和volatile，在了解这2个关键字首先必须了解一个模型就是JMM模型。但是在了解JMM模型前需要先了解下硬件内存架构。</p><h2 id="硬件内存架构"><a href="#硬件内存架构" class="headerlink" title="硬件内存架构"></a>硬件内存架构</h2><p>大家都知道现代计算机CPU与内存处理速度相差是极大的。这样就会导致一个局面是处理器等内存的数据，这样就发挥不出来CPU的优势。所以我们CPU为了解决这种差距就使用了多级缓存架构。在我们的CPU中都是有L1,L2,L3三级缓存。将运算的数据从内存写到缓存中去，CPU把数据处理完成，再讲数据写回到主内存去。但这样有一个问题就是缓存不一致的问题，试想如果程序是高并发的就会出现多个CPU同时操作主内存导致不同处理器数据不一致的问题，CPU解决这个问题使用了MESI缓存一致性协议。</p><h2 id="JMM模型"><a href="#JMM模型" class="headerlink" title="JMM模型"></a>JMM模型</h2><p>JMM全称叫做Java内存模型，他与JVM内存模型是不一样的，JVM内存模型是针对于内存区域的划分，而JMM模型是一种抽象概念，它描述的是一个变量在主内存与工作内存中的访问方式。下面就是JMM内存模型图。</p><p><img src="https://blog-dm.oss-cn-shanghai.aliyuncs.com/articleimage/20201026162328.png" alt="JMM内存模型图"></p><p>Q:从这张图我们可以简单的看出线程间是如何通信的。假设现在有一个变量a,我们要对其进行修改，修改完之后我们怎么告诉线程B我改了呢？</p><p>A:首先线程A会从主内存中取出变量a,复制到工作内存，然后在工作内存中进行修改，修改完之后将数据同步回主内存，线程B再从主内存中取值。这就是线程间通信的基本过程。</p><p>其实在线程间通信，主要依赖于8种操作。</p><table><thead><tr><th align="center">操作</th><th align="center">作用域</th><th align="center">功能</th></tr></thead><tbody><tr><td align="center"><strong>read</strong> 读取</td><td align="center">主内存</td><td align="center">它把一个变量的值从主内存传输到线程的工作内存中，以便随后的load动作使用</td></tr><tr><td align="center"><strong>load</strong> 加载</td><td align="center">工作内存</td><td align="center">它把read操作从主内存中得到的变量值放入工作内存的变量副本中</td></tr><tr><td align="center"><strong>user</strong> 使用</td><td align="center">工作内存</td><td align="center">它把工作内存中一个变量的值传递给执行引擎，每当虚拟机遇到一个需要<br>使用到变量的值的字节码指令时将会执行这个操作</td></tr><tr><td align="center"><strong>assign</strong> 赋值</td><td align="center">工作内存</td><td align="center">它把一个从执行引擎接收到的值赋给工作内存的变量，每当虚拟机遇到一个给<br>变量赋值的字节码指令时执行这个操作</td></tr><tr><td align="center"><strong>store</strong> 存储</td><td align="center">工作内存</td><td align="center">它把工作内存中一个变量的值传送到主内存中，以便随后的write操作使用</td></tr><tr><td align="center"><strong>write</strong> 写入</td><td align="center">主内存</td><td align="center"></td></tr><tr><td align="center"><strong>lock</strong> 锁定</td><td align="center">主内存</td><td align="center">它把一个变量标识为一条线程独占的状态</td></tr><tr><td align="center"><strong>unlock</strong> 解锁</td><td align="center">主内存</td><td align="center">它把一个处于锁定状态的变量释放出来，释放后的变量才可以被其他线程锁定</td></tr></tbody></table><p><img src="https://blog-dm.oss-cn-shanghai.aliyuncs.com/articleimage/20201026170259.png"></p><p>JMM主要解决的问题是原子性，可见性，有序性</p><h3 id="原子性"><a href="#原子性" class="headerlink" title="原子性"></a>原子性</h3><p>原子性是指一个操作不可被中断，即使是多线程环境下，他的操作也是不可以中断，比如大家都知道i++就不是原子性的，因为简单的i++代码在底层字节码层面是有三步操作的（下面代码有所说明）。他们会在这3步操作中发生线程时间片轮转调度机制在3步中发生，它的i++操作就被打断了。这就违反了原子性。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">test</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>        i<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// javap 反编译 对应字节码</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">com<span class="token punctuation">.</span>dm<span class="token punctuation">.</span>jmm<span class="token punctuation">.</span>util<span class="token punctuation">.</span>test</span> <span class="token punctuation">{</span>  <span class="token keyword">public</span> com<span class="token punctuation">.</span>dm<span class="token punctuation">.</span>jmm<span class="token punctuation">.</span>util<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    Code<span class="token operator">:</span>       <span class="token number">0</span><span class="token operator">:</span> aload_0       <span class="token number">1</span><span class="token operator">:</span> invokespecial #<span class="token number">1</span>                  <span class="token comment" spellcheck="true">// Method java/lang/Object."&lt;init>":()V</span>       <span class="token number">4</span><span class="token operator">:</span> <span class="token keyword">return</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    Code<span class="token operator">:</span>       <span class="token number">0</span><span class="token operator">:</span> iconst_0       <span class="token number">1</span><span class="token operator">:</span> istore_1       <span class="token number">2</span><span class="token operator">:</span> iinc          <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span>       <span class="token number">5</span><span class="token operator">:</span> <span class="token keyword">return</span><span class="token punctuation">}</span></code></pre><p>像i++这种代码在多线程环境下运行是有问题的。比如在线程A执行了istore_1的时候线程轮转到线程B去执行i++,并且线程B已经执行完了i++操作此时i=1,线程切换回A继续操作iinc,最后i还是1，就导致了bug的产生。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">int</span> counter <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        Thread thread <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span><span class="token punctuation">{</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> <span class="token number">1000</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                counter<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        thread<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>        Thread<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">3000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>        e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>counter<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>上诉代码你执行无数次产生的结果都是不一致的,而且不一定为10000，这里即证明了i++不是原子性的,怎么解决在下面会有介绍。</p><pre class=" language-java"><code class="language-java"><span class="token number">9324</span>Process finished with exit code <span class="token number">0</span></code></pre><h3 id="可见性"><a href="#可见性" class="headerlink" title="可见性"></a>可见性</h3><p>单线程模型下不存在可见性问题，可见性问题必然是多线程下产生的。</p><p>在上面的JMM模型中，如果线程A从主内存拿走一个变量并在工作内存中进行了写操作且没同步到主内存，这时候线程B也从主内存拿走了这个变量，但此时这个变量值是线程A没修改之前的值。从这个例子中可以看出线程A修改的值线程B不可见。</p><p>下面是验证代码，运行代码会发现程序不会停止，说明了不可见，但在while(!flag)里面加上System.out.println发现又可见了，很奇怪，个人觉得是由于System.out.println里面含有同步块的问题。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">test</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">boolean</span> flag <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Thread a <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>flag<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token punctuation">}</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"此时可见"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        a<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            Thread<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        Thread b <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>            flag <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        b<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="有序性"><a href="#有序性" class="headerlink" title="有序性"></a>有序性</h3><p>在了解有序性之前需要首先了解一个现象叫指令重排，</p><h4 id="指令重排"><a href="#指令重排" class="headerlink" title="指令重排"></a>指令重排</h4><p>指令重排简单来说有的代码JVM结果不变的情况下会自动优化，使本来是1,2,3执行的代码优化为2,1,3等等。虽然说指令重排是在保证结果不变的情况下来产生的这里会涉及到<strong>as-if-serial语义</strong>和<strong>happens-before原则</strong>，但在特定情况下就会产生差别，使结果的不确定性使你的程序无法控制。下面贴一个代码来证明指令重排的现象。</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Slf4j</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">test</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span>  <span class="token keyword">static</span> <span class="token keyword">int</span> x <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> y <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">private</span>  <span class="token keyword">static</span> <span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> b <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> InterruptedException <span class="token punctuation">{</span>        <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            i<span class="token operator">++</span><span class="token punctuation">;</span>            x <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> y <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>            a <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> b <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>            Thread t1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Runnable</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token function">shortWait</span><span class="token punctuation">(</span><span class="token number">10000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>                    x <span class="token operator">=</span> b<span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            Thread t2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Runnable</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    b <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>                    y <span class="token operator">=</span> a<span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            t1<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            t2<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            t1<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            t2<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            String result <span class="token operator">=</span> <span class="token string">"第"</span> <span class="token operator">+</span> i <span class="token operator">+</span> <span class="token string">"次 ("</span> <span class="token operator">+</span> x <span class="token operator">+</span> <span class="token string">","</span> <span class="token operator">+</span> y <span class="token operator">+</span> <span class="token string">"）"</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>x <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> y <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 等待一段时间，时间单位纳秒     * @param interval     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">shortWait</span><span class="token punctuation">(</span><span class="token keyword">long</span> interval<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">long</span> start <span class="token operator">=</span> System<span class="token punctuation">.</span><span class="token function">nanoTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">long</span> end<span class="token punctuation">;</span>        <span class="token keyword">do</span><span class="token punctuation">{</span>            end <span class="token operator">=</span> System<span class="token punctuation">.</span><span class="token function">nanoTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">while</span><span class="token punctuation">(</span>start <span class="token operator">+</span> interval <span class="token operator">>=</span> end<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 结果</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token number">11</span><span class="token operator">:</span><span class="token number">43</span><span class="token operator">:</span><span class="token number">28.814</span> <span class="token punctuation">[</span>main<span class="token punctuation">]</span> INFO com<span class="token punctuation">.</span>dm<span class="token punctuation">.</span>jmm<span class="token punctuation">.</span>util<span class="token punctuation">.</span>test <span class="token operator">-</span> 第<span class="token number">656298</span>次 <span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span>）<span class="token number">11</span><span class="token operator">:</span><span class="token number">43</span><span class="token operator">:</span><span class="token number">28.814</span> <span class="token punctuation">[</span>main<span class="token punctuation">]</span> INFO com<span class="token punctuation">.</span>dm<span class="token punctuation">.</span>jmm<span class="token punctuation">.</span>util<span class="token punctuation">.</span>test <span class="token operator">-</span> 第<span class="token number">656299</span>次 <span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span>）<span class="token number">11</span><span class="token operator">:</span><span class="token number">43</span><span class="token operator">:</span><span class="token number">28.814</span> <span class="token punctuation">[</span>main<span class="token punctuation">]</span> INFO com<span class="token punctuation">.</span>dm<span class="token punctuation">.</span>jmm<span class="token punctuation">.</span>util<span class="token punctuation">.</span>test <span class="token operator">-</span> 第<span class="token number">656300</span>次 <span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span>）<span class="token number">11</span><span class="token operator">:</span><span class="token number">43</span><span class="token operator">:</span><span class="token number">28.815</span> <span class="token punctuation">[</span>main<span class="token punctuation">]</span> INFO com<span class="token punctuation">.</span>dm<span class="token punctuation">.</span>jmm<span class="token punctuation">.</span>util<span class="token punctuation">.</span>test <span class="token operator">-</span> 第<span class="token number">656301</span>次 <span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span>）<span class="token number">11</span><span class="token operator">:</span><span class="token number">43</span><span class="token operator">:</span><span class="token number">28.815</span> <span class="token punctuation">[</span>main<span class="token punctuation">]</span> INFO com<span class="token punctuation">.</span>dm<span class="token punctuation">.</span>jmm<span class="token punctuation">.</span>util<span class="token punctuation">.</span>test <span class="token operator">-</span> 第<span class="token number">656302</span>次 <span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span>）第<span class="token number">656303</span>次 <span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span>）</code></pre><p>从这段代码可以推测出结果应该是(0,1); (1,0); ,(1,1)三个结果，0,0这个结果理论上是不会产生的，但执行后发现程序终止了(0,0)结果产生了。(0,0)的产生必然发生了指令重排，因为不发生指令重排a,b必然有一个为1，不管线程怎么走，a,b必然为1那，x,y也至少有一个为1，出现了(0,0)则代表a=1和x=b之间发生了重排序或者b=1和y=a发生了重排序。</p><p>执行结果不可控在代码里面是很恐怖的，as-if-serial语义保证了单线程执行结果不能被改变，happens-before原则保证了正确同步的多线程执行结果不能被改变，JVM会根据2个原则进行指令重排保证语义的正确。</p><ul><li><p><strong>as-if-serial语义</strong></p><p>不管怎么重排序（编译器和处理器为了提高并行度），（单线程）程序的执行结果不能被改变。编译器、runtime和处理器都必须遵守as-if-serial语义。</p><p>为了遵守as-if-serial语义，编译器和处理器不会对存在数据依赖关系的操作做重排序，因为这种重排序会改变执行结果。但是，如果操作之间不存在数据依赖关系，这些操作就可能被编译器和处理器重排序。</p></li><li><p><strong>happens-before原则</strong></p><p>从JDK 5开始，Java使用新的JSR-133内存模型，提供了happens-before原则来辅助保证程序执行的原子性、可见性以及有序性的问题，它是判断数据是否存在竞争、线程是否安全的依据</p><p>happens-before 原则内容如下</p><ol><li>程序顺序原则，即在一个线程内必须保证语义串行性，也就是说按照代码顺序执行。</li><li>锁规则 解锁(unlock)操作必然发生在后续的同一个锁的加锁(lock)之前，也就是说，如果对于一个锁解锁后，再加锁，那么加锁的动作必须在解锁动作之后(同一个锁)。</li><li>volatile规则 volatile变量的写，先发生于读，这保证了volatile变量的可见性，简单的理解就是，volatile变量在每次被线程访问时，都强迫从主内存中读该变量的值，而当该变量发生变化时，又会强迫将最新的值刷新到主内存，任何时刻，不同的线程总是能够看到该变量的最新值。</li><li>线程启动规则 线程的start()方法先于它的每一个动作，即如果线程A在执行线程B的start方法之前修改了共享变量的值，那么当线程B执行start方法时，线程A对共享变量的修改对线程B可见</li><li>传递性 A先于B ，B先于C 那么A必然先于C</li><li>线程终止规则 线程的所有操作先于线程的终结，Thread.join()方法的作用是等待当前执行的线程终止。假设在线程B终止之前，修改了共享变量，线程A从线程B的join方法成功返回后，线程B对共享变量的修改将对线程A可见。</li><li>线程中断规则 对线程 interrupt()方法的调用先行发生于被中断线程的代码检测到中断事件的发生，可以通过Thread.interrupted()方法检测线程是否中断。</li><li>对象终结规则对象的构造函数执行，结束先于finalize()方法</li></ol></li></ul><h2 id="解决原子性问题"><a href="#解决原子性问题" class="headerlink" title="解决原子性问题"></a>解决原子性问题</h2><p>JVM自身是对八大基本数据类型读写操作提供原子性的，比如int x = 9;其余操作的原子性可以通过synchronized和ReentrantLock解决或者通过Unsafe魔法类的CAS来解决。含有Atomic的类，比如AtomicInteger底层就大量的运用到了Unsafe.针对上面原子性的代码进行原子性的调整。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">static</span> Object object <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">int</span> counter <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        Thread thread <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span><span class="token punctuation">{</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> <span class="token number">1000</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>object<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    counter<span class="token operator">++</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        thread<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>        Thread<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">3000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>        e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>counter<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 执行结果</span><span class="token number">10000</span>Process finished with exit code <span class="token number">0</span></code></pre><p>这段代码与上面的代码唯一不一样的地方就是在counter自增的地方加了一个synchronized同步块。而这同步块解决了原子性问题。</p><h2 id="解决可见性问题"><a href="#解决可见性问题" class="headerlink" title="解决可见性问题"></a>解决可见性问题</h2><p>一般解决可见性问题可以使用volatile来解决。</p><p>同样贴上代码</p><pre class=" language-java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">volatile</span> <span class="token keyword">static</span> <span class="token keyword">boolean</span> flag <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>    Thread a <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>flag<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token punctuation">}</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"此时可见"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    a<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>        Thread<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>        e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    Thread b <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>        flag <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    b<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>这段代码与上面的代码唯一不一样的地方就是flag变量加了一个volatile关键字。而这解决了可见性问题。</p><h2 id="解决有序性问题"><a href="#解决有序性问题" class="headerlink" title="解决有序性问题"></a>解决有序性问题</h2><p>解决有序性问题同样也可以使用volatile关键字。这里就不贴代码了。在上诉代码里面给x,y,a,b加个volatile就OK了、</p><h2 id="volatile"><a href="#volatile" class="headerlink" title="volatile"></a>volatile</h2><p>上面提到最多的就是volatile关键字。volatile关键字解决了有序性问题，可见性问题，但是他没有解决原子性问题。你可以用上诉counter自增代码测试一下。结果和不加volatile是一致的，不确定结果。</p><p>volatile总共有以下2个作用</p><ul><li>被volatile修饰的共享变量对所有线程总数可见的</li><li>禁止指令重排</li></ul><h3 id="volatile如何禁止指令重排"><a href="#volatile如何禁止指令重排" class="headerlink" title="volatile如何禁止指令重排"></a>volatile如何禁止指令重排</h3><p>在这之前得首先了解一个叫做内存屏障的概念。</p><h4 id="什么叫内存屏障？"><a href="#什么叫内存屏障？" class="headerlink" title="什么叫内存屏障？"></a>什么叫内存屏障？</h4><p>不同的硬件实现内存屏障的方式是不一样的。Java内存模型会屏蔽这种差异，JVM提供了四种内存屏障。</p><ul><li>LoadLoad屏障：第一次load操作进工作内存才可以进行第二次load操作。</li><li>LoadStore屏障：load操作进工作内存才可以进行store操作。</li><li>StoreStore屏障：第一次store操作完成后并且刷新到主内存才可以进行第二次的store操作。</li><li>StoreLoad屏障：store操作完成后并且刷新到主内存才可以进行load操作。</li></ul><p>而在指令之间插入了内存屏障就会禁止在内存屏障前后的指令执行重排序优化解决了有序性问题，而且会强制刷新CPU缓存数据解决了可见性问题。</p><h4 id="volatile内存语义"><a href="#volatile内存语义" class="headerlink" title="volatile内存语义"></a>volatile内存语义</h4><table><thead><tr><th>第一次操作</th><th>第二次操作：普通读</th><th>第二次操作：普通写</th><th>第二次操作：volatile读</th><th>第二次操作：volatile写</th></tr></thead><tbody><tr><td>普通读</td><td></td><td></td><td></td><td>LoadStore</td></tr><tr><td>普通写</td><td></td><td></td><td></td><td>StoreStore</td></tr><tr><td>volatile读</td><td>LoadLoad</td><td>LoadStore</td><td>LoadLoad</td><td>LoadStore</td></tr><tr><td>volatile写</td><td></td><td></td><td>StoreLoad</td><td>StoreStore</td></tr></tbody></table><h3 id="DCL-Double-Check-Lock-双重检查"><a href="#DCL-Double-Check-Lock-双重检查" class="headerlink" title="DCL(Double Check Lock)双重检查"></a>DCL(Double Check Lock)双重检查</h3><p>单例模式想必都很熟悉，下面是一个常见的单例模式</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DoubleCheckLock</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> Object instance<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> Object <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>instance<span class="token operator">==</span>null<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>DoubleCheckLock<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>instance <span class="token operator">==</span> null<span class="token punctuation">)</span><span class="token punctuation">{</span>                    instance <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> instance<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>双重检查这里就不必说了，但这段代码有一个致命的地方，就是在instance = new Object();</p><p>在new 一个对象通常是有3个步骤</p><ol><li>分配对象内存空间</li><li>初始化对象</li><li>设置对象指向刚分配的内存地址</li></ol><p>而对象在设置对象指向刚分配的内存地址这一步的时候对象就不是空了,而这3步不做处理会发生指令重排，如果重排变成了1-&gt;3-&gt;2,又是高并发场景去拿这个单例就会出现空指针异常（即使这种出现的可能性极小但理论上是会发生的）</p><p>解决这个问题可以再单例上加上一个volatile解决，private volatile  static Object instance;</p><h3 id="volatile如何解决可见性问题"><a href="#volatile如何解决可见性问题" class="headerlink" title="volatile如何解决可见性问题"></a>volatile如何解决可见性问题</h3><p>指令遇到了内存屏障会出现强制刷新，缓存数据会和主存进行同步。会通过缓存一致性协议进行同步。</p><h2 id="synchronized"><a href="#synchronized" class="headerlink" title="synchronized"></a>synchronized</h2><p>syncronized是一个Java同步器是内置锁，synchronized是一种对象锁(锁的是对象而非引用)，作用粒度是对象，可以用来实现对临界资源的<strong>同步互斥访问</strong>，是<strong>可重入</strong>的。</p><p>多线程编程下，我们在访问一个临界资源，由于线程执行的过程是不可控的，所以需要采用同步机制来协同对对象可变状态的访问，这个时候我们就需要同步器。</p><p>Java中有2种方式来解决线程并发安全问题。synchronized，lock</p><h3 id="synchronized原理"><a href="#synchronized原理" class="headerlink" title="synchronized原理"></a>synchronized原理</h3><p>synchronized是基于JVM内置锁实现，通过内部对象Monitor(监视器锁)实现，监视器锁的实现依赖底层操作系统的Mutex lock（互斥锁）实现，它是一个重量级锁性能较低。synchronized在1.5之后版本做了重大的优化，如锁粗化、锁消除，锁膨胀升级等来减少锁操作的开销，synchronized的并发性能已经基本与Lock持平。</p><p>Monitor是一种同步机制，synchronized也被称为内置锁原因就是Monitor存在于每一个对象中，当对象头MarkWord的锁标识位为10的时候，会有一个指针指向Monitor内存地址的起始位。</p><p>下图为32位虚拟机对象头的bit位分配</p><p><img src="https://blog-dm.oss-cn-shanghai.aliyuncs.com/articleimage/20201103170434.png"></p><p>从上图可以看出内置锁共有4种状态无锁，偏向锁，轻量级锁，重量级锁。</p><h4 id="锁的膨胀升级"><a href="#锁的膨胀升级" class="headerlink" title="锁的膨胀升级"></a>锁的膨胀升级</h4><p>内置锁有一个锁的膨胀升级过程，他会从无锁状态-&gt;偏向锁-&gt;轻量级锁-&gt;重量级锁。而且锁只会升级不会降级。</p><ul><li><p>偏向锁</p><p>一个对象获得了锁，此时就是偏向锁，如果这个线程在想拿锁，无需再申请锁。在没有锁竞争的情况下，会使用偏向锁。</p></li><li><p>轻量级锁</p><p>在多个线程交替执行同步块的时候，会升级到轻量级锁。</p></li><li><p>自旋锁</p><p>当线程竞争激烈，多个线程请求同步块的时候，轻量级锁失效的情况下，不会马上升级为重量级锁，而是升级为自旋锁，自旋锁会计算自旋次数，如果自旋次数达到阈值就会升级到重量级锁。</p></li><li><p>重量级锁</p><p>锁竞争激烈自旋锁达到阈值，升级重量级锁。</p></li></ul><h4 id="锁消除"><a href="#锁消除" class="headerlink" title="锁消除"></a>锁消除</h4><p>Java虚拟机在JIT编译时对运行上下文的扫描，去除不可能存在共享资源竞争的锁，通过这种方式消除没有必要的锁</p><h4 id="锁粗化"><a href="#锁粗化" class="headerlink" title="锁粗化"></a>锁粗化</h4><p>Java虚拟机会把几个连续的同步块合并为一个，将原来的锁粗化</p><h2 id="MESI-缓存一致性协议"><a href="#MESI-缓存一致性协议" class="headerlink" title="MESI 缓存一致性协议"></a>MESI 缓存一致性协议</h2><p>MESI 是指四种状态的首字母。每个Cache line有4个状态，可用2个bit表示，它们分别是：M(修改)，E(独享)，S(共享)，I(失效)</p><table><thead><tr><th>状态</th><th>描述</th><th>监听</th></tr></thead><tbody><tr><td>M(修改)</td><td>Cache line有效，数据被修改了，和内存中的数据不一致，数据在本Cache中</td><td>缓存行必须时刻监听所有试图读该缓存行相对就主存的<br>操作，这种操作必须在缓存将该缓存行写回主存并将状态变成S（共享）状态之前被延迟执行。</td></tr><tr><td>E(独享)</td><td>Cache line有效，数据和内存中的数据一致，数据在本Cache中</td><td>缓存行也必须监听其它缓存读主存中该缓存行的操作，一旦有<br>这种操作，该缓存行需要变成S（共享）状态。</td></tr><tr><td>S(共享)</td><td>Cache line有效，数据和内存中的数据一致，数据在很多Cache中</td><td>缓存行也必须监听其它缓存使该缓存行无效或者独享<br>该缓存行的请求，并将该缓存行变成无效（Invalid）。</td></tr><tr><td>I(失效)</td><td>该Cache line无效</td><td>无</td></tr></tbody></table><p>举个例子：</p><p>假设:2个线程T1,T2，一个变量a = 1;被volatile修饰会共享变量</p><ol><li>现在T1线程读了a=1,T1给a标记一个状态E(独享)</li><li>现在T1线程读了a=1,T1给a标记一个状态E(独享)</li><li>然后现在T1,T2都要对a进行修改，2个线程不可以直接修改，他们都对各自的缓存行进行加锁，加锁成功后才可以修改，修改后状态S-&gt;M，那么问题来了，他们之间的加锁2个线程之间都互相不知道，那这加锁没啥用？线程对缓存行加锁时候会向外部发一个消息告诉别的线程我已经加锁了，你们别加了，那如果2方同时加锁，同时发消息呢？他们发消息必定会经过总线，在总线这总线会对2方进行一个裁决（总线裁决）谁加锁成功，加锁成功的才能进行修改，另一方只能将自己的数据给丢掉状态S-&gt;I</li></ol><p>如果一个变量太大，一个缓存行放不下，放在了多个缓存行，为了保证原子性，加锁的时候加不了，此时CPU就直接升级为总线锁</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 并发 </tag>
            
            <tag> Java关键字 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>消息队列常见问题及解决方案</title>
      <link href="/2020/10/08/xiao-xi-dui-lie/"/>
      <url>/2020/10/08/xiao-xi-dui-lie/</url>
      
        <content type="html"><![CDATA[<p>当前市场常见的几种消息中间件就有比如说RabbitMQ、RocketMQ、Kafka，他们都各有优势，下面会介绍他们之间的差别和优缺点。这里不针对某种消息队列，常见消息队列糅杂在一起谈谈</p><h2 id="常用消息中间件简单介绍"><a href="#常用消息中间件简单介绍" class="headerlink" title="常用消息中间件简单介绍"></a>常用消息中间件简单介绍</h2><p>只是简单介绍几种常用消息中间件消息生产和消息消费的过程，具体底层架构和文件存储结构在这里就不做过多的阐述。</p><h3 id="RabbitMQ"><a href="#RabbitMQ" class="headerlink" title="RabbitMQ"></a>RabbitMQ</h3><p>erlang开发，先说下RabbitMQ的几个关键词吧，如果你安装过RabbitMQ并且在他的可视化界面进行操作，一定对下面这几个关键词不陌生</p><ul><li>server：服务节点</li><li>exchange：交换机</li><li>virtual host：虚拟机</li><li>queue：消息队列</li><li>route_key：很关键，它的作用就是帮助我们的生产者路由到哪个队列</li></ul><p>生产消息和消费消息过程：生产者发送消息到一个具体的exchange交换机上面并且还带着一个route_key，不同的队列还绑定者不同的route_key.通过生产者携带的route_key和交换机类型（主题交换机，扇形交换机，直接交换机）来判定将消息发送到哪个消息队列上去。然后消费者已经订阅了某个队列，只要那个队列来数据了。消费者就可以通过某些策略去消费消息。</p><h3 id="RocketMQ"><a href="#RocketMQ" class="headerlink" title="RocketMQ"></a>RocketMQ</h3><p>阿里的一个开源消息中间件，最大的特点就是支持事务消息，定时消息，Java开发。它跟Kafka有点类似，所以想理解Kafka的可以先了解下RocketMQ,可以一定程度上降低Kafka的学习难度（Kafka应该算是最复杂的一个消息中间件）。下面同样先介绍一下他的一些关键名词。</p><ul><li>name server：一个无状态的集群，name server的集群节点之间是无信息交流的，nameserver里面存储着所有的broker,producer和cosumer,每个节点都有一份。</li><li>broker server：集群，主要作用是存储消息，转发消息。</li><li>topic：主题，每个消息必定带着一个主题</li></ul><p>生产消息和消费消息过程：生产者生产一条消息，带着topic,从name server里面拉取存着这个topic的broker节点列表，从节点列表里面选一个发送，然后在这一个broker里面选取一个queue发送，消费者通过绑定的topic从name server里面取一个broker里面的队列进行消费。当然这里面还有很多细节，比如拉取式消费，推动式消费，顺序消费，广播消费，集群消费，事务消息，同步发送，异步发送，消息存储架构，这些就不一一说了，后面可能会写一篇只针对于RocketMQ的博文。</p><h3 id="Kafka"><a href="#Kafka" class="headerlink" title="Kafka"></a>Kafka</h3><p>scala开发，性能强，适用于大数据场景，强依赖于Zookeeper。Kafka基本别的事也不做，他只存储消息，其他什么选举，转发都交给zookeeper去做了，所以性能极高。同样先介绍几个关键词</p><ul><li>broker：一个Kafka节点就是一个broker</li><li>topic：对消息进行归类，每条消息都必须带着一个topic</li><li>partition：一个topic可以分出很多partition,每个partition内部消息是有序的</li><li>cosumer  group：消费组，同一个partition里面的消息只能被一个消费组的一个消费者消费</li></ul><p>生产消息和消费消息过程：生产者负责将消息发送到topic下面的某一个partition.然后一个消费组里面的消费者只能消费一个partition里面的消息，也就是说一条消息不能被同一个消费组里面的多个消费者消费。，大概就这样了</p><h2 id="消息中间件对比"><a href="#消息中间件对比" class="headerlink" title="消息中间件对比"></a>消息中间件对比</h2><p>这里只针对于我所了解的消息中间件进行对比，比如</p><table><thead><tr><th></th><th>RabbitMQ</th><th>RocketMQ</th><th>Kafka</th></tr></thead><tbody><tr><td>持久化方式</td><td>内存/文件</td><td>磁盘</td><td>磁盘</td></tr><tr><td>集群管理</td><td></td><td>name server</td><td>zookeeper</td></tr><tr><td>数据可靠性</td><td>好，producer支持同步异步ack</td><td>很好，支持同步刷盘/异步刷盘/同步双写/异步复制</td><td>很好，同步刷盘/同步复制</td></tr><tr><td>性能</td><td>好，内存：RocketMQ的1/2，DIsk：RocketMQ的1/3</td><td>很好，10万/s</td><td>极好，百万条/s</td></tr><tr><td>性能稳定性</td><td>消息堆积，性能下降</td><td>单机最多5万队列</td><td>队列/分区增多，性能急剧下降</td></tr><tr><td>事务消息</td><td>不支持</td><td>支持</td><td>不支持</td></tr><tr><td>定时消息</td><td>不支持</td><td>支持</td><td>不支持</td></tr></tbody></table><h2 id="消息中间件场景"><a href="#消息中间件场景" class="headerlink" title="消息中间件场景"></a>消息中间件场景</h2><p>说到消息中间件一般就是异步处理，应用解耦，流量削峰，日志处理</p><h3 id="异步处理"><a href="#异步处理" class="headerlink" title="异步处理"></a>异步处理</h3><p>有时候我们处理业务代码希望更快的反应结果给客户端，而其他附带的业务可以利用消息队列慢慢处理去。比如我们处理订单业务逻辑，可能会附带其他逻辑比如积分服务，购物车服务，优惠卷服务等等。我们可以将这些服务发送到消息队列里面去慢慢处理，这就是异步处理。提高系统响应速度。</p><h3 id="应用解耦"><a href="#应用解耦" class="headerlink" title="应用解耦"></a>应用解耦</h3><p>有时我们会有多个业务逻辑耦合，比如订单服务和库存服务耦合。有时会因为耦合导致库存服务的异常导致下订单失败。我们可以下订单然后发送消息到消息队列然后库存服务在去消费消息。</p><h3 id="流量削峰"><a href="#流量削峰" class="headerlink" title="流量削峰"></a>流量削峰</h3><p>有时会因为流量的暴增而导致应用系统扛不住流量而导致应用宕掉。这时候我们就可以把流量打到消息队列，应用去消息队列拉取消息去消费。</p><h3 id="日志处理"><a href="#日志处理" class="headerlink" title="日志处理"></a>日志处理</h3><p>一般日志收集系统是ELK,但有时因为一些需求，会对ELK架构进行一些调整，利用Kafka去接收消息，然后将消息交给logstash去转化成json,然后logstash吧数据交给elastaticsearch实现数据存储，然后通过Kibana进行可视化管理。</p><h2 id="消息中间件常见问题及解决思路"><a href="#消息中间件常见问题及解决思路" class="headerlink" title="消息中间件常见问题及解决思路"></a>消息中间件常见问题及解决思路</h2><h3 id="顺序消费"><a href="#顺序消费" class="headerlink" title="顺序消费"></a>顺序消费</h3><p>消息队列都有多个生产者和多个消费者，那么我们如何保证消费消息的顺序性呢。假设有一个需求是生产者生产了订单消息，加购物车消息，加积分消息，要求我们保证订单-&gt;购物车-&gt;积分顺序消费。解决办法就是一个生产者让一个消费者消费，此时消费一定是顺序的。</p><p>RabbitMQ就可以生产者通过routingkey和交换机类型使只有一个消费者可以消费到这条消息</p><p>RocketMQ是通过生产者往一个queue上面发，消费者也通过这个队列消费保证了消费的顺序性</p><p>Kafka有个特性就是一个消费组里的消费者只会消费一个partition里面的消息,要想保证消息的全局有序性，可以让partition数量为1和消费组消费者数量也是1就ok了。partition数量为1是为了生产者只往这一个partition消费，消费组消费者数量是1为了不让别的这个消费组里面的别的消费者消费partition中的消息。</p><h3 id="重复消费"><a href="#重复消费" class="headerlink" title="重复消费"></a>重复消费</h3><p>消息队列是通过网络进行消息的传输，由于网络的不可靠，比如网络抖动，必然会出现各种各样的问题，其中就有重复消费，重复消费首先你得保证发送端是有重试机制的，如果没有重试机制也就没有重复消费问题了。</p><p><strong>发送端问题</strong>：试想如果你消费了消息，正要告诉exchange或nameserver我消费成功了，但exchange或nameserver由于网络抖动没有接受到消息回复确认，它们又发送了一条消息让你来消费，这就出现了重复消费的问题</p><p><strong>消费端问题</strong>：消费了消息正要提交ack给exchange或nameserve但一个不小心消费端挂了，好，此时你已经消费了一条消息但没有告诉exchange,消费端重启发送端吧刚刚消费掉的消息给你消费了，出现了重复消费</p><p>解决重复消费问题就是消息幂等性问题：</p><ol><li>很简单给每一条消息一个唯一id,确保了消息的唯一性自然就解决了重复消费的问题。</li><li>做一个消息消费的日志表记录消费成功的消息编号，如果将要消费的消息在日志表里面就不在消费这条消息。</li></ol><h3 id="消息丢失"><a href="#消息丢失" class="headerlink" title="消息丢失"></a>消息丢失</h3><p>消息丢失的问题通常和性能相挂钩，鱼和熊掌不可兼得，要想要性能就必然存在消息丢失的情况，要想要消息完全不丢失就必然会牺牲性能，这2者要想要哪一种看业务需求，这里拿Kafka举例。</p><p><strong>发送端问题</strong>：发送端往往会有一些消息消费确认策略，在Kafka消息发送端有一个配置叫acks,</p><ul><li>acks=0：消息发送端不需要等待broker的确认收到消息就可以继续发送消息，性能很高，大多数用于日志收集，行为数据采集等场景，这些场景丢一些数据也是无所谓的，但由于数据的量级很大，所以性能要求极高。</li><li>acks=1：消息发送端发送给broker会等待broker将消息写进log中不需要等待follower备份成功，后告诉发送端我收到消息了。此时<strong>如果leader挂了，由于没有follower没有备份数据，就发生了消息丢失的问题</strong></li><li>acks=-1或all：消息发送端发送给broker会等待所有备份都备份成功就告诉消息发送端我收到了，这时候即使你挂了leader,照样可以不丢失消息。等待备份个数由<strong>min.insync.replicas</strong>配置控制，当<strong>min.insync.replicas=1</strong>时效果和acks=1一样会产生丢失消息的情况。</li></ul><p><strong>消费端问题</strong>：如果消息发送端是配置的是自动签收的话，如果我消息发过来了，我直接签收了，但我并没有消费掉，此时消费端宕机这条还未被消费的消息就不会再消费了，而broker又认为你消费了不会再把消息给你消费。</p><h3 id="消息堆积"><a href="#消息堆积" class="headerlink" title="消息堆积"></a>消息堆积</h3><p>消息堆积产生情况：</p><ul><li>有时会因为消费端消费太慢导致堆积大量的消息。</li><li>当发送端发送了大量的消息在exchange或broker,而现在没有消费者消费。消费者一但启动一堆消息直接打到消费端严重会造成消费端宕机。</li><li>由于消费端有bug导致消息一直消费不成功。就会导致broker，exchange产生大量的消息。这种情况一般可以利用死信队列解决，消息消费失败多少次直接转移到死信队列。</li></ul><p>消息堆积解决办法：</p><p>这里解决办法是在消费端无bug情况下，且消费端性能使用没问题的情况下。</p><ul><li>最简单直接的办法加机器，做集群，消费端消费慢直接多加几个消费者消费不就ok了吗？</li><li>我们不可能一直加机器来解决这个问题吧，其实我们可以利用一个折中的办法，我们使用一个消费者消费，但这里我们并不消费消息，而是将消息转移到其他的topic上面，这个消费者消费速率会把大量的堆积消息以最快的速度给吃掉，然后让其他的消费者去消费去。这一般用于紧急处理大量消息使用。</li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 消息队列 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ConcurrentHashMap1.7和1.8对比与线程安全源码解析</title>
      <link href="/2020/09/16/concurrenthashmap/"/>
      <url>/2020/09/16/concurrenthashmap/</url>
      
        <content type="html"><![CDATA[<p>ConcurrentHashMap与HashMap在Api,参数,数据结构上面基本都是类似的，实现原理也基本都是一致的在这里就不做过多的说明了，若不清楚可以看下另一篇HashMap的对比博文<a href="https://dmsupine.com/2020/09/01/hashmap/">HashMap1.7和1.8对比与源码解析</a>:ConcurrentHashMap和HashMap最大的区别不用说就是一个线程安全一个线程不安全。本篇博文主要介绍的是ConcurrentHashMap是怎么实现的线程安全。</p><h2 id="jdk1-7和jdk1-8对比"><a href="#jdk1-7和jdk1-8对比" class="headerlink" title="jdk1.7和jdk1.8对比"></a>jdk1.7和jdk1.8对比</h2><p>在看怎么实现之前，先大体介绍一下1.7和1.8的实现区别，1.7主要是用ReentrantLock实现分段锁实现的线程安全。1.8是使用CAS+分段锁实现的。从这上面也可以明显的看出1.8性能更好，不好也不会优化是吧。下面就看下他们是怎么实现的。</p><p><strong>建议：ConcurrentHashMap源码大量运用到了Unsafe魔法类，ReentrantLock，二进制运算，看源码前对这些有了了解看起来会舒服很多</strong></p><h2 id="ConcurrentHashMap-jdk1-7源码解析"><a href="#ConcurrentHashMap-jdk1-7源码解析" class="headerlink" title="ConcurrentHashMap jdk1.7源码解析"></a>ConcurrentHashMap jdk1.7源码解析</h2><p>先看一下需要用到的参数有哪些</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// HashMap初始容量</span><span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> DEFAULT_INITIAL_CAPACITY <span class="token operator">=</span> <span class="token number">16</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 加载因子</span><span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">float</span> DEFAULT_LOAD_FACTOR <span class="token operator">=</span> <span class="token number">0.75f</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// Segment[]初始并发等级：决定了Segment[]的长度</span><span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> DEFAULT_CONCURRENCY_LEVEL <span class="token operator">=</span> <span class="token number">16</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// Segment对象下HashEntry[]最大容量</span><span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> MAXIMUM_CAPACITY <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">&lt;&lt;</span> <span class="token number">30</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 最小Segment[]容量：</span><span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> MIN_SEGMENT_TABLE_CAPACITY <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 最大Segement[]容量</span><span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> MAX_SEGMENTS <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">&lt;&lt;</span> <span class="token number">16</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 锁重试次数</span><span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> RETRIES_BEFORE_LOCK <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span></code></pre><p>看到参数介绍，想必对一个词很熟悉Segment,其实hashMap分段锁锁的就是Segment,Segment是不存HashMap的数据，在Segment下面就是HashMap的数据结构数组+链表。put操作就是先找到一个Segment,加个锁然后在找到对应的bucket位置然后把值往里面放如果有值就形成链表。这样做的目的就是减少锁竞争。只有落在同一个Segment上面的资源才会发生锁竞争，减小了锁竞争的几率。hashTable也是线程安全的，了解他的实现机制就知道HashTable put一个值直接全部锁住，这样锁竞争大大增加，性能很差。现在使用Hashtable的想必也比较少了吧。</p><p>在看put方法前先喽一眼ConcurrentHashMap的构造方法</p><h3 id="构造方法"><a href="#构造方法" class="headerlink" title="构造方法"></a>构造方法</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token function">ConcurrentHashMap</span><span class="token punctuation">(</span><span class="token keyword">int</span> initialCapacity<span class="token punctuation">,</span>                         <span class="token keyword">float</span> loadFactor<span class="token punctuation">,</span> <span class="token keyword">int</span> concurrencyLevel<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span>loadFactor <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">||</span> initialCapacity <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">||</span> concurrencyLevel <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalArgumentException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>concurrencyLevel <span class="token operator">></span> MAX_SEGMENTS<span class="token punctuation">)</span>        concurrencyLevel <span class="token operator">=</span> MAX_SEGMENTS<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// Find power-of-two sizes best matching arguments</span>    <span class="token comment" spellcheck="true">// concurrencyLevel就是DEFAULT_CONCURRENCY_LEVEL = 16;</span>    <span class="token comment" spellcheck="true">// ssize是concurrencyLevel计算而来是大于它的最小的2的n次幂，sshift是n次幂的n</span>    <span class="token keyword">int</span> sshift <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 默认为4</span>    <span class="token keyword">int</span> ssize <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 默认为16</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>ssize <span class="token operator">&lt;</span> concurrencyLevel<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token operator">++</span>sshift<span class="token punctuation">;</span>        ssize <span class="token operator">&lt;&lt;=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>segmentShift <span class="token operator">=</span> <span class="token number">32</span> <span class="token operator">-</span> sshift<span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 默认28</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>segmentMask <span class="token operator">=</span> ssize <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 默认15</span>        <span class="token comment" spellcheck="true">// 这里咔咔一顿计算主要就是算出cap的大小就是一个Segment下面的table长度。</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>initialCapacity <span class="token operator">></span> MAXIMUM_CAPACITY<span class="token punctuation">)</span>        initialCapacity <span class="token operator">=</span> MAXIMUM_CAPACITY<span class="token punctuation">;</span>    <span class="token keyword">int</span> c <span class="token operator">=</span> initialCapacity <span class="token operator">/</span> ssize<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>c <span class="token operator">*</span> ssize <span class="token operator">&lt;</span> initialCapacity<span class="token punctuation">)</span>        <span class="token operator">++</span>c<span class="token punctuation">;</span>    <span class="token keyword">int</span> cap <span class="token operator">=</span> MIN_SEGMENT_TABLE_CAPACITY<span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>cap <span class="token operator">&lt;</span> c<span class="token punctuation">)</span>        cap <span class="token operator">&lt;&lt;=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// create segments and segments[0]</span>    <span class="token comment" spellcheck="true">// 构造Segment0</span>    Segment<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span> s0 <span class="token operator">=</span>        <span class="token keyword">new</span> <span class="token class-name">Segment</span><span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span><span class="token punctuation">(</span>loadFactor<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">(</span>cap <span class="token operator">*</span> loadFactor<span class="token punctuation">)</span><span class="token punctuation">,</span>                         <span class="token punctuation">(</span>HashEntry<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">new</span> <span class="token class-name">HashEntry</span><span class="token punctuation">[</span>cap<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 创建ssize长度的Segment数组</span>    Segment<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span><span class="token punctuation">[</span><span class="token punctuation">]</span> ss <span class="token operator">=</span> <span class="token punctuation">(</span>Segment<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">new</span> <span class="token class-name">Segment</span><span class="token punctuation">[</span>ssize<span class="token punctuation">]</span><span class="token punctuation">;</span>    UNSAFE<span class="token punctuation">.</span><span class="token function">putOrderedObject</span><span class="token punctuation">(</span>ss<span class="token punctuation">,</span> SBASE<span class="token punctuation">,</span> s0<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// ordered write of segments[0]</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>segments <span class="token operator">=</span> ss<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h3 id="put方法"><a href="#put方法" class="headerlink" title="put方法"></a>put方法</h3><p>下图发现Segment继承了ReentrantLock所以很明显它是通过ReentrantLock实现的锁</p><p><img src="https://blog-dm.oss-cn-shanghai.aliyuncs.com/articleimage/20200914174529.png"></p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> V <span class="token function">put</span><span class="token punctuation">(</span>K key<span class="token punctuation">,</span> V value<span class="token punctuation">)</span> <span class="token punctuation">{</span>    Segment<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span> s<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>value <span class="token operator">==</span> null<span class="token punctuation">)</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">NullPointerException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 这里一波操作只为了确认当前Segmnet在什么位置，并把当前元素应该落的Segment取出来，准备做put操作</span>    <span class="token keyword">int</span> hash <span class="token operator">=</span> <span class="token function">hash</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token punctuation">(</span>hash <span class="token operator">>>></span> segmentShift<span class="token punctuation">)</span> <span class="token operator">&amp;</span> segmentMask<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>s <span class="token operator">=</span> <span class="token punctuation">(</span>Segment<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span><span class="token punctuation">)</span>UNSAFE<span class="token punctuation">.</span>getObject          <span class="token comment" spellcheck="true">// nonvolatile; recheck</span>         <span class="token punctuation">(</span>segments<span class="token punctuation">,</span> <span class="token punctuation">(</span>j <span class="token operator">&lt;&lt;</span> SSHIFT<span class="token punctuation">)</span> <span class="token operator">+</span> SBASE<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//  in ensureSegment</span>        <span class="token comment" spellcheck="true">// 延迟创建Segment</span>        s <span class="token operator">=</span> <span class="token function">ensureSegment</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// put元素</span>    <span class="token keyword">return</span> s<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> hash<span class="token punctuation">,</span> value<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">final</span> V <span class="token function">put</span><span class="token punctuation">(</span>K key<span class="token punctuation">,</span> <span class="token keyword">int</span> hash<span class="token punctuation">,</span> V value<span class="token punctuation">,</span> <span class="token keyword">boolean</span> onlyIfAbsent<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 这里尝试去拿锁拿成功了node为null失败就阻塞在里面进去</span>    HashEntry<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span> node <span class="token operator">=</span> <span class="token function">tryLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">?</span> null <span class="token operator">:</span>    <span class="token function">scanAndLockForPut</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> hash<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>    V oldValue<span class="token punctuation">;</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 取出当前Segment中的table，话说直接用table去做不行吗这时候由于Segment上面有锁只有一个线程执行table所以应该是没问题的。</span>        <span class="token comment" spellcheck="true">// 这里很有可能是为了去volatile,在table上面是有volatile修饰的，去volatile可以优化性能。</span>        HashEntry<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span><span class="token punctuation">[</span><span class="token punctuation">]</span> tab <span class="token operator">=</span> table<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 计算出当前元素落在Segment中table中的哪一个位置</span>        <span class="token keyword">int</span> index <span class="token operator">=</span> <span class="token punctuation">(</span>tab<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> hash<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 这里是Segment中应该落的table位置的第一个元素</span>        HashEntry<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span> first <span class="token operator">=</span> <span class="token function">entryAt</span><span class="token punctuation">(</span>tab<span class="token punctuation">,</span> index<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 自旋</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>HashEntry<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span> e <span class="token operator">=</span> first<span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 头不是空，说明Hash碰撞了</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>e <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                K k<span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">// 这里是判一下插入的这个key我有没有,有的化刷新值，没有的话e=e.next</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>k <span class="token operator">=</span> e<span class="token punctuation">.</span>key<span class="token punctuation">)</span> <span class="token operator">==</span> key <span class="token operator">||</span>                    <span class="token punctuation">(</span>e<span class="token punctuation">.</span>hash <span class="token operator">==</span> hash <span class="token operator">&amp;&amp;</span> key<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    oldValue <span class="token operator">=</span> e<span class="token punctuation">.</span>value<span class="token punctuation">;</span>                    <span class="token comment" spellcheck="true">// 这里判断是否覆盖原来的值</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>onlyIfAbsent<span class="token punctuation">)</span> <span class="token punctuation">{</span>                        e<span class="token punctuation">.</span>value <span class="token operator">=</span> value<span class="token punctuation">;</span>                        <span class="token operator">++</span>modCount<span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                e <span class="token operator">=</span> e<span class="token punctuation">.</span>next<span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">// 进入else循环说明e是null,2种情况：一种是first节点是null,还有一种是上面这个if语句链表往后传传到最后了</span>            <span class="token keyword">else</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// node不等于空很有可能是上面tryLock加锁失败scanAndLockForPut所返回的，这一部分下面在看</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>node <span class="token operator">!=</span> null<span class="token punctuation">)</span>                    <span class="token comment" spellcheck="true">// 头插法</span>                    node<span class="token punctuation">.</span><span class="token function">setNext</span><span class="token punctuation">(</span>first<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">else</span>                    <span class="token comment" spellcheck="true">// 初始化node</span>                    node <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashEntry</span><span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span><span class="token punctuation">(</span>hash<span class="token punctuation">,</span> key<span class="token punctuation">,</span> value<span class="token punctuation">,</span> first<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">int</span> c <span class="token operator">=</span> count <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">// 扩容</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>c <span class="token operator">></span> threshold <span class="token operator">&amp;&amp;</span> tab<span class="token punctuation">.</span>length <span class="token operator">&lt;</span> MAXIMUM_CAPACITY<span class="token punctuation">)</span>                    <span class="token function">rehash</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">else</span>                    <span class="token comment" spellcheck="true">// put值</span>                    <span class="token function">setEntryAt</span><span class="token punctuation">(</span>tab<span class="token punctuation">,</span> index<span class="token punctuation">,</span> node<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token operator">++</span>modCount<span class="token punctuation">;</span>                count <span class="token operator">=</span> c<span class="token punctuation">;</span>                oldValue <span class="token operator">=</span> null<span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 释放锁</span>        <span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> oldValue<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>上面主要介绍了put方法，其中有几个疑问点，一是scanAndLockForPut方法细节，二是rehash扩容细节，三是put方法里面用了许多Unsafe里面的许多魔法类，后面对Unsafe有所理解在补充这一部分。</p><h3 id="scanAndLockForPut-方法"><a href="#scanAndLockForPut-方法" class="headerlink" title="scanAndLockForPut 方法"></a>scanAndLockForPut 方法</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">private</span> HashEntry<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span> <span class="token function">scanAndLockForPut</span><span class="token punctuation">(</span>K key<span class="token punctuation">,</span> <span class="token keyword">int</span> hash<span class="token punctuation">,</span> V value<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 这里取得对应Segment中的对应数组位置的第一个元素</span>    HashEntry<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span> first <span class="token operator">=</span> <span class="token function">entryForHash</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> hash<span class="token punctuation">)</span><span class="token punctuation">;</span>    HashEntry<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span> e <span class="token operator">=</span> first<span class="token punctuation">;</span>    HashEntry<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span> node <span class="token operator">=</span> null<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 初始化重试次数，控制自旋次数，避免无止境的自旋导致资源的浪费</span>    <span class="token keyword">int</span> retries <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// negative while locating node</span>    <span class="token comment" spellcheck="true">// 加锁失败，开始自旋</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">tryLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        HashEntry<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span> f<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// to recheck first below</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>retries <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// e节点是null，2种情况，1是本身first就是null，还有一种e = e.next;链表挪到最后了</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>e <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// 这里判断node节点是避免重复new Node节点，因为如果first节点有人更改了会重置retries=-1</span>                <span class="token comment" spellcheck="true">// 又会走到这个地方但node不是null了，所以这里需要再次判断node是不是null</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>node <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// speculatively create node</span>                    node <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashEntry</span><span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span><span class="token punctuation">(</span>hash<span class="token punctuation">,</span> key<span class="token punctuation">,</span> value<span class="token punctuation">,</span> null<span class="token punctuation">)</span><span class="token punctuation">;</span>                retries <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>key<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>key<span class="token punctuation">)</span><span class="token punctuation">)</span>                retries <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>            <span class="token keyword">else</span>                e <span class="token operator">=</span> e<span class="token punctuation">.</span>next<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 自增retries如果大于最大重试次数加锁阻塞</span>        <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">++</span>retries <span class="token operator">></span> MAX_SCAN_RETRIES<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 每偶数次检查是否有线程修改了first节点，这时候需要重置first节点并更改retries = -1;使其重新自旋</span>        <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>retries <span class="token operator">&amp;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span>                 <span class="token punctuation">(</span>f <span class="token operator">=</span> <span class="token function">entryForHash</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> hash<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> first<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e <span class="token operator">=</span> first <span class="token operator">=</span> f<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// re-traverse if entry changed</span>            retries <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> node<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h3 id="rehash方法"><a href="#rehash方法" class="headerlink" title="rehash方法"></a>rehash方法</h3><p>这一块源码比较简单就是一些指针的移动，主要扩容逻辑就是遍历Segment的table,复制一个新的table是原table的2倍大小。然后遍历这个table的每一个节点，如果这个节点挂着一个链表就可以rehash这个链表下的每一个元素，假设链表新的落的位置为7,10,10,11,9,9,9。这时候倒着来看这条链表是9，一直往上看直到不同的元素就是9，9，9然后他会直接把这9,9,9直接挪到新的数组上去。然后遍历剩余的元素处理，</p><pre class=" language-java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">rehash</span><span class="token punctuation">(</span>HashEntry<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span> node<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 这里就是构建新数组，并重新计算扩容阈值threshold，和掩码sizeMask（计算元素在数组中的位置）</span>    HashEntry<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span><span class="token punctuation">[</span><span class="token punctuation">]</span> oldTable <span class="token operator">=</span> table<span class="token punctuation">;</span>    <span class="token keyword">int</span> oldCapacity <span class="token operator">=</span> oldTable<span class="token punctuation">.</span>length<span class="token punctuation">;</span>    <span class="token keyword">int</span> newCapacity <span class="token operator">=</span> oldCapacity <span class="token operator">&lt;&lt;</span> <span class="token number">1</span><span class="token punctuation">;</span>    threshold <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">(</span>newCapacity <span class="token operator">*</span> loadFactor<span class="token punctuation">)</span><span class="token punctuation">;</span>    HashEntry<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span><span class="token punctuation">[</span><span class="token punctuation">]</span> newTable <span class="token operator">=</span>        <span class="token punctuation">(</span>HashEntry<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">new</span> <span class="token class-name">HashEntry</span><span class="token punctuation">[</span>newCapacity<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> sizeMask <span class="token operator">=</span> newCapacity <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 遍历老数组</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> oldCapacity <span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        HashEntry<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span> e <span class="token operator">=</span> oldTable<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>e <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            HashEntry<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span> next <span class="token operator">=</span> e<span class="token punctuation">.</span>next<span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 算出当前元素在数组中的新位置idx</span>            <span class="token keyword">int</span> idx <span class="token operator">=</span> e<span class="token punctuation">.</span>hash <span class="token operator">&amp;</span> sizeMask<span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// next是null证明链表上就一个元素，直接newTable[idx] = e;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>next <span class="token operator">==</span> null<span class="token punctuation">)</span>   <span class="token comment" spellcheck="true">//  Single node on list</span>                newTable<span class="token punctuation">[</span>idx<span class="token punctuation">]</span> <span class="token operator">=</span> e<span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 走else说明链表不止一个元素</span>            <span class="token keyword">else</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// Reuse consecutive sequence at same slot</span>                <span class="token comment" spellcheck="true">// lastRun:之前遍历的最后一个元素</span>                <span class="token comment" spellcheck="true">// lastIdx:之前遍历的最后一个元素的位置</span>                HashEntry<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span> lastRun <span class="token operator">=</span> e<span class="token punctuation">;</span>                <span class="token keyword">int</span> lastIdx <span class="token operator">=</span> idx<span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">// 遍历这条链表，找到最后的连续节点只要不连续重新构造lastRun，lastIdx</span>                <span class="token keyword">for</span> <span class="token punctuation">(</span>HashEntry<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span> last <span class="token operator">=</span> next<span class="token punctuation">;</span>                     last <span class="token operator">!=</span> null<span class="token punctuation">;</span>                     last <span class="token operator">=</span> last<span class="token punctuation">.</span>next<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token comment" spellcheck="true">// 计算节点位置</span>                    <span class="token keyword">int</span> k <span class="token operator">=</span> last<span class="token punctuation">.</span>hash <span class="token operator">&amp;</span> sizeMask<span class="token punctuation">;</span>                       <span class="token comment" spellcheck="true">// 重新构造lastRun，lastIdx </span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>k <span class="token operator">!=</span> lastIdx<span class="token punctuation">)</span> <span class="token punctuation">{</span>                        lastIdx <span class="token operator">=</span> k<span class="token punctuation">;</span>                        lastRun <span class="token operator">=</span> last<span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span>                <span class="token comment" spellcheck="true">// 连续节点放到新数组的位置</span>                newTable<span class="token punctuation">[</span>lastIdx<span class="token punctuation">]</span> <span class="token operator">=</span> lastRun<span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">// Clone remaining nodes</span>                <span class="token comment" spellcheck="true">// 其余节点rehash</span>                <span class="token keyword">for</span> <span class="token punctuation">(</span>HashEntry<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span> p <span class="token operator">=</span> e<span class="token punctuation">;</span> p <span class="token operator">!=</span> lastRun<span class="token punctuation">;</span> p <span class="token operator">=</span> p<span class="token punctuation">.</span>next<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    V v <span class="token operator">=</span> p<span class="token punctuation">.</span>value<span class="token punctuation">;</span>                    <span class="token keyword">int</span> h <span class="token operator">=</span> p<span class="token punctuation">.</span>hash<span class="token punctuation">;</span>                    <span class="token keyword">int</span> k <span class="token operator">=</span> h <span class="token operator">&amp;</span> sizeMask<span class="token punctuation">;</span>                    HashEntry<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span> n <span class="token operator">=</span> newTable<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">;</span>                    newTable<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashEntry</span><span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span><span class="token punctuation">(</span>h<span class="token punctuation">,</span> p<span class="token punctuation">.</span>key<span class="token punctuation">,</span> v<span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">int</span> nodeIndex <span class="token operator">=</span> node<span class="token punctuation">.</span>hash <span class="token operator">&amp;</span> sizeMask<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// add the new node</span>    node<span class="token punctuation">.</span><span class="token function">setNext</span><span class="token punctuation">(</span>newTable<span class="token punctuation">[</span>nodeIndex<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    newTable<span class="token punctuation">[</span>nodeIndex<span class="token punctuation">]</span> <span class="token operator">=</span> node<span class="token punctuation">;</span>    table <span class="token operator">=</span> newTable<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h2 id="ConcurrentHashMap-jdk1-8源码解析"><a href="#ConcurrentHashMap-jdk1-8源码解析" class="headerlink" title="ConcurrentHashMap jdk1.8源码解析"></a>ConcurrentHashMap jdk1.8源码解析</h2><p>在看ConcurrentHashMap源码之前还有几个区别于1.7参数需要介绍一下；（这里只介绍下面源码出现的参数）</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 大于0表示table最大存放元素的个数</span><span class="token keyword">private</span> <span class="token keyword">transient</span> <span class="token keyword">volatile</span> <span class="token keyword">int</span> sizeCtl<span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 当Node.hash为MOVED时, 代表着table正在扩容</span><span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> MOVED <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 此元素后接红黑树</span><span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> TREEBIN <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 链表树化阈值</span><span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> TREEIFY_THRESHOLD <span class="token operator">=</span> <span class="token number">8</span><span class="token punctuation">;</span></code></pre><p>还是第一步来看一下构造方法</p><h3 id="构造方法-1"><a href="#构造方法-1" class="headerlink" title="构造方法"></a>构造方法</h3><p>1.8的构造方法相比于1.7还是比较简单的。里面只做了一件事就是计算sizeCtl，可看参数介绍</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token function">ConcurrentHashMap</span><span class="token punctuation">(</span><span class="token keyword">int</span> initialCapacity<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>initialCapacity <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalArgumentException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> cap <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>initialCapacity <span class="token operator">>=</span> <span class="token punctuation">(</span>MAXIMUM_CAPACITY <span class="token operator">>>></span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">?</span>               MAXIMUM_CAPACITY <span class="token operator">:</span>               <span class="token comment" spellcheck="true">// 这里对1.5倍的initialCapacity+1进行2的n次幂取值，比如传入16就tableSizeFor(25)所以就是对25找n次幂，结果就是bucket个数</span>               <span class="token comment" spellcheck="true">// 这里不是很明白为什么要对initialCapacity + (initialCapacity >>> 1) + 1做2的n次幂，而不是直接对initialCapacity做2的n次幂</span>               <span class="token comment" spellcheck="true">// 如有知道的，希望同僚告知。</span>               <span class="token function">tableSizeFor</span><span class="token punctuation">(</span>initialCapacity <span class="token operator">+</span> <span class="token punctuation">(</span>initialCapacity <span class="token operator">>>></span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>sizeCtl <span class="token operator">=</span> cap<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h3 id="put方法-1"><a href="#put方法-1" class="headerlink" title="put方法"></a>put方法</h3><p>1.8的put与1.7区别还是很大的，具体流程是，put一个值，先来个死循环，如果table是空的就执行initTable初始化table,不是空就看是否这一个bucket是空的，如果是直接CAS插入元素，如果不是就看当前hash表是不是在扩容是的化当前线程去帮助扩容，不是的话就开始链表插入，链表插入判断是不是红黑树，是的化插树，不是的话插入链表，插入链表要记录链表长度，链表长度要大于红黑树阈值，就树化。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">final</span> V <span class="token function">putVal</span><span class="token punctuation">(</span>K key<span class="token punctuation">,</span> V value<span class="token punctuation">,</span> <span class="token keyword">boolean</span> onlyIfAbsent<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>key <span class="token operator">==</span> null <span class="token operator">||</span> value <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">NullPointerException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> hash <span class="token operator">=</span> <span class="token function">spread</span><span class="token punctuation">(</span>key<span class="token punctuation">.</span><span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> binCount <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>Node<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span><span class="token punctuation">[</span><span class="token punctuation">]</span> tab <span class="token operator">=</span> table<span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        Node<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span> f<span class="token punctuation">;</span> <span class="token keyword">int</span> n<span class="token punctuation">,</span> i<span class="token punctuation">,</span> fh<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 看当前table是不是空，是空就要初始化table</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>tab <span class="token operator">==</span> null <span class="token operator">||</span> <span class="token punctuation">(</span>n <span class="token operator">=</span> tab<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>            tab <span class="token operator">=</span> <span class="token function">initTable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 看当前数组位置是否为空，为空说明当前我是第一个插入这个位置的元素</span>        <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>f <span class="token operator">=</span> <span class="token function">tabAt</span><span class="token punctuation">(</span>tab<span class="token punctuation">,</span> i <span class="token operator">=</span> <span class="token punctuation">(</span>n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> hash<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// CAS把元素插入</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">casTabAt</span><span class="token punctuation">(</span>tab<span class="token punctuation">,</span> i<span class="token punctuation">,</span> null<span class="token punctuation">,</span>                         <span class="token keyword">new</span> <span class="token class-name">Node</span><span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span><span class="token punctuation">(</span>hash<span class="token punctuation">,</span> key<span class="token punctuation">,</span> value<span class="token punctuation">,</span> null<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>                   <span class="token comment" spellcheck="true">// no lock when adding to empty bin</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 这里是判断HashMap是不是正在扩容</span>        <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>fh <span class="token operator">=</span> f<span class="token punctuation">.</span>hash<span class="token punctuation">)</span> <span class="token operator">==</span> MOVED<span class="token punctuation">)</span>            <span class="token comment" spellcheck="true">// 这里就厉害了，一般而言正在扩容我们当前线程应该是阻塞的，但HashMap就不这样想，他让当前线程跑去先帮HashMap扩容，</span>            <span class="token comment" spellcheck="true">// 这个方法是重点后面看</span>            tab <span class="token operator">=</span> <span class="token function">helpTransfer</span><span class="token punctuation">(</span>tab<span class="token punctuation">,</span> f<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 正式插入链表之中</span>            V oldVal <span class="token operator">=</span> null<span class="token punctuation">;</span>、            <span class="token comment" spellcheck="true">// 先加一个同步块；保证线程安全</span>            <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>f<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// f是当前元素可以转头看下第1个else if;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">tabAt</span><span class="token punctuation">(</span>tab<span class="token punctuation">,</span> i<span class="token punctuation">)</span> <span class="token operator">==</span> f<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token comment" spellcheck="true">// fh是f.hash 说明没有异常状态不在扩容，不是红黑树</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>fh <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                        <span class="token comment" spellcheck="true">// 记录链表长度，为树化做准备</span>                        binCount <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>                        <span class="token comment" spellcheck="true">// 遍历链表</span>                        <span class="token keyword">for</span> <span class="token punctuation">(</span>Node<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span> e <span class="token operator">=</span> f<span class="token punctuation">;</span><span class="token punctuation">;</span> <span class="token operator">++</span>binCount<span class="token punctuation">)</span> <span class="token punctuation">{</span>                            K ek<span class="token punctuation">;</span>                            <span class="token comment" spellcheck="true">// 看链表里面是否有这个key，有就判onlyIfAbsent是否覆盖value</span>                            <span class="token keyword">if</span> <span class="token punctuation">(</span>e<span class="token punctuation">.</span>hash <span class="token operator">==</span> hash <span class="token operator">&amp;&amp;</span>                                <span class="token punctuation">(</span><span class="token punctuation">(</span>ek <span class="token operator">=</span> e<span class="token punctuation">.</span>key<span class="token punctuation">)</span> <span class="token operator">==</span> key <span class="token operator">||</span>                                 <span class="token punctuation">(</span>ek <span class="token operator">!=</span> null <span class="token operator">&amp;&amp;</span> key<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>ek<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                                oldVal <span class="token operator">=</span> e<span class="token punctuation">.</span>val<span class="token punctuation">;</span>                                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>onlyIfAbsent<span class="token punctuation">)</span>                                    e<span class="token punctuation">.</span>val <span class="token operator">=</span> value<span class="token punctuation">;</span>                                <span class="token keyword">break</span><span class="token punctuation">;</span>                            <span class="token punctuation">}</span>                            Node<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span> pred <span class="token operator">=</span> e<span class="token punctuation">;</span>                            <span class="token comment" spellcheck="true">// 指针往后挪，并且如果当前节点的下一个节点是null,证明到底了；</span>                            <span class="token comment" spellcheck="true">// 就让当前节点的下一个节点初始化node,等于Node插入链表（尾插法）</span>                            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>e <span class="token operator">=</span> e<span class="token punctuation">.</span>next<span class="token punctuation">)</span> <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                                pred<span class="token punctuation">.</span>next <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Node</span><span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span><span class="token punctuation">(</span>hash<span class="token punctuation">,</span> key<span class="token punctuation">,</span>                                                          value<span class="token punctuation">,</span> null<span class="token punctuation">)</span><span class="token punctuation">;</span>                                <span class="token keyword">break</span><span class="token punctuation">;</span>                            <span class="token punctuation">}</span>                        <span class="token punctuation">}</span>                    <span class="token punctuation">}</span>                    <span class="token comment" spellcheck="true">// 走到这，说明fh&lt;0，看他是不是一个树，是的化树里面插入</span>                    <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>f <span class="token keyword">instanceof</span> <span class="token class-name">TreeBin</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                        Node<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span> p<span class="token punctuation">;</span>                        binCount <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>                        <span class="token comment" spellcheck="true">// 红黑树结构旋转插入</span>                        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>p <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>TreeBin<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span><span class="token punctuation">)</span>f<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">putTreeVal</span><span class="token punctuation">(</span>hash<span class="token punctuation">,</span> key<span class="token punctuation">,</span>                                                              value<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                            oldVal <span class="token operator">=</span> p<span class="token punctuation">.</span>val<span class="token punctuation">;</span>                            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>onlyIfAbsent<span class="token punctuation">)</span>                                p<span class="token punctuation">.</span>val <span class="token operator">=</span> value<span class="token punctuation">;</span>                        <span class="token punctuation">}</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">// binCount说明插入成功了甭管是树插成功还是链表成功。</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>binCount <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// 如果链表长度大于TREEIFY_THRESHOLD阈值就树化</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>binCount <span class="token operator">>=</span> TREEIFY_THRESHOLD<span class="token punctuation">)</span>                    <span class="token function">treeifyBin</span><span class="token punctuation">(</span>tab<span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>oldVal <span class="token operator">!=</span> null<span class="token punctuation">)</span>                    <span class="token comment" spellcheck="true">// 避免走addCount</span>                    <span class="token keyword">return</span> oldVal<span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 走这说明数组当前位置只插入了一个元素，因为往链表里面插还是树里面都会重置oldVal,就会在上面 if (oldVal != null)  return出去</span>    <span class="token comment" spellcheck="true">// 检查是否需要扩容,下面会看到这个方法的详细</span>    <span class="token function">addCount</span><span class="token punctuation">(</span>1L<span class="token punctuation">,</span> binCount<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> null<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h3 id="initTable方法"><a href="#initTable方法" class="headerlink" title="initTable方法"></a>initTable方法</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">final</span> Node<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">initTable</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    Node<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span><span class="token punctuation">[</span><span class="token punctuation">]</span> tab<span class="token punctuation">;</span> <span class="token keyword">int</span> sc<span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>tab <span class="token operator">=</span> table<span class="token punctuation">)</span> <span class="token operator">==</span> null <span class="token operator">||</span> tab<span class="token punctuation">.</span>length <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 这里看是否sizeCtl是否小于0，小于0说明有另一个线程正在初始化，这时候就让出CPU</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>sc <span class="token operator">=</span> sizeCtl<span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>            Thread<span class="token punctuation">.</span><span class="token function">yield</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// lost initialization race; just spin</span>        <span class="token comment" spellcheck="true">// CAS更新sc的值到-1；SIZECTL是sizeCtl的偏移量，</span>        <span class="token comment" spellcheck="true">// 这里的作用可以配合第一个if看就一目了然了</span>        <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>U<span class="token punctuation">.</span><span class="token function">compareAndSwapInt</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> SIZECTL<span class="token punctuation">,</span> sc<span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// 在判断一次table是不是空</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>tab <span class="token operator">=</span> table<span class="token punctuation">)</span> <span class="token operator">==</span> null <span class="token operator">||</span> tab<span class="token punctuation">.</span>length <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token comment" spellcheck="true">// sc大于0说明构造函数已经计算过，否则使用默认值</span>                    <span class="token keyword">int</span> n <span class="token operator">=</span> <span class="token punctuation">(</span>sc <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">?</span> sc <span class="token operator">:</span> DEFAULT_CAPACITY<span class="token punctuation">;</span>                    <span class="token annotation punctuation">@SuppressWarnings</span><span class="token punctuation">(</span><span class="token string">"unchecked"</span><span class="token punctuation">)</span>                    <span class="token comment" spellcheck="true">// 初始化table</span>                    Node<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span><span class="token punctuation">[</span><span class="token punctuation">]</span> nt <span class="token operator">=</span> <span class="token punctuation">(</span>Node<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">new</span> <span class="token class-name">Node</span><span class="token operator">&lt;</span><span class="token operator">?</span><span class="token punctuation">,</span><span class="token operator">?</span><span class="token operator">></span><span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">;</span>                    table <span class="token operator">=</span> tab <span class="token operator">=</span> nt<span class="token punctuation">;</span>                    <span class="token comment" spellcheck="true">// 计算扩容阈值0.75n</span>                    sc <span class="token operator">=</span> n <span class="token operator">-</span> <span class="token punctuation">(</span>n <span class="token operator">>>></span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>                sizeCtl <span class="token operator">=</span> sc<span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> tab<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h3 id="transfer扩容方法"><a href="#transfer扩容方法" class="headerlink" title="transfer扩容方法"></a>transfer扩容方法</h3><p>在table中有3种节点类型</p><ul><li>TreeBin：节点下是红黑树</li><li>ForwardingNode：扩容存放的节点</li><li>Node：链表节点</li></ul><p>扩容流程：每个线程根据CPU核数分配处理多少bucket,然后多线程扩容，如果有线程put的时候发现正在扩容就帮table进行扩容。</p><p>// TODO</p><pre class=" language-java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">void</span> <span class="token function">transfer</span><span class="token punctuation">(</span>Node<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span><span class="token punctuation">[</span><span class="token punctuation">]</span> tab<span class="token punctuation">,</span> Node<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span><span class="token punctuation">[</span><span class="token punctuation">]</span> nextTab<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> n <span class="token operator">=</span> tab<span class="token punctuation">.</span>length<span class="token punctuation">,</span> stride<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 多线程扩容，这里将数组长度/8/线程总数是每个线程需要处理的bucket数，如果小于16，按16处理</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>stride <span class="token operator">=</span> <span class="token punctuation">(</span>NCPU <span class="token operator">></span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token punctuation">(</span>n <span class="token operator">>>></span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token operator">/</span> NCPU <span class="token operator">:</span> n<span class="token punctuation">)</span> <span class="token operator">&lt;</span> MIN_TRANSFER_STRIDE<span class="token punctuation">)</span>        stride <span class="token operator">=</span> MIN_TRANSFER_STRIDE<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// subdivide range</span>    <span class="token comment" spellcheck="true">// nextTab是null,表示刚进来扩容，辅助扩容，nextTab不是null</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>nextTab <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// initiating</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 新的table 长度是n &lt;&lt; 1是2n,所以扩容大小是原来的2倍</span>            <span class="token annotation punctuation">@SuppressWarnings</span><span class="token punctuation">(</span><span class="token string">"unchecked"</span><span class="token punctuation">)</span>            Node<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span><span class="token punctuation">[</span><span class="token punctuation">]</span> nt <span class="token operator">=</span> <span class="token punctuation">(</span>Node<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">new</span> <span class="token class-name">Node</span><span class="token operator">&lt;</span><span class="token operator">?</span><span class="token punctuation">,</span><span class="token operator">?</span><span class="token operator">></span><span class="token punctuation">[</span>n <span class="token operator">&lt;&lt;</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            nextTab <span class="token operator">=</span> nt<span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Throwable</span> ex<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// try to cope with OOME</span>            sizeCtl <span class="token operator">=</span> Integer<span class="token punctuation">.</span>MAX_VALUE<span class="token punctuation">;</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        nextTable <span class="token operator">=</span> nextTab<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 标识扩容进度</span>        transferIndex <span class="token operator">=</span> n<span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token keyword">int</span> nextn <span class="token operator">=</span> nextTab<span class="token punctuation">.</span>length<span class="token punctuation">;</span>    ForwardingNode<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span> fwd <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ForwardingNode</span><span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span><span class="token punctuation">(</span>nextTab<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// true表示当前线程bucket迁移结束，开始往后推进</span>    <span class="token keyword">boolean</span> advance <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 完成扩容</span>    <span class="token keyword">boolean</span> finishing <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// to ensure sweep before committing nextTab</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> bound <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        Node<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span> f<span class="token punctuation">;</span> <span class="token keyword">int</span> fh<span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>advance<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">int</span> nextIndex<span class="token punctuation">,</span> nextBound<span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">--</span>i <span class="token operator">>=</span> bound <span class="token operator">||</span> finishing<span class="token punctuation">)</span>                advance <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>            <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>nextIndex <span class="token operator">=</span> transferIndex<span class="token punctuation">)</span> <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                i <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>                advance <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>U<span class="token punctuation">.</span><span class="token function">compareAndSwapInt</span>                     <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> TRANSFERINDEX<span class="token punctuation">,</span> nextIndex<span class="token punctuation">,</span>                      nextBound <span class="token operator">=</span> <span class="token punctuation">(</span>nextIndex <span class="token operator">></span> stride <span class="token operator">?</span>                                   nextIndex <span class="token operator">-</span> stride <span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                bound <span class="token operator">=</span> nextBound<span class="token punctuation">;</span>                i <span class="token operator">=</span> nextIndex <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>                advance <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">||</span> i <span class="token operator">>=</span> n <span class="token operator">||</span> i <span class="token operator">+</span> n <span class="token operator">>=</span> nextn<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">int</span> sc<span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>finishing<span class="token punctuation">)</span> <span class="token punctuation">{</span>                nextTable <span class="token operator">=</span> null<span class="token punctuation">;</span>                table <span class="token operator">=</span> nextTab<span class="token punctuation">;</span>                sizeCtl <span class="token operator">=</span> <span class="token punctuation">(</span>n <span class="token operator">&lt;&lt;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token punctuation">(</span>n <span class="token operator">>>></span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">return</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>U<span class="token punctuation">.</span><span class="token function">compareAndSwapInt</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> SIZECTL<span class="token punctuation">,</span> sc <span class="token operator">=</span> sizeCtl<span class="token punctuation">,</span> sc <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>sc <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token function">resizeStamp</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> RESIZE_STAMP_SHIFT<span class="token punctuation">)</span>                    <span class="token keyword">return</span><span class="token punctuation">;</span>                finishing <span class="token operator">=</span> advance <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>                i <span class="token operator">=</span> n<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// recheck before commit</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>f <span class="token operator">=</span> <span class="token function">tabAt</span><span class="token punctuation">(</span>tab<span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">==</span> null<span class="token punctuation">)</span>            advance <span class="token operator">=</span> <span class="token function">casTabAt</span><span class="token punctuation">(</span>tab<span class="token punctuation">,</span> i<span class="token punctuation">,</span> null<span class="token punctuation">,</span> fwd<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>fh <span class="token operator">=</span> f<span class="token punctuation">.</span>hash<span class="token punctuation">)</span> <span class="token operator">==</span> MOVED<span class="token punctuation">)</span>            advance <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// already processed</span>        <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>f<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">tabAt</span><span class="token punctuation">(</span>tab<span class="token punctuation">,</span> i<span class="token punctuation">)</span> <span class="token operator">==</span> f<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    Node<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span> ln<span class="token punctuation">,</span> hn<span class="token punctuation">;</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>fh <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                        <span class="token keyword">int</span> runBit <span class="token operator">=</span> fh <span class="token operator">&amp;</span> n<span class="token punctuation">;</span>                        Node<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span> lastRun <span class="token operator">=</span> f<span class="token punctuation">;</span>                        <span class="token keyword">for</span> <span class="token punctuation">(</span>Node<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span> p <span class="token operator">=</span> f<span class="token punctuation">.</span>next<span class="token punctuation">;</span> p <span class="token operator">!=</span> null<span class="token punctuation">;</span> p <span class="token operator">=</span> p<span class="token punctuation">.</span>next<span class="token punctuation">)</span> <span class="token punctuation">{</span>                            <span class="token keyword">int</span> b <span class="token operator">=</span> p<span class="token punctuation">.</span>hash <span class="token operator">&amp;</span> n<span class="token punctuation">;</span>                            <span class="token keyword">if</span> <span class="token punctuation">(</span>b <span class="token operator">!=</span> runBit<span class="token punctuation">)</span> <span class="token punctuation">{</span>                                runBit <span class="token operator">=</span> b<span class="token punctuation">;</span>                                lastRun <span class="token operator">=</span> p<span class="token punctuation">;</span>                            <span class="token punctuation">}</span>                        <span class="token punctuation">}</span>                        <span class="token keyword">if</span> <span class="token punctuation">(</span>runBit <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                            ln <span class="token operator">=</span> lastRun<span class="token punctuation">;</span>                            hn <span class="token operator">=</span> null<span class="token punctuation">;</span>                        <span class="token punctuation">}</span>                        <span class="token keyword">else</span> <span class="token punctuation">{</span>                            hn <span class="token operator">=</span> lastRun<span class="token punctuation">;</span>                            ln <span class="token operator">=</span> null<span class="token punctuation">;</span>                        <span class="token punctuation">}</span>                        <span class="token keyword">for</span> <span class="token punctuation">(</span>Node<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span> p <span class="token operator">=</span> f<span class="token punctuation">;</span> p <span class="token operator">!=</span> lastRun<span class="token punctuation">;</span> p <span class="token operator">=</span> p<span class="token punctuation">.</span>next<span class="token punctuation">)</span> <span class="token punctuation">{</span>                            <span class="token keyword">int</span> ph <span class="token operator">=</span> p<span class="token punctuation">.</span>hash<span class="token punctuation">;</span> K pk <span class="token operator">=</span> p<span class="token punctuation">.</span>key<span class="token punctuation">;</span> V pv <span class="token operator">=</span> p<span class="token punctuation">.</span>val<span class="token punctuation">;</span>                            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>ph <span class="token operator">&amp;</span> n<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>                                ln <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Node</span><span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span><span class="token punctuation">(</span>ph<span class="token punctuation">,</span> pk<span class="token punctuation">,</span> pv<span class="token punctuation">,</span> ln<span class="token punctuation">)</span><span class="token punctuation">;</span>                            <span class="token keyword">else</span>                                hn <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Node</span><span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span><span class="token punctuation">(</span>ph<span class="token punctuation">,</span> pk<span class="token punctuation">,</span> pv<span class="token punctuation">,</span> hn<span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token punctuation">}</span>                        <span class="token function">setTabAt</span><span class="token punctuation">(</span>nextTab<span class="token punctuation">,</span> i<span class="token punctuation">,</span> ln<span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token function">setTabAt</span><span class="token punctuation">(</span>nextTab<span class="token punctuation">,</span> i <span class="token operator">+</span> n<span class="token punctuation">,</span> hn<span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token function">setTabAt</span><span class="token punctuation">(</span>tab<span class="token punctuation">,</span> i<span class="token punctuation">,</span> fwd<span class="token punctuation">)</span><span class="token punctuation">;</span>                        advance <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                    <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>f <span class="token keyword">instanceof</span> <span class="token class-name">TreeBin</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                        TreeBin<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span> t <span class="token operator">=</span> <span class="token punctuation">(</span>TreeBin<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span><span class="token punctuation">)</span>f<span class="token punctuation">;</span>                        TreeNode<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span> lo <span class="token operator">=</span> null<span class="token punctuation">,</span> loTail <span class="token operator">=</span> null<span class="token punctuation">;</span>                        TreeNode<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span> hi <span class="token operator">=</span> null<span class="token punctuation">,</span> hiTail <span class="token operator">=</span> null<span class="token punctuation">;</span>                        <span class="token keyword">int</span> lc <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> hc <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>                        <span class="token keyword">for</span> <span class="token punctuation">(</span>Node<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span> e <span class="token operator">=</span> t<span class="token punctuation">.</span>first<span class="token punctuation">;</span> e <span class="token operator">!=</span> null<span class="token punctuation">;</span> e <span class="token operator">=</span> e<span class="token punctuation">.</span>next<span class="token punctuation">)</span> <span class="token punctuation">{</span>                            <span class="token keyword">int</span> h <span class="token operator">=</span> e<span class="token punctuation">.</span>hash<span class="token punctuation">;</span>                            TreeNode<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span> p <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TreeNode</span><span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span>                                <span class="token punctuation">(</span>h<span class="token punctuation">,</span> e<span class="token punctuation">.</span>key<span class="token punctuation">,</span> e<span class="token punctuation">.</span>val<span class="token punctuation">,</span> null<span class="token punctuation">,</span> null<span class="token punctuation">)</span><span class="token punctuation">;</span>                            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>h <span class="token operator">&amp;</span> n<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>p<span class="token punctuation">.</span>prev <span class="token operator">=</span> loTail<span class="token punctuation">)</span> <span class="token operator">==</span> null<span class="token punctuation">)</span>                                    lo <span class="token operator">=</span> p<span class="token punctuation">;</span>                                <span class="token keyword">else</span>                                    loTail<span class="token punctuation">.</span>next <span class="token operator">=</span> p<span class="token punctuation">;</span>                                loTail <span class="token operator">=</span> p<span class="token punctuation">;</span>                                <span class="token operator">++</span>lc<span class="token punctuation">;</span>                            <span class="token punctuation">}</span>                            <span class="token keyword">else</span> <span class="token punctuation">{</span>                                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>p<span class="token punctuation">.</span>prev <span class="token operator">=</span> hiTail<span class="token punctuation">)</span> <span class="token operator">==</span> null<span class="token punctuation">)</span>                                    hi <span class="token operator">=</span> p<span class="token punctuation">;</span>                                <span class="token keyword">else</span>                                    hiTail<span class="token punctuation">.</span>next <span class="token operator">=</span> p<span class="token punctuation">;</span>                                hiTail <span class="token operator">=</span> p<span class="token punctuation">;</span>                                <span class="token operator">++</span>hc<span class="token punctuation">;</span>                            <span class="token punctuation">}</span>                        <span class="token punctuation">}</span>                        ln <span class="token operator">=</span> <span class="token punctuation">(</span>lc <span class="token operator">&lt;=</span> UNTREEIFY_THRESHOLD<span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token function">untreeify</span><span class="token punctuation">(</span>lo<span class="token punctuation">)</span> <span class="token operator">:</span>                        <span class="token punctuation">(</span>hc <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token keyword">new</span> <span class="token class-name">TreeBin</span><span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span><span class="token punctuation">(</span>lo<span class="token punctuation">)</span> <span class="token operator">:</span> t<span class="token punctuation">;</span>                        hn <span class="token operator">=</span> <span class="token punctuation">(</span>hc <span class="token operator">&lt;=</span> UNTREEIFY_THRESHOLD<span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token function">untreeify</span><span class="token punctuation">(</span>hi<span class="token punctuation">)</span> <span class="token operator">:</span>                        <span class="token punctuation">(</span>lc <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token keyword">new</span> <span class="token class-name">TreeBin</span><span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span><span class="token punctuation">(</span>hi<span class="token punctuation">)</span> <span class="token operator">:</span> t<span class="token punctuation">;</span>                        <span class="token function">setTabAt</span><span class="token punctuation">(</span>nextTab<span class="token punctuation">,</span> i<span class="token punctuation">,</span> ln<span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token function">setTabAt</span><span class="token punctuation">(</span>nextTab<span class="token punctuation">,</span> i <span class="token operator">+</span> n<span class="token punctuation">,</span> hn<span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token function">setTabAt</span><span class="token punctuation">(</span>tab<span class="token punctuation">,</span> i<span class="token punctuation">,</span> fwd<span class="token punctuation">)</span><span class="token punctuation">;</span>                        advance <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="helpTransfer方法"><a href="#helpTransfer方法" class="headerlink" title="helpTransfer方法"></a>helpTransfer方法</h3><p>这里是ConcurrentHashMap的精华所在，它的作用就是帮助正在扩容的线程进行扩容，而不是在那傻傻在那等着扩容结束。</p><p>// TODO</p><pre class=" language-java"><code class="language-java"><span class="token keyword">final</span> Node<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">helpTransfer</span><span class="token punctuation">(</span>Node<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span><span class="token punctuation">[</span><span class="token punctuation">]</span> tab<span class="token punctuation">,</span> Node<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span> f<span class="token punctuation">)</span> <span class="token punctuation">{</span>    Node<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span><span class="token punctuation">[</span><span class="token punctuation">]</span> nextTab<span class="token punctuation">;</span> <span class="token keyword">int</span> sc<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>tab <span class="token operator">!=</span> null <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>f <span class="token keyword">instanceof</span> <span class="token class-name">ForwardingNode</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span>        <span class="token punctuation">(</span>nextTab <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>ForwardingNode<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span><span class="token punctuation">)</span>f<span class="token punctuation">)</span><span class="token punctuation">.</span>nextTable<span class="token punctuation">)</span> <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> rs <span class="token operator">=</span> <span class="token function">resizeStamp</span><span class="token punctuation">(</span>tab<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>nextTab <span class="token operator">==</span> nextTable <span class="token operator">&amp;&amp;</span> table <span class="token operator">==</span> tab <span class="token operator">&amp;&amp;</span>               <span class="token punctuation">(</span>sc <span class="token operator">=</span> sizeCtl<span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>sc <span class="token operator">>>></span> RESIZE_STAMP_SHIFT<span class="token punctuation">)</span> <span class="token operator">!=</span> rs <span class="token operator">||</span> sc <span class="token operator">==</span> rs <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">||</span>                sc <span class="token operator">==</span> rs <span class="token operator">+</span> MAX_RESIZERS <span class="token operator">||</span> transferIndex <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>U<span class="token punctuation">.</span><span class="token function">compareAndSwapInt</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> SIZECTL<span class="token punctuation">,</span> sc<span class="token punctuation">,</span> sc <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token function">transfer</span><span class="token punctuation">(</span>tab<span class="token punctuation">,</span> nextTab<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> nextTab<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> table<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 并发 </tag>
            
            <tag> 集合 </tag>
            
            <tag> ConcurrentHashMap </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ZooKeeper初探及使用场景</title>
      <link href="/2020/09/08/zookeeper-chu-tan-ji-shi-yong-chang-jing/"/>
      <url>/2020/09/08/zookeeper-chu-tan-ji-shi-yong-chang-jing/</url>
      
        <content type="html"><![CDATA[<h2 id="认识ZooKeeper"><a href="#认识ZooKeeper" class="headerlink" title="认识ZooKeeper"></a>认识ZooKeeper</h2><p>ZooKeeper是一个分布式调度协调服务，分布式应用的产生必定会带来多节点之间的协调问题，这个时候ZooKeeper就出现了。很多开源中间件都用到了ZooKeeper,比如KafKa就是强依赖于ZooKeeper.它自身也是一个分布式应用。</p><h2 id="ZooKeeper节点特性"><a href="#ZooKeeper节点特性" class="headerlink" title="ZooKeeper节点特性"></a>ZooKeeper节点特性</h2><p>ZooKeeper共有4种节点，分别是持久节点，持久序号节点，临时节点，临时序号节点</p><table><thead><tr><th align="left"></th><th>特性</th><th>创建命令</th></tr></thead><tbody><tr><td align="left">持久节点</td><td>持久化保存的节点，默认创建</td><td>create /test</td></tr><tr><td align="left">持久序号节点</td><td>持久化保存的节点，创建的时候会在路径上加上序号作为后缀比如/test会创建出/test00000001</td><td>create -s /test</td></tr><tr><td align="left">临时节点</td><td>临时节点会在客户端删除的时候自动删除</td><td>create -e /test</td></tr><tr><td align="left">临时序号节点</td><td>临时节点会在客户端删除的时候自动删除，创建的时候会在路径上加上序号作为后缀比如/test会创建出/test00000001</td><td>create -e -s /test</td></tr><tr><td align="left">Container节点</td><td>Container节点目录下没有子节点会在zookeeper内部的定时任务轮训下自动删除,（刚开始的没有不算，只有有了子节点后被清除才会有之前的逻辑）</td><td>create ‐c /test</td></tr><tr><td align="left">TTL 节点</td><td>禁用，需在系统配置增加 zookeeper.extendedTypesEnabled=true，</td><td>create ‐t 500 /test</td></tr></tbody></table><h2 id="Zookeeper-ACL-权限控制"><a href="#Zookeeper-ACL-权限控制" class="headerlink" title="Zookeeper ACL 权限控制"></a>Zookeeper ACL 权限控制</h2><p>权限信息</p><ul><li>创建权限（c: create）:授予权限的对象可以在数据节点下创建子节点</li><li>更新权限（w: wirte）:授予权限的对象可以更新该数据节点</li><li>读取权限（r: read）：授予权限的对象可以读取该节点的内容以及子节点的列表信息</li><li>删除权限（d: delete）：授予权限的对象可以删除该数据节点的子节点</li><li>管理者权限（a: admin）：授予权限的对象可以对该数据节点体进行 ACL 权限设置</li></ul><p>ACL的设置有2种方式：</p><ol><li><p>创建节点的时候直接设置</p><pre class=" language-shell"><code class="language-shell">create /test-node datatest digest:test:V28q/NynI4JI3Rk54h0r8O5kMug=:cdrwa</code></pre></li><li><p>单独设置</p><pre class=" language-shell"><code class="language-shell">setAcl /test-node digest:test:V28q/NynI4JI3Rk54h0r8O5kMug=:cdrwa</code></pre><p>授权过后不能直接访问需要授权才能访问</p><p>授权</p><pre class=" language-shell"><code class="language-shell">addauth digest test:test</code></pre><p>上诉授权是密文，如果想要明文授权我们需要先获取权限在进行授权</p><pre class=" language-shell"><code class="language-shell">addauth digest test:testcreate /test-node1 test auth:test:test:cdwra</code></pre><p>最后还有一种授权方式是对ip进行授权</p><pre class=" language-shell"><code class="language-shell">create /test-node2 data ip:192.168.186.131:cdwrasetAcl /test-node2 ip:192.168.186.131:cdwra</code></pre></li></ol><p>超级管理员模式</p><p>启动脚本添加</p><p><strong>-Dzookeeper.DigestAuthenticationProvider.superDigest=zk:N0YquoLgOZWu74hzsd3OJTZZUw0=</strong></p><p>具体可看zookeeper安装博文</p><h2 id="ZooKeeper集群"><a href="#ZooKeeper集群" class="headerlink" title="ZooKeeper集群"></a>ZooKeeper集群</h2><p>ZooKeeper集群主要解决的是<strong>高可用</strong>、<strong>读写分离提高承载能力</strong>。ZooKeeper集群必须保证有<strong>至少三个节点</strong>，不然部署失败</p><p>集群角色</p><table><thead><tr><th></th><th>角色名称</th><th>功能</th></tr></thead><tbody><tr><td>leader</td><td>主节点，领导者</td><td>写数据，通过选举产生</td></tr><tr><td>follower</td><td>从节点，追随者</td><td>读数据，主节点的备选节点，拥有投票权</td></tr><tr><td>observer</td><td>次级子节点，观察者</td><td>读数据，无投票权，不能选举为主节点，计算集群可用状态不会将其计算在内</td></tr></tbody></table><h3 id="数据提交机制"><a href="#数据提交机制" class="headerlink" title="数据提交机制"></a>数据提交机制</h3><p>ZooKeeper是一个CP架构，它专注于的是一致性，为什么它拥有一致性？</p><p>流程：客户端会向服务端发起写请求，如果请求对象不是主节点，从节点会把请求转发给主节点，数据写进主节点，主节点发送请求proposal给从节点，从节点写进事务日志后给主节点一个ack，主节点统计ack数量，如果ack数量是集群半数以上，主节点又会发起一个commit请求给客户端，客户端记录事务提交，并把数据更新到内存中去，主节点告诉客户端我写好了，在同步数据这段时间，ZooKeeper对于客户端而言是不可用的，多以它不满足可用性，所以他是CP架构。</p><p>在集群运行过程当中如果有一个follower节点宕机，由于宕机节点没过半，集群仍然能正常服务。当leader收到新的客户端请求，此时无法同步给宕机的节点。造成数据不一致。为了解决这个问题，当节点启动时，第一件事情就是找当前的Leader，比对数据是否一致。不一致则开始同步,同步完成之后在进行对外提供服务。 </p><p><strong>如何比对Leader的数据版本呢？</strong>这里通过ZXID事物ID来确认。比Leader就需要同步。</p><p>ZXID： ZXID是一个长度64位的数字，其中低32位是按照数字递增，任何数据的变更都会导致,低32位的数字简单加1。高32位是leader周期编号，每当选举出一个新的leader时，新的leader就从本地事物日志中取出ZXID,然后解析出高32位的周期编号，进行加1，再将低32位的全部设置为0。这样就保证了每次新选举的leader后，保证了ZXID的唯一性而且是保证递增的。</p><h3 id="集群选举机制"><a href="#集群选举机制" class="headerlink" title="集群选举机制"></a>集群选举机制</h3><ul><li><h4 id="选票pk成功的条件"><a href="#选票pk成功的条件" class="headerlink" title="选票pk成功的条件"></a>选票pk成功的条件</h4><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// FastLeaderElection.totalOrderPredicate</span><span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>newEpoch <span class="token operator">></span> curEpoch<span class="token punctuation">)</span> <span class="token operator">||</span>                <span class="token punctuation">(</span><span class="token punctuation">(</span>newEpoch <span class="token operator">==</span> curEpoch<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span>                <span class="token punctuation">(</span><span class="token punctuation">(</span>newZxid <span class="token operator">></span> curZxid<span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>newZxid <span class="token operator">==</span> curZxid<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>newId <span class="token operator">></span> curId<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>从代码可以看出</p><p>选举成功3个条件符合其一</p><ol><li>选举周期大的</li><li>周期相等选事务id大的</li><li>周期相等，事务id相等，选serverid大的，serverid就是配置文件配的集群server.*,也就是myid</li></ol><h4 id="选举成功的条件"><a href="#选举成功的条件" class="headerlink" title="选举成功的条件"></a>选举成功的条件</h4><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// FastLeaderElection.termPredicate</span>voteSet<span class="token punctuation">.</span><span class="token function">hasAllQuorums</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// hasAllQuorums</span><span class="token operator">!</span>qvAckset<span class="token punctuation">.</span><span class="token function">getQuorumVerifier</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">containsQuorum</span><span class="token punctuation">(</span>qvAckset<span class="token punctuation">.</span><span class="token function">getAckset</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// QuorumMaj.containsQuorum</span><span class="token punctuation">(</span>ackSet<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">></span> half<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// QuorumMaj</span>half <span class="token operator">=</span> votingMembers<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span></code></pre><p>从这段代码可以看出选举成功就是对某一节点的选票超过半数即为选举成功</p><h4 id="选举触发条件"><a href="#选举触发条件" class="headerlink" title="选举触发条件"></a>选举触发条件</h4><ul><li><p>节点初始化启动时</p><p>节点启动的时候会在集群中寻找是否有leader,找到了就与leader建立通信，自身变为follower或observer,没有找到Leader,当前节点记录为LOOKING，开始选举</p></li><li><p>半数以上节点无法和Leader建立通信</p><p>Leader一挂，只要有半数节点感知到Leader挂了，就所有follower进入到LOOKING状态，开始选举</p></li></ul><h4 id="选举流程"><a href="#选举流程" class="headerlink" title="选举流程"></a>选举流程</h4><p>每个节点启动后都会默认给自己投票，收到其他节点会通过选票pk成功的条件判断谁获胜了，当前节点会更改自己的选票为获胜方，下一轮选举会发给其他节点，最后统计选票，选票超过半数即为LEADING，若自己节点不是LEADING节点就是FOLLOWER或OBSERVER。</p><p>如果集群已经选举完成，新节点加入集群，会首先发送选票给其他节点，其他节点接收到选票后由于已经有LEADING，会把LEADING节点发送给新节点，新节点更改为FOLLOWER.</p></li></ul><h3 id="Q-amp-A"><a href="#Q-amp-A" class="headerlink" title="Q&amp;A"></a>Q&amp;A</h3><ul><li><p>为什么建议集群奇数个节点？</p><p>节省资源，3节点和4节点都是挂2个节点不可用，所以用4个节点站在可用性的角度来看没意义</p></li><li><p>为什么要有半数机制？</p><p>脑裂问题，假设你有4个节点，由于网络抖动分裂成了2个集群，然后这2个集群都会进行选举，会选举出2个leader,网络恢复后就有2个leader，肯定是有问题的，但半数机制就保证了这种问题不会发生，就算网络抖动也只会选举出一个leader</p></li></ul><h2 id="ZooKeeper使用场景"><a href="#ZooKeeper使用场景" class="headerlink" title="ZooKeeper使用场景"></a>ZooKeeper使用场景</h2><h3 id="分布式锁"><a href="#分布式锁" class="headerlink" title="分布式锁"></a>分布式锁</h3><p>在单体应用中，我们可以用synchronized或者ReentrantLock来实现锁机制。但在分布式应用中不行，因为synchronized或者ReentrantLock只针对于一个JVM中可以使用。所以我们必须使用分布式锁来实现锁机制。可以使用Redis或ZooKeeper实现，Redis就不多说了。</p><p>实现分布式锁的主要逻辑就是利用临时序号节点，我创建一个临时序号节点，继续创建临时序号节点会自增最后形成一堆有序的节点，通过序号我们可以知道哪个节点在前哪个节点在后，序号最小的节点才有资格拿锁，后一个节点监听前一个节点，当前一个节点被删除了，我后一个节点就可以去尝试激活锁了。</p><p>这里为什么不直接每个节点监听加锁节点，加锁节点删除在找到最小序号去加锁呢？</p><p>这里主要是防止羊群效应，一旦加锁节点被释放就会有大量的节点被触发，然后反查Lock子节点可能会让zookeeper承受巨大的压力。</p><p>这里写一个简单的demo</p><pre class=" language-java"><code class="language-java"><span class="token keyword">private</span> String server <span class="token operator">=</span> <span class="token string">"你的zookeeper地址"</span><span class="token punctuation">;</span><span class="token keyword">private</span> ZkClient zkClient<span class="token punctuation">;</span><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> String rootPath <span class="token operator">=</span> <span class="token string">"/dm-lock"</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token function">ZookeeperLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    zkClient <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ZkClient</span><span class="token punctuation">(</span>server<span class="token punctuation">,</span> <span class="token number">5000</span><span class="token punctuation">,</span> <span class="token number">20000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 创建根节点</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>zkClient<span class="token punctuation">.</span><span class="token function">exists</span><span class="token punctuation">(</span>rootPath<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        zkClient<span class="token punctuation">.</span><span class="token function">createPersistent</span><span class="token punctuation">(</span>rootPath<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/** * 加锁 */</span><span class="token keyword">public</span> Lock <span class="token function">lock</span><span class="token punctuation">(</span>String lockId<span class="token punctuation">,</span> <span class="token keyword">long</span> timeout<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 创建临时序号节点</span>    Lock lockNode <span class="token operator">=</span> <span class="token function">createLockNode</span><span class="token punctuation">(</span>lockId<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 尝试拿锁</span>    lockNode <span class="token operator">=</span> <span class="token function">tryActiveLock</span><span class="token punctuation">(</span>lockNode<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 没有拿到锁</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>lockNode<span class="token punctuation">.</span><span class="token function">isActive</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>lockNode<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// 把线程hang在这里然后等待监听事件触发，拿到锁，释放线程</span>                <span class="token comment" spellcheck="true">// 在tryActiveLockelse逻辑里面</span>                lockNode<span class="token punctuation">.</span><span class="token function">wait</span><span class="token punctuation">(</span>timeout<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 线程hang住的时间里面还没拿到锁就抛异常</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>lockNode<span class="token punctuation">.</span><span class="token function">isActive</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span><span class="token string">"lock timeout"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> lockNode<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/** * 释放锁 */</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">unlock</span><span class="token punctuation">(</span>Lock lock<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>lock<span class="token punctuation">.</span><span class="token function">isActive</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        zkClient<span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span>lock<span class="token punctuation">.</span><span class="token function">getPath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/** * 尝试激活锁 */</span><span class="token keyword">private</span> Lock <span class="token function">tryActiveLock</span><span class="token punctuation">(</span>Lock lockNode<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//  获取根节点下面所有的排好序的子节点</span>    List<span class="token operator">&lt;</span>String<span class="token operator">></span> list <span class="token operator">=</span> zkClient<span class="token punctuation">.</span><span class="token function">getChildren</span><span class="token punctuation">(</span>rootPath<span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">sorted</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>p <span class="token operator">-</span><span class="token operator">></span> rootPath <span class="token operator">+</span> <span class="token string">"/"</span> <span class="token operator">+</span> p<span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span>Collectors<span class="token punctuation">.</span><span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 取最小的节点，这个节点就应该是应该加锁的节点</span>    String firstNodePath <span class="token operator">=</span> list<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 最小节点是不是当前节点,是就直接加锁</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>firstNodePath<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>lockNode<span class="token punctuation">.</span><span class="token function">getPath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        lockNode<span class="token punctuation">.</span><span class="token function">setActive</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 取得当前节点减一，要监听这个节点</span>        String upNodePath <span class="token operator">=</span> list<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>list<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span>lockNode<span class="token punctuation">.</span><span class="token function">getPath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        zkClient<span class="token punctuation">.</span><span class="token function">subscribeDataChanges</span><span class="token punctuation">(</span>upNodePath<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">IZkDataListener</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">handleDataChange</span><span class="token punctuation">(</span>String dataPath<span class="token punctuation">,</span> Object data<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">// 前一个节点被释放回调</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">handleDataDeleted</span><span class="token punctuation">(</span>String dataPath<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// 重新尝试拿锁</span>                Lock lock <span class="token operator">=</span> <span class="token function">tryActiveLock</span><span class="token punctuation">(</span>lockNode<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>lockNode<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token comment" spellcheck="true">// 之前同步块的线程释放</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>lock<span class="token punctuation">.</span><span class="token function">isActive</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                        lockNode<span class="token punctuation">.</span><span class="token function">notify</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                     <span class="token punctuation">}</span>                <span class="token punctuation">}</span>                zkClient<span class="token punctuation">.</span><span class="token function">unsubscribeDataChanges</span><span class="token punctuation">(</span>upNodePath<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> lockNode<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/** * 创建临时序号节点 */</span><span class="token keyword">public</span> Lock <span class="token function">createLockNode</span><span class="token punctuation">(</span>String lockId<span class="token punctuation">)</span> <span class="token punctuation">{</span>    String nodePath <span class="token operator">=</span> zkClient<span class="token punctuation">.</span><span class="token function">createEphemeralSequential</span><span class="token punctuation">(</span>rootPath <span class="token operator">+</span> <span class="token string">"/"</span> <span class="token operator">+</span> lockId<span class="token punctuation">,</span> <span class="token string">"w"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Lock</span><span class="token punctuation">(</span>lockId<span class="token punctuation">,</span> nodePath<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>当然这里的代码还是会有一些问题的，比如重试机制的处理，幽灵节点的处理，这里只是更好的理解分布式锁，建议直接使用Curator客户端。</p><h3 id="Curator分布式锁使用及源码"><a href="#Curator分布式锁使用及源码" class="headerlink" title="Curator分布式锁使用及源码"></a>Curator分布式锁使用及源码</h3><p>基本使用</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 配置类</span><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CuratorConfig</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Bean</span><span class="token punctuation">(</span>initMethod <span class="token operator">=</span> <span class="token string">"start"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> CuratorFramework <span class="token function">curatorFramework</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        RetryPolicy retryPolicy <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ExponentialBackoffRetry</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> CuratorFrameworkFactory<span class="token punctuation">.</span><span class="token function">newClient</span><span class="token punctuation">(</span>ZookeeperConstants<span class="token punctuation">.</span>SERVER<span class="token punctuation">,</span> retryPolicy<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Service</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MutexLock</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Autowired</span>    CuratorFramework curatorFramework<span class="token punctuation">;</span>    <span class="token keyword">public</span> Object <span class="token function">handler</span><span class="token punctuation">(</span>Integer id<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        InterProcessMutex interProcessMutex <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">InterProcessMutex</span><span class="token punctuation">(</span>curatorFramework<span class="token punctuation">,</span> <span class="token string">"/product_"</span><span class="token operator">+</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            interProcessMutex<span class="token punctuation">.</span><span class="token function">acquire</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 模拟业务执行</span>            Thread<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>e <span class="token keyword">instanceof</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">throw</span> e<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token keyword">finally</span> <span class="token punctuation">{</span>            interProcessMutex<span class="token punctuation">.</span><span class="token function">release</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token string">"ok"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>原理和之前使用的zkClient原理基本一致</p><ol><li>请求进来，没有根节点，创建容器节点作为根节点，</li><li>在跟节点下创建临时序号节点</li><li>判断节点是不是最小的节点，是最小的节点直接获取锁，不是就监听前一个节点</li><li>获得锁的请求，处理完业务代码释放锁删除节点然后监听它的节点收到通知，走第三步</li></ol><p>源码：</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 从interProcessMutex.acquire();进入代码</span><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">acquire</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception<span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token operator">!</span><span class="token function">internalLock</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> null<span class="token punctuation">)</span> <span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IOException</span><span class="token punctuation">(</span><span class="token string">"Lost connection while trying to acquire lock: "</span> <span class="token operator">+</span> basePath<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">private</span> <span class="token keyword">boolean</span> <span class="token function">internalLock</span><span class="token punctuation">(</span><span class="token keyword">long</span> time<span class="token punctuation">,</span> TimeUnit unit<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception<span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/*           Note on concurrency: a given lockData instance           can be only acted on by a single thread so locking isn't necessary        */</span>    <span class="token comment" spellcheck="true">// 获取当前线程</span>    Thread currentThread <span class="token operator">=</span> Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// threadData是一个Map,key是当前线程，value是LocalData LocalData里面主要是加锁路径和加锁次数</span>    LockData lockData <span class="token operator">=</span> threadData<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>currentThread<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 不是空说明当前线程已经获得锁了</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span> lockData <span class="token operator">!=</span> null <span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// re-entering</span>        <span class="token comment" spellcheck="true">// 这里对LocalData里面的lockCount自增，这里说明了锁的可重入特性</span>        lockData<span class="token punctuation">.</span>lockCount<span class="token punctuation">.</span><span class="token function">incrementAndGet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 这里是加锁逻辑，主要方法是attemptLock</span>    String lockPath <span class="token operator">=</span> internals<span class="token punctuation">.</span><span class="token function">attemptLock</span><span class="token punctuation">(</span>time<span class="token punctuation">,</span> unit<span class="token punctuation">,</span> <span class="token function">getLockNodeBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 加锁成功</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span> lockPath <span class="token operator">!=</span> null <span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 加锁信息放进threadData里面</span>        LockData newLockData <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LockData</span><span class="token punctuation">(</span>currentThread<span class="token punctuation">,</span> lockPath<span class="token punctuation">)</span><span class="token punctuation">;</span>        threadData<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>currentThread<span class="token punctuation">,</span> newLockData<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>attemptLock方法：</p><pre class=" language-java"><code class="language-java">String <span class="token function">attemptLock</span><span class="token punctuation">(</span><span class="token keyword">long</span> time<span class="token punctuation">,</span> TimeUnit unit<span class="token punctuation">,</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> lockNodeBytes<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception<span class="token punctuation">{</span>    <span class="token keyword">final</span> <span class="token keyword">long</span>      startMillis <span class="token operator">=</span> System<span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">final</span> Long      millisToWait <span class="token operator">=</span> <span class="token punctuation">(</span>unit <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token operator">?</span> unit<span class="token punctuation">.</span><span class="token function">toMillis</span><span class="token punctuation">(</span>time<span class="token punctuation">)</span> <span class="token operator">:</span> null<span class="token punctuation">;</span>    <span class="token keyword">final</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span>    localLockNodeBytes <span class="token operator">=</span> <span class="token punctuation">(</span>revocable<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token keyword">new</span> <span class="token class-name">byte</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">:</span> lockNodeBytes<span class="token punctuation">;</span>    <span class="token keyword">int</span>             retryCount <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    String          ourPath <span class="token operator">=</span> null<span class="token punctuation">;</span>    <span class="token keyword">boolean</span>         hasTheLock <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token keyword">boolean</span>         isDone <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span> <span class="token operator">!</span>isDone <span class="token punctuation">)</span>    <span class="token punctuation">{</span>        isDone <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token keyword">try</span>        <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 主要逻辑</span>            <span class="token comment" spellcheck="true">// 加锁逻辑</span>            ourPath <span class="token operator">=</span> driver<span class="token punctuation">.</span><span class="token function">createsTheLock</span><span class="token punctuation">(</span>client<span class="token punctuation">,</span> path<span class="token punctuation">,</span> localLockNodeBytes<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 判断节点是不是最小的节点，是最小的节点直接获取锁，不是就监听前一个节点</span>            hasTheLock <span class="token operator">=</span> <span class="token function">internalLockLoop</span><span class="token punctuation">(</span>startMillis<span class="token punctuation">,</span> millisToWait<span class="token punctuation">,</span> ourPath<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">catch</span> <span class="token punctuation">(</span> KeeperException<span class="token punctuation">.</span>NoNodeException e <span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// gets thrown by StandardLockInternalsDriver when it can't find the lock node</span>            <span class="token comment" spellcheck="true">// this can happen when the session expires, etc. So, if the retry allows, just try it all again</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span> client<span class="token punctuation">.</span><span class="token function">getZookeeperClient</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getRetryPolicy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">allowRetry</span><span class="token punctuation">(</span>retryCount<span class="token operator">++</span><span class="token punctuation">,</span> System<span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> startMillis<span class="token punctuation">,</span> RetryLoop<span class="token punctuation">.</span><span class="token function">getDefaultRetrySleeper</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">)</span>            <span class="token punctuation">{</span>                isDone <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">else</span>            <span class="token punctuation">{</span>                <span class="token keyword">throw</span> e<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span> hasTheLock <span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">return</span> ourPath<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> null<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>加锁逻辑createsTheLock方法：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> String <span class="token function">createsTheLock</span><span class="token punctuation">(</span>CuratorFramework client<span class="token punctuation">,</span> String path<span class="token punctuation">,</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> lockNodeBytes<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception<span class="token punctuation">{</span>    String ourPath<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span> lockNodeBytes <span class="token operator">!=</span> null <span class="token punctuation">)</span>    <span class="token punctuation">{</span>        ourPath <span class="token operator">=</span> client<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">creatingParentContainersIfNeeded</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">withProtection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">withMode</span><span class="token punctuation">(</span>CreateMode<span class="token punctuation">.</span>EPHEMERAL_SEQUENTIAL<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forPath</span><span class="token punctuation">(</span>path<span class="token punctuation">,</span> lockNodeBytes<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">else</span>    <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 这里会创建一个根节点是容器节点（子节点全部删完会删除父节点，子节点全部删了就没有必要维护父节点了，所以直接删除掉），还有子节点是临时序号节点</span>        ourPath <span class="token operator">=</span> client<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">creatingParentContainersIfNeeded</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">withProtection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">withMode</span><span class="token punctuation">(</span>CreateMode<span class="token punctuation">.</span>EPHEMERAL_SEQUENTIAL<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forPath</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> ourPath<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>internalLockLoop：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">boolean</span> <span class="token function">internalLockLoop</span><span class="token punctuation">(</span><span class="token keyword">long</span> startMillis<span class="token punctuation">,</span> Long millisToWait<span class="token punctuation">,</span> String ourPath<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception<span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 是否获取锁</span>    <span class="token keyword">boolean</span>     haveTheLock <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token keyword">boolean</span>     doDelete <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token keyword">try</span>    <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span> revocable<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> null <span class="token punctuation">)</span>        <span class="token punctuation">{</span>            client<span class="token punctuation">.</span><span class="token function">getData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">usingWatcher</span><span class="token punctuation">(</span>revocableWatcher<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forPath</span><span class="token punctuation">(</span>ourPath<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>                <span class="token comment" spellcheck="true">// 自旋直至获得锁，或者到达超时时间</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span> <span class="token punctuation">(</span>client<span class="token punctuation">.</span><span class="token function">getState</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> CuratorFrameworkState<span class="token punctuation">.</span>STARTED<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>haveTheLock <span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 获取所有子节点并排序</span>            List<span class="token operator">&lt;</span>String<span class="token operator">></span>        children <span class="token operator">=</span> <span class="token function">getSortedChildren</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 处理当前节点把父路径截取仅获取后面，sequenceNodeName在children列表中</span>            String              sequenceNodeName <span class="token operator">=</span> ourPath<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span>basePath<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// +1 to include the slash</span>            <span class="token comment" spellcheck="true">// 判断节点是否是最小</span>            PredicateResults    predicateResults <span class="token operator">=</span> driver<span class="token punctuation">.</span><span class="token function">getsTheLock</span><span class="token punctuation">(</span>client<span class="token punctuation">,</span> children<span class="token punctuation">,</span> sequenceNodeName<span class="token punctuation">,</span> maxLeases<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 获取锁</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span> predicateResults<span class="token punctuation">.</span><span class="token function">getsTheLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">)</span>            <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// 更新flag</span>                haveTheLock <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">// 没有拿到锁开启监听</span>            <span class="token keyword">else</span>            <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// 监听节点</span>                String  previousSequencePath <span class="token operator">=</span> basePath <span class="token operator">+</span> <span class="token string">"/"</span> <span class="token operator">+</span> predicateResults<span class="token punctuation">.</span><span class="token function">getPathToWatch</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">// 加锁等待，watcher里面会释放锁，继续while循环</span>                <span class="token keyword">synchronized</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span>                <span class="token punctuation">{</span>                    <span class="token keyword">try</span>                    <span class="token punctuation">{</span>                        <span class="token comment" spellcheck="true">// use getData() instead of exists() to avoid leaving unneeded watchers which is a type of resource leak</span>                        <span class="token comment" spellcheck="true">// 监听</span>                        client<span class="token punctuation">.</span><span class="token function">getData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">usingWatcher</span><span class="token punctuation">(</span>watcher<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forPath</span><span class="token punctuation">(</span>previousSequencePath<span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token comment" spellcheck="true">// 有millisToWait就等待一段时间</span>                        <span class="token keyword">if</span> <span class="token punctuation">(</span> millisToWait <span class="token operator">!=</span> null <span class="token punctuation">)</span>                        <span class="token punctuation">{</span>                            millisToWait <span class="token operator">-=</span> <span class="token punctuation">(</span>System<span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> startMillis<span class="token punctuation">)</span><span class="token punctuation">;</span>                            startMillis <span class="token operator">=</span> System<span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                            <span class="token keyword">if</span> <span class="token punctuation">(</span> millisToWait <span class="token operator">&lt;=</span> <span class="token number">0</span> <span class="token punctuation">)</span>                            <span class="token punctuation">{</span>                                doDelete <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// timed out - delete our node</span>                                <span class="token keyword">break</span><span class="token punctuation">;</span>                            <span class="token punctuation">}</span>                                                    <span class="token function">wait</span><span class="token punctuation">(</span>millisToWait<span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token punctuation">}</span>                        <span class="token comment" spellcheck="true">// 一直等待</span>                        <span class="token keyword">else</span>                        <span class="token punctuation">{</span>                            <span class="token function">wait</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token punctuation">}</span>                    <span class="token punctuation">}</span>                    <span class="token keyword">catch</span> <span class="token punctuation">(</span> KeeperException<span class="token punctuation">.</span>NoNodeException e <span class="token punctuation">)</span>                    <span class="token punctuation">{</span>                        <span class="token comment" spellcheck="true">// it has been deleted (i.e. lock released). Try to acquire again</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">catch</span> <span class="token punctuation">(</span> Exception e <span class="token punctuation">)</span>    <span class="token punctuation">{</span>        ThreadUtils<span class="token punctuation">.</span><span class="token function">checkInterrupted</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>        doDelete <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token keyword">throw</span> e<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">finally</span>    <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span> doDelete <span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token function">deleteOurPath</span><span class="token punctuation">(</span>ourPath<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> haveTheLock<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>getsTheLock方法：</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 判断节点是否是最小</span><span class="token keyword">public</span> PredicateResults <span class="token function">getsTheLock</span><span class="token punctuation">(</span>CuratorFramework client<span class="token punctuation">,</span> List<span class="token operator">&lt;</span>String<span class="token operator">></span> children<span class="token punctuation">,</span> String sequenceNodeName<span class="token punctuation">,</span> <span class="token keyword">int</span> maxLeases<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception<span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 看sequenceNodeName在children中的位置</span>    <span class="token keyword">int</span>             ourIndex <span class="token operator">=</span> children<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span>sequenceNodeName<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">validateOurIndex</span><span class="token punctuation">(</span>sequenceNodeName<span class="token punctuation">,</span> ourIndex<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// maxLeases是1的逻辑在LockInternals的构造方法中。</span>    <span class="token comment" spellcheck="true">// maxLeases是1，只要ourIndex是0就表示最小，这里是互斥锁，如果是读写锁maxLeases就不是1后面会说到</span>    <span class="token keyword">boolean</span>         getsTheLock <span class="token operator">=</span> ourIndex <span class="token operator">&lt;</span> maxLeases<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 要监听的节点如果拿到锁了不监听pathToWatch是null.否则监听前一个节点</span>    String          pathToWatch <span class="token operator">=</span> getsTheLock <span class="token operator">?</span> null <span class="token operator">:</span> children<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>ourIndex <span class="token operator">-</span> maxLeases<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 基本信息封装</span>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">PredicateResults</span><span class="token punctuation">(</span>pathToWatch<span class="token punctuation">,</span> getsTheLock<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h3 id="分布式注册中心"><a href="#分布式注册中心" class="headerlink" title="分布式注册中心"></a>分布式注册中心</h3><p>在这里，首先得了解注册中心是什么？单体应用升级到分布式应用，肯定会有成千上万个服务节点不同的客户端会调用这些服务节点，如果把这些服务节点配置到客户端的话会很复杂，这时候就需要一个中间件来帮助我们找到我们需要调用的服务，这就是服务发现。</p><p>一般注册中心需要一下几个功能，服务注册，服务发现，服务订阅</p><ul><li>服务注册：服务刚启动将自己的信息注册到注册中心</li><li>服务发现：客户端通过注册中心找到自己要调用的服务，然后通过RPC进行调用</li><li>服务订阅：能动态感知服务的变化</li></ul><p>我们可以把注册的服务写成临时节点，只要服务一下线就会自动删除对应的服务。</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ZooKeeper </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Netty线程模型初探和Netty的常见问题</title>
      <link href="/2020/09/07/netty-xian-cheng-mo-xing-chu-tan-he-netty-de-chang-jian-wen-ti/"/>
      <url>/2020/09/07/netty-xian-cheng-mo-xing-chu-tan-he-netty-de-chang-jian-wen-ti/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>Netty是现在比较流行的NIO框架。它的健壮性、可扩展性、性能方面都得到了很多项目的验证。</p><p>要想了解Netty，首先得了解IO模型。Java支持三种IO模型分别是BIO,NIO,AIO。</p><ul><li>BIO：同步阻塞模型，连接一个请求就会有一个线程，假设有个客户端连接进来了，一直不做读写操作，这个连接就会一直占用，会大量的浪费资源，，如果连接的客户端巨多，就会导致线程数暴增，可能服务器都撑不住。使用场景，连接数比较小且不会有连接数暴增</li><li>NIO：同步非阻塞模型，主要实现的是一个线程可以处理多个连接，它的实现逻辑是把所有打过来的请求都会丢到一个selector（多路复用器）上面去，多路复用器在去轮询，根据请求类型进行读、写、连接处理。多路复用器底层就是调用的操作系统的select，poll，epoll方法实现。使用场景：连接数多但连接较短。</li><li>AIO：异步非阻塞模型，发起请求后会回调服务端程序去执行对应的请求，相当于一个钩子程序，NIO的升级版。使用场景：连接数多，且连接耗时较长</li></ul><h2 id="认识Netty"><a href="#认识Netty" class="headerlink" title="认识Netty"></a>认识Netty</h2><p>Netty说白了就是对NIO的一层封装，改造了原来的IO模型提升性能，为了让你代码写起来更方便，增强扩展性。</p><p>Netty在游戏领域，开源中间件（Dubbo,RocketMQ）,大数据领域(Hadoop)，通信行业等方向都有不少的应用。</p><p>Netty优点</p><ul><li>使用简单</li><li>功能强大，内置了很多编解码功能，对主流协议的支持</li><li>定制能力强，可以通过ChannelHandler进行定制化开发</li><li>性能高</li><li>经历了多种行业的锤炼，证明了它的稳定性</li></ul><h2 id="Netty线程模型"><a href="#Netty线程模型" class="headerlink" title="Netty线程模型"></a>Netty线程模型</h2><p>Netty线程模型跟Reactor模式相一致。而Reacror模式又分为三种。主要核心逻辑可以参照Doug Lea大佬的<a href="http://gee.cs.oswego.edu/dl/cpjslides/nio.pdf">Scalable IO in Java</a></p><ul><li><p>单线程模型</p><p><img src="https://blog-dm.oss-cn-shanghai.aliyuncs.com/articleimage/20200907215427.png" alt="单线程模型"></p><p>从图可以看出Reactor内部通过selector进行监控，如果收到的是一个连接请求就通过dispatch分发任务给acceptor去处理并生成一个handler去处理之后的读写请求。因为处理连接和读写请求都在一个线程里面去执行，所以如果handler被阻塞了,会导致其他的线程同样不能执行，性能受到影响。</p></li><li><p>多线程模型</p><p><img src="https://blog-dm.oss-cn-shanghai.aliyuncs.com/articleimage/20200907220454.png" alt="多线程模型"></p><p>从图看出，Reactor收到一个连接请求就分发给acceptor,然后acceptor创建一个Handler处理后续事件Handler不处理业务操作，只负责响应度和写，业务操作扔到线程池里面去操作。这里的性能瓶颈是单Reactor，当有大量的客户端进行连接，可能会有处理不过来的情况。</p></li><li><p>主从多线程模型</p><p><img src="https://blog-dm.oss-cn-shanghai.aliyuncs.com/articleimage/image-20200907221055477.png" alt="主从多线程模型"></p></li></ul><p>这里使用了多个Reactor,mainReactor处理进来的连接请求，交给acceptor处理，然后acceptor将新的连接分配给一个子线程，子线程subReactor将分配过来的连接加入连接队列并通过自己的selector进行监听，并创建一个Handler处理后续事件。</p><p>对于Netty而言上诉几种模型都可以实现。主要看NioEventLoopGroup线程个数的分配。</p><p>单线程模型</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 只申请一个工作线程</span>NioEventLoopGroup group <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">NioEventLoopGroup</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>ServerBootstrap bootstrap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ServerBootstrap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>bootstrap<span class="token punctuation">.</span><span class="token function">group</span><span class="token punctuation">(</span>group<span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">channel</span><span class="token punctuation">(</span>NioServerSocketChannel<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">option</span><span class="token punctuation">(</span>ChannelOption<span class="token punctuation">.</span>SO_BACKLOG<span class="token punctuation">,</span> <span class="token number">1024</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">childHandler</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ServerHandlerInitializer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>多线程模型</p><pre class=" language-java"><code class="language-java">NioEventLoopGroup eventGroup <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">NioEventLoopGroup</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>ServerBootstrap bootstrap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ServerBootstrap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>bootstrap<span class="token punctuation">.</span><span class="token function">group</span><span class="token punctuation">(</span>eventGroup<span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">channel</span><span class="token punctuation">(</span>NioServerSocketChannel<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">option</span><span class="token punctuation">(</span>ChannelOption<span class="token punctuation">.</span>SO_BACKLOG<span class="token punctuation">,</span> <span class="token number">1024</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">childHandler</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ServerHandlerInitializer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>主从多线程模型(最常用)</p><pre class=" language-java"><code class="language-java">NioEventLoopGroup bossGroup <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">NioEventLoopGroup</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>NioEventLoopGroup workerGroup <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">NioEventLoopGroup</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>ServerBootstrap bootstrap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ServerBootstrap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>bootstrap<span class="token punctuation">.</span><span class="token function">group</span><span class="token punctuation">(</span>bossGroup<span class="token punctuation">,</span>workerGroup<span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">channel</span><span class="token punctuation">(</span>NioServerSocketChannel<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">option</span><span class="token punctuation">(</span>ChannelOption<span class="token punctuation">.</span>SO_BACKLOG<span class="token punctuation">,</span> <span class="token number">1024</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">childHandler</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ServerHandlerInitializer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>Netty的线程模型是对于上诉的Reactor模式进行了一定的升级，但核心思想没有变。</p><p><a href="https://www.processon.com/view/link/5ee107f7f346fb1ae5592b33">Netty线程模型图</a></p><p><img src="https://blog-dm.oss-cn-shanghai.aliyuncs.com/articleimage/clipboard.png" alt="Netty线程模型架构"></p><h2 id="Netty相关组件"><a href="#Netty相关组件" class="headerlink" title="Netty相关组件"></a>Netty相关组件</h2><p>Netty的一个服务端通用代码</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>    EventLoopGroup bossGroup <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">NioEventLoopGroup</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    EventLoopGroup workerGroup <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">NioEventLoopGroup</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>        ServerBootstrap bootstrap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ServerBootstrap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        bootstrap<span class="token punctuation">.</span><span class="token function">group</span><span class="token punctuation">(</span>bossGroup<span class="token punctuation">,</span> workerGroup<span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">channel</span><span class="token punctuation">(</span>NioServerSocketChannel<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">option</span><span class="token punctuation">(</span>ChannelOption<span class="token punctuation">.</span>SO_BACKLOG<span class="token punctuation">,</span> <span class="token number">1024</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">childHandler</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ChannelInitializer</span><span class="token operator">&lt;</span>SocketChannel<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token annotation punctuation">@Override</span>                <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">initChannel</span><span class="token punctuation">(</span>SocketChannel ch<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>                    ChannelPipeline pipeline <span class="token operator">=</span> ch<span class="token punctuation">.</span><span class="token function">pipeline</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    pipeline<span class="token punctuation">.</span><span class="token function">addLast</span><span class="token punctuation">(</span><span class="token string">"decoder"</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">StringDecoder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    pipeline<span class="token punctuation">.</span><span class="token function">addLast</span><span class="token punctuation">(</span><span class="token string">"encoder"</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">StringEncoder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    pipeline<span class="token punctuation">.</span><span class="token function">addLast</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">MyServerHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ChannelFuture channelFuture <span class="token operator">=</span> bootstrap<span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token number">9000</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">sync</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        channelFuture<span class="token punctuation">.</span><span class="token function">channel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">closeFuture</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">sync</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>        bossGroup<span class="token punctuation">.</span><span class="token function">shutdownGracefully</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        workerGroup<span class="token punctuation">.</span><span class="token function">shutdownGracefully</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><ul><li>Selector：通过Selector监听多个连接的channel事件，通过selector轮训所有注册的channel,</li><li>NioEventLoopGroup：相当于一个线程池，内部维护类一组线程（NioEventLoop），每个线程处理多个Channel上的事件。</li><li>NioEventLoop：里面有线程和任务队列，有run方法处理不同的事件</li><li>ServerBootstrap：串联Netty所有组件，是Netty的启动类。</li><li>ChannelHandler：ChannelHandler处理I/O事件，并将其转发到pipeline中的下一个处理程序<ul><li>ChannelInboundHandler：处理入站IO事件</li><li>ChannelOutboundHandler：处理出站IO事件</li></ul></li><li>ChannelHandlerContext：关联ChannelHandler</li><li>ChannelPipline：一个由ChannelHandlerContext构成的过滤器链，它是一个双向链表,他会维护一个head和tail,入站则是head-&gt;tail,出站是tail到head,<strong>注意：入站和出站在这里是相对的，read是入站事件，write是出站事件，服务端写数据到客户端，服务端是出站事件，客户端是入站事件</strong></li></ul><h2 id="Netty常见问题"><a href="#Netty常见问题" class="headerlink" title="Netty常见问题"></a>Netty常见问题</h2><h3 id="编解码问题"><a href="#编解码问题" class="headerlink" title="编解码问题"></a>编解码问题</h3><pre class=" language-java"><code class="language-java"> ChannelPipeline pipeline <span class="token operator">=</span> ch<span class="token punctuation">.</span><span class="token function">pipeline</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> pipeline<span class="token punctuation">.</span><span class="token function">addLast</span><span class="token punctuation">(</span><span class="token string">"decoder"</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">StringDecoder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 解码器</span> pipeline<span class="token punctuation">.</span><span class="token function">addLast</span><span class="token punctuation">(</span><span class="token string">"encoder"</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">StringEncoder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 编码器</span> pipeline<span class="token punctuation">.</span><span class="token function">addLast</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">MyServerHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>首先服务器之间的通讯只能是字节，然后我们要把消息发送到客户端，首先要对发送内容进行编码，客户端要对收到内容进行解码.上诉代码就是一个编解码的pipeline.通过分析StringEncoder编码器应该继承的是ChannelOutboundHandlerAdapter或者实现了ChannelOutboundHandler满足出站事件。StringDecoder解码器应该继承的是ChannelInboundHandlerAdapter或者实现了ChannelInboundHandler满足入站事件。看一下继承关系图，发现分析正确</p><p><img src="https://blog-dm.oss-cn-shanghai.aliyuncs.com/articleimage/20200907231616.png" alt="StringDecoder继承关系图"></p><p><img src="https://blog-dm.oss-cn-shanghai.aliyuncs.com/articleimage/20200907231755.png" alt="StringEncoder继承关系图"></p><p>Netty还有其他的编解码器，比如ObjectEncoder和ObjectDecoder</p><h3 id="粘包拆包问题"><a href="#粘包拆包问题" class="headerlink" title="粘包拆包问题"></a>粘包拆包问题</h3><p>由于TCP是面向流的，所以是无消息保护边界的。发送端有时为了更有效地将数据包发送给对方，有时会把多个数据包合并为一个发送就是粘包问题，把一个数据包拆分成多个就是拆包问题。这样带来的问题就是虽然你是提高了效率，但是接收端这边就无法分清哪个数据包是哪个了。</p><p>解决方案：</p><ol><li>对发送内容进行边界控制，就是在你所发送的内容开始与结束加上标志符。但这样不好用，因为每次开发你都的加上边界符，不易于其他人对代码的理解。</li><li>在你所发送的内容上加上发送内容的长度，通过长度判断数据的开始与结束。</li></ol><h3 id="Netty零拷贝"><a href="#Netty零拷贝" class="headerlink" title="Netty零拷贝"></a>Netty零拷贝</h3><p>在零拷贝之前必须了解直接内存与堆内存的区别；堆内存顾名思义就是放在JVM堆里面的内存,直接内存是排除掉堆内存的其他内存相当于物理内存，gc不参与到其中，这部分内存JVM管不着；</p><p>申请直接内存：java申请直接内存会调用本地native方法，在物理内存上申请一块空间，然后自己JVM堆内存上也分配一块叫DirectByteBuffer的空间，DirectByteBuffer里面会存申请的物理内存的内存地址的开始位置，和数据长度，通过定位和长度就能确定数据了。</p><p>内存回收：JVM gc 管不了他们那么怎么将这部分内存进行回收呢？在申请直接内存的时候会给引用对象绑定一个Cleaner机制，就是只要引用对象一被GC,那么就会触发Cleaner机制把内存回收。</p><p>直接内存与堆内存对比：读写上直接内存更快；申请空间上堆内存更快。</p><p>下面可以介绍零拷贝了</p><p>我们客户端发一条数据到服务端，服务端需要在IO读写层面需要做哪些操作呢？</p><p>假设没有零拷贝，发生的情况就是客户端发一条数据到服务端，服务端将这条数据放到socket缓冲区然后拷贝到直接内存（数据不能直接给堆内存），然后直接内存把数据拷贝到JVM堆内存，然后JVM对数据进行修改后在将数据拷贝到直接内存（数据不能直接给socket缓冲区）,然后直接内存把数据拷贝到socket缓冲区。大家数一下中间发生了几次拷贝。共4次拷贝，</p><p>以刚刚的例子来说零拷贝技术就是客户端发一条数据到服务端，服务端将这条数据socket缓冲区然后拷贝到直接内存，然后堆内存会有一个DirectByteBuffer映射到这一块直接内存，然后JVM对数据进行修改将数据直接改到直接内存，然后直接内存拷贝给socket缓冲区总共发生2次拷贝，零拷贝就是减少数据之间的拷贝。</p><h4 id="直接内存优缺点"><a href="#直接内存优缺点" class="headerlink" title="直接内存优缺点"></a>直接内存优缺点</h4><p>优点：</p><pre><code>        * 不占用堆内存        * 内存读写快</code></pre><p>缺点</p><ul><li>申请空间慢</li><li>有物理内存被撑爆的可能性，这就跟JVM元空间内存机制是一样的，元空间也是直接内存，然后元空间必须设置最大值一个道理。在这里我们可以和元空间的处理类似，加上一个配置参数-XX：MaxDirectMemorySize控制直接内存的大小</li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Netty </tag>
            
            <tag> IO模型 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HashMap1.7和1.8对比与源码解析</title>
      <link href="/2020/09/01/hashmap/"/>
      <url>/2020/09/01/hashmap/</url>
      
        <content type="html"><![CDATA[<h2 id="常用API"><a href="#常用API" class="headerlink" title="常用API"></a>常用API</h2><p><strong>put过程</strong>：它会hash传入的key值，将hash的值&amp;上map长度减一（这里用的是&amp;而不是取模运算，应该是考虑到性能问题，这里是length-1是应为这样可以取到0到map.length-1的值）插入到对应的数组下标上面去。这时产生了一个问题就是2个key值hash到一个位置怎么办？这就是Hash碰撞，产生了Hash碰撞在当前数组位置产生一个链表，如果链表过长查询效率可能会减低，在jdk1.8上面达到了一定的程度会链表转红黑树增强查询效率。</p><p><strong>get过程</strong>：hash传入的key值，将hash的值&amp;上map长度减一在数组里面去找找到对应的数组位置如果不是传入的key值就顺着链表或红黑树继续往里面找，所以他的时间复杂度是O(1)。</p><p><strong>扩容</strong>：当数据达到map总长度的加载因子倍数就会开始扩容</p><h2 id="基本参数介绍"><a href="#基本参数介绍" class="headerlink" title="基本参数介绍"></a>基本参数介绍</h2><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 数组默认大小，默认为16，必须设值为2的n次幂，如果设值不是2的n次幂它会往大于你的值的最近的2次幂</span><span class="token comment" spellcheck="true">// 比如你设map长度为9它会修改map长度为2的4次，也就是16</span><span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> DEFAULT_INITIAL_CAPACITY <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">&lt;&lt;</span> <span class="token number">4</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// aka 16</span><span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> MAXIMUM_CAPACITY <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">&lt;&lt;</span> <span class="token number">30</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 加载因子，数组长度大于容量的0.75就会扩容，为什么是9.75？基于空间与时间的考虑，如果太满了可能会有很多的hash碰撞，hash碰撞越多，链表就会越长，查询效率就会太低，加载因子如果太小了就会导致扩容频繁，通过牛顿二项式推导得出，0.693是最为合适的值，java选择了0.75</span><span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">float</span> DEFAULT_LOAD_FACTOR <span class="token operator">=</span> <span class="token number">0.75f</span><span class="token punctuation">;</span></code></pre><h2 id="jdk1-7和jdk1-8对比"><a href="#jdk1-7和jdk1-8对比" class="headerlink" title="jdk1.7和jdk1.8对比"></a>jdk1.7和jdk1.8对比</h2><h3 id="jdk1-7"><a href="#jdk1-7" class="headerlink" title="jdk1.7"></a>jdk1.7</h3><p>数据结构：数组+链表</p><p>扩容：1.7的扩容会先把当前数组长度乘2生成一个新数组，然后对原来的Map里面的值进行reHash.重新落入到新数组中。</p><p>链表插入方式：尾插法</p><h3 id="jdk1-8"><a href="#jdk1-8" class="headerlink" title="jdk1.8"></a>jdk1.8</h3><p>数据结构：数组+链表+红黑树</p><p>扩容：1.8的扩容有个高低位的概念，它将原来的key Hash过后&amp;map长度,这时候会生成2种值要么是0，要么是数组长度，这时候是0的我们算作低位，数组长度的算作高位，这时候我们有2个链表一个低位链表一个高位链表，低位链表还是在原来的位置，高位链表移到原来位置加上数组长度的位置。</p><p>链表插入方式：尾插法</p><p>链表转红黑树判定：链表长度<strong>大于8,也就是第9个元素</strong>，还有一个条件是容量大于64</p><p>​    为什么要把阈值设为8呢？</p><p>​    下面是HashMap源码里面的注释。大致意思就是数组中链表长度达到相应的数字概率是多少（这里是通过泊松分布计算得出），前提是随机hash码和加载因子是0.75.可以看出来到8的时候概率是很低了。从这一方面可以看出HashMap正常情况下转红黑树的几率是极其小的。也可以侧面的反映出HashMap在1.7到1.8性能上的提升其实并不大，数据量极大的情况下是有提升的。</p><pre class=" language-java"><code class="language-java"><span class="token operator">*</span> Because TreeNodes are about twice the size of regular nodes<span class="token punctuation">,</span> we<span class="token operator">*</span> use them only when bins contain enough nodes to warrant use<span class="token operator">*</span> <span class="token punctuation">(</span>see TREEIFY_THRESHOLD<span class="token punctuation">)</span><span class="token punctuation">.</span> And when they become too <span class="token function">small</span> <span class="token punctuation">(</span>due to<span class="token operator">*</span> removal or resizing<span class="token punctuation">)</span> they are converted back to plain bins<span class="token punctuation">.</span>  In<span class="token operator">*</span> usages with well<span class="token operator">-</span>distributed user hashCodes<span class="token punctuation">,</span> tree bins are<span class="token operator">*</span> rarely used<span class="token punctuation">.</span>  Ideally<span class="token punctuation">,</span> under random hashCodes<span class="token punctuation">,</span> the frequency of<span class="token operator">*</span> nodes in bins follows a Poisson distribution<span class="token operator">*</span> <span class="token punctuation">(</span>http<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>en<span class="token punctuation">.</span>wikipedia<span class="token punctuation">.</span>org<span class="token operator">/</span>wiki<span class="token operator">/</span>Poisson_distribution<span class="token punctuation">)</span> with a<span class="token operator">*</span> parameter of about <span class="token number">0.5</span> on average <span class="token keyword">for</span> the <span class="token keyword">default</span> resizing<span class="token operator">*</span> threshold of <span class="token number">0.75</span><span class="token punctuation">,</span> although with a large variance because of<span class="token operator">*</span> resizing granularity<span class="token punctuation">.</span> Ignoring variance<span class="token punctuation">,</span> the expected<span class="token operator">*</span> occurrences of list size k <span class="token function">are</span> <span class="token punctuation">(</span><span class="token function">exp</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">0.5</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token function">pow</span><span class="token punctuation">(</span><span class="token number">0.5</span><span class="token punctuation">,</span> k<span class="token punctuation">)</span> <span class="token operator">/</span><span class="token operator">*</span> <span class="token function">factorial</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span> The first values are<span class="token operator">:</span><span class="token operator">*</span><span class="token operator">*</span> <span class="token number">0</span><span class="token operator">:</span>    <span class="token number">0.60653066</span><span class="token operator">*</span> <span class="token number">1</span><span class="token operator">:</span>    <span class="token number">0.30326533</span><span class="token operator">*</span> <span class="token number">2</span><span class="token operator">:</span>    <span class="token number">0.07581633</span><span class="token operator">*</span> <span class="token number">3</span><span class="token operator">:</span>    <span class="token number">0.01263606</span><span class="token operator">*</span> <span class="token number">4</span><span class="token operator">:</span>    <span class="token number">0.00157952</span><span class="token operator">*</span> <span class="token number">5</span><span class="token operator">:</span>    <span class="token number">0.00015795</span><span class="token operator">*</span> <span class="token number">6</span><span class="token operator">:</span>    <span class="token number">0.00001316</span><span class="token operator">*</span> <span class="token number">7</span><span class="token operator">:</span>    <span class="token number">0.00000094</span><span class="token operator">*</span> <span class="token number">8</span><span class="token operator">:</span>    <span class="token number">0.00000006</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 链表转红黑树阈值</span><span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> TREEIFY_THRESHOLD <span class="token operator">=</span> <span class="token number">8</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 红黑树转链表阈值</span><span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> UNTREEIFY_THRESHOLD <span class="token operator">=</span> <span class="token number">6</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 链表转红黑树，map最小容量</span><span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> MIN_TREEIFY_CAPACITY <span class="token operator">=</span> <span class="token number">64</span><span class="token punctuation">;</span></code></pre><h2 id="HashMap-jdk1-7源码解析"><a href="#HashMap-jdk1-7源码解析" class="headerlink" title="HashMap jdk1.7源码解析"></a>HashMap jdk1.7源码解析</h2><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> V <span class="token function">put</span><span class="token punctuation">(</span>K key<span class="token punctuation">,</span> V value<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 第一次开始put值的时候，hash表是空的</span>    <span class="token comment" spellcheck="true">// threshold是传进来的长度</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>table <span class="token operator">==</span> EMPTY_TABLE<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">inflateTable</span><span class="token punctuation">(</span>threshold<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 这里证明了HashMap的key可以为空</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>key <span class="token operator">==</span> null<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">// 空就往第一个数组位置里面插</span>        <span class="token keyword">return</span> <span class="token function">putForNullKey</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> hash <span class="token operator">=</span> <span class="token function">hash</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token function">indexFor</span><span class="token punctuation">(</span>hash<span class="token punctuation">,</span> table<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>Entry<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span> e <span class="token operator">=</span> table<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span> e <span class="token operator">!=</span> null<span class="token punctuation">;</span> e <span class="token operator">=</span> e<span class="token punctuation">.</span>next<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Object k<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 这里判断传进来的key是不是已经写过了，写过了就把value修改掉</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>e<span class="token punctuation">.</span>hash <span class="token operator">==</span> hash <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>k <span class="token operator">=</span> e<span class="token punctuation">.</span>key<span class="token punctuation">)</span> <span class="token operator">==</span> key <span class="token operator">||</span> key<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            V oldValue <span class="token operator">=</span> e<span class="token punctuation">.</span>value<span class="token punctuation">;</span>            e<span class="token punctuation">.</span>value <span class="token operator">=</span> value<span class="token punctuation">;</span>            e<span class="token punctuation">.</span><span class="token function">recordAccess</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> oldValue<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 下文有介绍modeCount存在的意义。这里不影响put主体流程，所以暂时可以不关心</span>    modCount<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// put进去</span>    <span class="token function">addEntry</span><span class="token punctuation">(</span>hash<span class="token punctuation">,</span> key<span class="token punctuation">,</span> value<span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> null<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">inflateTable</span><span class="token punctuation">(</span><span class="token keyword">int</span> toSize<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// Find a power of 2 >= toSize</span>    <span class="token comment" spellcheck="true">// 这里就是空间修正代码，找到当前传的值，大于值且是2的指数次幂</span>    <span class="token keyword">int</span> capacity <span class="token operator">=</span> <span class="token function">roundUpToPowerOf2</span><span class="token punctuation">(</span>toSize<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 这里是扩容指标</span>    threshold <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> Math<span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span>capacity <span class="token operator">*</span> loadFactor<span class="token punctuation">,</span> MAXIMUM_CAPACITY <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    table <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Entry</span><span class="token punctuation">[</span>capacity<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token function">initHashSeedAsNeeded</span><span class="token punctuation">(</span>capacity<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">addEntry</span><span class="token punctuation">(</span><span class="token keyword">int</span> hash<span class="token punctuation">,</span> K key<span class="token punctuation">,</span> V value<span class="token punctuation">,</span> <span class="token keyword">int</span> bucketIndex<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 这里判断是判断是否需要扩容</span>    <span class="token comment" spellcheck="true">// 判断条件是map长度大于扩容阈值，而且当前数组下标必须放了值</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>size <span class="token operator">>=</span> threshold<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>null <span class="token operator">!=</span> table<span class="token punctuation">[</span>bucketIndex<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 扩容大小 -> map长度的2倍 </span>        <span class="token function">resize</span><span class="token punctuation">(</span><span class="token number">2</span> <span class="token operator">*</span> table<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 这里就是keu为null的时候会往数组第一个位置放</span>        hash <span class="token operator">=</span> <span class="token punctuation">(</span>null <span class="token operator">!=</span> key<span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token function">hash</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// indexFor就是&amp;数组长度-1</span>        bucketIndex <span class="token operator">=</span> <span class="token function">indexFor</span><span class="token punctuation">(</span>hash<span class="token punctuation">,</span> table<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 元素放进去了</span>    <span class="token function">createEntry</span><span class="token punctuation">(</span>hash<span class="token punctuation">,</span> key<span class="token punctuation">,</span> value<span class="token punctuation">,</span> bucketIndex<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// ========================================扩容方法===============================</span><span class="token keyword">void</span> <span class="token function">resize</span><span class="token punctuation">(</span><span class="token keyword">int</span> newCapacity<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 容错不管它</span>    Entry<span class="token punctuation">[</span><span class="token punctuation">]</span> oldTable <span class="token operator">=</span> table<span class="token punctuation">;</span>    <span class="token keyword">int</span> oldCapacity <span class="token operator">=</span> oldTable<span class="token punctuation">.</span>length<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>oldCapacity <span class="token operator">==</span> MAXIMUM_CAPACITY<span class="token punctuation">)</span> <span class="token punctuation">{</span>        threshold <span class="token operator">=</span> Integer<span class="token punctuation">.</span>MAX_VALUE<span class="token punctuation">;</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// new 一个新的hash表</span>    Entry<span class="token punctuation">[</span><span class="token punctuation">]</span> newTable <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Entry</span><span class="token punctuation">[</span>newCapacity<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 核心方法</span>    <span class="token function">transfer</span><span class="token punctuation">(</span>newTable<span class="token punctuation">,</span> <span class="token function">initHashSeedAsNeeded</span><span class="token punctuation">(</span>newCapacity<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 把新的table,扩容阈值重新写入</span>    table <span class="token operator">=</span> newTable<span class="token punctuation">;</span>    threshold <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span>Math<span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span>newCapacity <span class="token operator">*</span> loadFactor<span class="token punctuation">,</span> MAXIMUM_CAPACITY <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">transfer</span><span class="token punctuation">(</span>Entry<span class="token punctuation">[</span><span class="token punctuation">]</span> newTable<span class="token punctuation">,</span> <span class="token keyword">boolean</span> rehash<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 新的数组容量</span>    <span class="token keyword">int</span> newCapacity <span class="token operator">=</span> newTable<span class="token punctuation">.</span>length<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 遍历原来的table表</span>    <span class="token comment" spellcheck="true">// 这里使用双重循环是因为我们的hashmap数据结构是数组加链表，第一重遍历数组第二重遍历链表找到元素开始reHash</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>Entry<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span> e <span class="token operator">:</span> table<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>null <span class="token operator">!=</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// next为当前链表的下一个元素，为了后面的循环</span>            <span class="token comment" spellcheck="true">// 1</span>            Entry<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span> next <span class="token operator">=</span> e<span class="token punctuation">.</span>next<span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>rehash<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// rehash当前节点</span>                e<span class="token punctuation">.</span>hash <span class="token operator">=</span> null <span class="token operator">==</span> e<span class="token punctuation">.</span>key <span class="token operator">?</span> <span class="token number">0</span> <span class="token operator">:</span> <span class="token function">hash</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>               <span class="token comment" spellcheck="true">// 用扩容后的hashmap长度计算出当前节点应该落到哪个节点上面去。</span>            <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token function">indexFor</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>hash<span class="token punctuation">,</span> newCapacity<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 当前节点与别的节点指针断开指向新的节点位置</span>            <span class="token comment" spellcheck="true">// 2</span>            e<span class="token punctuation">.</span>next <span class="token operator">=</span> newTable<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 把值赋给新的节点位置，从这可以看出它是使用的是头插法</span>            <span class="token comment" spellcheck="true">// 3</span>            newTable<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> e<span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 为了新一轮的遍历</span>            e <span class="token operator">=</span> next<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="HashMap并发场景下的死锁问题"><a href="#HashMap并发场景下的死锁问题" class="headerlink" title="HashMap并发场景下的死锁问题"></a>HashMap并发场景下的死锁问题</h3><p>（吐槽：在并发场景使用HashMap，想什么呢，HashMap本身是线程不安全的还敢在并发下用？）。</p><p>我们想一下现在有2个线程thread1,thread2,这2个线程都在进行扩容，都走到了transfer方法的2重循环内，这完全是可能的吧，因为它全程没有锁，因为它是线程不安全的。现在thread1走到了transfer代码段1（上面源码解析标注）的位置，已经把next节点定下来了时间片轮转到thread2了。thread2执行到代码段3，这时候thread1在继续往下走，最后会发现2个节点会出现循环链表。说不清，画个图来说吧。</p><p>​    <img src="https://blog-dm.oss-cn-shanghai.aliyuncs.com/articleimage/20200909112458.png" alt="原hashMap"></p><p><img src="https://blog-dm.oss-cn-shanghai.aliyuncs.com/articleimage/20200909115304.png"></p><h3 id="HashMap多线程丢数据情况分析"><a href="#HashMap多线程丢数据情况分析" class="headerlink" title="HashMap多线程丢数据情况分析"></a>HashMap多线程丢数据情况分析</h3><p>代码定位到addEntry()-&gt;createEntry()方法中</p><pre class=" language-java"><code class="language-java"><span class="token keyword">void</span> <span class="token function">createEntry</span><span class="token punctuation">(</span><span class="token keyword">int</span> hash<span class="token punctuation">,</span> K key<span class="token punctuation">,</span> V value<span class="token punctuation">,</span> <span class="token keyword">int</span> bucketIndex<span class="token punctuation">)</span> <span class="token punctuation">{</span>    Entry<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span> e <span class="token operator">=</span> table<span class="token punctuation">[</span>bucketIndex<span class="token punctuation">]</span><span class="token punctuation">;</span>    table<span class="token punctuation">[</span>bucketIndex<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Entry</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span>hash<span class="token punctuation">,</span> key<span class="token punctuation">,</span> value<span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>    size<span class="token operator">++</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>如果有多个线程同时拿的e,e应该是当前table[i]链表的第一个元素，然后你这时候拿到多个元素就会出现元素覆盖的请况，thread1头插法排到了第一个元素，而thread2拿到的e是第二个元素，用头插法，一插好家伙，吧我thread1插入的数据给顶掉了，最后thread1写的数据就丢失了，在jdk1.8这种情况也在发生，因为他是线程不安全的。<strong>注意，多线程不要用HashMap，请用ConcurrentHashMap</strong>            </p><h2 id="HashMap-jdk1-8源码解析"><a href="#HashMap-jdk1-8源码解析" class="headerlink" title="HashMap jdk1.8源码解析"></a>HashMap jdk1.8源码解析</h2><p>hashMap jdk1.8跟1.7大体逻辑是差不多的，我们就看下改动比较大的几个点</p><h3 id="树化"><a href="#树化" class="headerlink" title="树化"></a>树化</h3><p>上面说了jdk1.8的HashMap有了红黑树的数据结构，那么他怎么才会变为红黑树呢？TREEIFY_THRESHOLD = 8</p><p>下面这段是put中的关键代码从这段代码可以看出，binCount&gt;=7,所以循环肯定是8次也就是这个时候链表长度是8了。但在这个时候它先执行的是p.next = newNode(hash, key, value, null);然后在判断链表长度，所以链表长度是9的时候它才会满足树化的第一个条件走treeifyBin；不信可以测试一下</p><pre class=" language-java"><code class="language-java"><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> binCount <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token punctuation">;</span> <span class="token operator">++</span>binCount<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>e <span class="token operator">=</span> p<span class="token punctuation">.</span>next<span class="token punctuation">)</span> <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>        p<span class="token punctuation">.</span>next <span class="token operator">=</span> <span class="token function">newNode</span><span class="token punctuation">(</span>hash<span class="token punctuation">,</span> key<span class="token punctuation">,</span> value<span class="token punctuation">,</span> null<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>binCount <span class="token operator">>=</span> TREEIFY_THRESHOLD <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// -1 for 1st</span>            <span class="token function">treeifyBin</span><span class="token punctuation">(</span>tab<span class="token punctuation">,</span> hash<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>e<span class="token punctuation">.</span>hash <span class="token operator">==</span> hash <span class="token operator">&amp;&amp;</span>        <span class="token punctuation">(</span><span class="token punctuation">(</span>k <span class="token operator">=</span> e<span class="token punctuation">.</span>key<span class="token punctuation">)</span> <span class="token operator">==</span> key <span class="token operator">||</span> <span class="token punctuation">(</span>key <span class="token operator">!=</span> null <span class="token operator">&amp;&amp;</span> key<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">break</span><span class="token punctuation">;</span>    p <span class="token operator">=</span> e<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>​    树化还有一个条件就是hashmap容量大于64，这个条件就在上面的treeifyBin方法内，第一个判断就是如果容量没有达到MIN_TREEIFY_CAPACITY=64就先走扩容策略，不走树化，反之直接树化（在else逻辑内）</p><pre class=" language-java"><code class="language-java"><span class="token keyword">final</span> <span class="token keyword">void</span> <span class="token function">treeifyBin</span><span class="token punctuation">(</span>Node<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span><span class="token punctuation">[</span><span class="token punctuation">]</span> tab<span class="token punctuation">,</span> <span class="token keyword">int</span> hash<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> n<span class="token punctuation">,</span> index<span class="token punctuation">;</span> Node<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span> e<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>tab <span class="token operator">==</span> null <span class="token operator">||</span> <span class="token punctuation">(</span>n <span class="token operator">=</span> tab<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token operator">&lt;</span> MIN_TREEIFY_CAPACITY<span class="token punctuation">)</span>        <span class="token function">resize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>e <span class="token operator">=</span> tab<span class="token punctuation">[</span>index <span class="token operator">=</span> <span class="token punctuation">(</span>n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> hash<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>        TreeNode<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span> hd <span class="token operator">=</span> null<span class="token punctuation">,</span> tl <span class="token operator">=</span> null<span class="token punctuation">;</span>        <span class="token keyword">do</span> <span class="token punctuation">{</span>            TreeNode<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span> p <span class="token operator">=</span> <span class="token function">replacementTreeNode</span><span class="token punctuation">(</span>e<span class="token punctuation">,</span> null<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>tl <span class="token operator">==</span> null<span class="token punctuation">)</span>                hd <span class="token operator">=</span> p<span class="token punctuation">;</span>            <span class="token keyword">else</span> <span class="token punctuation">{</span>                p<span class="token punctuation">.</span>prev <span class="token operator">=</span> tl<span class="token punctuation">;</span>                tl<span class="token punctuation">.</span>next <span class="token operator">=</span> p<span class="token punctuation">;</span>            <span class="token punctuation">}</span>            tl <span class="token operator">=</span> p<span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>e <span class="token operator">=</span> e<span class="token punctuation">.</span>next<span class="token punctuation">)</span> <span class="token operator">!=</span> null<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>tab<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">=</span> hd<span class="token punctuation">)</span> <span class="token operator">!=</span> null<span class="token punctuation">)</span>            hd<span class="token punctuation">.</span><span class="token function">treeify</span><span class="token punctuation">(</span>tab<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="扩容策略"><a href="#扩容策略" class="headerlink" title="扩容策略"></a>扩容策略</h3><p>上面说到了它的扩容策略和jdk1.7是有了极大的区别，现在我们来看一下源码是怎么实现的。源码太长就不细看了，主要逻辑就是它里面分了2组链表</p><p>Node&lt;K,V&gt; loHead = null, loTail = null;<br>Node&lt;K,V&gt; hiHead = null, hiTail = null;</p><p>这2组就是高位链表和低位链表，怎么往这2个链表里面放呢？if ((e.hash &amp; oldCap) == 0) 满足这个条件就是低位链表，简单来说就是&amp;上老的容量算出来只有可能为0或hashmap的长度，为0算低位，不为0算高位。newTab[j] = loHead; newTab[j + oldCap] = hiHead;这2段代码就表明了它们应该落得位置。</p><p>（1.8的HashMap源码太复杂了，全是位运算和判断逻辑看的心累，对于1.8的源码就不详细写了。）</p><pre class=" language-java"><code class="language-java"><span class="token keyword">final</span> Node<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">resize</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    Node<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span><span class="token punctuation">[</span><span class="token punctuation">]</span> oldTab <span class="token operator">=</span> table<span class="token punctuation">;</span>    <span class="token keyword">int</span> oldCap <span class="token operator">=</span> <span class="token punctuation">(</span>oldTab <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token number">0</span> <span class="token operator">:</span> oldTab<span class="token punctuation">.</span>length<span class="token punctuation">;</span>    <span class="token keyword">int</span> oldThr <span class="token operator">=</span> threshold<span class="token punctuation">;</span>    <span class="token keyword">int</span> newCap<span class="token punctuation">,</span> newThr <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>oldCap <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>oldCap <span class="token operator">>=</span> MAXIMUM_CAPACITY<span class="token punctuation">)</span> <span class="token punctuation">{</span>            threshold <span class="token operator">=</span> Integer<span class="token punctuation">.</span>MAX_VALUE<span class="token punctuation">;</span>            <span class="token keyword">return</span> oldTab<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>newCap <span class="token operator">=</span> oldCap <span class="token operator">&lt;&lt;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> MAXIMUM_CAPACITY <span class="token operator">&amp;&amp;</span>                 oldCap <span class="token operator">>=</span> DEFAULT_INITIAL_CAPACITY<span class="token punctuation">)</span>            newThr <span class="token operator">=</span> oldThr <span class="token operator">&lt;&lt;</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// double threshold</span>    <span class="token punctuation">}</span>    <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>oldThr <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// initial capacity was placed in threshold</span>        newCap <span class="token operator">=</span> oldThr<span class="token punctuation">;</span>    <span class="token keyword">else</span> <span class="token punctuation">{</span>               <span class="token comment" spellcheck="true">// zero initial threshold signifies using defaults</span>        newCap <span class="token operator">=</span> DEFAULT_INITIAL_CAPACITY<span class="token punctuation">;</span>        newThr <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">(</span>DEFAULT_LOAD_FACTOR <span class="token operator">*</span> DEFAULT_INITIAL_CAPACITY<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>newThr <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">float</span> ft <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">float</span><span class="token punctuation">)</span>newCap <span class="token operator">*</span> loadFactor<span class="token punctuation">;</span>        newThr <span class="token operator">=</span> <span class="token punctuation">(</span>newCap <span class="token operator">&lt;</span> MAXIMUM_CAPACITY <span class="token operator">&amp;&amp;</span> ft <span class="token operator">&lt;</span> <span class="token punctuation">(</span><span class="token keyword">float</span><span class="token punctuation">)</span>MAXIMUM_CAPACITY <span class="token operator">?</span>                  <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span>ft <span class="token operator">:</span> Integer<span class="token punctuation">.</span>MAX_VALUE<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    threshold <span class="token operator">=</span> newThr<span class="token punctuation">;</span>    <span class="token annotation punctuation">@SuppressWarnings</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">"rawtypes"</span><span class="token punctuation">,</span><span class="token string">"unchecked"</span><span class="token punctuation">}</span><span class="token punctuation">)</span>    Node<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span><span class="token punctuation">[</span><span class="token punctuation">]</span> newTab <span class="token operator">=</span> <span class="token punctuation">(</span>Node<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">new</span> <span class="token class-name">Node</span><span class="token punctuation">[</span>newCap<span class="token punctuation">]</span><span class="token punctuation">;</span>    table <span class="token operator">=</span> newTab<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>oldTab <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> oldCap<span class="token punctuation">;</span> <span class="token operator">++</span>j<span class="token punctuation">)</span> <span class="token punctuation">{</span>            Node<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span> e<span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>e <span class="token operator">=</span> oldTab<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                oldTab<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> null<span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>e<span class="token punctuation">.</span>next <span class="token operator">==</span> null<span class="token punctuation">)</span>                    newTab<span class="token punctuation">[</span>e<span class="token punctuation">.</span>hash <span class="token operator">&amp;</span> <span class="token punctuation">(</span>newCap <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">=</span> e<span class="token punctuation">;</span>                <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>e <span class="token keyword">instanceof</span> <span class="token class-name">TreeNode</span><span class="token punctuation">)</span>                    <span class="token punctuation">(</span><span class="token punctuation">(</span>TreeNode<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span><span class="token punctuation">)</span>e<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> newTab<span class="token punctuation">,</span> j<span class="token punctuation">,</span> oldCap<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">else</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// preserve order</span>                    Node<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span> loHead <span class="token operator">=</span> null<span class="token punctuation">,</span> loTail <span class="token operator">=</span> null<span class="token punctuation">;</span>                    Node<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span> hiHead <span class="token operator">=</span> null<span class="token punctuation">,</span> hiTail <span class="token operator">=</span> null<span class="token punctuation">;</span>                    Node<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span> next<span class="token punctuation">;</span>                    <span class="token keyword">do</span> <span class="token punctuation">{</span>                        next <span class="token operator">=</span> e<span class="token punctuation">.</span>next<span class="token punctuation">;</span>                        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>hash <span class="token operator">&amp;</span> oldCap<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                            <span class="token keyword">if</span> <span class="token punctuation">(</span>loTail <span class="token operator">==</span> null<span class="token punctuation">)</span>                                loHead <span class="token operator">=</span> e<span class="token punctuation">;</span>                            <span class="token keyword">else</span>                                loTail<span class="token punctuation">.</span>next <span class="token operator">=</span> e<span class="token punctuation">;</span>                            loTail <span class="token operator">=</span> e<span class="token punctuation">;</span>                        <span class="token punctuation">}</span>                        <span class="token keyword">else</span> <span class="token punctuation">{</span>                            <span class="token keyword">if</span> <span class="token punctuation">(</span>hiTail <span class="token operator">==</span> null<span class="token punctuation">)</span>                                hiHead <span class="token operator">=</span> e<span class="token punctuation">;</span>                            <span class="token keyword">else</span>                                hiTail<span class="token punctuation">.</span>next <span class="token operator">=</span> e<span class="token punctuation">;</span>                            hiTail <span class="token operator">=</span> e<span class="token punctuation">;</span>                        <span class="token punctuation">}</span>                    <span class="token punctuation">}</span> <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>e <span class="token operator">=</span> next<span class="token punctuation">)</span> <span class="token operator">!=</span> null<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>loTail <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                        loTail<span class="token punctuation">.</span>next <span class="token operator">=</span> null<span class="token punctuation">;</span>                        newTab<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> loHead<span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>hiTail <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                        hiTail<span class="token punctuation">.</span>next <span class="token operator">=</span> null<span class="token punctuation">;</span>                        newTab<span class="token punctuation">[</span>j <span class="token operator">+</span> oldCap<span class="token punctuation">]</span> <span class="token operator">=</span> hiHead<span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> newTab<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h2 id="modCount字段是干嘛的"><a href="#modCount字段是干嘛的" class="headerlink" title="modCount字段是干嘛的"></a>modCount字段是干嘛的</h2><p>在很多集合类都有modCount的身影，那么它到底是干嘛的呢？我们发现它存在的地方都是对集合进行了修改操作比如增加元素，删除元素。而且看过ConcurrentHashMap源码发现没有这个参数了，那么很明显它可能跟线程安全有关。还记得我们在hashMap遍历的时候如果对其进行元素的操作会发生ConcurrentModificationException异常。其实他就跟modCount有关，在迭代过程中，它会判断 modCount 跟 expectedModCount 是否相等，不等说明有其他线程在修改元素，就抛出了异常。这是<strong>Fail-Fast 机制</strong></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> HashMap </tag>
            
            <tag> 集合 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java多线程介绍与线程池底层实现原理</title>
      <link href="/2020/08/27/duo-xian-cheng-jie-shao-yu-xian-cheng-chi-di-ceng-shi-xian-yuan-li/"/>
      <url>/2020/08/27/duo-xian-cheng-jie-shao-yu-xian-cheng-chi-di-ceng-shi-xian-yuan-li/</url>
      
        <content type="html"><![CDATA[<h2 id="Java线程跟操作系统的关系"><a href="#Java线程跟操作系统的关系" class="headerlink" title="Java线程跟操作系统的关系"></a>Java线程跟操作系统的关系</h2><p>CPU一般有4个安全等级ring0,ring1,ring2,ring3,操作系统的内部程序指令一般运行在ring0级别，而我们的应用程序会运行在ring3上面，比如JVM进程。为什么说JVM线程的创建是一个比较重的操作。下面是一个线程创建的过程：</p><ol><li>ring3级别切换到ring0去创建线程</li><li>从ring0切回ring3,然后线程去执行程序</li><li>执行完毕就会销毁线程，这时候又会切换到ring0去销毁线程</li></ol><p>正因为线程创建销毁很重，所以才有了线程池，让一个线程多干点活，不让它活一干完就死了。这一点后面再说。</p><p>操作系统在内存上面分为用户空间，和内核空间</p><ul><li>用户空间放的是我们应用程序执行的代码</li><li>内核空间放的是内核代码</li></ul><p>因为操作系统这样的划分，所以我们有2种线程模型，KLT(内核线程模型)，ULT(用户线程模型)</p><p>内核线程模型是由内核去创建线程，用户线程模型是由用户去创建的线程。JVM就是一种内核线程模型所以便会有大量的用户态内核态之间的切换，用户线程模型就不会有这样的问题。</p><h2 id="线程上下文切换"><a href="#线程上下文切换" class="headerlink" title="线程上下文切换"></a>线程上下文切换</h2><p>假设现在有2个线程thread1,thread2</p><ol><li>CPU会给这2个线程分配一个时间周期，这里假设为50ns</li><li>thread1执行了50ns就要切换回thread2执行，此时thread1的执行状态保存到TSS(程序任务状态段)上面去，方便下次找到我执行的时刻。</li></ol><p>正因为线程的时间片轮转机制所以给人的感知就是多个线程在同时执行，也就是并发。</p><p>那么现在有个问题就是多线程运行程序一定比单线程快吗？</p><p>其实不一定，多线程运行程序必然会存在着大量的线程上下文切换还有线程的创建和销毁，这些操作也是会耗时间的，而单线程不会有这样过的问题，所以是有可能多线程没有单线程要快的。</p><h3 id="如何减少线程的上下文切换"><a href="#如何减少线程的上下文切换" class="headerlink" title="如何减少线程的上下文切换"></a>如何减少线程的上下文切换</h3><ul><li>无锁并发编程：线程竞争锁的时候是会引起上下文切换的，用多线程处理数据可以分段处理，将数据拆分处理比如thread1处理0到100，thread2处理101到200，减少线程间资源的竞争</li><li>CAS算法：用CAS来对数据进行更新不需要加锁，Doug lea的AQS框架大量的运用到了这种算法。</li><li>尽量不要创建不必要的线程，用多少创建多少。</li></ul><h2 id="线程池"><a href="#线程池" class="headerlink" title="线程池"></a>线程池</h2><h3 id="为什么要线程池"><a href="#为什么要线程池" class="headerlink" title="为什么要线程池"></a>为什么要线程池</h3><p>线程随用即用不好吗，为什么还要引入一个线程池的概念。首先线程资源很珍贵，不能让你想用我就new Thread()就行了，这样不仅浪费了了CPU的资源还可能拖慢运行程序。打个比方，我执行100个任务，每个任务执行时间是1ns,而我线程创建和销毁时间大概是5ns,那么我对线程的操作比执行任务的时间还长，这样降低了整个系统的运行效率。那么如何让我们创建的线程放在那不动（不会销毁），来一个活，我就接一个。这样不是会减少大量的线程创建和销毁吗。这种运用线程的方法就是线程池。简单来说就是对线程的重用。</p><h3 id="线程池的参数配置"><a href="#线程池的参数配置" class="headerlink" title="线程池的参数配置"></a>线程池的参数配置</h3><p>关于线程池的使用不介绍了，主要谈谈线程池的参数配置。先看下创建一个线程池对象的静态方法。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token function">ThreadPoolExecutor</span><span class="token punctuation">(</span><span class="token keyword">int</span> corePoolSize<span class="token punctuation">,</span>                              <span class="token keyword">int</span> maximumPoolSize<span class="token punctuation">,</span>                              <span class="token keyword">long</span> keepAliveTime<span class="token punctuation">,</span>                              TimeUnit unit<span class="token punctuation">,</span>                              BlockingQueue<span class="token operator">&lt;</span>Runnable<span class="token operator">></span> workQueue<span class="token punctuation">,</span>                              ThreadFactory threadFactory<span class="token punctuation">,</span>                              RejectedExecutionHandler handler<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>corePoolSize <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">||</span>            maximumPoolSize <span class="token operator">&lt;=</span> <span class="token number">0</span> <span class="token operator">||</span>            maximumPoolSize <span class="token operator">&lt;</span> corePoolSize <span class="token operator">||</span>            keepAliveTime <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalArgumentException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>workQueue <span class="token operator">==</span> null <span class="token operator">||</span> threadFactory <span class="token operator">==</span> null <span class="token operator">||</span> handler <span class="token operator">==</span> null<span class="token punctuation">)</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">NullPointerException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>corePoolSize <span class="token operator">=</span> corePoolSize<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>maximumPoolSize <span class="token operator">=</span> maximumPoolSize<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>workQueue <span class="token operator">=</span> workQueue<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>keepAliveTime <span class="token operator">=</span> unit<span class="token punctuation">.</span><span class="token function">toNanos</span><span class="token punctuation">(</span>keepAliveTime<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>threadFactory <span class="token operator">=</span> threadFactory<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>handler <span class="token operator">=</span> handler<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>在一个简单的例子中介绍这7个参数</p><p>首先来一个任务，我们会判断已经创建的线程数是否小于等于 corePoolSize（核心线程数），如果小于就会创建一个线程（线程会带着任务），如果大于就会往workQueue（阻塞队列）里面去放，如果阻塞队列里面也放满了，如果此时线程数（核心线程数+非核心线程数）小于maximumPoolSize（线程总数）就会去创建一个非核心线程，大于就会走handler（拒绝策略）</p><p><strong>注意：核心线程只有创建的时候是直接拿到的任务，后续的任务全部都是去阻塞队列里面去拿的。</strong></p><p>拒绝策略分为4种当然你也可以实现RejectedExecutionHandler接口去重写rejectedExecution拒绝策略</p><p>默认4种，比较重要的就是CallerRunsPolicy，DiscardOldestPolicy：</p><ul><li>AbortPolicy: 抛异常</li><li>CallerRunsPolicy：主线程自己去执行任务</li><li>DiscardOldestPolicy：从阻塞队列里面踢掉最先进的那个元素，然后自己入队</li><li>DiscardPolicy：不作任何处理</li></ul><h3 id="线程池状态"><a href="#线程池状态" class="headerlink" title="线程池状态"></a>线程池状态</h3><pre class=" language-java"><code class="language-java">    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> RUNNING    <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token operator">&lt;&lt;</span> COUNT_BITS<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> SHUTDOWN   <span class="token operator">=</span>  <span class="token number">0</span> <span class="token operator">&lt;&lt;</span> COUNT_BITS<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> STOP       <span class="token operator">=</span>  <span class="token number">1</span> <span class="token operator">&lt;&lt;</span> COUNT_BITS<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> TIDYING    <span class="token operator">=</span>  <span class="token number">2</span> <span class="token operator">&lt;&lt;</span> COUNT_BITS<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> TERMINATED <span class="token operator">=</span>  <span class="token number">3</span> <span class="token operator">&lt;&lt;</span> COUNT_BITS<span class="token punctuation">;</span></code></pre><ul><li>RUNNING：线程池在RUNNING状态，可以接受新任务，和处理所有任务，线程刚创建就是RUNNING状态</li><li>SHUTDOWN：不接受新任务，但处理已经有的任务，<strong>shutdown方法</strong>将RUNNING-&gt;SHUTDOWN</li><li>STOP：不接受新任务，不处理已有任务，并且中断正在执行的任务，<strong>shutdownNow方法</strong>切换到STOP状态</li><li>TIDYING：所有的任务已终止，ctl记录的”任务数量”为0，线程池会变为TIDYING状态，而且还会执行<strong>terminated方法</strong>钩子函数，执行逻辑可以自己实现。阻塞队列为空并且线程池中执行的任务也为空时会转变为TIDYING</li><li>TERMINATED：线程池彻底终止。线程池处在TIDYING状态时，执行完terminated()之后，就会由 TIDYING -&gt; TERMINATED。</li></ul><h3 id="excute方法源码分析"><a href="#excute方法源码分析" class="headerlink" title="excute方法源码分析"></a>excute方法源码分析</h3><p>这里有个重要参数ctl，ctl存储的是线程状态位和活跃线程数，他是一个ArtomicInteger,利用了int类型32位的特性，就32位中的前3位用来存储线程的状态后28位存储活跃线程数。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">execute</span><span class="token punctuation">(</span>Runnable command<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>command <span class="token operator">==</span> null<span class="token punctuation">)</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">NullPointerException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// ctl这里存储的是线程池状态位和活跃线程数</span>    <span class="token keyword">int</span> c <span class="token operator">=</span> ctl<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 从ctl里面取得活跃线程数看活跃是否小于核心线程池数量</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">workerCountOf</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span> <span class="token operator">&lt;</span> corePoolSize<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 小于核心线程池数量就创建一个核心线程，注意这里传的值是true,标识了核心线程</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">addWorker</span><span class="token punctuation">(</span>command<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        c <span class="token operator">=</span> ctl<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 活跃状态就往阻塞队列里面放</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isRunning</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> workQueue<span class="token punctuation">.</span><span class="token function">offer</span><span class="token punctuation">(</span>command<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 这里为什么又要拿一次状态，主要就是防止入队前后线程池状态的变化</span>        <span class="token keyword">int</span> recheck <span class="token operator">=</span> ctl<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 再次检查线程池状态是否运行状态，不是就移除刚刚放进来的任务，并且走拒绝策略</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span> <span class="token function">isRunning</span><span class="token punctuation">(</span>recheck<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token function">remove</span><span class="token punctuation">(</span>command<span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token function">reject</span><span class="token punctuation">(</span>command<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 这里为什么要判有效线程数为什么是0，主要是创建线程池时核心线程数量可以为0</span>        <span class="token comment" spellcheck="true">// 如果核心线程数是0，那么执行到这里队列中有1个任务，但没有一个可以干活的线程，这时候要创建</span>        <span class="token comment" spellcheck="true">// 一个线程去干活了，为什么是false，因为你设置的核心线程数为0这里只能创建一个非核心线程</span>        <span class="token comment" spellcheck="true">// 为什么是null,是因为这时候任务在队列里面了，我不能创建线程的时候在带着任务，只能让线程去</span>        <span class="token comment" spellcheck="true">// 队列里面去取了。</span>        <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">workerCountOf</span><span class="token punctuation">(</span>recheck<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>            <span class="token function">addWorker</span><span class="token punctuation">(</span>null<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 到这一步说明了干活线程大于核心线程池数，而且阻塞队列也满了，此时会创建一个非核心线程</span>    <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">addWorker</span><span class="token punctuation">(</span>command<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">// 创建非核心线程失败了，就直接走拒绝策略</span>        <span class="token function">reject</span><span class="token punctuation">(</span>command<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h3 id="addWorker方法源码分析"><a href="#addWorker方法源码分析" class="headerlink" title="addWorker方法源码分析"></a>addWorker方法源码分析</h3><p>addWorder方法主要工作是创建一个新的线程</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * firstTask：是线程创建时的第一个任务 * core： true就是与corePoolSize比较，false就是与maximumPoolSize比较 **/</span><span class="token keyword">private</span> <span class="token keyword">boolean</span> <span class="token function">addWorker</span><span class="token punctuation">(</span>Runnable firstTask<span class="token punctuation">,</span> <span class="token keyword">boolean</span> core<span class="token punctuation">)</span> <span class="token punctuation">{</span>    retry<span class="token operator">:</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 拿运行状态</span>        <span class="token keyword">int</span> c <span class="token operator">=</span> ctl<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> rs <span class="token operator">=</span> <span class="token function">runStateOf</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// Check if queue empty only if necessary.</span>        <span class="token comment" spellcheck="true">// 运行状态大于shutdown状态就不接活了，</span>        <span class="token comment" spellcheck="true">// 如果状态是shutdown，虽然不接活，但也要处理之前遗留的队列里面的任务，</span>        <span class="token comment" spellcheck="true">// 但前提你不能给我任务firstTask</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>rs <span class="token operator">>=</span> SHUTDOWN <span class="token operator">&amp;&amp;</span>            <span class="token operator">!</span> <span class="token punctuation">(</span>rs <span class="token operator">==</span> SHUTDOWN <span class="token operator">&amp;&amp;</span>               firstTask <span class="token operator">==</span> null <span class="token operator">&amp;&amp;</span>               <span class="token operator">!</span> workQueue<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">int</span> wc <span class="token operator">=</span> <span class="token function">workerCountOf</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// wc>=CAPACITY:工作不能大于等于所设的最大值就是int位的低29位</span>            <span class="token comment" spellcheck="true">// private static final int COUNT_BITS = Integer.SIZE - 3;</span>            <span class="token comment" spellcheck="true">// private static final int CAPACITY   = (1 &lt;&lt; COUNT_BITS) - 1;</span>            <span class="token comment" spellcheck="true">//  wc >= (core ? corePoolSize : maximumPoolSize)就是按core传值判断是否不和规范</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>wc <span class="token operator">>=</span> CAPACITY <span class="token operator">||</span>                wc <span class="token operator">>=</span> <span class="token punctuation">(</span>core <span class="token operator">?</span> corePoolSize <span class="token operator">:</span> maximumPoolSize<span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// CAS增加workcount,成功则跳出第一个循环，失败继续自旋</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">compareAndIncrementWorkerCount</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token keyword">break</span> retry<span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 重新拿一下状态看状态是否修改，修改了就去第一个循环重新判断</span>            c <span class="token operator">=</span> ctl<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// Re-read ctl</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">runStateOf</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span> <span class="token operator">!=</span> rs<span class="token punctuation">)</span>                <span class="token keyword">continue</span> retry<span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// else CAS failed due to workerCount change; retry inner loop</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">boolean</span> workerStarted <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token keyword">boolean</span> workerAdded <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    Worker w <span class="token operator">=</span> null<span class="token punctuation">;</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 创建worker对象</span>        w <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Worker</span><span class="token punctuation">(</span>firstTask<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// worker对象里面都有一个线程</span>        <span class="token keyword">final</span> Thread t <span class="token operator">=</span> w<span class="token punctuation">.</span>thread<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>t <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">final</span> ReentrantLock mainLock <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>mainLock<span class="token punctuation">;</span>            mainLock<span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// Recheck while holding lock.</span>                <span class="token comment" spellcheck="true">// Back out on ThreadFactory failure or if</span>                <span class="token comment" spellcheck="true">// shut down before lock acquired.</span>                <span class="token keyword">int</span> rs <span class="token operator">=</span> <span class="token function">runStateOf</span><span class="token punctuation">(</span>ctl<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">// 这里主要是判断的是线程可不可以运行</span>                <span class="token comment" spellcheck="true">// 2个条件满足其一</span>                <span class="token comment" spellcheck="true">// 1: 运行状态</span>                <span class="token comment" spellcheck="true">// 2: shutdown状态，但新任务为空，可以执行wordQueue里面的任务</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>rs <span class="token operator">&lt;</span> SHUTDOWN <span class="token operator">||</span>                    <span class="token punctuation">(</span>rs <span class="token operator">==</span> SHUTDOWN <span class="token operator">&amp;&amp;</span> firstTask <span class="token operator">==</span> null<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>t<span class="token punctuation">.</span><span class="token function">isAlive</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// precheck that t is startable</span>                        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalThreadStateException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token comment" spellcheck="true">// workers是一个HashSet</span>                    workers<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>w<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token comment" spellcheck="true">// 记录出现过的线程最大数量</span>                    <span class="token keyword">int</span> s <span class="token operator">=</span> workers<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>s <span class="token operator">></span> largestPoolSize<span class="token punctuation">)</span>                        largestPoolSize <span class="token operator">=</span> s<span class="token punctuation">;</span>                    workerAdded <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>                mainLock<span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>workerAdded<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// 启动 worker里面的线程，这时候应该去看Worker对象里面的run方法</span>                t<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                workerStarted <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span> workerStarted<span class="token punctuation">)</span>            <span class="token function">addWorkerFailed</span><span class="token punctuation">(</span>w<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> workerStarted<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h3 id="Worker对象的run方法"><a href="#Worker对象的run方法" class="headerlink" title="Worker对象的run方法"></a>Worker对象的run方法</h3><p>Worker是一个ThreadPoolExecutor内部类，此时才是真正干活的线程</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 他这里继承了AQS和实现了Runable</span><span class="token comment" spellcheck="true">// 实现Runable是为了让自己成为一个线程</span><span class="token comment" spellcheck="true">// 继承AQS是为了实现独占锁，在addWorker里面会用到，为什么不用ReentrantLock呢？</span><span class="token comment" spellcheck="true">// TODO</span><span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">class</span> <span class="token class-name">Worker</span>        <span class="token keyword">extends</span> <span class="token class-name">AbstractQueuedSynchronizer</span>        <span class="token keyword">implements</span> <span class="token class-name">Runnable</span>    <span class="token punctuation">{</span>        <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">long</span> serialVersionUID <span class="token operator">=</span> 6138294804551838833L<span class="token punctuation">;</span>        <span class="token keyword">final</span> Thread thread<span class="token punctuation">;</span>        Runnable firstTask<span class="token punctuation">;</span>        <span class="token keyword">volatile</span> <span class="token keyword">long</span> completedTasks<span class="token punctuation">;</span>        <span class="token function">Worker</span><span class="token punctuation">(</span>Runnable firstTask<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 初始化把state设值为-1，是为了使还没执行任务的线程不会被中断，执行任务时会把它设为0</span>            <span class="token function">setState</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// inhibit interrupts until runWorker</span>            <span class="token comment" spellcheck="true">// 这里吧firstTask保存，并带到线程去</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>firstTask <span class="token operator">=</span> firstTask<span class="token punctuation">;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>thread <span class="token operator">=</span> <span class="token function">getThreadFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">newThread</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 调用外部类runWorker方法</span>            <span class="token function">runWorker</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// Lock methods</span>        <span class="token comment" spellcheck="true">//</span>        <span class="token comment" spellcheck="true">// The value 0 represents the unlocked state.</span>        <span class="token comment" spellcheck="true">// The value 1 represents the locked state.</span>        <span class="token keyword">protected</span> <span class="token keyword">boolean</span> <span class="token function">isHeldExclusively</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token function">getState</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">protected</span> <span class="token keyword">boolean</span> <span class="token function">tryAcquire</span><span class="token punctuation">(</span><span class="token keyword">int</span> unused<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 尝试CAS更新state状态值为1失败，返回false，从这一点可以看出Worker是想做一把不可重入的锁</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">compareAndSetState</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token function">setExclusiveOwnerThread</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">protected</span> <span class="token keyword">boolean</span> <span class="token function">tryRelease</span><span class="token punctuation">(</span><span class="token keyword">int</span> unused<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">setExclusiveOwnerThread</span><span class="token punctuation">(</span>null<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">setState</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span> <span class="token function">acquire</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">tryLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token function">tryAcquire</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span>      <span class="token punctuation">{</span> <span class="token function">release</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isLocked</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token function">isHeldExclusively</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>        <span class="token keyword">void</span> <span class="token function">interruptIfStarted</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            Thread t<span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">getState</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">>=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>t <span class="token operator">=</span> thread<span class="token punctuation">)</span> <span class="token operator">!=</span> null <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>t<span class="token punctuation">.</span><span class="token function">isInterrupted</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">try</span> <span class="token punctuation">{</span>                    t<span class="token punctuation">.</span><span class="token function">interrupt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">SecurityException</span> ignore<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span></code></pre><h3 id="runWorker方法"><a href="#runWorker方法" class="headerlink" title="runWorker方法"></a>runWorker方法</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">final</span> <span class="token keyword">void</span> <span class="token function">runWorker</span><span class="token punctuation">(</span>Worker w<span class="token punctuation">)</span> <span class="token punctuation">{</span>    Thread wt <span class="token operator">=</span> Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    Runnable task <span class="token operator">=</span> w<span class="token punctuation">.</span>firstTask<span class="token punctuation">;</span>    w<span class="token punctuation">.</span>firstTask <span class="token operator">=</span> null<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 初始化的时候state是-1，这里调用unlock是吧它置为0，可以中断</span>    w<span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// allow interrupts</span>    <span class="token keyword">boolean</span> completedAbruptly <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 如果task为空，则通过getTask来获取任务</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>task <span class="token operator">!=</span> null <span class="token operator">||</span> <span class="token punctuation">(</span>task <span class="token operator">=</span> <span class="token function">getTask</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            w<span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token function">runStateAtLeast</span><span class="token punctuation">(</span>ctl<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> STOP<span class="token punctuation">)</span> <span class="token operator">||</span>                 <span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">interrupted</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span>                  <span class="token function">runStateAtLeast</span><span class="token punctuation">(</span>ctl<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> STOP<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span>                <span class="token operator">!</span>wt<span class="token punctuation">.</span><span class="token function">isInterrupted</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                wt<span class="token punctuation">.</span><span class="token function">interrupt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                <span class="token function">beforeExecute</span><span class="token punctuation">(</span>wt<span class="token punctuation">,</span> task<span class="token punctuation">)</span><span class="token punctuation">;</span>                Throwable thrown <span class="token operator">=</span> null<span class="token punctuation">;</span>                <span class="token keyword">try</span> <span class="token punctuation">{</span>                    <span class="token comment" spellcheck="true">// 执行任务，如果任务发生了异常，会往外抛执行processWorkerExit方法，</span>                    <span class="token comment" spellcheck="true">// 从这个方法可以看出线程池不会因为某个任务发生异常就不执行了，发生异常线程池会创建一个没有任务的线程</span>                    task<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">RuntimeException</span> x<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    thrown <span class="token operator">=</span> x<span class="token punctuation">;</span> <span class="token keyword">throw</span> x<span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Error</span> x<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    thrown <span class="token operator">=</span> x<span class="token punctuation">;</span> <span class="token keyword">throw</span> x<span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Throwable</span> x<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    thrown <span class="token operator">=</span> x<span class="token punctuation">;</span> <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>                    <span class="token function">afterExecute</span><span class="token punctuation">(</span>task<span class="token punctuation">,</span> thrown<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>                task <span class="token operator">=</span> null<span class="token punctuation">;</span>                w<span class="token punctuation">.</span>completedTasks<span class="token operator">++</span><span class="token punctuation">;</span>                w<span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        completedAbruptly <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>        <span class="token function">processWorkerExit</span><span class="token punctuation">(</span>w<span class="token punctuation">,</span> completedAbruptly<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="getTask方法"><a href="#getTask方法" class="headerlink" title="getTask方法"></a>getTask方法</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">private</span> Runnable <span class="token function">getTask</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// timeOut：上次从队列拿任务时是否超时</span>    <span class="token keyword">boolean</span> timedOut <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// Did the last poll() time out?</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> c <span class="token operator">=</span> ctl<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> rs <span class="token operator">=</span> <span class="token function">runStateOf</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 线程池不在runing看线程池是否在stop或者阻塞队列是否为空</span>        <span class="token comment" spellcheck="true">// 如果是true。那线程池是不能执行新任务</span>        <span class="token comment" spellcheck="true">// 就应该吧之前放进来的任务去掉，也就是要把wordcount-1</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>rs <span class="token operator">>=</span> SHUTDOWN <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>rs <span class="token operator">>=</span> STOP <span class="token operator">||</span> workQueue<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">decrementWorkerCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> null<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">int</span> wc <span class="token operator">=</span> <span class="token function">workerCountOf</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// Are workers subject to culling?</span>        <span class="token comment" spellcheck="true">// 判断是否需要进行超时控制</span>        <span class="token comment" spellcheck="true">// allowCoreThreadTimeOut默认false,这一点可以看得出来核心线程数不会进行超时控制</span>        <span class="token keyword">boolean</span> timed <span class="token operator">=</span> allowCoreThreadTimeOut <span class="token operator">||</span> wc <span class="token operator">></span> corePoolSize<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 这里做的事情主要是如果有超时控制且确实超时了，而且阻塞队列是空的</span>        <span class="token comment" spellcheck="true">// 也就说明我们工作线程太多了，这时候就应该要减少工作线程，减一失败则重试</span>        <span class="token comment" spellcheck="true">// 但这里有timed控制也说明了它不会减核心线程</span>        <span class="token comment" spellcheck="true">// 线程如何销毁呢？</span>        <span class="token comment" spellcheck="true">// 这里CAS成功则返回null,返回null则表示runWorker 的while循环要跳出去了，也就是线程结束了，JVM回收即可。</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>wc <span class="token operator">></span> maximumPoolSize <span class="token operator">||</span> <span class="token punctuation">(</span>timed <span class="token operator">&amp;&amp;</span> timedOut<span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>wc <span class="token operator">></span> <span class="token number">1</span> <span class="token operator">||</span> workQueue<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">compareAndDecrementWorkerCount</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token keyword">return</span> null<span class="token punctuation">;</span>            <span class="token keyword">continue</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 如果有超时控制就用阻塞队列的poll方法可以控制时间，</span>            <span class="token comment" spellcheck="true">// workQueue.poll(keepAliveTime, TimeUnit.NANOSECONDS)表示在keepAliveTime时间下如果取不出来值会阻塞，超过时间就返回null</span>            Runnable r <span class="token operator">=</span> timed <span class="token operator">?</span>                workQueue<span class="token punctuation">.</span><span class="token function">poll</span><span class="token punctuation">(</span>keepAliveTime<span class="token punctuation">,</span> TimeUnit<span class="token punctuation">.</span>NANOSECONDS<span class="token punctuation">)</span> <span class="token operator">:</span>            workQueue<span class="token punctuation">.</span><span class="token function">take</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>r <span class="token operator">!=</span> null<span class="token punctuation">)</span>                <span class="token keyword">return</span> r<span class="token punctuation">;</span>            timedOut <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> retry<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 如果获取任务时当前线程发生了中断，则设置timedOut为false并返回循环重试</span>            timedOut <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="processWorkerExit方法"><a href="#processWorkerExit方法" class="headerlink" title="processWorkerExit方法"></a>processWorkerExit方法</h3><p>processWorkerExit方法在于runWorker的finally代码块里面的，执行任务发生异常或正常结束任务会走的方法</p><pre class=" language-java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">processWorkerExit</span><span class="token punctuation">(</span>Worker w<span class="token punctuation">,</span> <span class="token keyword">boolean</span> completedAbruptly<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// completedAbruptly这个参数在runWorker里面传入的，</span>    <span class="token comment" spellcheck="true">// true说明发生了异常,我们要将workcount减一；所以走了decrementWorkerCount方法</span>    <span class="token comment" spellcheck="true">// false说明正常结束任务，怎么结束？getTask方法为null.说明我们已经将wordcount已经减一了。</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>completedAbruptly<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// If abrupt, then workerCount wasn't adjusted</span>        <span class="token function">decrementWorkerCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">final</span> ReentrantLock mainLock <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>mainLock<span class="token punctuation">;</span>    mainLock<span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 统计完成的任务数</span>        completedTaskCount <span class="token operator">+=</span> w<span class="token punctuation">.</span>completedTasks<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 从workers中移除，说明从线程池移除了一个工作线程</span>        workers<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>w<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>        mainLock<span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 根据线程池状态判断是否要终止线程池</span>    <span class="token function">tryTerminate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> c <span class="token operator">=</span> ctl<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 如果当前线程池状态是RUNNING,或SHUTDOWN状态</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">runStateLessThan</span><span class="token punctuation">(</span>c<span class="token punctuation">,</span> STOP<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 如果不是异常终止</span>        <span class="token comment" spellcheck="true">// allowCoreThreadTimeOut = true 而且阻塞队列为空时，一个线程不留</span>        <span class="token comment" spellcheck="true">// allowCoreThreadTimeOut = true 而且阻塞队列不为空时，就保留最少一个线程</span>        <span class="token comment" spellcheck="true">// allowCoreThreadTimeOut = false 就保留最少线程小于核心线程数</span>        <span class="token comment" spellcheck="true">// min值有0,1，corePoolSize三种</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>completedAbruptly<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">int</span> min <span class="token operator">=</span> allowCoreThreadTimeOut <span class="token operator">?</span> <span class="token number">0</span> <span class="token operator">:</span> corePoolSize<span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>min <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span> workQueue<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                min <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">workerCountOf</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span> <span class="token operator">>=</span> min<span class="token punctuation">)</span>                <span class="token keyword">return</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// replacement not needed</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 如果是异常终止的会 addWorker(null, false)加一个null任务的线程</span>        <span class="token function">addWorker</span><span class="token punctuation">(</span>null<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="延迟类线程池"><a href="#延迟类线程池" class="headerlink" title="延迟类线程池"></a>延迟类线程池</h2><p>线程池家族里面有一类特殊的线程池，叫做延迟类线程池ScheduledThreadPoolExecutor，先看一下它的继承关系</p><p><img src="https://blog-dm.oss-cn-shanghai.aliyuncs.com/articleimage/20200907114109.png"></p><p>很明显它继承了ThreadPoolExcutor,所以他也是一个线程池，只是在线程池上对他进行了增强，在看一下它的构造方法</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token function">ScheduledThreadPoolExecutor</span><span class="token punctuation">(</span><span class="token keyword">int</span> corePoolSize<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">super</span><span class="token punctuation">(</span>corePoolSize<span class="token punctuation">,</span> Integer<span class="token punctuation">.</span>MAX_VALUE<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> NANOSECONDS<span class="token punctuation">,</span>          <span class="token keyword">new</span> <span class="token class-name">DelayedWorkQueue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token function">ScheduledThreadPoolExecutor</span><span class="token punctuation">(</span><span class="token keyword">int</span> corePoolSize<span class="token punctuation">,</span>                                       ThreadFactory threadFactory<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">super</span><span class="token punctuation">(</span>corePoolSize<span class="token punctuation">,</span> Integer<span class="token punctuation">.</span>MAX_VALUE<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> NANOSECONDS<span class="token punctuation">,</span>          <span class="token keyword">new</span> <span class="token class-name">DelayedWorkQueue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> threadFactory<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token function">ScheduledThreadPoolExecutor</span><span class="token punctuation">(</span><span class="token keyword">int</span> corePoolSize<span class="token punctuation">,</span>                                       RejectedExecutionHandler handler<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">super</span><span class="token punctuation">(</span>corePoolSize<span class="token punctuation">,</span> Integer<span class="token punctuation">.</span>MAX_VALUE<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> NANOSECONDS<span class="token punctuation">,</span>          <span class="token keyword">new</span> <span class="token class-name">DelayedWorkQueue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> handler<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token function">ScheduledThreadPoolExecutor</span><span class="token punctuation">(</span><span class="token keyword">int</span> corePoolSize<span class="token punctuation">,</span>                                       ThreadFactory threadFactory<span class="token punctuation">,</span>                                       RejectedExecutionHandler handler<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">super</span><span class="token punctuation">(</span>corePoolSize<span class="token punctuation">,</span> Integer<span class="token punctuation">.</span>MAX_VALUE<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> NANOSECONDS<span class="token punctuation">,</span>          <span class="token keyword">new</span> <span class="token class-name">DelayedWorkQueue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> threadFactory<span class="token punctuation">,</span> handler<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>从中可以看出它不需要很多的参数，在线程池中的大部分参数它不要设置，比如最大线程数和超时时间和超时时间单位，在延迟类线程池中只需要传入一个核心线程数就可以创建一个延迟线程池了。</p><h3 id="执行过程"><a href="#执行过程" class="headerlink" title="执行过程"></a>执行过程</h3><p>它和线程池的处理不一样，来了一个任务它不会直接创建工作线程，而是直接丢到队列里面去。线程去队列里面去拿任务执行。</p><p>他这里的队列有点特别，它是DelayQueue，它会根据时间排序。因为他要保证延迟线程池里面不同的线程所延迟时间不同，他需要根据延迟时间吧他们排好序，先执行的应该在最前面。</p><p>下面先介绍下ThreadPoolExcutor的三种提交任务的方式.</p><ol><li><p>schedule方法，延迟执行，scheduler第二个参数和第三个参数规定了延迟时间。</p><pre class=" language-java"><code class="language-java">ScheduledThreadPoolExecutor scheduledThreadPoolExecutor <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ScheduledThreadPoolExecutor</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>scheduledThreadPoolExecutor<span class="token punctuation">.</span><span class="token function">schedule</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"1"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> TimeUnit<span class="token punctuation">.</span>SECONDS<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li><li><p>scheduleWithFixedDelay方法，延迟执行，周期执行，等待之前的任务执行完成才开始计算周期时间。第一个参数：任务，第二个参数：初始化延时时间，第三个参数是周期时间，第四个参数时间单位</p><p>下面这段代码执行会是执行完第一个任务睡5秒，5秒睡完才开始计算时间计算到周期时间才会执行第二个任务</p><pre class=" language-java"><code class="language-java">scheduledThreadPoolExecutor<span class="token punctuation">.</span><span class="token function">scheduleWithFixedDelay</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Runnable</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"这是scheduleWithFixedDelay调度1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            Thread<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">5000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span> TimeUnit<span class="token punctuation">.</span>SECONDS<span class="token punctuation">)</span><span class="token punctuation">;</span>scheduledThreadPoolExecutor<span class="token punctuation">.</span><span class="token function">scheduleWithFixedDelay</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Runnable</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"这是scheduleWithFixedDelay调度2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span>TimeUnit<span class="token punctuation">.</span>SECONDS<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li><li><p>scheduleAtFixedRate方法，延迟执行，周期执行，不等待前一个任务执行完，就开始计算周期时间；第一个参数：任务，第二个参数：初始化延时时间，第三个参数是周期时间，第四个参数时间单位</p><p>下面这段代码就是先执行第一个任务，任务已执行不管你执行完没完我就计算周期时间</p><pre class=" language-java"><code class="language-java">scheduledThreadPoolExecutor<span class="token punctuation">.</span><span class="token function">scheduleAtFixedRate</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Runnable</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"这是scheduleAtFixedRate调度1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            Thread<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">5000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span> TimeUnit<span class="token punctuation">.</span>SECONDS<span class="token punctuation">)</span><span class="token punctuation">;</span>scheduledThreadPoolExecutor<span class="token punctuation">.</span><span class="token function">scheduleAtFixedRate</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Runnable</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"这是scheduleAtFixedRate调度2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span>TimeUnit<span class="token punctuation">.</span>SECONDS<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li></ol><p>下面看下源码是怎么实现的这几种提交方式</p><h3 id="对比三种提交方式"><a href="#对比三种提交方式" class="headerlink" title="对比三种提交方式"></a>对比三种提交方式</h3><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 提交方式</span><span class="token keyword">public</span> <span class="token operator">&lt;</span>V<span class="token operator">></span> ScheduledFuture<span class="token operator">&lt;</span>V<span class="token operator">></span> <span class="token function">schedule</span><span class="token punctuation">(</span>Callable<span class="token operator">&lt;</span>V<span class="token operator">></span> callable<span class="token punctuation">,</span>                                           <span class="token keyword">long</span> delay<span class="token punctuation">,</span>                                           TimeUnit unit<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>callable <span class="token operator">==</span> null <span class="token operator">||</span> unit <span class="token operator">==</span> null<span class="token punctuation">)</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">NullPointerException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 这里decorateTask点进去一看就发现是一个空方法，不管它只是一个封装任务而已</span>    <span class="token comment" spellcheck="true">// triggerTime算出初始化执行时间now()+initDeley &lt; 0 ? 0 : initDelay</span>    RunnableScheduledFuture<span class="token operator">&lt;</span>V<span class="token operator">></span> t <span class="token operator">=</span> <span class="token function">decorateTask</span><span class="token punctuation">(</span>callable<span class="token punctuation">,</span>                                                <span class="token keyword">new</span> <span class="token class-name">ScheduledFutureTask</span><span class="token operator">&lt;</span>V<span class="token operator">></span><span class="token punctuation">(</span>callable<span class="token punctuation">,</span>                                                                           <span class="token function">triggerTime</span><span class="token punctuation">(</span>delay<span class="token punctuation">,</span> unit<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 这里是提交任务的方法</span>    <span class="token function">delayedExecute</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> t<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// scheduleAtFixedRate提交方法</span><span class="token keyword">public</span> ScheduledFuture<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> <span class="token function">scheduleAtFixedRate</span><span class="token punctuation">(</span>Runnable command<span class="token punctuation">,</span>                                                  <span class="token keyword">long</span> initialDelay<span class="token punctuation">,</span>                                                  <span class="token keyword">long</span> period<span class="token punctuation">,</span>                                                  TimeUnit unit<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>command <span class="token operator">==</span> null <span class="token operator">||</span> unit <span class="token operator">==</span> null<span class="token punctuation">)</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">NullPointerException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>period <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalArgumentException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 封装任务</span>    ScheduledFutureTask<span class="token operator">&lt;</span>Void<span class="token operator">></span> sft <span class="token operator">=</span>        <span class="token keyword">new</span> <span class="token class-name">ScheduledFutureTask</span><span class="token operator">&lt;</span>Void<span class="token operator">></span><span class="token punctuation">(</span>command<span class="token punctuation">,</span>                                      null<span class="token punctuation">,</span>                                      <span class="token function">triggerTime</span><span class="token punctuation">(</span>initialDelay<span class="token punctuation">,</span> unit<span class="token punctuation">)</span><span class="token punctuation">,</span>                                      unit<span class="token punctuation">.</span><span class="token function">toNanos</span><span class="token punctuation">(</span>period<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    RunnableScheduledFuture<span class="token operator">&lt;</span>Void<span class="token operator">></span> t <span class="token operator">=</span> <span class="token function">decorateTask</span><span class="token punctuation">(</span>command<span class="token punctuation">,</span> sft<span class="token punctuation">)</span><span class="token punctuation">;</span>    sft<span class="token punctuation">.</span>outerTask <span class="token operator">=</span> t<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 这里是提交任务的方法</span>    <span class="token function">delayedExecute</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> t<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// scheduleWithFixedDelay提交方法</span><span class="token keyword">public</span> ScheduledFuture<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> <span class="token function">scheduleWithFixedDelay</span><span class="token punctuation">(</span>Runnable command<span class="token punctuation">,</span>                                                     <span class="token keyword">long</span> initialDelay<span class="token punctuation">,</span>                                                     <span class="token keyword">long</span> delay<span class="token punctuation">,</span>                                                     TimeUnit unit<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>command <span class="token operator">==</span> null <span class="token operator">||</span> unit <span class="token operator">==</span> null<span class="token punctuation">)</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">NullPointerException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>delay <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalArgumentException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 封装任务</span>    ScheduledFutureTask<span class="token operator">&lt;</span>Void<span class="token operator">></span> sft <span class="token operator">=</span>        <span class="token keyword">new</span> <span class="token class-name">ScheduledFutureTask</span><span class="token operator">&lt;</span>Void<span class="token operator">></span><span class="token punctuation">(</span>command<span class="token punctuation">,</span>                                      null<span class="token punctuation">,</span>                                      <span class="token function">triggerTime</span><span class="token punctuation">(</span>initialDelay<span class="token punctuation">,</span> unit<span class="token punctuation">)</span><span class="token punctuation">,</span>                                      unit<span class="token punctuation">.</span><span class="token function">toNanos</span><span class="token punctuation">(</span><span class="token operator">-</span>delay<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    RunnableScheduledFuture<span class="token operator">&lt;</span>Void<span class="token operator">></span> t <span class="token operator">=</span> <span class="token function">decorateTask</span><span class="token punctuation">(</span>command<span class="token punctuation">,</span> sft<span class="token punctuation">)</span><span class="token punctuation">;</span>    sft<span class="token punctuation">.</span>outerTask <span class="token operator">=</span> t<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 这里是提交任务的方法</span>    <span class="token function">delayedExecute</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> t<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>我们对比一下scheduleAtFixedRate和scheduleWithFixedDelay这2个方法基本没什么区别。仔细对比发现他们之间除了参数名字不一致以外，还有一个很关键的区别在封装ScheduledFutureTask任务时，scheduleAtFixedRate传的是unit.toNanos(period)，而scheduleWithFixedDelay传的是unit.toNanos(-delay)，一个是正数一个是负数，其余就没区别了。这里的具体原因在后面修改周期时间那里会有介绍。</p><h3 id="delayedExecute方法"><a href="#delayedExecute方法" class="headerlink" title="delayedExecute方法"></a>delayedExecute方法</h3><p>delayedExecute是提交任务的方法，任务封装成ScheduledFutureTask，就要把这个任务放进任务队列里面去了。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">delayedExecute</span><span class="token punctuation">(</span>RunnableScheduledFuture<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> task<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 判断是否是shutdown状态，是的话不在处理新任务走拒绝策略</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isShutdown</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token function">reject</span><span class="token punctuation">(</span>task<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 是运行状态将任务放进队列里面去</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">getQueue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>task<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">// task.isPeriodic()从构造方法可以看出周期任务period != 0,延迟任务是=0</span>        <span class="token comment" spellcheck="true">// isPeriodic方法只是通过period != 0 是true否则是false</span>        <span class="token comment" spellcheck="true">// canRunInCurrentRunState 获取了当前是周期任务还是延迟任务。</span>        <span class="token comment" spellcheck="true">// 分析出continueExistingPeriodicTasksAfterShutdown是周期任务</span>        <span class="token comment" spellcheck="true">// 分析出executeExistingDelayedTasksAfterShutdown是延迟任务</span>        <span class="token comment" spellcheck="true">// 判断线程池的状态，和当前任务是否能运行。如果不能继续执行，将任务移出队列并取消任务。</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isShutdown</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span>            <span class="token operator">!</span><span class="token function">canRunInCurrentRunState</span><span class="token punctuation">(</span>task<span class="token punctuation">.</span><span class="token function">isPeriodic</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span>            <span class="token function">remove</span><span class="token punctuation">(</span>task<span class="token punctuation">)</span><span class="token punctuation">)</span>            task<span class="token punctuation">.</span><span class="token function">cancel</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">else</span>            <span class="token comment" spellcheck="true">// 这里就是增加线程去处理任务，从这也可以看出它和线程池的区别，</span>            <span class="token comment" spellcheck="true">// 刚创建任务的时候不会创建把线程和任务绑定</span>            <span class="token function">ensurePrestart</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">ensurePrestart</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 获取当前活跃线程数</span>    <span class="token keyword">int</span> wc <span class="token operator">=</span> <span class="token function">workerCountOf</span><span class="token punctuation">(</span>ctl<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 如果活跃线程数小于核心线程数就创建线程</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>wc <span class="token operator">&lt;</span> corePoolSize<span class="token punctuation">)</span>        <span class="token function">addWorker</span><span class="token punctuation">(</span>null<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 获取当前活跃线程数是0而且也不小于核心线程数，说明你此时设定的核心线程数是0，小于0会报错</span>    <span class="token comment" spellcheck="true">// 主要就是为了兼容线程池可以创建核心线程数为0</span>    <span class="token comment" spellcheck="true">// 这里是为了避免有任务但没线程执行的尴尬</span>    <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>wc <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>        <span class="token function">addWorker</span><span class="token punctuation">(</span>null<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h3 id="SchduledFutureTask的run方法"><a href="#SchduledFutureTask的run方法" class="headerlink" title="SchduledFutureTask的run方法"></a>SchduledFutureTask的run方法</h3><p>真正执行任务的方法</p><pre class=" language-java"><code class="language-java"> <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>     <span class="token comment" spellcheck="true">// task.isPeriodic()从构造方法可以看出周期任务period != 0,延迟任务是=0</span>     <span class="token comment" spellcheck="true">// isPeriodic方法只是通过period != 0 是true否则是false</span>     <span class="token comment" spellcheck="true">// true代表是周期任务 false代表是延迟任务</span>     <span class="token keyword">boolean</span> periodic <span class="token operator">=</span> <span class="token function">isPeriodic</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">// 判断是否可以运行，不可以cancel掉任务</span>     <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">canRunInCurrentRunState</span><span class="token punctuation">(</span>periodic<span class="token punctuation">)</span><span class="token punctuation">)</span>         <span class="token function">cancel</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">// 延迟任务</span>     <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>periodic<span class="token punctuation">)</span>         <span class="token comment" spellcheck="true">// 直接调用一次</span>         ScheduledFutureTask<span class="token punctuation">.</span><span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">// 此时它一定是周期任务runAndReset运行不返回结果</span>     <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>ScheduledFutureTask<span class="token punctuation">.</span><span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">runAndReset</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token comment" spellcheck="true">// 设值下一次执行时间</span>         <span class="token function">setNextRunTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment" spellcheck="true">// 重新入队</span>         <span class="token function">reExecutePeriodic</span><span class="token punctuation">(</span>outerTask<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">setNextRunTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">long</span> p <span class="token operator">=</span> period<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 此时就是前面2种周期任务提交方式的区别所导致的，还记得前面如果是</span>    <span class="token comment" spellcheck="true">// scheduleAtFixedRate提交方式period是正数；scheduleWithFixedDelay提交方式period是负数</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>p <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">// 执行线程时间加周期时间</span>        time <span class="token operator">+=</span> p<span class="token punctuation">;</span>    <span class="token keyword">else</span>        <span class="token comment" spellcheck="true">// 现在时间加周期时间</span>        time <span class="token operator">=</span> <span class="token function">triggerTime</span><span class="token punctuation">(</span><span class="token operator">-</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h3 id="DelayedWorkQueue"><a href="#DelayedWorkQueue" class="headerlink" title="DelayedWorkQueue"></a>DelayedWorkQueue</h3><p>DelayedWorkQueue是优先级队列，ScheduledThreadPoolExecutor它所使用的队列就是DelayedWorkQueue。之所以使用DelayedWorkQueue，是因为定时任务执行，总要取出最近要执行的任务，所以一定要取队列中最靠前的任务。</p><p>他是一个堆结构，底层是数组；它不能保证所有的元素一定是顺序的，但能保证你从堆顶拿到的元素一定是所有里面最大或最小的。</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 并发 </tag>
            
            <tag> 线程池 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL事务系统解析</title>
      <link href="/2020/08/25/mysql-shi-wu-xi-tong-jie-xi/"/>
      <url>/2020/08/25/mysql-shi-wu-xi-tong-jie-xi/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>最近啃MySQL相关的知识，了解到事务以及事务隔离机制，想要深入了解下事务是如何实现的下面是此次主要探讨的几点方向。这里先推荐几篇文章</p><p><a href="http://mysql.taobao.org/monthly/2017/12">数据库内核月报 － 2017 / 12</a></p><p><a href="http://mysql.taobao.org/monthly/2017/10">数据库内核月报 － 2017 / 10</a></p><p><a href="http://mysql.taobao.org/monthly/2015/04">数据库内核月报 － 2015 / 04</a></p><ol><li>事务及其ACID特性</li><li>并发事务带来的问题</li><li>事务隔离机制以及解决并发事务问题</li><li>事务隔离机制如何实现（MVCC多版本并发控制机制）</li></ol><h2 id="事务及其ACID特性"><a href="#事务及其ACID特性" class="headerlink" title="事务及其ACID特性"></a>事务及其ACID特性</h2><p>事务一般具有4个特性，这4个特性一般简称ACID特性</p><ul><li>A（原子性）：事务要么全部成功，要么全部失败</li><li>C（一致性）：不管什么时候，数据都是一致的，不会读到中间状态的数据</li><li>I（隔离性）：多个事务之间相互不影响</li><li>D（持久性）：在事务执行过程中，不管怎么样数据都不能丢，MySQL是使用了redo log实现的。</li></ul><h2 id="并发事务带来的问题"><a href="#并发事务带来的问题" class="headerlink" title="并发事务带来的问题"></a>并发事务带来的问题</h2><p>并发事务带来了更新丢失，脏读，不可重读，幻读4种问题</p><ul><li>更新丢失：当多个事务同时执行一行数据时，第一个事务已经对行做了修改但第二个事务不知道就把第一个事务更新的数据给修改了，出现了更新丢失的情况。<strong>当前事务的更新覆盖了其他事务的更新</strong>。</li><li>脏读：第一个事务已经做了写操作，但此时并没有提交事务，然后第二个事务读取到了这条数据，也就是第二条数据读取到了脏数据，这就是所谓的脏读。<strong>当前事务读取了其他事务的已经修改但未提交的数据</strong>。</li><li>不可重读：一个事务开始查询了某个语句，第二次执行同样的语句发现查询的东西不一样了。<strong>当前事务在不同时刻执行同样的查询语句，查询出的结果不一样</strong></li><li>幻读：一个事务按相同的查询条件查询读取已经检索过的数据，却发现其他事务插入了满足条件的数据。<strong>当前事务读取到了其他事务插入的数据</strong></li></ul><h2 id="事务隔离机制"><a href="#事务隔离机制" class="headerlink" title="事务隔离机制"></a>事务隔离机制</h2><p>事务隔离机制有4种，读未提交，读已提交，可重读，串行化</p><ul><li>RU(Read uncommitted)：读未提交</li><li>RC(Read committed)：读已提交</li><li>RR(Repeatable read)：重复读</li><li>SERIALIZABLE(Serializable)：串行化</li></ul><h3 id="隔离级别对并发事务的解决"><a href="#隔离级别对并发事务的解决" class="headerlink" title="隔离级别对并发事务的解决"></a>隔离级别对并发事务的解决</h3><table><thead><tr><th align="center"></th><th align="center">脏读</th><th align="center">不可重读</th><th align="center">幻读</th></tr></thead><tbody><tr><td align="center">读未提交</td><td align="center">×</td><td align="center">×</td><td align="center">×</td></tr><tr><td align="center">读已提交</td><td align="center">√</td><td align="center">×</td><td align="center">×</td></tr><tr><td align="center">重复读</td><td align="center">√</td><td align="center">√</td><td align="center">×</td></tr><tr><td align="center">串行化</td><td align="center">√</td><td align="center">√</td><td align="center">√</td></tr></tbody></table><p>读已提交，重复读是通过MVCC机制解决的并发问题。串行化是通过对数据库加锁控制其他事务对数据的操作解决并发问题。<strong>事务隔离级别越高对并发的问题越小，但相应的付出的代价也会越大</strong>；串行化肯定是并发影响最小的，当你访问某个数据时串行化直接来个行锁或表锁，其他的数据只能阻塞在后面等这边的数据处理完成后才可以进行访问。串行化对数据库性能影响太大所以<strong>MySQL综合考虑默认使用的是重复读隔离级别</strong>。</p><h2 id="MVCC多版本并发控制机制"><a href="#MVCC多版本并发控制机制" class="headerlink" title="MVCC多版本并发控制机制"></a>MVCC多版本并发控制机制</h2><p>MVCC（Multi-Version Concurrency Control）：多版本并发控制机制，对一行数据的读写操作不通过加锁来保证隔离性，提高性能。MVCC不是MySQL所特有的在Oracle,PostgreSQL都有关于MVCC的实现，实现可能是不一样的。还有MVCC只在读已提交和重复度2个隔离级别下才干活。读未提交只读最新的数据（不管你事务提不提交）它不需要任何锁，串行化直接搞把锁，所以也不需要MVCC来控制。</p><p>在介绍MVCC机制前先介绍2个概念，undo log和read view</p><h3 id="undo-log"><a href="#undo-log" class="headerlink" title="undo log"></a>undo log</h3><p>undo log是日志版本链，当我们对记录做了变更操作就会产生一条undo记录，undo记录主要在每条数据后面加2个隐藏字段DATA_TRX_ID，DATA_ROLL_PTR其实应该是3个，如果表没有主键还会生成一个DB_ROW_ID。<a href="http://www.searchdoc.cn/rdbms/mysql/dev.mysql.com/doc/refman/5.7/en/innodb-multi-versioning.com.coder114.cn.html">InnoDB多版本控制</a></p><ul><li>DATA_TRX_ID：事务编号，6字节，记录更新这条行记录的事务编号</li><li>DATA_ROLL_PTR：回滚指针，7字节，记录</li><li>DB_ROW_ID：主键编号，6字节，没有主键会自动生成</li></ul><p>事务id的生成是在对innodb进行了写操作而生成的。在InnoDB看来所有的事务在启动时候都是只读状态是只读事务此时不会生成事务编号。<a href="http://mysql.taobao.org/monthly/2017/12">数据库内核月报 － 2017 / 12</a></p><p>undo log记录过程：首先表里有一个数据，伴随着隐藏字段DATA_TRX_ID，DATA_ROLL_PTR，然后有一个事务100对其进行了修改，这时候我们会把原先的数据copy一份到undo log中去，然后把修改后的数据也放进undo log,但这条数据的DATA_TRX_ID = 100，DATA_ROLL_PTR指向原来的数据。如果这时候又来了一个事务200，此时事务100还没提交，事务200又进行了一次更新会把新数据写进undo log并且DATA_TRX_ID = 200，DATA_ROLL_PTR指向事务100的那条数据。</p><p><img src="https://i.loli.net/2020/09/03/k1JtNnVGyXmRc2I.png" alt="日志版本链生成过程"></p><p>最后在undo log中的日志版本链就是</p><p><img src="https://i.loli.net/2020/09/03/rExVXKv4Gp5olIH.png" alt="日志版本链"></p><h3 id="read-view（快照）"><a href="#read-view（快照）" class="headerlink" title="read view（快照）"></a>read view（快照）</h3><p>read view在MVCC里面主要做的就是可见性判断，read view 的生成时机就是RR,RC两种隔离级别的主要区别</p><ul><li>RR隔离级别，只要是开启事务后的第一次select查询操作便会生成一次read view,后面便不再维护read view了</li><li>RC隔离级别，开启事务后，只要进行了查询语句便会生成一次read view</li></ul><h3 id="read-view创建过程"><a href="#read-view创建过程" class="headerlink" title="read view创建过程"></a>read view创建过程</h3><ol><li>首先看当前所有未提交的事务，存储在数组中<strong>trx_ids</strong></li><li>选取未提交事务的最小的事务编号为<strong>up_limit_id</strong>,</li><li>选取已提交事务的最大的事务编号加1为<strong>low_limit_id</strong></li></ol><p>1）trx_id&lt;up_limit_id；小于最小未提交事务肯定是已提交事务，可见<br>2）trx_id&gt;low_limit_id；大于最大已提交事务肯定是后面创建的事务，不可见<br>3）up_limit_id&lt;=trx_id&lt;=low_limit_id；分2种情况</p><ul><li>trx_id在trx_ids中说明是未提交事务，不可见</li><li>trx_id不在trx_ids中说明是已提交事务，可见</li></ul><p>MVCC如何利用日志版本链来进行查询的？</p><p>根据图第二次查询结果还是hello,但此时undo log日志版本链最新的是hello2，这里主要走的过程是，看undolog日志版本链从最新往下看，最新是事务1，发现事务1在已提交事务和未提交事务区间内而且是在trx_ids中，说明是不可见的，所以继续undolog日志版本链往下看。发现是事务3，发现事务3在已提交事务&amp;未提交事务区间而且不再trx_id中所以是可见的。</p><p>​    <img src="https://i.loli.net/2020/09/03/YuX6dImOpJKa4zW.png" alt="MVCC"></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL </tag>
            
            <tag> 事务 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
